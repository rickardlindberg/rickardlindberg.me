<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Rickard's personal homepage: latest posts tagged tdd</title>
    <link href="http://rickardlindberg.me/tags/tdd/atom.xml" rel="self" />
    <link href="http://rickardlindberg.me" />
    <id>http://rickardlindberg.me/tags/tdd/atom.xml</id>
    <author>
        <name>Rickard Lindberg</name>
        <email>rickard@rickardlindberg.me</email>
    </author>
    <updated>2023-04-17T00:00:00Z</updated>
    <entry>
    <title>TDD trick: fake it!</title>
    <link href="http://rickardlindberg.me/writing/tdd-fake-it/" />
    <id>http://rickardlindberg.me/writing/tdd-fake-it/</id>
    <published>2023-04-17T00:00:00Z</published>
    <updated>2023-04-17T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>TDD trick: fake it!</h1>

<p><em>Published on 17 April 2023.</em></p>

<ul>
<li><a href="#the-example">The example</a></li>
<li><a href="#fake-it">Fake it!</a></li>
<li><a href="#refactor">Refactor</a></li>
<li><a href="#infrastructure-wrapper">Infrastructure wrapper</a></li>
<li><a href="#make-game-loop-more-real">Make game loop more real</a></li>
<li><a href="#looping-and-animation">Looping and animation</a></li>
<li><a href="#summary">Summary</a></li>
</ul>
<p>The first step in the TDD loop is to think about what test to write. I find it easiest to do that from the outside-in. I might not yet know what different parts my system will consist of (especially in the beginning), but I do know some behavior of the entire system.</p>
<p>The problem with outside-in is that the test might be difficult to write because we don’t have enough infrastructure in place to make the appropriate assertions.</p>
<p>In this blog post I want to show you a trick to overcome that problem: fake it! (This is also similar to what James describes in <a href="https://www.jamesshore.com/v2/projects/nullables/testing-without-mocks#grow-seeds">Grow Evolutionary Seeds</a>.)</p>
<h2 id="the-example">The example</h2>
<p>I will illustrate this trick with an example from a <a href="/projects/agdpp/index.html">game</a> that I’m working on.</p>
<p>So far, the game doesn’t do much. It just animates a circle:</p>
<center>
<img src="animation.png" title="fig:" alt="Animated circle." />
</center>
<p>The behavior of the game can be described as this:</p>
<blockquote>
<p>I draw an animated circle until the user closes the window.</p>
</blockquote>
<h2 id="fake-it">Fake it!</h2>
<p>With an empty project, it seems quite difficult to write a test that actually checks for that. What to do? Let’s fake it! Here it is:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="kw">class</span> Game:</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>    <span class="co">&quot;&quot;&quot;</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a><span class="co">    I draw an animated circle until the user closes the window.</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a><span class="co">    &gt;&gt;&gt; game = Game()</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a><span class="co">    &gt;&gt;&gt; game.run()</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true"></a><span class="co">    DRAW_CIRCLE</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true"></a><span class="co">    EXIT</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true"></a><span class="co">    &quot;&quot;&quot;</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true"></a></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true"></a>    <span class="kw">def</span> run(<span class="va">self</span>):</span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true"></a>        <span class="bu">print</span>(<span class="st">&quot;DRAW_CIRCLE&quot;</span>)</span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true"></a>        <span class="bu">print</span>(<span class="st">&quot;EXIT&quot;</span>)</span></code></pre></div>
<p>Really? How is this useful?</p>
<p>First of all we have got a description of one behavior of our system. We also have code that verifies that behavior, even though it is not yet complete. (The example shown in the docstring of the game class is actually an executable test written using Python’s <a href="https://docs.python.org/3/library/doctest.html">doctest</a> module.)</p>
<p>From here it is usually easier to see what to continue with. When we have <a href="https://www.artima.com/articles/the-simplest-thing-that-could-possibly-work">something on the screen</a>, we can more easily criticize it and improve it.</p>
<p>So, what next?</p>
<h2 id="refactor">Refactor</h2>
<p>Are you kidding? Refactor already?</p>
<p>To make this game testable, I want to separate the logic of the game from the infrastructure needed to initialize and use a graphics library. I imagine a game loop class that is responsible for that.</p>
<p>We can evolve the design in that direction even with what we have now. Here it is:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="kw">class</span> Game:</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a>    <span class="co">&quot;&quot;&quot;</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a><span class="co">    I draw an animated circle until the user closes the window.</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a><span class="co">    &gt;&gt;&gt; game = Game(GameLoop())</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a><span class="co">    &gt;&gt;&gt; game.run()</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true"></a><span class="co">    DRAW_CIRCLE</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true"></a><span class="co">    EXIT</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true"></a><span class="co">    &quot;&quot;&quot;</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true"></a></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, loop):</span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true"></a>        <span class="va">self</span>.loop <span class="op">=</span> loop</span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true"></a></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true"></a>    <span class="kw">def</span> run(<span class="va">self</span>):</span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true"></a>        <span class="va">self</span>.loop.run(<span class="va">self</span>)</span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true"></a></span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true"></a>    <span class="kw">def</span> tick(<span class="va">self</span>):</span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true"></a>        <span class="va">self</span>.loop.draw_circle()</span>
<span id="cb2-20"><a href="#cb2-20" aria-hidden="true"></a></span>
<span id="cb2-21"><a href="#cb2-21" aria-hidden="true"></a><span class="kw">class</span> GameLoop:</span>
<span id="cb2-22"><a href="#cb2-22" aria-hidden="true"></a></span>
<span id="cb2-23"><a href="#cb2-23" aria-hidden="true"></a>    <span class="kw">def</span> run(<span class="va">self</span>, game):</span>
<span id="cb2-24"><a href="#cb2-24" aria-hidden="true"></a>        game.tick()</span>
<span id="cb2-25"><a href="#cb2-25" aria-hidden="true"></a>        <span class="bu">print</span>(<span class="st">&quot;EXIT&quot;</span>)</span>
<span id="cb2-26"><a href="#cb2-26" aria-hidden="true"></a></span>
<span id="cb2-27"><a href="#cb2-27" aria-hidden="true"></a>    <span class="kw">def</span> draw_circle(<span class="va">self</span>):</span>
<span id="cb2-28"><a href="#cb2-28" aria-hidden="true"></a>        <span class="bu">print</span>(<span class="st">&quot;DRAW_CIRCLE&quot;</span>)</span></code></pre></div>
<p>The game now gets a loop as a dependency. Can you see how this would be possible to test now? We could inject some kind of test double as the loop and verify that it is called correctly.</p>
<p>Notice that we were able to do this refactoring with the safety net of the test. We have one teeny, tiny test that asserts something fake, but it still helped us do this refactoring.</p>
<h2 id="infrastructure-wrapper">Infrastructure wrapper</h2>
<p>For the test double version of the game loop, I want to use some patterns from <a href="https://www.jamesshore.com/v2/projects/nullables/testing-without-mocks">Testing Without Mocks</a>.</p>
<p>I want to turn the game loop into an infrastructure wrapper. One part of that pattern is that it should emit events of what it’s doing so that tests can observe it.</p>
<p>Let’s replace the print statements, that we used to fake actions, with events. Here it is:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="kw">class</span> GameLoop(Observable):</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a>    <span class="kw">def</span> run(<span class="va">self</span>, game):</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a>        game.tick()</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a>        <span class="va">self</span>.notify(<span class="st">&quot;EXIT&quot;</span>, {})</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true"></a></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true"></a>    <span class="kw">def</span> draw_circle(<span class="va">self</span>):</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true"></a>        <span class="va">self</span>.notify(<span class="st">&quot;DRAW_CIRCLE&quot;</span>, {})</span></code></pre></div>
<p>The test for the game then changes to this:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a><span class="co">I draw an animated circle until the user closes the window.</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; loop = GameLoop()</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; events = loop.track_events()</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; Game(loop).run()</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; events</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true"></a><span class="co">DRAW_CIRCLE =&gt;</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true"></a><span class="co">EXIT =&gt;</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>(I won’t show the code for <code>Observable</code>. If you are curious to know the details, you can look <a href="https://github.com/rickardlindberg/agdpp/blob/initial-game-loop/events.py">here</a>.)</p>
<p>And this is starting to look more real now. There is no real faking going on in the game or its test any more. It seems logical to assert that the game loop emits those events.</p>
<p>But the game loop is still just emitting events, it’s not actually doing anything.</p>
<h2 id="make-game-loop-more-real">Make game loop more real</h2>
<p>The game loop should initialize a graphics library and provide to the game a way to draw on the screen. We will use <a href="https://www.pygame.org/news">pygame</a> for that. So our game loop will be an infrastructure wrapper around pygame providing a clean interface for our game to draw on the screen.</p>
<p>We need to make the <code>run</code> method and the <code>draw_circle</code> method do something real. Here is a first version:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="kw">class</span> GameLoop(Observable):</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a>    ...</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true"></a></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true"></a>    <span class="kw">def</span> run(<span class="va">self</span>, game):</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true"></a>        <span class="va">self</span>.notify(<span class="st">&quot;PYGAME_INIT&quot;</span>, {})</span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true"></a>        <span class="va">self</span>.pygame.init()</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true"></a>        <span class="va">self</span>.screen <span class="op">=</span> <span class="va">self</span>.pygame.display.set_mode((<span class="dv">1280</span>, <span class="dv">720</span>))</span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true"></a>        game.tick()</span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true"></a>        <span class="va">self</span>.pygame.display.flip()</span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true"></a>        <span class="va">self</span>.notify(<span class="st">&quot;EXIT&quot;</span>, {})</span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true"></a>        <span class="va">self</span>.pygame.quit()</span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true"></a></span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true"></a>    <span class="kw">def</span> draw_circle(<span class="va">self</span>):</span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true"></a>        <span class="va">self</span>.notify(<span class="st">&quot;DRAW_CIRCLE&quot;</span>, {})</span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true"></a>        <span class="va">self</span>.pygame.draw.circle(<span class="va">self</span>.screen, <span class="st">&quot;red&quot;</span>, (<span class="dv">50</span>, <span class="dv">50</span>), <span class="dv">40</span>)</span></code></pre></div>
<p>Notice that have an instance variable called <code>pygame</code>.</p>
<p>When we test our game class, we don’t actually want to execute any pygame code that creates windows and draws circles on the screen. Therefore we use another pattern of an infrastructure wrapper which is that it can be nullable. That means that we can instantiate two version of our game loop:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a>GameLoop.create()</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a>GameLoop.create_null()</span></code></pre></div>
<p>The creation methods look like this:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a><span class="kw">class</span> GameLoop(Observable):</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true"></a>    <span class="at">@staticmethod</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true"></a>    <span class="kw">def</span> create():</span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true"></a>        <span class="cf">return</span> GameLoop(pygame)</span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true"></a></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true"></a>    <span class="at">@staticmethod</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true"></a>    <span class="kw">def</span> create_null():</span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true"></a>        <span class="kw">class</span> NullPygame:</span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true"></a>            <span class="kw">def</span> init(<span class="va">self</span>):</span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true"></a>                <span class="cf">pass</span> <span class="co"># Do nothing</span></span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true"></a>            ...</span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true"></a>        <span class="cf">return</span> GameLoop(NullPygame())</span>
<span id="cb7-14"><a href="#cb7-14" aria-hidden="true"></a></span>
<span id="cb7-15"><a href="#cb7-15" aria-hidden="true"></a>    ...</span></code></pre></div>
<p>The null version works exactly the same as the real version except it nulls out all the calls that actually do anything with pygame. This is useful in tests so that we don’t open windows and actually draw graphics when we don’t need to.</p>
<p>Our game test can use the null version of the game loop and will continue to work as it did before.</p>
<p>When actually running our game, we create the real version of the game loop which will include all the real calls to pygame.</p>
<p>We can also test the real game loop in isolation, passing it a test game, to make sure that we call pygame correctly:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; GameLoop.create().run(TestGame())</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>This will actually open a window and draw whatever the test game draws. We can program the test game to exit immediately so that the test suite will not hang waiting for user input. But we will still see a flashing window which is a bit distracting.</p>
<p>To verify that our implementation of <code>draw_circle</code> works, we have to inspect the output visually. A test like the one above only asserts that we call pygame functions correctly, not that the output looks the way we want.</p>
<p>This is a general problem with infrastructure that it is difficult to test, because it involves the real world.</p>
<p>Anyway, that’s a little beside the point of this article. Where were we?</p>
<h2 id="looping-and-animation">Looping and animation</h2>
<p>If we run our game now, it will actually show a window with a circle on it. But the window will close immediately.</p>
<p>That is because the game loop still doesn’t implement a loop.</p>
<p>Let’s have a look at our game test again:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true"></a><span class="co">I draw an animated circle until the user closes the window.</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true"></a></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; loop = GameLoop()</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; events = loop.track_events()</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; Game(loop).run()</span></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; events</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true"></a><span class="co">DRAW_CIRCLE =&gt;</span></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true"></a><span class="co">EXIT =&gt;</span></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>It talks about <em>animating</em> a circle, and about <em>waiting</em> for the user to close the window. But there is nothing in the setup or assertions about this. We are missing something.</p>
<p>Hopefully, at this point, it is a bit more clear where to continue.</p>
<p>Once we implement the loop and some event handling, I think the initial behavior of our game will actually be fully realized.</p>
<p>Here is what the final test for the game looks like when I continued fleshing out all the fakes and missing pieces:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true"></a><span class="co">I draw an animated circle until the user closes the window.</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true"></a></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; loop = GameLoop.create_null(</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true"></a><span class="co">...     events=[</span></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true"></a><span class="co">...         [],</span></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true"></a><span class="co">...         [],</span></span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true"></a><span class="co">...         [pygame.event.Event(pygame.QUIT)],</span></span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true"></a><span class="co">...     ]</span></span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true"></a><span class="co">... )</span></span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; events = loop.track_events()</span></span>
<span id="cb10-12"><a href="#cb10-12" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; Game(loop).run()</span></span>
<span id="cb10-13"><a href="#cb10-13" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; events</span></span>
<span id="cb10-14"><a href="#cb10-14" aria-hidden="true"></a><span class="co">PYGAME_INIT =&gt;</span></span>
<span id="cb10-15"><a href="#cb10-15" aria-hidden="true"></a><span class="co">CLEAR_SCREEN =&gt;</span></span>
<span id="cb10-16"><a href="#cb10-16" aria-hidden="true"></a><span class="co">DRAW_CIRCLE =&gt;</span></span>
<span id="cb10-17"><a href="#cb10-17" aria-hidden="true"></a><span class="co">    x: 50</span></span>
<span id="cb10-18"><a href="#cb10-18" aria-hidden="true"></a><span class="co">CLEAR_SCREEN =&gt;</span></span>
<span id="cb10-19"><a href="#cb10-19" aria-hidden="true"></a><span class="co">DRAW_CIRCLE =&gt;</span></span>
<span id="cb10-20"><a href="#cb10-20" aria-hidden="true"></a><span class="co">    x: 51</span></span>
<span id="cb10-21"><a href="#cb10-21" aria-hidden="true"></a><span class="co">PYGAME_QUIT =&gt;</span></span>
<span id="cb10-22"><a href="#cb10-22" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<h2 id="summary">Summary</h2>
<p>We started with something fake, then did a bit of design, then removed one fake at a time until there were no fakes left.</p>
<p>I find this a useful way of working, especially when getting started. Once you have some structure in place it is easier to see where you need to add additional tests and functionality.</p>
<p>(If you want more details about this example in particular, check out my <a href="/writing/agdpp-game-loop/index.html">article</a> about how I implemented this part of the game.)</p>
]]></summary>
</entry>

</feed>
