<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>Rickard's personal homepage: latest posts tagged newsletter</title>
        <link>http://rickardlindberg.me</link>
        <description><![CDATA[Rickard's personal homepage: latest posts tagged newsletter]]></description>
        <atom:link href="http://rickardlindberg.me/tags/newsletter/rss.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Wed, 31 Jul 2019 00:00:00 UT</lastBuildDate>
        <item>
    <title>Newsletter July 2019</title>
    <link>http://rickardlindberg.me/writing/newsletter/july-2019/</link>
    <description><![CDATA[<h1>Newsletter July 2019</h1>

<p><em>Published on 31 July 2019.</em></p>

<p>This is what I’ve been up to in July 2019:</p>
<ul>
<li><p>I continued work on the RLMeta VM post.</p></li>
<li><p>I watched <a href="https://www.youtube.com/watch?v=oww7oB9rjgw">Steal Like An Artist: Austin Kleon at TEDxKC</a>. Main takeway was that every work is a mashup. Steal from others and show your mashup so that we can steal from you.</p></li>
<li><p>I reread parts of <em>The Art of Explanation</em> by Lee LeFever. He presents a way to explain things so that people understand. I will try to be inspired by this way when writing.</p></li>
<li><p>I thought about converting all posts on this site to “blog posts” and putting them under <code>rickardlindberg.me/blog/</code> and using tags for categories. Then allowing tags to also have explanations. Not sure if this structure is better or not.</p></li>
<li><p>I read parts of <em>Hackers and Painters</em> by Paul Graham. A few quotes that I liked:</p>
<blockquote>
<p>Programming languages are what programmers think in. Naturally, this has a big effect on the kind of thoughts they have.</p>
</blockquote>
<p>I fully agree with this, and this is one of the reasons I want to learn more about language design so that I can design ideal languages for problems.</p>
<blockquote>
<p>After a certain age, programmers rarely switch languages voluntarily. Whatever language people happen to be used to, they tend to consider just good enough.</p>
</blockquote>
<p>I don’t want to get stuck in a language. How can I avoid it?</p></li>
<li><p>I watched <a href="https://www.youtube.com/watch?v=ymiBDged-eQ">How to Start a Business or Podcast From Scratch | Tim Ferriss</a>. Main takeway was that it is easier to create a new category by finding a niche market to fill. Filling demand (in a new category) is easier than creating demand (in an existing category).</p></li>
<li><p>I started reading <em>The 22 Immutable Laws of Marketing</em> by Al Ries because it was recommended by Tim in the above video. Some quotes:</p>
<blockquote>
<p>The easy answer is to make sure your programs are in tune with the laws of marketing.</p>
</blockquote>
<blockquote>
<p>There are laws of nature, so why shouldn’t there be laws of marketing? You can build a great-looking airplane, but it’s not going to get off the ground unless it adheres to the laws of physics, especially the law of gravity. You can build an architectural masterpiece on a sand dune, but the first hurricane will undermine your creation. So it follows that you can build a brilliant marketing program only to have one of the immutable laws knock you flat if you don’t know what they are.</p>
</blockquote></li>
<li><p>I read about an incremental approach to compiler construction <a href="http://scheme2006.cs.uchicago.edu/11-ghuloum.pdf">here</a>, <a href="https://generalproblem.net/">here</a>, and <a href="https://blog.sigplan.org/2019/07/09/my-first-fifteen-compilers/">here</a>. The incremental approach starts with a small language (just integers) and builds upon that. At each stage, there is a working compiler. I want to explore this approach more. Can such a compiler be written with <a href="/tags/rlmeta/index.html">RLMeta</a>?</p></li>
<li><p>I write articles about RLMeta in a literate programming style. Sometimes I think: Why is all this text needed? The code speaks for itself, right? Probably it doesn’t, but it is interesting to try to find the right balance.</p></li>
<li><p>I read <a href="https://medium.com/@gvanrossum_83706/peg-parsers-7ed72462f97c">PEG Parsers</a> by Guido van Rossum. He is experimenting with replacing Python’s parser with a PEG-version.</p></li>
<li><p>I found <a href="https://www.rascal-mpl.org/">Rascal - Metaprogramming Language</a>. I want to read more about it, but here is a good summary:</p>
<blockquote>
<p>You want to use the best tool for the job when analyzing, transforming or generating source code, so normally you will end up with many different tools, possibly even written in different languages. Now the problem is to integrate these tools again. Rascal solves this problem by integrating source code analysis, transformation, and generation primitives on the language level. Use it for any kind of metaprogramming task: to construct parsers for programming languages, to analyze and transform source code, or to define new DSLs with full IDE support.</p>
</blockquote></li>
<li><p>I read <a href="http://www.bbc.com/future/story/20190722-the-apple-software-that-inspired-the-internet">The forgotten software that inspired our modern world</a>. A quote I liked:</p>
<blockquote>
<p>But even more than that, HyperCard didn’t compromise between the easily usable and the creatively powerful.</p>
</blockquote>
<p>Something in that reminds me of what Alan Kay said. Something about simplifying but not dumbing down when teaching children.</p></li>
<li><p>I read <a href="https://technicalblogging.com/blogging-income-how-bloggers-make-money/">The Inverted Pyramid of Blogging Income: How Pro Bloggers Make Money</a>. Main takeaway was that if you want to make money blogging, you should convert readers into customers and you must therefore also have another product to sell.</p></li>
</ul>
]]></description>
    <pubDate>Wed, 31 Jul 2019 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/newsletter/july-2019/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>Newsletter June 2019</title>
    <link>http://rickardlindberg.me/writing/newsletter/june-2019/</link>
    <description><![CDATA[<h1>Newsletter June 2019</h1>

<p><em>Published on 30 June 2019.</em></p>

<p>This is what I’ve been up to in June 2019:</p>
<ul>
<li><p>I was inspired to try writing a journal after stumbling across Derek Siver’s blog post <a href="https://sivers.org/dj">Benefits of a daily diary and topic journals</a>. The idea is to write for my future self to help me solve problems by recording my thoughts and reflecting on them.</p></li>
<li><p>I read <em>Poke the Box</em> by Seth Godin. My main takeaway was that <strong>initiative is scarce</strong>, and if you take initiative, you are valuable.</p></li>
<li><p>I read <a href="https://compilerbook.com/">Writing A Compiler In Go</a> by Thorsten Ball. It is a topic that interests me. I learned about designing virtual machines.</p></li>
<li><p>I learned a technique for parsing offside rule languages with PEG parsers via <a href="https://github.com/jgm/peg-markdown/">A PEG Markdown parser</a>. I plan to write a blog post about this technique.</p></li>
<li><p>I read <em>Show Your Work!</em> by Austin Kleon. Some takeaways:</p>
<ul>
<li><p>An amateur is sometimes better at explaining something than an expert because the amateur has recently encountered it and knows what is hard. An expert has forgotten. Therefore <strong>blogging about problems and solutions when I encounter them is useful</strong>.</p></li>
<li><p>It is useful to share the process of creating something, not just the finished work.</p></li>
<li><p>It inspired me to publish draft posts on this blog.</p></li>
<li><p>It inspired me to write these monthly newsletters.</p></li>
</ul></li>
<li><p>I finished writing <a href="/writing/optimizing-rlmeta/index.html">Optimizing RLMeta</a>. I struggled with grammar and usage (should I use past or present, active or passive, we or I, and so on). I read other articles to try to analyze what they did. But I also came to one important realization: if I find it hard to write, I can read what I’ve written, find something small to fix, and then I’m suddenly writing again. I will keep writing and hopefully keep improving.</p></li>
<li><p>I have tried to get into the habit of writing a bit at least every day. Even though some days I produced almost nothing, I kept doing it. Eventually it payed off, but sometimes I felt like I needed a longer session to get something useful done. Often times, short sessions worked as well. One thing that helped me continue was to take a note at the end of a session what to proceed with.</p></li>
<li><p>I read parts of <a href="https://beautifulracket.com/">Beautiful Racket</a>. Racket is a programming language designed for language-oriented programming. I have for a long time felt that this is a better way to program, but never fully put it into practice. I even started writing <a href="https://leanpub.com/ldd">a book</a> about it. I intend to continue pursuing this way of programming with the help of <a href="/tags/rlmeta/index.html">RLMeta</a>. I will most likely return to <em>Beautiful Racket</em>.</p></li>
<li><p>I read <em>4-Hour Work Week</em> by Timothy Ferris. Some takeaways:</p>
<ul>
<li><p>Unrealistic goals as easier to achieve because the competition is not as fierce.</p></li>
<li><p>80/20 rule. I can stop doing 80% of what I’m doing and still perform as well.</p></li>
<li><p>Batching work is sometimes more effective. Limit Twitter/Email/etc to once/twice a day to not be bothered with it the rest of the time.</p></li>
<li><p>If I did not have to work for money, what would I do? If this is the last day of my life, would I do what I’m doing?</p></li>
<li><blockquote>
<p>First, “expert” in the context of selling product means that you know more about the topic than the purchaser. No more.</p>
</blockquote></li>
</ul></li>
<li><p>I watched <a href="https://www.youtube.com/watch?v=o_ptYjf8Bes">(sixth RacketCon): Matthew Butterick – The Making of “Beautiful Racket”</a>. My main takeaway was that a DSL has two parts: the domain and the programming language. And the most important part is the domain. In order to create a good DLS you need to have much knowledge about the domain.</p></li>
<li><p>I watched <a href="https://www.youtube.com/watch?v=eWJVvNptHZ4">Arnold Schwarzenegger 2019 - The speech that broke the internet - Motivational &amp; Inspiring</a>. In it he says that you should work hard and advertise. This felt similar to Austin Kleon’s advice that you should show your work.</p></li>
<li><p>I watched <a href="https://www.youtube.com/watch?v=8J6HuvosP0s">Typography for Docs</a>. This is also by Matthew Butterick. I like this talk as well. It inspired me to try to improve typography on my blog. We’ll see if I get around to it.</p></li>
<li><p>I read <a href="https://m00natic.github.io/lisp/manual-jit.html">Uniform Structured Syntax, Metaprogramming and Run-time Compilation</a>. My main takeaway was that compilation happens at runtime. Just in time. Therefore the compiler must be shipped with the runtime. Common Lisp has hooks for different times during compilation: reader macro, macro, etc.</p></li>
<li><p>I watched <a href="https://www.youtube.com/watch?v=viF1bVTOO6k">Steady Typing</a>. It shows a projectional editor. Those interest me. They are one inspiration for <a href="/projects/rliterate/index.html">RLiterate</a>.</p></li>
</ul>
]]></description>
    <pubDate>Sun, 30 Jun 2019 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/newsletter/june-2019/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>

    </channel>
</rss>
