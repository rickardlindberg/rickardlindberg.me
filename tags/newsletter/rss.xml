<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>Rickard's personal homepage: latest posts tagged newsletter</title>
        <link>http://rickardlindberg.me</link>
        <description><![CDATA[Rickard's personal homepage: latest posts tagged newsletter]]></description>
        <atom:link href="http://rickardlindberg.me/tags/newsletter/rss.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Wed, 11 Nov 2020 00:00:00 UT</lastBuildDate>
        <item>
    <title>Newsletter October 2020</title>
    <link>http://rickardlindberg.me/writing/newsletter/october-2020/</link>
    <description><![CDATA[<h1>Newsletter October 2020</h1>

<p><em>Published on 11 November 2020.</em></p>

<p>This is what I’ve been up to in October 2020:</p>
<ul>
<li><p>I continued work on the prototype of note taking application.</p>
<ul>
<li><p>I made the lines between notes look nicer:</p>
<div class="figure">
<img src="smart-notes-curved.png" />

</div></li>
<li><p>I started experimenting with variable sized notes depending on mouse cursor position:</p>
<div class="figure">
<img src="smart-notes-variable-size.png" />

</div></li>
</ul></li>
<li><p>I read <a href="https://thorstenball.com/blog/2020/09/15/the-context-in-which-we-build-software/">The context in which we build software</a>. I reflected that one programmer’s advice might not be applicable to another programmer.</p></li>
</ul>
]]></description>
    <pubDate>Wed, 11 Nov 2020 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/newsletter/october-2020/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>Newsletter September 2020</title>
    <link>http://rickardlindberg.me/writing/newsletter/september-2020/</link>
    <description><![CDATA[<h1>Newsletter September 2020</h1>

<p><em>Published on  3 October 2020.</em></p>

<p>This is what I’ve been up to in September 2020:</p>
<ul>
<li><p>I upgraded the configuration for my Kinesis Advantage 2 keyboard. I am planning on writing a <a href="/writing/kinesis-advantage-2-setup/index.html">blog post</a> about it.</p></li>
<li><p>I read <a href="https://jessitron.com/2020/08/04/back-when-software-was-a-craft/">Back when software was a craft</a>. I feel that is true, and I miss the craft a bit. I can continue to craft in my spare time though.</p></li>
<li><p>I read the book <a href="https://takesmartnotes.com/">How to Take Smart Notes</a> by Sönke Ahrens. I found it very interesting and I am inspired to take better notes.</p></li>
<li><p>I read about <a href="https://en.wikipedia.org/wiki/Project_Xanadu">Xanadu</a> since smart notes reminded me of it. Some ideas feel a bit similar.</p></li>
<li><p>I started prototyping a note taking application that follows some principles from the book. Here is a screenshot:</p>
<div class="figure">
<img src="smart-notes-app-prototype.png" />

</div></li>
<li><p>I made no progress on RLiterate 2 this month.</p></li>
</ul>
]]></description>
    <pubDate>Sat, 03 Oct 2020 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/newsletter/september-2020/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>Newsletter August 2020</title>
    <link>http://rickardlindberg.me/writing/newsletter/august-2020/</link>
    <description><![CDATA[<h1>Newsletter August 2020</h1>

<p><em>Published on 13 September 2020.</em></p>

<p>This is what I’ve been up to in August 2020:</p>
<ul>
<li><p>I read about <a href="https://www.notion.so/Dango-b46c07f3dc224f968c768885abe70e70">Dango</a>. It is an example of a universal document type. It interested me because it seems related to ideas explored by <a href="http://vpri.org/">VPRI</a>.</p></li>
<li><p>I blogged about the key takeaway that I got from reading <a href="/writing/bullet-journal-method-migration-as-review/index.html">The Bullet Journal Method</a>.</p></li>
<li><p>I watched various videos by <a href="https://www.youtube.com/MattRagland">Matt Ragland</a> about journaling. He has been an inspiration to me in my bullet journal journey.</p></li>
<li><p>I continued with <a href="/projects/rliterate/book2/index.html">RLiterate 2</a>:</p>
<ul>
<li><p>I worked on adding toolbar actions for text editing:</p>
<div class="figure">
<img src="text-editing-toolbar.png" />

</div></li>
<li><p>I implemented splitting and joining a paragraphs with <code>Enter</code> and <code>Del</code>:</p>
<div class="figure">
<img src="split-join.gif" />

</div></li>
</ul></li>
<li><p>I migrated my personal email from Gmail to <a href="https://www.fastmail.com">Fastmail</a>. The migration process was easy and so far I’m quite happy with my new email client.</p></li>
</ul>
]]></description>
    <pubDate>Sun, 13 Sep 2020 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/newsletter/august-2020/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>Newsletter July 2020</title>
    <link>http://rickardlindberg.me/writing/newsletter/july-2020/</link>
    <description><![CDATA[<h1>Newsletter July 2020</h1>

<p><em>Published on  3 August 2020.</em></p>

<p>This is what I’ve been up to in July 2020:</p>
<ul>
<li><p>I read Atomic Habits by James Clear and blogged about the key takeaway that I got from reading it: <a href="/writing/atomic-habits-two-minute-rule/index.html">the two-minute rule</a>.</p></li>
<li><p>I read The Bullet Journal Method by Ryder Carroll. I am planning to blog about the key takeaway that I got from reading it.</p></li>
<li><p>I read <a href="https://third-bit.com/2020/07/09/acm-sigsoft-award.html">Thoughts from a Not-So-Influential Educator</a>:</p>
<blockquote>
<p>So, what would I change in 2020? First, I believe we should teach students design by having them study the great works of the past, just as other disciplines do. They should spend at least a full course reading code and building working models of common applications in order to become familiar with prior art and prior thinking. In their assignments, they should compare and contrast undo/redo handling in Emacs and Vim or the data structures beneath Git and Mercurial, or create programs like Mary Rose Cook’s <a href="http://gitlet.maryrosecook.com/">Gitlet</a>, Matt Brubeck’s <a href="https://limpet.net/mbrubeck/2014/08/08/toy-layout-engine-1.html">layout engine</a>, or Conor Stack’s <a href="https://cstack.github.io/db_tutorial/">little database</a>.</p>
</blockquote>
<p>The mentioned resources are interesting, and I want to study them more. It feels to me like simplified (but not dumbed down) versions of programs to understand them better. That approach feels interesting to me. Can we structure all programs in a similar way with a simple model/core and then addonds to make it more practically useful?</p></li>
<li><p>I played around with <a href="https://swaywm.org/">Sway</a>. As a big fan of <a href="https://i3wm.org/">i3</a>, I’m looking for an alternative that works under Wayland as that seems to be the future. My conclusion is that Sway will probably work well for me.</p></li>
<li><p>I though about shooting some videos of <a href="/projects/rliterate/index.html">RLiterate</a> to demonstrate its features and show what I’m working on at the moment. Let me know if you would be interested in that.</p></li>
<li><p>I continued with <a href="/projects/rliterate/index.html">RLiterate</a>:</p>
<ul>
<li><p>I worked on an improved representation of selections.</p></li>
<li><p>I though about how to visualise a selection that is not active. Say you select some text and focus another application. What should happen to the selection? Grayed out? Disappear? Just hide the cursor? Different applications seem to handle this differently.</p></li>
<li><p>I though about when to clear the selection entirely? The obvious solution, now that I think about it, is to clear it when something else is selected. But what if the page that the selection is on disappears? How to notice that and clear selection?</p></li>
</ul></li>
</ul>
]]></description>
    <pubDate>Mon, 03 Aug 2020 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/newsletter/july-2020/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>Newsletter June 2020</title>
    <link>http://rickardlindberg.me/writing/newsletter/june-2020/</link>
    <description><![CDATA[<h1>Newsletter June 2020</h1>

<p><em>Published on  6 July 2020.</em></p>

<p>This is what I’ve been up to in June 2020:</p>
<ul>
<li><p>I read parts of <a href="https://compilers.iecc.com/crenshaw/">Let’s Build a Compiler, by Jack Crenshaw</a>. It was interesting and it would be fun to try to implement the described language using <a href="/projects/rlmeta/index.html">RLMeta</a>.</p></li>
<li><p>I read a few articles from Julia Evans that I found interesting:</p>
<ul>
<li><p><a href="https://jvns.ca/blog/2017/02/17/mystery-swap/">Swapping, memory limits, and cgroups</a></p></li>
<li><p><a href="https://jvns.ca/blog/2016/12/03/how-much-memory-is-my-process-using-/">How much memory is my process using?</a></p></li>
<li><p><a href="https://jvns.ca/blog/2016/10/10/what-even-is-a-container/">What even is a container: namespaces and cgroups</a></p></li>
</ul></li>
<li><p>I decided to have a look at <a href="/projects/rliterate/index.html">RLiterate</a> again.</p>
<ul>
<li><p>I continued work on direct manipulation of text. Text in RLiterate is represented as a list of text segements with different styles. That structure has to be projected to the screen and edits have to go into the correct segement. Segments might be projected with some additional markup text that is not present in the text itself. So the problem is a little bit more involved than plain text editing. I’m struggling to solve this problem in an elegant way.</p></li>
<li><p>I have read about two so called projectional editors to get inspiration for how to solve these problems: <a href="https://github.com/projectured/projectured/wiki/Overview">ProjecturEd</a> and <a href="https://projectit-org.github.io/ProjectIt/projectit-component/0.0.4/index.html">ProjectIt</a>.</p></li>
<li><p>One particular problem I’m working on is how to represent selections. Today, a selection is both in the GUI domain and the document domain. If the selection is only in the document domain, then two selection markers can appear in GUI since the same page can be projected more than once onto the workspace. When I click a title for example, I want exactly that title to be selected, not the same underlying title on another projected page. What is a good representation of selections that take this into account?</p></li>
<li><p>I streamlined how props are generated. I wrote about the problem and my prefered pattern <a href="/projects/rliterate/book2/index.html#742ebf5ff2d8457ab8c01b3721052425">here</a>.</p></li>
<li><p>I improved the performance of the text widget. When calculating where all characters will appear on the screen, you have to take <a href="https://en.wikipedia.org/wiki/Kerning">kerning</a> into account. Previously that was done by calculating the bounding rectangle for consequtively longer substrings. For example: bounding rectangle for “H”, then bounding rectangle for “He”, and so on until “Hello”. Now only bounding rectangles for pairs of characters are calculated. So “He”, and “el”, “ll”, and “lo”. My guess (which seems to hold for now) is that kerning only affects two consecutive characters, in which case this optimization works. Since the number of pairs are limited by the alphabet, these calculations can also be cached.</p></li>
</ul></li>
</ul>
]]></description>
    <pubDate>Mon, 06 Jul 2020 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/newsletter/june-2020/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>Newsletter May 2020</title>
    <link>http://rickardlindberg.me/writing/newsletter/may-2020/</link>
    <description><![CDATA[<h1>Newsletter May 2020</h1>

<p><em>Published on 13 June 2020.</em></p>

<p>This is what I’ve been up to in May 2020:</p>
<ul>
<li><p>I created a <a href="/pages/rlmeta-poster/index.html">poster</a> showcasing RLMeta and <a href="/writing/creating-rlmeta-poster/index.html">wrote</a> about it in a blog post. I am happy that I was able to improve both clarity and speed of RLMeta.</p></li>
<li><p>I started working on a <a href="/writing/rlmeta-poster2/index.html">second version</a> of the RLMeta poster. So far I’ve been able to resolve some of the issue from the first version (generate labels in actions, remove dependency on Bash) as well as other improvements.</p></li>
<li><p>Back in 2012 I <a href="/writing/reflections-on-programming/2012-08-30-learn-how-to-implement-languages/index.html">wrote</a> that it might be interesting to learn about techniques for creating programming languages. With RLMeta I have studied some of the suggested topics. It only took me like 8 years, but I’m happy to have finally done it.</p></li>
<li><p>I read <a href="http://journal.stuffwithstuff.com/2013/12/08/babys-first-garbage-collector/">Baby’s First Garbage Collector</a>. After reading it I had the feeling that I could easily implement a garbage collector myself. I haven’t done it, but when I do, I will refer back to this blog post.</p></li>
</ul>
]]></description>
    <pubDate>Sat, 13 Jun 2020 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/newsletter/may-2020/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>Newsletter April 2020</title>
    <link>http://rickardlindberg.me/writing/newsletter/april-2020/</link>
    <description><![CDATA[<h1>Newsletter April 2020</h1>

<p><em>Published on  4 May 2020.</em></p>

<p>This is what I’ve been up to in April 2020:</p>
<ul>
<li><p>I finished the blog post about <a href="/writing/wx-layout-update/index.html">Layout/Update problem in wxPython</a>.</p></li>
<li><p>I read <a href="http://journal.stuffwithstuff.com/2020/04/05/crafting-crafting-interpreters/">Crafting “Crafting Interpreters”</a>. It was fun to read about his process of writing the book.</p></li>
<li><p>I watched <a href="https://www.youtube.com/watch?v=vtIzMaLkCaM&amp;t=1843s">LEADERSHIP LAB: The Craft of Writing Effectively</a>. Main takeaway was that the most important thing about writing is that it should be <strong>valuable</strong> to the reader. Everything else is secondary. A good structure to make it valuable is to first describe a problem (that the reader has) and then a solution.</p></li>
<li><p>I watched <a href="https://www.youtube.com/watch?v=CnbVCNIh1NA">(ninth RacketCon): Andrew Blinn – Fructure: A Structured Editing Engine in Racket</a>. It inspired me.</p></li>
</ul>
]]></description>
    <pubDate>Mon, 04 May 2020 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/newsletter/april-2020/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>Newsletter March 2020</title>
    <link>http://rickardlindberg.me/writing/newsletter/march-2020/</link>
    <description><![CDATA[<h1>Newsletter March 2020</h1>

<p><em>Published on  2 April 2020.</em></p>

<p>This is what I’ve been up to in March 2020:</p>
<ul>
<li><p>I continued with <a href="/projects/rliterate/book2/index.html">RLiterate</a>:</p>
<ul>
<li><p>I tried <a href="https://pavelfatin.com/typometer/">Typometer</a> to measure the time it takes from a kepress to a character appearing on the screen.</p></li>
<li><p>My first approach to speed up drawing was to draw immediately with <code>Layout</code>/<code>Update</code>. That turned out to not work so well. I documented the problem in a <a href="/writing/wx-layout-update/index.html">blog post</a>.</p></li>
<li><p>I concluded that to draw fast in RLiterate, an approach that works quite well is to only draw the part where the cursor is first, and draw everything else a few milliseconds later if there are no additional input events. For example, if a title is edited in the workspace, the table of contents might have to be redrawn as well. But it can wait, since the focus is not on it right now. I documented this behavior quite well <a href="/projects/rliterate/book2/index.html#5fb3048d154d4f50af92d4cbe63db75a">here</a>.</p></li>
<li><p>I think RLiterate’s true potential has not yet been explored. I think more paragraph types could add much value. It is something that I hope to explore after I finish RLiterate 2. But I don’t want to rush it. I want to write RLiterate 2 as clean as possible while still being capable of roughly what RLiterate (1) is.</p></li>
<li><p>I’m also thinking that RLiterate must be a multi process program. There is only so much you can do in GUI thread without it being sluggish. And using threads in Python does not help much since they are not truly run in parallell. So I’m thinking a multi process worker architecture is needed for heavy tasks. Like syntax highlighting, spell checking, generating files, etc. Then a little worker icon in toolbar to let the user know that stuff is happening in the background.</p></li>
</ul></li>
<li><p>I read <a href="https://medium.com/s/story/lets-pretend-this-never-happened-8abf0bc9648c">The Flawed History of Graphical User Interfaces</a>. Computers don’t have to be what they are. We can make them to do anything. Including alternative user interfaces.</p></li>
<li><p>I read <a href="https://hackernoon.com/some-tentative-guidelines-for-gui-composability-2900abead1d9">Some tentative guidelines for GUI composability</a>. Isolated applications that can’t be composed is a bad idea. Yet the default.</p></li>
<li><p>I watched <a href="https://www.youtube.com/watch?v=Pot9GnHFOVU&amp;t=1026s">Tudor Gîrba - Moldable development</a>. It is an interesting project that I want to explore more.</p></li>
<li><p>I read <a href="https://medium.com/feenk/one-rendering-tree-918eae49bcff">One rendering tree</a>.</p>
<blockquote>
<p>Well, the user interface framework has a tree, and somewhere in that tree, there is a canvas, and in that canvas … well, there is another world, with another tree. That these are different worlds, and different worlds means we cannot combine them easily. We do not want different worlds. We want just one. A seamless one.</p>
</blockquote>
<p>This is something that might be useful for RLiterate. But that would require yet another complete rewrite. I should finish RLiterate 2 and learn from it. Then study one rendering tree. Then see if a third rewrite is suitable or not. But it is far away in the future.</p></li>
<li><p>I read <a href="https://www.hillelwayne.com/post/influential-dead-languages/">10 Most(ly dead) Influential Programming Languages</a>. I would like to learn more APL. Perhaps implement my own APL to learn more.</p></li>
</ul>
]]></description>
    <pubDate>Thu, 02 Apr 2020 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/newsletter/march-2020/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>Newsletter February 2020</title>
    <link>http://rickardlindberg.me/writing/newsletter/february-2020/</link>
    <description><![CDATA[<h1>Newsletter February 2020</h1>

<p><em>Published on  2 March 2020.</em></p>

<p>This is what I’ve been up to in February 2020:</p>
<ul>
<li><p>I continued with <a href="/projects/rliterate/book2/index.html">RLiterate</a> and made some <a href="/projects/rliterate/book2/index.html#416f6a8d52f0452ea3be94fd18b7a90e">progress</a>. I started to flesh out the rest of the application and started with adding support for direct manipulation of titles and paragraph text.</p></li>
<li><p>I found out about <a href="http://nickgravgaard.com/elastic-tabstops/">Elastic tabstops - a better way to indent and align code</a>. It is a nice inspiration for tab stop handling in RLiterate.</p></li>
<li><p>I read <a href="http://blog.rfox.eu/en/Programmer_s_critique_of_missing_structure_of_oper.html">Programmer’s critique of missing structure of operating systems</a>. It reminds me of what Alan Kay has talked about and hints at what real objects might be like. Interesting.</p></li>
<li><p>I read <a href="https://buttondown.email/hillelwayne/archive/826fd056-1d76-4b1c-b9c8-96deabbec07d">Donald Knuth Was Framed</a>. I’m interested in all sources about literate programming.</p></li>
</ul>
]]></description>
    <pubDate>Mon, 02 Mar 2020 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/newsletter/february-2020/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>Newsletter January 2020</title>
    <link>http://rickardlindberg.me/writing/newsletter/january-2020/</link>
    <description><![CDATA[<h1>Newsletter January 2020</h1>

<p><em>Published on  3 February 2020.</em></p>

<p>This is what I’ve been up to in January 2020:</p>
<ul>
<li><p>I finished the article about <a href="/writing/rlmeta-memoize-failures/index.html">memoizing failures in RLMeta</a>.</p></li>
<li><p>I came across <a href="https://github.com/DoctorWkt/acwj">A Compiler Writing Journey</a>. It inspired me to write articles that explain things that I’m interested in.</p></li>
<li><p>I watched <a href="https://www.youtube.com/watch?v=LnzuMJLZRdU">“Hello, world” from scratch on a 6502 — Part 1</a>. Low level hardware is fun.</p></li>
<li><p>I continued with <a href="/projects/rliterate/book2/index.html">RLiterate</a> and made great <a href="/projects/rliterate/book2/index.html#bdeda63252d440c3b3394c34671a9107">progress</a>. I’m now confident that the new architecture will work. Now it’s just a matter of fleshing out the rest of the application until it can edit itself.</p></li>
<li><p>I watched <a href="https://www.youtube.com/watch?v=bnqkglrSqrg&amp;t=2281s">Sean McDirmid - The Future of Programming will be Live - Curry On</a>. It made me think about introducing “Live examples” in RLiterate. If I have a function I want to add an example paragraph that executes that function and be able to modify its parameters interactively. Sort of like an interactive test case to explore input/output.</p></li>
<li><p>I read about <a href="https://redux.js.org/">Redux</a> <a href="https://github.com/pshrmn/notes/blob/master/redux/redux.md">here</a> and <a href="https://randycoulman.com/blog/2016/11/22/taking-advantage-of-combinereducers/">here</a>. Its architecture can be an inspiration for how to handle state in RLiterate.</p></li>
</ul>
]]></description>
    <pubDate>Mon, 03 Feb 2020 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/newsletter/january-2020/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>Newsletter December 2019</title>
    <link>http://rickardlindberg.me/writing/newsletter/december-2019/</link>
    <description><![CDATA[<h1>Newsletter December 2019</h1>

<p><em>Published on  5 January 2020.</em></p>

<p>This is what I’ve been up to in December 2019:</p>
<ul>
<li><p>I read <a href="https://blog.logrocket.com/webassembly-how-and-why-559b7f96cd71/">WebAssembly: How and why</a> and watched <a href="https://www.youtube.com/watch?v=CMB6AlE1QuI">Rust, WebAssembly, and the future of Serverless by Steve Klabnik</a>. WebAssembly might be an interesting compilation target to experiment with.</p></li>
<li><p>I read <a href="https://michaelfeathers.silvrback.com/toward-a-galvanizing-definition-of-technical-debt">Toward a Galvanizing Definition of Technical Debt</a>. I found his definition of technical debt useful.</p></li>
<li><p>I watched <a href="https://www.youtube.com/watch?v=r-TLSBdHe1A&amp;feature=emb_logo">“Performance Matters” by Emery Berger</a>. Low level details are interesting some times.</p></li>
<li><p>I read <a href="https://chelseatroy.com/2019/12/18/reviewing-pull-requests/">Reviewing Pull Requests</a>. I like the idea that more work is put on the reviewer and that the reviewer can also push fixes to the pull request. It reminds me of the <a href="https://rfc.unprotocols.org/spec:1/C4/">C4 process</a> where every patch is almost always immediately accepted. If anyone has comments on it, it is solved by creating another patch.</p></li>
<li><p>I read <a href="https://alexnixon.github.io/2019/12/10/writing.html">It’s time to start writing</a>. It inspired me to write more to think more clearly.</p></li>
<li><p>I read <a href="https://pavelfatin.com/typing-with-pleasure/">Typing with pleasure</a> and also watched the linked video <a href="https://www.youtube.com/watch?v=vOvQCPLkPt4">Applied Sciences Group: High Performance Touch</a>. This topic is relevant for RLiterate.</p></li>
</ul>
]]></description>
    <pubDate>Sun, 05 Jan 2020 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/newsletter/december-2019/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>Newsletter November 2019</title>
    <link>http://rickardlindberg.me/writing/newsletter/november-2019/</link>
    <description><![CDATA[<h1>Newsletter November 2019</h1>

<p><em>Published on  3 December 2019.</em></p>

<p>This is what I’ve been up to in November 2019:</p>
<ul>
<li><p>I continued working on RLiterate. You can see the progress <a href="/projects/rliterate/book2/index.html#359aefc7fbb54cb4b8e43182efb241a0">here</a>.</p>
<ul>
<li><p>When implementing the text wrap algorithm, it was helpful to be able to change the page width interactively by mouse drag. It gave me quick feedback on the algorithm.</p></li>
<li><p>I fleshed out more parts of the application, and the new architecture seems to scale for what I need. There are still details to figure out, but overall I’m quite pleased.</p></li>
</ul></li>
<li><p>I watched <a href="https://channel9.msdn.com/Blogs/Seth-Juarez/Anders-Hejlsberg-on-Modern-Compiler-Construction">Anders Hejlsberg on Modern Compiler Construction</a>. The compiler he describes feels similar to how RLiterate operate in the sense that every time an even happens, the whole state is re-created. But some parts are cached. It also sparked the idea that RLiterate can use a “language server” to provide a better IDE experience.</p></li>
</ul>
]]></description>
    <pubDate>Tue, 03 Dec 2019 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/newsletter/november-2019/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>Newsletter October 2019</title>
    <link>http://rickardlindberg.me/writing/newsletter/october-2019/</link>
    <description><![CDATA[<h1>Newsletter October 2019</h1>

<p><em>Published on  2 November 2019.</em></p>

<p>This is what I’ve been up to in October 2019:</p>
<ul>
<li><p>I read <a href="http://users.ece.cmu.edu/~koopman/stack_computers/">Stack Computers: the new wave</a> by Philip J. Koopman, Jr. I did not dig into details about the different computers, but the rest of the book gave me a good understanding stack computers.</p></li>
<li><p>I thought about how stack computers could support programming language features. In particular, I though about how they could support local variables. A calling convention could be used where function parameters are always put on the stack. If a function wants to, it can store those in a frame for later reference. But it does not have to. The compiler might also optimize away local variables in favor of pure stack operations.</p></li>
<li><p>I continued working on <a href="/writing/expr-to-x86-compiler/index.html">compiling expressions to x86 machine code</a>. I did debugging with gdb and learned some useful commands. I managed to compile a subset of expressions down to x86 machine code. It was satisfying. I was helped by <a href="https://eli.thegreenplace.net/2017/adventures-in-jit-compilation-part-4-in-python/">Adventures in JIT compilation: Part 4 - in Python</a>.</p></li>
<li><p>I got an urge to do a rewrite of <a href="/projects/rliterate/index.html">RLiterate</a> to improve performance and fix bugs that make it annoying to use. I use RLiterate to write articles for my blog. I really like the features of it, but the poor performance makes it annoying to use. I had though of a slightly different architecture that would mitigate those problems. But it would require a complete rewrite. I have now successfully validated that the new architecture works better and I will continue to build the next version. You can see it <a href="/projects/rliterate/book2/index.html">here</a>.</p></li>
<li><p>I worked on RLiterate in small chunks. First I did some work and published that version on my homepage. Then at a later time I did review of what I had done. Then I went through and fixed comments from review. This workflow has worked quite well. Having time between the two activities has allowed me to rest and reflect.</p></li>
<li><p>Because I got distracted with RLiterate, I did not make progress on the article about <a href="/writing/rlmeta-memoize-failures/index.html">memoizing failures in RLMeta</a> that I said I would hoped have finished by now. I have not abandoned my drafts though. Something more interesting got in between. I will get back to writing at some point.</p></li>
</ul>
]]></description>
    <pubDate>Sat, 02 Nov 2019 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/newsletter/october-2019/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>Newsletter September 2019</title>
    <link>http://rickardlindberg.me/writing/newsletter/september-2019/</link>
    <description><![CDATA[<h1>Newsletter September 2019</h1>

<p><em>Published on  1 October 2019.</em></p>

<p>This is what I’ve been up to in September 2019:</p>
<ul>
<li><p>I finished the article on <a href="/writing/rlmeta-left-associativity/index.html">parsing left associative operators in RLMeta</a>. I’m pleased with how it turned out.</p></li>
<li><p>I played with <a href="https://cython.org/">Cython</a> to see if RLMeta VM could be made faster if converted to a C extension module. (It could!) I might write a blog post about it.</p></li>
<li><p>I learned more about Python C extension modules from <a href="https://thomasnyberg.com/what_are_extension_modules.html">What are (c)python extension modules?</a>.</p></li>
<li><p>I watched <a href="https://cacm.acm.org/magazines/2018/11/232214-a-look-at-the-design-of-lua/fulltext">A Look at the Design of Lua</a>. I was inspired by the setting in which it seems to have been created. Small office. Whiteboard. Collaboration. I want to implement a minimal OOP-language in order to learn how to do it.</p></li>
<li><p>I finished porting <a href="/projects/timeline/index.html">Timeline</a> to Python 3.</p>
<ul>
<li><p>The most difficult part was to verify that division operations were still working the same. (Python 3 integer division gives float instead of integer as in Python 2.)</p></li>
<li><p>I concluded that maintaining software is hard work. Even if your program does not change, the external world changes, and you need to change your program accordingly.</p></li>
<li><p>I finished the article on the <a href="/writing/timeline-segfault-wxpython/index.html">segfault failure</a> that I found during porting.</p></li>
</ul></li>
<li><p>I learned about a trick help me get started on a task faster: leave work undone. Leave a test failing. Leave a sentence half written.</p></li>
<li><p>I learned that your number one priority is not what you write on top of the TODO list, but what you actually do.</p></li>
<li><p>I finished a post with my <a href="/writing/alan-kay-notes/index.html">notes on Alan Kay</a>. He is a big inspiration to me.</p></li>
<li><p>I read most parts of <a href="https://paulcavallaro.com/blog/common-systems-programming-optimizations-tricks/">Common Systems Programming Optimizations &amp; Tricks</a>. Low level optimizations are interesting. It reminded me of Bob Nystrom’s <a href="http://gameprogrammingpatterns.com/">game programming book</a> that discusses some <a href="http://gameprogrammingpatterns.com/optimization-patterns.html">similar topics</a>.</p></li>
<li><p>I continued with the article about <a href="/writing/rlmeta-memoize-failures/index.html">memoizing failures in RLMeta</a>. It is almost finished, but because I got distracted by other work, it is not. I hope to finish it next month.</p></li>
<li><p>I started working on <a href="/writing/expr-to-x86-compiler/index.html">compiling expressions to x86 machine code</a>:</p>
<ul>
<li><p>I don’t really know assembly, so I found <a href="https://www.nayuki.io/page/a-fundamental-introduction-to-x86-assembly-programming">A fundamental introduction to x86 assembly programming</a> useful.</p></li>
<li><p>I got segafults because of 32/64-bit mixup. It just shows that I don’t really know what I’m doing yet.</p></li>
<li><p>I learned that <code>add</code> and <code>imul</code> instructions do not work the same. <code>imul</code> can not store result back in memory but must go via register.</p></li>
<li><p>I learned that I subtracted operands in the wrong order.</p></li>
<li><p>I read <a href="https://csl.name/post/python-jit/">Writing a basic x86-64 JIT compiler from scratch in stock Python</a>.</p></li>
<li><p>I read <a href="https://csl.name/post/python-compiler/">JIT compiling a subset of Python to x86-64</a>.</p></li>
</ul></li>
</ul>
]]></description>
    <pubDate>Tue, 01 Oct 2019 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/newsletter/september-2019/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>Newsletter August 2019</title>
    <link>http://rickardlindberg.me/writing/newsletter/august-2019/</link>
    <description><![CDATA[<h1>Newsletter August 2019</h1>

<p><em>Published on 31 August 2019.</em></p>

<p>This is what I’ve been up to in August 2019:</p>
<ul>
<li><p>I finished the <a href="/writing/rlmeta-vm/index.html">RLMeta VM</a> article. When working on it, I noticed that error handling has not gotten much love. I want to improve it and write about it in another article.</p></li>
<li><p>I found <a href="https://viewsourcecode.org/snaptoken/kilo/index.html">Build Your Own Text Editor</a> that explains how to build a text editor by showing and explaining incremental patches. I found the approach interesting.</p>
<ul>
<li><p>This approach feels similar to what is described in <a href="http://akkartik.name/post/literate-programming">Literate programming: Knuth is doing it wrong</a> and <a href="http://akkartik.name/post/wart-layers">A new way to organize programs</a>.</p></li>
<li><p>The above made me think about if programs could be organized in features without the use of literate programming. That would require some kind of plugin architechture where features could be plugged in independent of eachother.</p></li>
</ul></li>
<li><p>I read Guido van Rossum’s article on <a href="https://medium.com/@gvanrossum_83706/generating-a-peg-parser-520057d642a9">Generating a PEG Parser</a>. This made me realize that RLMeta does not memoize correctly. I’m working on an <a href="/writing/rlmeta-memoize-failures/index.html">article</a> where I fix it.</p></li>
<li><p>I worked on porting <a href="/projects/timeline/index.html">Timeline</a> to Python 3. It is a work in progress, but the application now starts. I have a few items left on my TODO list that I want to complete before considering the port done. I ran into a problem that I <a href="/writing/timeline-doctest-wxpython/index.html">blogged about</a>. An another one <a href="/writing/timeline-segfault-wxpython/index.html">in progress</a>.</p></li>
<li><p>I found <a href="https://twitter.com/mfeathers/status/1159495761714769921">this tweet</a> by Michael Feathers interesting:</p>
<blockquote>
<p>Fred Brooks said that software is best when it looks like it was designed by one mind.</p>
<p>Mob programming is an attempt to create one mind of many.</p>
<p>Quality goes down as the number of people touching code independently goes up.</p>
<p>Interesting constraint problem.</p>
</blockquote>
<p>And a <a href="https://twitter.com/raganwald/status/1159498133635850240">follow up</a>:</p>
<blockquote>
<p>Interesting parallel to Alan Kay’s bifurcation of languages into “Agglutination of features” vs. “Crystallization of style.”</p>
<p>The former are almost always defined by committee, the latter by solo designers or very small, tight teams.</p>
</blockquote>
<p>And another <a href="https://twitter.com/jit_j/status/1159501352243998720">follow up</a>:</p>
<blockquote>
<p>There are quality OSS projects that are made up of individual contributors and a distributed review process. It’s possible for independent workers to maintain and extend a codebase, as long as they buy into a shared style and a shared philosophy. Process matters though.</p>
</blockquote>
<p>How can we build software so that it appears to be desgined by a single mind?</p></li>
<li><p>I wrote some code for an <a href="/writing/rlmeta-left-associativity/index.html">upcoming article</a> on parsing left associative operators in RLMeta.</p></li>
<li><p>I read some of Eli Bendersky’s articles on parsing:</p>
<ul>
<li><p><a href="https://eli.thegreenplace.net/2008/09/26/recursive-descent-ll-and-predictive-parsers">Recursive descent, LL and predictive parsers</a></p></li>
<li><p><a href="https://eli.thegreenplace.net/2009/03/14/some-problems-of-recursive-descent-parsers">Some problems of recursive descent parsers</a></p></li>
<li><p><a href="https://eli.thegreenplace.net/2009/03/20/a-recursive-descent-parser-with-an-infix-expression-evaluator">A recursive descent parser with an infix expression evaluator</a></p></li>
<li><p><a href="https://eli.thegreenplace.net/2010/01/02/top-down-operator-precedence-parsing">Top-Down operator precedence parsing</a></p></li>
<li><p><a href="https://eli.thegreenplace.net/2012/08/02/parsing-expressions-by-precedence-climbing">Parsing expressions by precedence climbing</a></p></li>
</ul></li>
<li><p>One of them led me to read Bob Nystrom’s article <a href="http://journal.stuffwithstuff.com/2011/03/19/pratt-parsers-expression-parsing-made-easy/">Pratt Parsers: Expression Parsing Made Easy</a>.</p></li>
<li><p>I want to learn more about JIT compilation. As I read <a href="http://blog.reverberate.org/2012/12/hello-jit-world-joy-of-simple-jits.html">Hello, JIT World: The Joy of Simple JITs</a> describing a JIT compiler for Brainfuck I thought: Is JIT-ing byte code just getting rid of the interpreter loop? I’m not completely sure of the big picture yet. And how does a tracing JIT compiler differ from a regular JIT compiler. Brainfuck seems to be a popular example in JIT articles.</p></li>
<li><p>I read about Cython and though that I should try it for RLMeta VM. Should be quite easy to port it to C and make incremental performance improvements.</p></li>
</ul>
]]></description>
    <pubDate>Sat, 31 Aug 2019 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/newsletter/august-2019/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>

    </channel>
</rss>
