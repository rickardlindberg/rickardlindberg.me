<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>Rickard's personal homepage: latest posts tagged python</title>
        <link>http://rickardlindberg.me</link>
        <description><![CDATA[Rickard's personal homepage: latest posts tagged python]]></description>
        <atom:link href="http://rickardlindberg.me/tags/python/rss.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Tue, 18 Apr 2023 00:00:00 UT</lastBuildDate>
        <item>
    <title>Trying Ron's Python Asteroids</title>
    <link>http://rickardlindberg.me/writing/trying-rons-python-asteroids/</link>
    <description><![CDATA[<h1>Trying Ron's Python Asteroids</h1>

<p><em>Published on 18 April 2023.</em></p>

<p><a href="https://www.ronjeffries.com/">Ron</a> is working on an Asteroids game in Python and also <a href="https://www.ronjeffries.com/categories/python/">writing</a> about it. I’m interested in his workflow, so I follow along.</p>
<p>He recently published the code on <a href="https://github.com/RonJeffries/python-asteroids-1">Github</a>.</p>
<p>I thought I would have a look.</p>
<h2 id="first-look">First look</h2>
<p>I clone the repo and see a bunch of Python files and an <code>.idea</code> folder.</p>
<p>I’ve never been a fan of IDEs. Perhaps I should learn one properly. In any case I find it useful to be able to run commands from the command line as well.</p>
<p>First, I want to see if I can get this game running:</p>
<pre><code>$ python game.py
AttributeError: &#39;pygame.math.Vector2&#39; object has no attribute &#39;copy&#39;</code></pre>
<p>I suspect I’m using a different version of pygame that lacks the copy method on vectors.</p>
<p>I try to run the test to see if I get the same failure there. How to run the tests? I think Ron mentioned that he uses <a href="https://pytest.org/">pytets</a>. I try:</p>
<pre><code>$ pytest
===================================================================== test session starts =====================================================================
platform linux -- Python 3.9.10, pytest-6.2.2, py-1.11.0, pluggy-0.13.1
rootdir: /home/rick/downloads/python-asteroids-1
collected 3 items / 3 errors
...</code></pre>
<p>I see the same error about the copy method of vector and some more in the same style.</p>
<p>I read about the copy method in the pygame manual and conclude that it was added in a later version.</p>
<h2 id="upgrade-pygame">Upgrade pygame</h2>
<p>I think I’ve installed pygame via Fedora’s package manager. That doesn’t have a more recent version of pygame.</p>
<p>I try to install it using pip instead:</p>
<pre><code>$ pip install --user pygame
Requirement already satisfied: pygame in /usr/lib64/python3.9/site-packages (2.0.3)</code></pre>
<p>I add <code>--user</code> because I don’t want to install anything globally using pip. I suppose I should create a virtual environment, but I haven’t worked much with them. This will do.</p>
<p>It indeed tells me that I already have pygame installed. How do I upgrade? Ah, the <code>--upgrade</code> flag:</p>
<pre><code>$ pip install --user --upgrade pygame
Requirement already satisfied: pygame in /usr/lib64/python3.9/site-packages (2.0.3)
Collecting pygame
  Downloading pygame-2.3.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (13.8 MB)
     |████████████████████████████████| 13.8 MB 692 kB/s 
Installing collected packages: pygame
Successfully installed pygame-2.3.0</code></pre>
<p>Sometimes I hesitate to install Python packages via pip. Especially when they are not pure Python packages (like pygame which depends on SDL and C libraries). Mostly because it hasn’t worked so well for me in the past. Maybe things are better now. And maybe it depends on the library. Let’s see how this works now.</p>
<h2 id="testing-the-game-again">Testing the game again</h2>
<p>I try running the game again:</p>
<pre><code>$ python game.py 
pygame 2.3.0 (SDL 2.24.2, Python 3.9.10)
Hello from the pygame community. https://www.pygame.org/contribute.html</code></pre>
<p>Success! Or, I don’t get any errors at least. But it exits right away. Am I running the wrong file?</p>
<p>Ah, there is a <code>main.py</code>. Let’s try that.</p>
<p>It works!</p>
<center>
<img src="game.png" title="fig:" alt="Ron’s Asteroids game." />
</center>
<h2 id="zero-friction">Zero friction</h2>
<p>I’m quite familiar with both Python and pygame, so it was not that difficult for me to get started. But I think we can improve.</p>
<p>One idea that I got from James Shore’s writing about a <a href="https://www.jamesshore.com/v2/books/aoad2/zero_friction">zero friction</a> development is that you should have scripts for doing common tasks like running your tests.</p>
<p>Let’s <a href="https://github.com/RonJeffries/python-asteroids-1/pull/1">see</a> if Ron likes that as well. I add one script to test (<code>build.sh</code>)</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="co">#!/usr/bin/env bash</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a><span class="kw">set</span> <span class="ex">-e</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true"></a></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true"></a><span class="ex">pytest</span></span></code></pre></div>
<p>and one to run the application (<code>rundev.sh</code>)</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a><span class="co">#!/usr/bin/env bash</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true"></a><span class="bu">exec</span> python main.py</span></code></pre></div>
<p>Should the way to run tests or the application change, only those files need to be changed, and the usage of the developer stays the same.</p>
]]></description>
    <pubDate>Tue, 18 Apr 2023 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/trying-rons-python-asteroids/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>Segfault with custom events in wxPython</title>
    <link>http://rickardlindberg.me/writing/timeline-segfault-wxpython/</link>
    <description><![CDATA[<h1>Segfault with custom events in wxPython</h1>

<p><em>Published on 28 September 2019.</em></p>

<p>When working on porting <a href="/projects/timeline/index.html">Timeline</a> to Python 3, I ran into a problem where a test caused a segfault. I managed to create a small example that reproduces the failure. I describe the example below and show how I solved the test failure.</p>
<p>The example consists of a test that stores an instance of a custom wx event in a <a href="https://docs.python.org/3.5/library/unittest.mock.html#the-mock-class">mock</a> object:</p>
<pre><code>1.  test\_wx.py</code></pre>
<div class="sourceCode" id="cb2"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="im">from</span> unittest.mock <span class="im">import</span> Mock</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a><span class="im">import</span> unittest</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a><span class="im">import</span> wx</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a><span class="im">import</span> wx.lib.newevent</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a>CustomEvent, EVT_CUSTOM <span class="op">=</span> wx.lib.newevent.NewEvent()</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true"></a></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true"></a><span class="kw">class</span> WxTest(unittest.TestCase):</span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true"></a></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true"></a>    <span class="kw">def</span> test_wx(<span class="va">self</span>):</span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true"></a>        mock <span class="op">=</span> Mock()</span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true"></a>        mock.PostEvent(CustomEvent())</span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true"></a></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true"></a><span class="cf">if</span> <span class="va">__name__</span> <span class="op">==</span> <span class="st">&quot;__main__&quot;</span>:</span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true"></a>    unittest.main()</span></code></pre></div>
<p>When I run this example, I get the following error:</p>
<pre class="text"><code>$ python3 test_wx.py
.
----------------------------------------------------------------------
Ran 1 test in 0.001s

OK
Segmentation fault (core dumped)</code></pre>
<p>If I instead run it through gdb, I can see the C stacktrace where the error happens:</p>
<pre class="text"><code>$ gdb python3
GNU gdb (GDB) Fedora 8.2.91.20190401-23.fc30
...
(gdb) run test_wx.py 
...
.
----------------------------------------------------------------------
Ran 1 test in 0.001s

OK

Program received signal SIGSEGV, Segmentation fault.
dict_dealloc (mp=0x7fffe712f9d8) at /usr/src/debug/python3-3.7.3-1.fc30.x86_64/Objects/dictobject.c:1901
1901  /usr/src/debug/python3-3.7.3-1.fc30.x86_64/Objects/dictobject.c: No such file or directory.
Missing separate debuginfos, use: dnf debuginfo-install fontconfig-2.13.1-6.fc30.x86_64 libXcursor-1.1.15-5.fc30.x86_64 libgcrypt-1.8.4-3.fc30.x86_64 libxkbcommon-0.8.3-1.fc30.x86_64 lz4-libs-1.8.3-2.fc30.x86_64 python3-sip-4.19.17-1.fc30.x86_64
(gdb) bt
#0  dict_dealloc (mp=0x7fffe712f9d8) at /usr/src/debug/python3-3.7.3-1.fc30.x86_64/Objects/dictobject.c:1901
#1  0x00007fffea02e1cc in wxPyEvtDict::~wxPyEvtDict (this=0x5555556f3ee8, __in_chrg=&lt;optimized out&gt;) at ../../../../src/pyevent.h:48
#2  wxPyEvent::~wxPyEvent (this=0x5555556f3e90, __in_chrg=&lt;optimized out&gt;) at ../../../../src/pyevent.h:96
#3  sipwxPyEvent::~sipwxPyEvent (this=0x5555556f3e90, __in_chrg=&lt;optimized out&gt;) at ../../../../sip/cpp/sip_corewxPyEvent.cpp:56
#4  0x00007fffea02e24d in sipwxPyEvent::~sipwxPyEvent (this=0x5555556f3e90, __in_chrg=&lt;optimized out&gt;) at ../../../../sip/cpp/sip_corewxPyEvent.cpp:56
#5  0x00007fffea02dfd2 in release_wxPyEvent (sipCppV=0x5555556f3e90, sipState=&lt;optimized out&gt;) at ../../../../sip/cpp/sip_corewxPyEvent.cpp:261
#6  0x00007fffe72ff4ce in ?? () from /usr/lib64/python3.7/site-packages/sip.so
#7  0x00007fffe72ff51d in ?? () from /usr/lib64/python3.7/site-packages/sip.so
#8  0x00007ffff7c14869 in subtype_dealloc (self=&lt;_Event at remote 0x7fffea4ddd38&gt;) at /usr/src/debug/python3-3.7.3-1.fc30.x86_64/Objects/typeobject.c:1256
#9  0x00007ffff7b8892b in tupledealloc (op=0x7fffe712cda0) at /usr/src/debug/python3-3.7.3-1.fc30.x86_64/Objects/tupleobject.c:246
#10 0x00007ffff7b8892b in tupledealloc (op=0x7fffea4d7620) at /usr/src/debug/python3-3.7.3-1.fc30.x86_64/Objects/tupleobject.c:246
#11 0x00007ffff7c14869 in subtype_dealloc (self=&lt;_Call at remote 0x7fffea4d7620&gt;) at /usr/src/debug/python3-3.7.3-1.fc30.x86_64/Objects/typeobject.c:1256
#12 0x00007ffff7b882ae in list_dealloc (op=0x7fffe70ba228) at /usr/src/debug/python3-3.7.3-1.fc30.x86_64/Objects/listobject.c:324
#13 0x00007ffff7c14869 in subtype_dealloc (self=&lt;_CallList at remote 0x7fffe70ba228&gt;) at /usr/src/debug/python3-3.7.3-1.fc30.x86_64/Objects/typeobject.c:1256
#14 0x00007ffff7b8c813 in free_keys_object (keys=0x555555855080) at /usr/src/debug/python3-3.7.3-1.fc30.x86_64/Modules/gcmodule.c:776
#15 dict_dealloc (mp=0x7fffe712f630) at /usr/src/debug/python3-3.7.3-1.fc30.x86_64/Objects/dictobject.c:1913
#16 subtype_clear (self=&lt;optimized out&gt;) at /usr/src/debug/python3-3.7.3-1.fc30.x86_64/Objects/typeobject.c:1101
#17 delete_garbage (old=&lt;optimized out&gt;, collectable=&lt;optimized out&gt;) at /usr/src/debug/python3-3.7.3-1.fc30.x86_64/Modules/gcmodule.c:769
#18 collect (generation=2, n_collected=0x7fffffffd230, n_uncollectable=0x7fffffffd228, nofail=0) at /usr/src/debug/python3-3.7.3-1.fc30.x86_64/Modules/gcmodule.c:924
#19 0x00007ffff7c4ac4e in collect_with_callback (generation=generation@entry=2) at /usr/src/debug/python3-3.7.3-1.fc30.x86_64/Modules/gcmodule.c:1036
#20 0x00007ffff7ca7331 in PyGC_Collect () at /usr/src/debug/python3-3.7.3-1.fc30.x86_64/Modules/gcmodule.c:1581
#21 0x00007ffff7caaf03 in Py_FinalizeEx () at /usr/src/debug/python3-3.7.3-1.fc30.x86_64/Python/pylifecycle.c:1185
#22 0x00007ffff7cab048 in Py_Exit (sts=sts@entry=0) at /usr/src/debug/python3-3.7.3-1.fc30.x86_64/Python/pylifecycle.c:2278
#23 0x00007ffff7cab0ff in handle_system_exit () at /usr/src/debug/python3-3.7.3-1.fc30.x86_64/Python/pythonrun.c:636
#24 0x00007ffff7cab1e6 in PyErr_PrintEx (set_sys_last_vars=1) at /usr/src/debug/python3-3.7.3-1.fc30.x86_64/Python/pythonrun.c:646
#25 0x00007ffff7cab651 in PyRun_SimpleFileExFlags (fp=&lt;optimized out&gt;, filename=&lt;optimized out&gt;, closeit=&lt;optimized out&gt;, flags=0x7fffffffd410) at /usr/src/debug/python3-3.7.3-1.fc30.x86_64/Python/pythonrun.c:435
#26 0x00007ffff7cad864 in pymain_run_file (p_cf=0x7fffffffd410, filename=&lt;optimized out&gt;, fp=0x5555555a20d0) at /usr/src/debug/python3-3.7.3-1.fc30.x86_64/Modules/main.c:427
#27 pymain_run_filename (cf=0x7fffffffd410, pymain=0x7fffffffd520) at /usr/src/debug/python3-3.7.3-1.fc30.x86_64/Modules/main.c:1627
#28 pymain_run_python (pymain=0x7fffffffd520) at /usr/src/debug/python3-3.7.3-1.fc30.x86_64/Modules/main.c:2877
#29 pymain_main (pymain=0x7fffffffd520) at /usr/src/debug/python3-3.7.3-1.fc30.x86_64/Modules/main.c:3038
#30 0x00007ffff7cadc0c in _Py_UnixMain (argc=&lt;optimized out&gt;, argv=&lt;optimized out&gt;) at /usr/src/debug/python3-3.7.3-1.fc30.x86_64/Modules/main.c:3073
#31 0x00007ffff7e12f33 in __libc_start_main (main=0x555555555050 &lt;main&gt;, argc=2, argv=0x7fffffffd678, init=&lt;optimized out&gt;, fini=&lt;optimized out&gt;, rtld_fini=&lt;optimized out&gt;, stack_end=0x7fffffffd668) at ../csu/libc-start.c:308
#32 0x000055555555508e in _start ()</code></pre>
<p>Somewhere in the middle, there is a call to <code>PyGC_Collect</code> followed, a bit higher up, by a call to <code>release_wxPyEvent</code>. This indicates that the error occurs during garbage collection of the custom wx event.</p>
<p>The machine I run the example on is running Python 3.7.3, and wxPython 4.0.4:</p>
<pre class="text"><code>$ python3
Python 3.7.3 (default, Mar 27 2019, 13:36:35)
[GCC 9.0.1 20190227 (Red Hat 9.0.1-0.8)] on linux
Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.
&gt;&gt;&gt; import wx
&gt;&gt;&gt; wx.version()
&#39;4.0.4 gtk3 (phoenix) wxWidgets 3.0.4&#39;</code></pre>
<p>To solve this problem, I replaced the mock function <code>PostEvent</code> with one that simply discards its input like this:</p>
<pre class="text"><code>mock.PostEvent = lambda x: None</code></pre>
<p>This way there is no custom wx event to garbage collect. In Timeline's case, it was not important to store the event in the mock object anyway.</p>
<p>If you have any idea why this example causes a segfault, I would be interested to know. It feels like an error in the wxPython wrapper.</p>
]]></description>
    <pubDate>Sat, 28 Sep 2019 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/timeline-segfault-wxpython/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>Doctest fails in Python 3 with wxPython</title>
    <link>http://rickardlindberg.me/writing/timeline-doctest-wxpython/</link>
    <description><![CDATA[<h1>Doctest fails in Python 3 with wxPython</h1>

<p><em>Published on 31 August 2019.</em></p>

<p>When working on porting <a href="/projects/timeline/index.html">Timeline</a> to Python 3, I ran into a problem where a <a href="https://docs.python.org/3/library/doctest.html">doctest</a> failed under certain circumstances. I managed to create a small example that reproduces the failure. I describe the example below and show how I solved the test failure.</p>
<p>The example consists of a test runner and two test cases. The test runner is a slimmed down version of the one used in Timeline:</p>
<pre><code>1.  testrunner.py</code></pre>
<div class="sourceCode" id="cb2"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="im">import</span> doctest</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a><span class="im">import</span> sys</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a><span class="im">import</span> unittest</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a><span class="kw">def</span> load_test_cases_from_module_name(suite, module_name):</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a>    <span class="bu">__import__</span>(module_name)</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a>    module <span class="op">=</span> sys.modules[module_name]</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true"></a>    module_suite <span class="op">=</span> unittest.defaultTestLoader.loadTestsFromModule(module)</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true"></a>    suite.addTest(module_suite)</span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true"></a></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true"></a><span class="kw">def</span> load_doc_tests_from_module_name(suite, module_name):</span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true"></a>    <span class="bu">__import__</span>(module_name)</span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true"></a>    module <span class="op">=</span> sys.modules[module_name]</span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true"></a>    <span class="cf">try</span>:</span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true"></a>        module_suite <span class="op">=</span> doctest.DocTestSuite(module)</span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true"></a>    <span class="cf">except</span> <span class="pp">ValueError</span>:</span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true"></a>        <span class="co"># No tests found</span></span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true"></a>        <span class="cf">pass</span></span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true"></a>    <span class="cf">else</span>:</span>
<span id="cb2-20"><a href="#cb2-20" aria-hidden="true"></a>        suite.addTest(module_suite)</span>
<span id="cb2-21"><a href="#cb2-21" aria-hidden="true"></a></span>
<span id="cb2-22"><a href="#cb2-22" aria-hidden="true"></a><span class="cf">if</span> <span class="va">__name__</span> <span class="op">==</span> <span class="st">&quot;__main__&quot;</span>:</span>
<span id="cb2-23"><a href="#cb2-23" aria-hidden="true"></a>    suite <span class="op">=</span> unittest.TestSuite()</span>
<span id="cb2-24"><a href="#cb2-24" aria-hidden="true"></a>    load_test_cases_from_module_name(suite, <span class="st">&quot;test_wx&quot;</span>)</span>
<span id="cb2-25"><a href="#cb2-25" aria-hidden="true"></a>    load_doc_tests_from_module_name(suite, <span class="st">&quot;test_doc&quot;</span>)</span>
<span id="cb2-26"><a href="#cb2-26" aria-hidden="true"></a>    <span class="bu">print</span>(unittest.TextTestRunner().run(suite))</span></code></pre></div>
<p>It creates a test suite with test cases from two modules: one with a unit test and one with a doctests. It then runs the tests.</p>
<p>The first test is a unit test that needs an instance of <code>wx.App</code>:</p>
<pre><code>1.  test\_wx.py</code></pre>
<div class="sourceCode" id="cb4"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="im">import</span> contextlib</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a><span class="im">import</span> unittest</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a><span class="im">import</span> wx</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true"></a></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true"></a><span class="kw">class</span> WxTest(unittest.TestCase):</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true"></a></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true"></a>    <span class="kw">def</span> test_wx(<span class="va">self</span>):</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true"></a>        <span class="cf">with</span> <span class="va">self</span>.wxapp() <span class="im">as</span> app:</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true"></a>            <span class="co"># Test something that requires a wx.App</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true"></a>            <span class="cf">pass</span></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true"></a></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true"></a>    <span class="at">@contextlib.contextmanager</span></span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true"></a>    <span class="kw">def</span> wxapp(<span class="va">self</span>):</span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true"></a>        app <span class="op">=</span> wx.App()</span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true"></a>        <span class="cf">try</span>:</span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true"></a>            <span class="cf">yield</span> app</span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true"></a>        <span class="cf">finally</span>:</span>
<span id="cb4-19"><a href="#cb4-19" aria-hidden="true"></a>            app.Destroy()</span></code></pre></div>
<p>This example doesn't test anything, but is enough to reproduce the failure.</p>
<p>The second test is a doctest that asserts that a function prints a string:</p>
<pre><code>1.  test\_doc.py</code></pre>
<div class="sourceCode" id="cb6"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; print_fun_stuff()</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a><span class="co">This is fun!</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true"></a></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true"></a><span class="kw">def</span> print_fun_stuff():</span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true"></a>    <span class="bu">print</span>(<span class="st">&quot;This is fun!&quot;</span>)</span></code></pre></div>
<p>When I run this example, I get the failure:</p>
<pre class="text"><code>$ python3 testrunner.py
.This is fun!
F
======================================================================
FAIL: test_doc ()
Doctest: test_doc
----------------------------------------------------------------------
Traceback (most recent call last):
  File &quot;/usr/lib64/python3.7/doctest.py&quot;, line 2196, in runTest
    raise self.failureException(self.format_failure(new.getvalue()))
AssertionError: Failed doctest test for test_doc
  File &quot;test_doc.py&quot;, line 0, in test_doc

----------------------------------------------------------------------
File &quot;test_doc.py&quot;, line 2, in test_doc
Failed example:
    print_fun_stuff()
Expected:
    This is fun!
Got nothing


----------------------------------------------------------------------
Ran 2 tests in 0.074s

FAILED (failures=1)
&lt;unittest.runner.TextTestResult run=2 errors=0 failures=1&gt;</code></pre>
<p>What appears to happen is that the expected string in the doctest is written to the console (or perhaps stderr) instead of being captured by doctest. When I run the doctest in isolation, it passes, so there is nothing wrong with the test itself. It is the sequence of these two tests that causes the problem.</p>
<p>My guess is that something in the wx test interferes with the doctest. Perhaps instantiating a <code>wx.App</code> has some effects on streams and redirection. But shouldn't the <code>app.Destroy()</code> call reset any such effects? It would seem reasonable. But what if the <code>wx.App</code> is not completely destroyed when the doctest is run? To test this, I modify the example to force a garbage collection after the <code>app.Destroy()</code> call like this:</p>
<pre class="text"><code>import gc; gc.collect()</code></pre>
<p>This gets rid of the failure and the tests pass consistently. This is also the solution that I adopted for Timeline.</p>
<p>The machine I run the example on is running Fedora 30, Python 3.7.3, and wxPython 4.0.4:</p>
<pre class="text"><code>$ uname -a
Linux localhost.localdomain 5.0.9-301.fc30.x86_64 #1 SMP Tue Apr 23 23:57:35
UTC 2019 x86_64 x86_64 x86_64 GNU/Linux
$ python3
Python 3.7.3 (default, Mar 27 2019, 13:36:35)
[GCC 9.0.1 20190227 (Red Hat 9.0.1-0.8)] on linux
Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.
&gt;&gt;&gt; import wx
&gt;&gt;&gt; wx.version()
&#39;4.0.4 gtk3 (phoenix) wxWidgets 3.0.4&#39;</code></pre>
<p>But the example doesn't always fail. On the Fedora 30 machine, it fails most of the time, but sometimes it succeeds. When I run the example on a machine that is running Fedora 26, Python 3.6.5, and wxPython 4.0.1, it always succeeds:</p>
<pre class="text"><code>$ uname -a
Linux x220 4.16.11-100.fc26.x86_64 #1 SMP Tue May 22 20:02:12 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux
rick@x220 | ~/rickardlindberg.me/writing/draft-timeline-doctest-wxpython
$ python3
Python 3.6.5 (default, Apr  4 2018, 15:09:05)
[GCC 7.3.1 20180130 (Red Hat 7.3.1-2)] on linux
Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.
&gt;&gt;&gt; import wx
&gt;&gt;&gt; wx.version()
&#39;4.0.1 gtk3 (phoenix)&#39;</code></pre>
<p>Also, if I change the test so that it doesn't use a context manager, it always succeeds:</p>
<pre class="text"><code>def test_wx(self):
    app = wx.App()
    try:
        # Test something that requires a wx.App
        pass
    finally:
        app.Destroy()</code></pre>
<p>Perhaps the context manager has some effect on when objects are garbage collected.</p>
<p>If you have any idea why this example sometimes fails, I would be interested to know. It seems illogical that a forced garbage collection should be needed to get a correct program.</p>
]]></description>
    <pubDate>Sat, 31 Aug 2019 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/timeline-doctest-wxpython/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>Bitten by Python generators</title>
    <link>http://rickardlindberg.me/writing/bitten-by-python-generators/</link>
    <description><![CDATA[<h1>Bitten by Python generators</h1>

<p><em>Published on 11 March 2017.</em></p>

<p>Today I found a bug in a piece of Python code that I had written. The buggy code was the result of not taking into consideration how generators in Python work. It looked like this:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="kw">def</span> main():</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a>    <span class="cf">try</span>:</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>        logging.info(<span class="st">&quot;Processing items&quot;</span>)</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a>        items <span class="op">=</span> get_the_items()</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a>    <span class="cf">except</span>:</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a>        logging.exception(<span class="st">&quot;Could not get items&quot;</span>)</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a>    <span class="cf">else</span>:</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true"></a>        <span class="cf">for</span> item <span class="kw">in</span> items:</span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true"></a>            process_item(item)</span></code></pre></div>
<p>Can you spot the error? What could possible go wrong with this code?</p>
<p>When I was debugging it, it was printing the info message, but did not log an exception. Execution continued in the else-clause, but suddenly an exception was raised when looping over the items (outside of <code>process_item</code>). How can that happen? The except-clause should catch all exceptions. And just iterating over a collection should not raise an exception.</p>
<p>The answer is that <code>get_the_items</code> returned a generator. It looked like this:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="kw">def</span> get_the_items():</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a>    <span class="cf">for</span> item <span class="kw">in</span> read_items_from_disk():</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a>        <span class="cf">if</span> item.is_good():</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a>            <span class="cf">yield</span> item</span></code></pre></div>
<p>The exception actually came from <code>read_items_from_disk</code>, but since this code creates a generator, it is not executed until the collection is accessed (which happened in the else-clause). So the exception was actually raised when starting looping over items.</p>
<h2 id="what-about-skipping-the-else-clause">What about skipping the else-clause?</h2>
<p>To ensure that an exception from the generator is caught, the <code>main</code> function could be written like this:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="kw">def</span> main():</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a>    <span class="cf">try</span>:</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a>        logging.info(<span class="st">&quot;Processing items&quot;</span>)</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a>        <span class="cf">for</span> item <span class="kw">in</span> get_the_items():</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a>            process_item(item)</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true"></a>    <span class="cf">except</span>:</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true"></a>        logging.exception(<span class="st">&quot;Could not get items&quot;</span>)</span></code></pre></div>
<p>I don’t like this version because it also catches exceptions from <code>process_item</code>. I like the try-except-else syntax because it allows narrower exception regions in a nice looking way.</p>
<h2 id="why-did-i-use-a-generator">Why did I use a generator?</h2>
<p>I made <code>get_the_items</code> return a generator mainly because I thought it read better. The alternative I came up with looked like this:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="kw">def</span> get_the_items():</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a>    items <span class="op">=</span> []</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a>    <span class="cf">for</span> item <span class="kw">in</span> read_items_from_disk():</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a>        <span class="cf">if</span> item.is_good():</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true"></a>            items.append(item)</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true"></a>    <span class="cf">return</span> items</span></code></pre></div>
<p>I didn’t like the temporary <code>items</code> variable. And it is two lines longer than the generator version.</p>
<h2 id="what-about-list-comprehensions">What about list comprehensions?</h2>
<p>Another way to write <code>get_the_items</code>, avoiding the temporary variable, is to use list comprehensions. It would look like this:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="kw">def</span> get_the_items():</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a>    <span class="cf">return</span> [</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a>        item</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true"></a>        <span class="cf">for</span> item <span class="kw">in</span> read_items_from_disk()</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true"></a>        <span class="cf">if</span> item.is_good()</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true"></a>    ]</span></code></pre></div>
<p>I find this code reads as good as the generator version (even though it is two lines longer). This is what I ended up using. But <code>get_the_items</code> was a bit more complicated than in the example, so I had to divide it into two list comprehensions.</p>
<h2 id="what-about-memory-consumption">What about memory consumption?</h2>
<p>One argument for using generators is that they consume less memory. The whole collection of items do not have to fit in memory at once, only the one currently being processed.</p>
<p>In my case I had already read all items into memory in a previous step. The <code>get_the_items</code> function was mainly used to transform and filter the items. So I would not have used much less memory by using generators. Also, my collections were small, so having them in memory was not a problem.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Generators have some nice properties that can be useful. However, after being bitten by them I now think they should only be used if those properties are absolutely needed. I will favor list comprehensions over generators if I can afford to keep the whole collection in memory.</p>
]]></description>
    <pubDate>Sat, 11 Mar 2017 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/bitten-by-python-generators/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>Precision of datetime in Python</title>
    <link>http://rickardlindberg.me/writing/python-datetime-precision/</link>
    <description><![CDATA[<h1>Precision of datetime in Python</h1>

<p><em>Published on 2015-06-27.</em></p>

<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>What is the precision of datetime in Python? The <a href="https://docs.python.org/3.4/library/datetime.html#datetime.datetime.now">documentation</a> says</p>
<blockquote><p>Return the current local date and time. If optional argument tz is None or not specified, this is like today(), but, if possible, supplies more precision than can be gotten from going through a time.time() timestamp (for example, this may be possible on platforms supplying the C gettimeofday() function).</p>
</blockquote>
<p>It goes on <a href="https://docs.python.org/3.4/library/time.html#time.time">further</a> to say</p>
<blockquote><p>Note that even though the time is always returned as a floating point number, not all systems provide time with a better precision than 1 second.</p>
</blockquote>
<p>So, the answer is that it depends.</p>
<p>Let's try to figure out what it looks like on Windows using Python 3.4. For reference:</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[1]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span class="kn">import</span> <span class="nn">sys</span>
<span class="nb">print</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">version</span><span class="p">)</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt"></div>
<div class="output_subarea output_stream output_stdout output_text">
<pre>3.4.3 (v3.4.3:9b73f1c3e601, Feb 24 2015, 22:44:40) [MSC v.1600 64 bit (AMD64)]
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Let's create a series of datetime objects that we can analyze to find out how far apart they are:</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[2]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span class="kn">import</span> <span class="nn">datetime</span>

<span class="n">dates</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10000000</span><span class="p">):</span>
    <span class="n">dates</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">())</span>
</pre></div>

</div>
</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Let's load them into Pandas so we can analyze them:</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[3]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">date_series</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">dates</span><span class="p">)</span>
</pre></div>

</div>
</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[4]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span class="n">date_series</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt output_prompt">Out[4]:</div>


<div class="output_text output_subarea output_execute_result">
<pre>0   2015-06-27 13:06:19.089816
1   2015-06-27 13:06:19.089816
2   2015-06-27 13:06:19.089816
3   2015-06-27 13:06:19.089816
4   2015-06-27 13:06:19.089816
dtype: datetime64[ns]</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[5]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span class="n">date_series</span><span class="o">.</span><span class="n">describe</span><span class="p">()</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt output_prompt">Out[5]:</div>


<div class="output_text output_subarea output_execute_result">
<pre>count                       10000000
unique                          9085
top       2015-06-27 13:06:24.066101
freq                            1221
first     2015-06-27 13:06:19.089816
last      2015-06-27 13:06:28.457352
dtype: object</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Let's remove all duplicates:</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[6]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span class="n">uniq_date_series</span> <span class="o">=</span> <span class="n">date_series</span><span class="o">.</span><span class="n">drop_duplicates</span><span class="p">()</span>
<span class="n">uniq_date_series</span><span class="o">.</span><span class="n">describe</span><span class="p">()</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt output_prompt">Out[6]:</div>


<div class="output_text output_subarea output_execute_result">
<pre>count                           9085
unique                          9085
top       2015-06-27 13:06:25.215166
freq                               1
first     2015-06-27 13:06:19.089816
last      2015-06-27 13:06:28.457352
dtype: object</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Now let's figure out the delta between all uniqe dates:</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[7]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span class="n">deltas</span> <span class="o">=</span> <span class="n">uniq_date_series</span> <span class="o">-</span> <span class="n">uniq_date_series</span><span class="o">.</span><span class="n">shift</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="n">deltas</span><span class="o">.</span><span class="n">describe</span><span class="p">()</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt output_prompt">Out[7]:</div>


<div class="output_text output_subarea output_execute_result">
<pre>count                      9084
mean     0 days 00:00:00.001031
std      0 days 00:00:00.000690
min      0 days 00:00:00.001000
25%      0 days 00:00:00.001000
50%      0 days 00:00:00.001000
75%      0 days 00:00:00.001000
max      0 days 00:00:00.033002
dtype: object</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>And the smallest delta is</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[8]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span class="n">deltas</span><span class="o">.</span><span class="n">min</span><span class="p">()</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt output_prompt">Out[8]:</div>


<div class="output_text output_subarea output_execute_result">
<pre>Timedelta(&apos;0 days 00:00:00.001000&apos;)</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>This means that the smallest increment between two consecutive dates is <strong>1ms</strong>. So we can not use the datetime on Windows to measure events that occur more frequently than 1ms.</p>
<p>And that is in the best case. This number will vary depending on how many other processes are running and what the Python code does in between two measurements.</p>

</div>
</div>
</div>

]]></description>
    <pubDate>Sat, 27 Jun 2015 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/python-datetime-precision/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>The danger with implicit if statements in Python</title>
    <link>http://rickardlindberg.me/writing/python-danger-implicit-if/</link>
    <description><![CDATA[<h1>The danger with implicit if statements in Python</h1>

<p><em>Published on  3 November 2014.</em></p>

<p>In Python we can put an expression in an if statement that is not a boolean. For example:</p>
<pre><code>a_list = [1, 2, 3]
if a_list:
    # do something</code></pre>
<p>The expression will evaluate to either true or false. Some examples of expressions that will evaluate to false:</p>
<ul>
<li><code>[]</code> (empty list)</li>
<li><code>""</code> (empty string)</li>
<li><code>0</code> (the number 0)</li>
<li><code>None</code> (the null value)</li>
</ul>
<p>Some examples of expressions that will evaluate to true:</p>
<ul>
<li><code>[1, 2]</code> (non-empty list)</li>
<li><code>"hello"</code> (non-empty string)</li>
<li><code>88</code> (the number 88)</li>
</ul>
<p>So if we are only interested in knowing if a value is truthy, we do not need to make an explicit comparison in the if statement. The above example with an explicit comparison would look like this:</p>
<pre><code>if a_list != []:
    # do something</code></pre>
<p>We can argue that the first example read better because there is less cruft in the expression, but there is one real danger in being implicit. Consider a function that returns either a number or None if no number could be returned. We want to run some code only if we get a number back:</p>
<pre><code>number = give_me_a_number()
if number:
    # do something</code></pre>
<p>This works fine for most numbers:</p>
<ul>
<li>1 -&gt; we do something (expected)</li>
<li>2 -&gt; we do something (expected)</li>
<li>None -&gt; we do not do something (expected)</li>
</ul>
<p>Except for:</p>
<ul>
<li>0 -&gt; we do not do something (not expected)</li>
</ul>
<p>The number 0 is a number, so we would like to do something with it. But on the other hand, the number 0 evaluates to false. So with an implicit check, it is not considered truthy, and we will not enter the if block. What we should have done instead was this:</p>
<pre><code>if number is not None:
    # do something</code></pre>
<p>I have made this mistake more than once, and I’m starting to think that explicit if statements should always be used except in special cases.</p>
]]></description>
    <pubDate>Mon, 03 Nov 2014 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/python-danger-implicit-if/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>

    </channel>
</rss>
