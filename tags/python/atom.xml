<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Rickard's personal homepage: latest posts tagged python</title>
    <link href="http://rickardlindberg.me/tags/python/atom.xml" rel="self" />
    <link href="http://rickardlindberg.me" />
    <id>http://rickardlindberg.me/tags/python/atom.xml</id>
    <author>
        <name>Rickard Lindberg</name>
        <email>ricli85@gmail.com</email>
    </author>
    <updated>2017-03-11T00:00:00Z</updated>
    <entry>
    <title>Bitten by Python generators</title>
    <link href="http://rickardlindberg.me/writing/bitten-by-python-generators/" />
    <id>http://rickardlindberg.me/writing/bitten-by-python-generators/</id>
    <published>2017-03-11T00:00:00Z</published>
    <updated>2017-03-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Bitten by Python generators</h1>

<p><em>Published on 11 March 2017.</em></p>

<p>Today I found a bug in a piece of Python code that I had written. The buggy code was the result of not taking into consideration how generators in Python work. It looked like this:</p>
<div class="sourceCode"><pre class="sourceCode python"><code class="sourceCode python"><span class="kw">def</span> main():
    <span class="cf">try</span>:
        logging.info(<span class="st">&quot;Processing items&quot;</span>)
        items <span class="op">=</span> get_the_items()
    <span class="cf">except</span>:
        logging.exception(<span class="st">&quot;Could not get items&quot;</span>)
    <span class="cf">else</span>:
        <span class="cf">for</span> item <span class="kw">in</span> items:
            process_item(item)</code></pre></div>
<p>Can you spot the error? What could possible go wrong with this code?</p>
<p>When I was debugging it, it was printing the info message, but did not log an exception. Execution continued in the else-clause, but suddenly an exception was raised when looping over the items (outside of <code>process_item</code>). How can that happen? The except-clause should catch all exceptions. And just iterating over a collection should not raise an exception.</p>
<p>The answer is that <code>get_the_items</code> returned a generator. It looked like this:</p>
<div class="sourceCode"><pre class="sourceCode python"><code class="sourceCode python"><span class="kw">def</span> get_the_items():
    <span class="cf">for</span> item <span class="kw">in</span> read_items_from_disk():
        <span class="cf">if</span> item.is_good():
            <span class="cf">yield</span> item</code></pre></div>
<p>The exception actually came from <code>read_items_from_disk</code>, but since this code creates a generator, it is not executed until the collection is accessed (which happened in the else-clause). So the exception was actually raised when starting looping over items.</p>
<h2 id="what-about-skipping-the-else-clause">What about skipping the else-clause?</h2>
<p>To ensure that an exception from the generator is caught, the <code>main</code> function could be written like this:</p>
<div class="sourceCode"><pre class="sourceCode python"><code class="sourceCode python"><span class="kw">def</span> main():
    <span class="cf">try</span>:
        logging.info(<span class="st">&quot;Processing items&quot;</span>)
        <span class="cf">for</span> item <span class="kw">in</span> get_the_items():
            process_item(item)
    <span class="cf">except</span>:
        logging.exception(<span class="st">&quot;Could not get items&quot;</span>)</code></pre></div>
<p>I don’t like this version because it also catches exceptions from <code>process_item</code>. I like the try-except-else syntax because it allows narrower exception regions in a nice looking way.</p>
<h2 id="why-did-i-use-a-generator">Why did I use a generator?</h2>
<p>I made <code>get_the_items</code> return a generator mainly because I thought it read better. The alternative I came up with looked like this:</p>
<div class="sourceCode"><pre class="sourceCode python"><code class="sourceCode python"><span class="kw">def</span> get_the_items():
    items <span class="op">=</span> []
    <span class="cf">for</span> item <span class="kw">in</span> read_items_from_disk():
        <span class="cf">if</span> item.is_good():
            items.append(item)
    <span class="cf">return</span> items</code></pre></div>
<p>I didn’t like the temporary <code>items</code> variable. And it is two lines longer than the generator version.</p>
<h2 id="what-about-list-comprehensions">What about list comprehensions?</h2>
<p>Another way to write <code>get_the_items</code>, avoiding the temporary variable, is to use list comprehensions. It would look like this:</p>
<div class="sourceCode"><pre class="sourceCode python"><code class="sourceCode python"><span class="kw">def</span> get_the_items():
    <span class="cf">return</span> [
        item
        <span class="cf">for</span> item <span class="kw">in</span> read_items_from_disk()
        <span class="cf">if</span> item.is_good()
    ]</code></pre></div>
<p>I find this code reads as good as the generator version (even though it is two lines longer). This is what I ended up using. But <code>get_the_items</code> was a bit more complicated than in the example, so I had to divide it into two list comprehensions.</p>
<h2 id="what-about-memory-consumption">What about memory consumption?</h2>
<p>One argument for using generators is that they consume less memory. The whole collection of items do not have to fit in memory at once, only the one currently being processed.</p>
<p>In my case I had already read all items into memory in a previous step. The <code>get_the_items</code> function was mainly used to transform and filter the items. So I would not have used much less memory by using generators. Also, my collections were small, so having them in memory was not a problem.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Generators have some nice properties that can be useful. However, after being bitten by them I now think they should only be used if those properties are absolutely needed. I will favor list comprehensions over generators if I can afford to keep the whole collection in memory.</p>
]]></summary>
</entry>
<entry>
    <title>Precision of datetime in Python</title>
    <link href="http://rickardlindberg.me/writing/python-datetime-precision/" />
    <id>http://rickardlindberg.me/writing/python-datetime-precision/</id>
    <published>2015-06-27T00:00:00Z</published>
    <updated>2015-06-27T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Precision of datetime in Python</h1>

<p><em>Published on 2015-06-27.</em></p>

<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>What is the precision of datetime in Python? The <a href="https://docs.python.org/3.4/library/datetime.html#datetime.datetime.now">documentation</a> says</p>
<blockquote><p>Return the current local date and time. If optional argument tz is None or not specified, this is like today(), but, if possible, supplies more precision than can be gotten from going through a time.time() timestamp (for example, this may be possible on platforms supplying the C gettimeofday() function).</p>
</blockquote>
<p>It goes on <a href="https://docs.python.org/3.4/library/time.html#time.time">further</a> to say</p>
<blockquote><p>Note that even though the time is always returned as a floating point number, not all systems provide time with a better precision than 1 second.</p>
</blockquote>
<p>So, the answer is that it depends.</p>
<p>Let's try to figure out what it looks like on Windows using Python 3.4. For reference:</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[1]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span class="kn">import</span> <span class="nn">sys</span>
<span class="nb">print</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">version</span><span class="p">)</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt"></div>
<div class="output_subarea output_stream output_stdout output_text">
<pre>3.4.3 (v3.4.3:9b73f1c3e601, Feb 24 2015, 22:44:40) [MSC v.1600 64 bit (AMD64)]
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Let's create a series of datetime objects that we can analyze to find out how far apart they are:</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[2]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span class="kn">import</span> <span class="nn">datetime</span>

<span class="n">dates</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10000000</span><span class="p">):</span>
    <span class="n">dates</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">())</span>
</pre></div>

</div>
</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Let's load them into Pandas so we can analyze them:</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[3]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>

<span class="n">date_series</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">dates</span><span class="p">)</span>
</pre></div>

</div>
</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[4]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span class="n">date_series</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt output_prompt">Out[4]:</div>


<div class="output_text output_subarea output_execute_result">
<pre>0   2015-06-27 13:06:19.089816
1   2015-06-27 13:06:19.089816
2   2015-06-27 13:06:19.089816
3   2015-06-27 13:06:19.089816
4   2015-06-27 13:06:19.089816
dtype: datetime64[ns]</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[5]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span class="n">date_series</span><span class="o">.</span><span class="n">describe</span><span class="p">()</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt output_prompt">Out[5]:</div>


<div class="output_text output_subarea output_execute_result">
<pre>count                       10000000
unique                          9085
top       2015-06-27 13:06:24.066101
freq                            1221
first     2015-06-27 13:06:19.089816
last      2015-06-27 13:06:28.457352
dtype: object</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Let's remove all duplicates:</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[6]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span class="n">uniq_date_series</span> <span class="o">=</span> <span class="n">date_series</span><span class="o">.</span><span class="n">drop_duplicates</span><span class="p">()</span>
<span class="n">uniq_date_series</span><span class="o">.</span><span class="n">describe</span><span class="p">()</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt output_prompt">Out[6]:</div>


<div class="output_text output_subarea output_execute_result">
<pre>count                           9085
unique                          9085
top       2015-06-27 13:06:25.215166
freq                               1
first     2015-06-27 13:06:19.089816
last      2015-06-27 13:06:28.457352
dtype: object</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Now let's figure out the delta between all uniqe dates:</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[7]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span class="n">deltas</span> <span class="o">=</span> <span class="n">uniq_date_series</span> <span class="o">-</span> <span class="n">uniq_date_series</span><span class="o">.</span><span class="n">shift</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="n">deltas</span><span class="o">.</span><span class="n">describe</span><span class="p">()</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt output_prompt">Out[7]:</div>


<div class="output_text output_subarea output_execute_result">
<pre>count                      9084
mean     0 days 00:00:00.001031
std      0 days 00:00:00.000690
min      0 days 00:00:00.001000
25%      0 days 00:00:00.001000
50%      0 days 00:00:00.001000
75%      0 days 00:00:00.001000
max      0 days 00:00:00.033002
dtype: object</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>And the smallest delta is</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[8]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span class="n">deltas</span><span class="o">.</span><span class="n">min</span><span class="p">()</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt output_prompt">Out[8]:</div>


<div class="output_text output_subarea output_execute_result">
<pre>Timedelta(&apos;0 days 00:00:00.001000&apos;)</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>This means that the smallest increment between two consecutive dates is <strong>1ms</strong>. So we can not use the datetime on Windows to measure events that occur more frequently than 1ms.</p>
<p>And that is in the best case. This number will vary depending on how many other processes are running and what the Python code does in between two measurements.</p>

</div>
</div>
</div>

]]></summary>
</entry>
<entry>
    <title>The danger with implicit if statements in Python</title>
    <link href="http://rickardlindberg.me/writing/python-danger-implicit-if/" />
    <id>http://rickardlindberg.me/writing/python-danger-implicit-if/</id>
    <published>2014-11-03T00:00:00Z</published>
    <updated>2014-11-03T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>The danger with implicit if statements in Python</h1>

<p><em>Published on  3 November 2014.</em></p>

<p>In Python we can put an expression in an if statement that is not a boolean. For example:</p>
<pre><code>a_list = [1, 2, 3]
if a_list:
    # do something</code></pre>
<p>The expression will evaluate to either true or false. Some examples of expressions that will evaluate to false:</p>
<ul>
<li><code>[]</code> (empty list)</li>
<li><code>&quot;&quot;</code> (empty string)</li>
<li><code>0</code> (the number 0)</li>
<li><code>None</code> (the null value)</li>
</ul>
<p>Some examples of expressions that will evaluate to true:</p>
<ul>
<li><code>[1, 2]</code> (non-empty list)</li>
<li><code>&quot;hello&quot;</code> (non-empty string)</li>
<li><code>88</code> (the number 88)</li>
</ul>
<p>So if we are only interested in knowing if a value is truthy, we do not need to make an explicit comparison in the if statement. The above example with an explicit comparison would look like this:</p>
<pre><code>if a_list != []:
    # do something</code></pre>
<p>We can argue that the first example read better because there is less cruft in the expression, but there is one real danger in being implicit. Consider a function that returns either a number or None if no number could be returned. We want to run some code only if we get a number back:</p>
<pre><code>number = give_me_a_number()
if number:
    # do something</code></pre>
<p>This works fine for most numbers:</p>
<ul>
<li>1 -&gt; we do something (expected)</li>
<li>2 -&gt; we do something (expected)</li>
<li>None -&gt; we do not do something (expected)</li>
</ul>
<p>Except for:</p>
<ul>
<li>0 -&gt; we do not do something (not expected)</li>
</ul>
<p>The number 0 is a number, so we would like to do something with it. But on the other hand, the number 0 evaluates to false. So with an implicit check, it is not considered truthy, and we will not enter the if block. What we should have done instead was this:</p>
<pre><code>if number is not None:
    # do something</code></pre>
<p>I have made this mistake more than once, and I’m starting to think that explicit if statements should always be used except in special cases.</p>
]]></summary>
</entry>

</feed>
