<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Rickard's personal homepage: latest posts tagged oop</title>
    <link href="http://rickardlindberg.me/tags/oop/atom.xml" rel="self" />
    <link href="http://rickardlindberg.me" />
    <id>http://rickardlindberg.me/tags/oop/atom.xml</id>
    <author>
        <name>Rickard Lindberg</name>
        <email>rickard@rickardlindberg.me</email>
    </author>
    <updated>2024-05-02T00:00:00Z</updated>
    <entry>
    <title>Refactoring a function to 6 classes</title>
    <link href="http://rickardlindberg.me/writing/function-to-oop-refactoring/" />
    <id>http://rickardlindberg.me/writing/function-to-oop-refactoring/</id>
    <published>2024-05-02T00:00:00Z</published>
    <updated>2024-05-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Refactoring a function to 6 classes</h1>

<p><em>Published on  2 May 2024.</em></p>

<p>I made a video where I show how I refactor a single function, that does many things, to 6 classes that each does a single thing.</p>
<center>
<iframe width="560" height="315" src="https://www.youtube.com/embed/rubTUD0EdME" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write;
encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen>
</iframe>
</center>
<p>The resulting design is more object oriented.</p>
<p>I don’t want to argue which is better, but instead show you what an object oriented design can look like, because I feel like those examples are rare.</p>
<p>The example I’m refactoring is a function that returns the next version number given a set of existing versions numbers stored as git tags.</p>
<p>In the first example, we ask for the next release version in the 1.0 series given that no tags exist. We get the default version 1.0.0.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> nextversion(series<span class="op">=</span><span class="st">&quot;1.0&quot;</span>, pre_release<span class="op">=</span><span class="va">False</span>, tags<span class="op">=</span>[])</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a><span class="co">&#39;1.0.0&#39;</span></span></code></pre></div>
<p>In the second example, version 1.0.0 already exists, and we therefore get version 1.0.1.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> nextversion(series<span class="op">=</span><span class="st">&quot;1.0&quot;</span>, pre_release<span class="op">=</span><span class="va">False</span>, tags<span class="op">=</span>[<span class="st">&#39;1.0.0&#39;</span>])</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a><span class="co">&#39;1.0.1&#39;</span></span></code></pre></div>
<p>In the third example we ask for the next pre-release version. The next release version would be 1.0.2, and so the first pre-release version of that release is 1.0.2-1.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> nextversion(series<span class="op">=</span><span class="st">&quot;1.0&quot;</span>, pre_release<span class="op">=</span><span class="va">True</span>, tags<span class="op">=</span>[<span class="st">&#39;1.0.0&#39;</span>, <span class="st">&#39;1.0.1&#39;</span>])</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a><span class="co">&#39;1.0.2-1&#39;</span></span></code></pre></div>
<p>In the fourth example, pre-release 3 already exists, so the next pre-release is 1.0.2-4.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> nextversion(series<span class="op">=</span><span class="st">&quot;1.0&quot;</span>, pre_release<span class="op">=</span><span class="va">True</span>, tags<span class="op">=</span>[<span class="st">&#39;1.0.0&#39;</span>, <span class="st">&#39;1.0.1&#39;</span>, <span class="st">&#39;1.0.2-3&#39;</span>])</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a><span class="co">&#39;1.0.2-4&#39;</span></span></code></pre></div>
<p>The initial function looks like this:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="kw">def</span> nextversion(series, pre_release, tags):</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a>    version_pattern <span class="op">=</span> <span class="st">&quot;&quot;</span>.join([</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a>        <span class="vs">r&quot;^&quot;</span>,</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true"></a>        re.escape(series),</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true"></a>        re.escape(<span class="st">&quot;.&quot;</span>),</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true"></a>        <span class="vs">r&quot;(?P&lt;version&gt;\d+)&quot;</span>,</span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true"></a>        <span class="vs">r&quot;(?P&lt;pre_release&gt;-(?P&lt;pre_release_number&gt;(\d+)))?&quot;</span>,</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true"></a>        <span class="vs">r&quot;$&quot;</span>,</span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true"></a>    ])</span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true"></a>    versions <span class="op">=</span> []</span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true"></a>    pre_release_numbers <span class="op">=</span> {}</span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true"></a>    <span class="cf">for</span> tag <span class="kw">in</span> tags:</span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true"></a>        match <span class="op">=</span> re.match(version_pattern, tag)</span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true"></a>        <span class="cf">if</span> match:</span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true"></a>            version <span class="op">=</span> <span class="bu">int</span>(match[<span class="st">&quot;version&quot;</span>])</span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true"></a>            <span class="cf">if</span> match[<span class="st">&quot;pre_release&quot;</span>]:</span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true"></a>                <span class="cf">if</span> version <span class="kw">not</span> <span class="kw">in</span> pre_release_numbers:</span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true"></a>                    pre_release_numbers[version] <span class="op">=</span> []</span>
<span id="cb5-19"><a href="#cb5-19" aria-hidden="true"></a>                pre_release_numbers[version].append(<span class="bu">int</span>(match[<span class="st">&quot;pre_release_number&quot;</span>]))</span>
<span id="cb5-20"><a href="#cb5-20" aria-hidden="true"></a>            <span class="cf">else</span>:</span>
<span id="cb5-21"><a href="#cb5-21" aria-hidden="true"></a>                versions.append(version)</span>
<span id="cb5-22"><a href="#cb5-22" aria-hidden="true"></a>    next_version <span class="op">=</span> <span class="bu">max</span>(</span>
<span id="cb5-23"><a href="#cb5-23" aria-hidden="true"></a>        [<span class="dv">0</span>]</span>
<span id="cb5-24"><a href="#cb5-24" aria-hidden="true"></a>        <span class="op">+</span></span>
<span id="cb5-25"><a href="#cb5-25" aria-hidden="true"></a>        [<span class="dv">1</span><span class="op">+</span>version <span class="cf">for</span> version <span class="kw">in</span> versions]</span>
<span id="cb5-26"><a href="#cb5-26" aria-hidden="true"></a>        <span class="op">+</span></span>
<span id="cb5-27"><a href="#cb5-27" aria-hidden="true"></a>        <span class="bu">list</span>(pre_release_numbers.keys())</span>
<span id="cb5-28"><a href="#cb5-28" aria-hidden="true"></a>    )</span>
<span id="cb5-29"><a href="#cb5-29" aria-hidden="true"></a>    next_pre_release_number <span class="op">=</span> <span class="dv">1</span> <span class="op">+</span> <span class="bu">max</span>(pre_release_numbers.get(next_version, [<span class="dv">0</span>]))</span>
<span id="cb5-30"><a href="#cb5-30" aria-hidden="true"></a>    <span class="cf">if</span> pre_release:</span>
<span id="cb5-31"><a href="#cb5-31" aria-hidden="true"></a>        <span class="cf">return</span> <span class="ss">f&quot;</span><span class="sc">{</span>series<span class="sc">}</span><span class="ss">.</span><span class="sc">{</span>next_version<span class="sc">}</span><span class="ss">-</span><span class="sc">{</span>next_pre_release_number<span class="sc">}</span><span class="ss">&quot;</span></span>
<span id="cb5-32"><a href="#cb5-32" aria-hidden="true"></a>    <span class="cf">else</span>:</span>
<span id="cb5-33"><a href="#cb5-33" aria-hidden="true"></a>        <span class="cf">return</span> <span class="ss">f&quot;</span><span class="sc">{</span>series<span class="sc">}</span><span class="ss">.</span><span class="sc">{</span>next_version<span class="sc">}</span><span class="ss">&quot;</span></span></code></pre></div>
<p>I refactor it to this:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="kw">def</span> nextversion(series, pre_release, tags):</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a>    <span class="cf">return</span> Tags(tags).get_next_version(series, pre_release)</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true"></a><span class="kw">class</span> Tags:</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true"></a></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, tags):</span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true"></a>        <span class="va">self</span>.tags <span class="op">=</span> tags</span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true"></a></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true"></a>    <span class="kw">def</span> get_next_version(<span class="va">self</span>, series, pre_release):</span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true"></a>        series <span class="op">=</span> Series(series)</span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true"></a>        versions <span class="op">=</span> Versions()</span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true"></a>        <span class="cf">for</span> tag <span class="kw">in</span> <span class="va">self</span>.tags:</span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true"></a>            series.parse_version(tag).add_to(versions)</span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true"></a>        <span class="cf">return</span> versions.get_next_version(pre_release).<span class="bu">format</span>(series)</span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true"></a></span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true"></a><span class="kw">class</span> Release:</span>
<span id="cb6-17"><a href="#cb6-17" aria-hidden="true"></a></span>
<span id="cb6-18"><a href="#cb6-18" aria-hidden="true"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, version):</span>
<span id="cb6-19"><a href="#cb6-19" aria-hidden="true"></a>        <span class="va">self</span>.version <span class="op">=</span> version</span>
<span id="cb6-20"><a href="#cb6-20" aria-hidden="true"></a></span>
<span id="cb6-21"><a href="#cb6-21" aria-hidden="true"></a>    <span class="kw">def</span> add_to(<span class="va">self</span>, versions):</span>
<span id="cb6-22"><a href="#cb6-22" aria-hidden="true"></a>        versions.add_release(<span class="va">self</span>.version)</span>
<span id="cb6-23"><a href="#cb6-23" aria-hidden="true"></a></span>
<span id="cb6-24"><a href="#cb6-24" aria-hidden="true"></a>    <span class="kw">def</span> <span class="bu">format</span>(<span class="va">self</span>, series):</span>
<span id="cb6-25"><a href="#cb6-25" aria-hidden="true"></a>        <span class="cf">return</span> series.format_release(<span class="va">self</span>.version)</span>
<span id="cb6-26"><a href="#cb6-26" aria-hidden="true"></a></span>
<span id="cb6-27"><a href="#cb6-27" aria-hidden="true"></a><span class="kw">class</span> PreRelease:</span>
<span id="cb6-28"><a href="#cb6-28" aria-hidden="true"></a></span>
<span id="cb6-29"><a href="#cb6-29" aria-hidden="true"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, version, pre_release_number):</span>
<span id="cb6-30"><a href="#cb6-30" aria-hidden="true"></a>        <span class="va">self</span>.version <span class="op">=</span> version</span>
<span id="cb6-31"><a href="#cb6-31" aria-hidden="true"></a>        <span class="va">self</span>.pre_release_number <span class="op">=</span> pre_release_number</span>
<span id="cb6-32"><a href="#cb6-32" aria-hidden="true"></a></span>
<span id="cb6-33"><a href="#cb6-33" aria-hidden="true"></a>    <span class="kw">def</span> add_to(<span class="va">self</span>, versions):</span>
<span id="cb6-34"><a href="#cb6-34" aria-hidden="true"></a>        versions.add_pre_release(<span class="va">self</span>.version, <span class="va">self</span>.pre_release_number)</span>
<span id="cb6-35"><a href="#cb6-35" aria-hidden="true"></a></span>
<span id="cb6-36"><a href="#cb6-36" aria-hidden="true"></a>    <span class="kw">def</span> <span class="bu">format</span>(<span class="va">self</span>, series):</span>
<span id="cb6-37"><a href="#cb6-37" aria-hidden="true"></a>        <span class="cf">return</span> series.format_pre_release(<span class="va">self</span>.version, <span class="va">self</span>.pre_release_number)</span>
<span id="cb6-38"><a href="#cb6-38" aria-hidden="true"></a></span>
<span id="cb6-39"><a href="#cb6-39" aria-hidden="true"></a><span class="kw">class</span> NoMatchVersion:</span>
<span id="cb6-40"><a href="#cb6-40" aria-hidden="true"></a></span>
<span id="cb6-41"><a href="#cb6-41" aria-hidden="true"></a>    <span class="kw">def</span> add_to(<span class="va">self</span>, versions):</span>
<span id="cb6-42"><a href="#cb6-42" aria-hidden="true"></a>        <span class="cf">pass</span></span>
<span id="cb6-43"><a href="#cb6-43" aria-hidden="true"></a></span>
<span id="cb6-44"><a href="#cb6-44" aria-hidden="true"></a><span class="kw">class</span> Versions:</span>
<span id="cb6-45"><a href="#cb6-45" aria-hidden="true"></a></span>
<span id="cb6-46"><a href="#cb6-46" aria-hidden="true"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>):</span>
<span id="cb6-47"><a href="#cb6-47" aria-hidden="true"></a>        <span class="va">self</span>.versions <span class="op">=</span> []</span>
<span id="cb6-48"><a href="#cb6-48" aria-hidden="true"></a>        <span class="va">self</span>.pre_release_numbers <span class="op">=</span> {}</span>
<span id="cb6-49"><a href="#cb6-49" aria-hidden="true"></a></span>
<span id="cb6-50"><a href="#cb6-50" aria-hidden="true"></a>    <span class="kw">def</span> add_release(<span class="va">self</span>, version):</span>
<span id="cb6-51"><a href="#cb6-51" aria-hidden="true"></a>        <span class="va">self</span>.versions.append(version)</span>
<span id="cb6-52"><a href="#cb6-52" aria-hidden="true"></a></span>
<span id="cb6-53"><a href="#cb6-53" aria-hidden="true"></a>    <span class="kw">def</span> add_pre_release(<span class="va">self</span>, version, pre_release_number):</span>
<span id="cb6-54"><a href="#cb6-54" aria-hidden="true"></a>        <span class="cf">if</span> version <span class="kw">not</span> <span class="kw">in</span> <span class="va">self</span>.pre_release_numbers:</span>
<span id="cb6-55"><a href="#cb6-55" aria-hidden="true"></a>            <span class="va">self</span>.pre_release_numbers[version] <span class="op">=</span> []</span>
<span id="cb6-56"><a href="#cb6-56" aria-hidden="true"></a>        <span class="va">self</span>.pre_release_numbers[version].append(pre_release_number)</span>
<span id="cb6-57"><a href="#cb6-57" aria-hidden="true"></a></span>
<span id="cb6-58"><a href="#cb6-58" aria-hidden="true"></a>    <span class="kw">def</span> get_next_version(<span class="va">self</span>, pre_release):</span>
<span id="cb6-59"><a href="#cb6-59" aria-hidden="true"></a>        next_version <span class="op">=</span> <span class="bu">max</span>(</span>
<span id="cb6-60"><a href="#cb6-60" aria-hidden="true"></a>            [<span class="dv">0</span>]</span>
<span id="cb6-61"><a href="#cb6-61" aria-hidden="true"></a>            <span class="op">+</span></span>
<span id="cb6-62"><a href="#cb6-62" aria-hidden="true"></a>            [<span class="dv">1</span><span class="op">+</span>version <span class="cf">for</span> version <span class="kw">in</span> <span class="va">self</span>.versions]</span>
<span id="cb6-63"><a href="#cb6-63" aria-hidden="true"></a>            <span class="op">+</span></span>
<span id="cb6-64"><a href="#cb6-64" aria-hidden="true"></a>            <span class="bu">list</span>(<span class="va">self</span>.pre_release_numbers.keys())</span>
<span id="cb6-65"><a href="#cb6-65" aria-hidden="true"></a>        )</span>
<span id="cb6-66"><a href="#cb6-66" aria-hidden="true"></a>        next_pre_release_number <span class="op">=</span> <span class="dv">1</span> <span class="op">+</span> <span class="bu">max</span>(<span class="va">self</span>.pre_release_numbers.get(next_version, [<span class="dv">0</span>]))</span>
<span id="cb6-67"><a href="#cb6-67" aria-hidden="true"></a>        <span class="cf">if</span> pre_release:</span>
<span id="cb6-68"><a href="#cb6-68" aria-hidden="true"></a>            <span class="cf">return</span> PreRelease(next_version, next_pre_release_number)</span>
<span id="cb6-69"><a href="#cb6-69" aria-hidden="true"></a>        <span class="cf">else</span>:</span>
<span id="cb6-70"><a href="#cb6-70" aria-hidden="true"></a>            <span class="cf">return</span> Release(next_version)</span>
<span id="cb6-71"><a href="#cb6-71" aria-hidden="true"></a></span>
<span id="cb6-72"><a href="#cb6-72" aria-hidden="true"></a><span class="kw">class</span> Series:</span>
<span id="cb6-73"><a href="#cb6-73" aria-hidden="true"></a></span>
<span id="cb6-74"><a href="#cb6-74" aria-hidden="true"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, series):</span>
<span id="cb6-75"><a href="#cb6-75" aria-hidden="true"></a>        <span class="va">self</span>.series <span class="op">=</span> series</span>
<span id="cb6-76"><a href="#cb6-76" aria-hidden="true"></a>        <span class="va">self</span>.version_pattern <span class="op">=</span> <span class="st">&quot;&quot;</span>.join([</span>
<span id="cb6-77"><a href="#cb6-77" aria-hidden="true"></a>            <span class="vs">r&quot;^&quot;</span>,</span>
<span id="cb6-78"><a href="#cb6-78" aria-hidden="true"></a>            re.escape(series),</span>
<span id="cb6-79"><a href="#cb6-79" aria-hidden="true"></a>            re.escape(<span class="st">&quot;.&quot;</span>),</span>
<span id="cb6-80"><a href="#cb6-80" aria-hidden="true"></a>            <span class="vs">r&quot;(?P&lt;version&gt;\d+)&quot;</span>,</span>
<span id="cb6-81"><a href="#cb6-81" aria-hidden="true"></a>            <span class="vs">r&quot;(?P&lt;pre_release&gt;-(?P&lt;pre_release_number&gt;(\d+)))?&quot;</span>,</span>
<span id="cb6-82"><a href="#cb6-82" aria-hidden="true"></a>            <span class="vs">r&quot;$&quot;</span>,</span>
<span id="cb6-83"><a href="#cb6-83" aria-hidden="true"></a>        ])</span>
<span id="cb6-84"><a href="#cb6-84" aria-hidden="true"></a></span>
<span id="cb6-85"><a href="#cb6-85" aria-hidden="true"></a>    <span class="kw">def</span> parse_version(<span class="va">self</span>, tag):</span>
<span id="cb6-86"><a href="#cb6-86" aria-hidden="true"></a>        match <span class="op">=</span> re.match(<span class="va">self</span>.version_pattern, tag)</span>
<span id="cb6-87"><a href="#cb6-87" aria-hidden="true"></a>        <span class="cf">if</span> match:</span>
<span id="cb6-88"><a href="#cb6-88" aria-hidden="true"></a>            version <span class="op">=</span> <span class="bu">int</span>(match[<span class="st">&quot;version&quot;</span>])</span>
<span id="cb6-89"><a href="#cb6-89" aria-hidden="true"></a>            <span class="cf">if</span> match[<span class="st">&quot;pre_release&quot;</span>]:</span>
<span id="cb6-90"><a href="#cb6-90" aria-hidden="true"></a>                <span class="cf">return</span> PreRelease(version, <span class="bu">int</span>(match[<span class="st">&quot;pre_release_number&quot;</span>]))</span>
<span id="cb6-91"><a href="#cb6-91" aria-hidden="true"></a>            <span class="cf">else</span>:</span>
<span id="cb6-92"><a href="#cb6-92" aria-hidden="true"></a>                <span class="cf">return</span> Release(version)</span>
<span id="cb6-93"><a href="#cb6-93" aria-hidden="true"></a>        <span class="cf">return</span> NoMatchVersion()</span>
<span id="cb6-94"><a href="#cb6-94" aria-hidden="true"></a></span>
<span id="cb6-95"><a href="#cb6-95" aria-hidden="true"></a>    <span class="kw">def</span> format_release(<span class="va">self</span>, version):</span>
<span id="cb6-96"><a href="#cb6-96" aria-hidden="true"></a>        <span class="cf">return</span> <span class="ss">f&quot;</span><span class="sc">{</span><span class="va">self</span><span class="sc">.</span>series<span class="sc">}</span><span class="ss">.</span><span class="sc">{</span>version<span class="sc">}</span><span class="ss">&quot;</span></span>
<span id="cb6-97"><a href="#cb6-97" aria-hidden="true"></a></span>
<span id="cb6-98"><a href="#cb6-98" aria-hidden="true"></a>    <span class="kw">def</span> format_pre_release(<span class="va">self</span>, version, pre_release_number):</span>
<span id="cb6-99"><a href="#cb6-99" aria-hidden="true"></a>        <span class="cf">return</span> <span class="ss">f&quot;</span><span class="sc">{</span><span class="va">self</span><span class="sc">.</span>series<span class="sc">}</span><span class="ss">.</span><span class="sc">{</span>version<span class="sc">}</span><span class="ss">-</span><span class="sc">{</span>pre_release_number<span class="sc">}</span><span class="ss">&quot;</span></span></code></pre></div>
]]></summary>
</entry>

</feed>
