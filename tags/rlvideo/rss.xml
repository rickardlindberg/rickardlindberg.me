<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>Rickard's personal homepage: latest posts tagged rlvideo</title>
        <link>http://rickardlindberg.me</link>
        <description><![CDATA[Rickard's personal homepage: latest posts tagged rlvideo]]></description>
        <atom:link href="http://rickardlindberg.me/tags/rlvideo/rss.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Wed, 23 Aug 2023 00:00:00 UT</lastBuildDate>
        <item>
    <title>DevLog 012: Investigating export crash</title>
    <link>http://rickardlindberg.me/writing/devlog-012-investigating-export-crash/</link>
    <description><![CDATA[<h1>DevLog 012: Investigating export crash</h1>

<p><em>Published on 23 August 2023.</em></p>

<p>I have managed to edit some footage using my own <a href="/projects/rlvideo/index.html">video editor</a>. When I tried to export it, it took forever and eventually crashed. In this DevLog, we will investigate why that might be.</p>
<h2 id="how-export-works">How export works</h2>
<p>When we press the export button, the following code is run:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="kw">class</span> Project:</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>    ...</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a>    <span class="kw">def</span> export(<span class="va">self</span>):</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a>        path <span class="op">=</span> <span class="st">&quot;export.mp4&quot;</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a>        producer <span class="op">=</span> <span class="va">self</span>.split_into_sections().to_mlt_producer(</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true"></a>            profile<span class="op">=</span><span class="va">self</span>.profile,</span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true"></a>            cache<span class="op">=</span>ExportSourceLoader(profile<span class="op">=</span><span class="va">self</span>.profile, project<span class="op">=</span><span class="va">self</span>)</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true"></a>        )</span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true"></a>        <span class="kw">def</span> work(progress):</span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true"></a>            consumer <span class="op">=</span> mlt.Consumer(<span class="va">self</span>.profile, <span class="st">&quot;avformat&quot;</span>)</span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true"></a>            consumer.<span class="bu">set</span>(<span class="st">&quot;target&quot;</span>, path)</span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true"></a>            consumer.<span class="ex">connect</span>(producer)</span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true"></a>            consumer.start()</span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true"></a>            <span class="cf">while</span> consumer.is_stopped() <span class="op">==</span> <span class="dv">0</span>:</span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true"></a>                progress(producer.position()<span class="op">/</span>producer.get_playtime())</span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true"></a>                time.sleep(<span class="fl">0.5</span>)</span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true"></a>        <span class="va">self</span>.background_worker.add(</span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true"></a>            <span class="ss">f&quot;Exporting </span><span class="sc">{</span>path<span class="sc">}</span><span class="ss">&quot;</span>,</span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true"></a>            <span class="kw">lambda</span> result: <span class="va">None</span>,</span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true"></a>            work,</span>
<span id="cb1-23"><a href="#cb1-23" aria-hidden="true"></a>        )</span></code></pre></div>
<p>It creates an MLT producer with the real clips, and not the proxy clips. The <code>work</code> function is called in a thread, and this code does the actual export:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a>consumer <span class="op">=</span> mlt.Consumer(<span class="va">self</span>.profile, <span class="st">&quot;avformat&quot;</span>)</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a>consumer.<span class="bu">set</span>(<span class="st">&quot;target&quot;</span>, path)</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a>consumer.<span class="ex">connect</span>(producer)</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a>consumer.start()</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a><span class="cf">while</span> consumer.is_stopped() <span class="op">==</span> <span class="dv">0</span>:</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a>    progress(producer.position()<span class="op">/</span>producer.get_playtime())</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a>    time.sleep(<span class="fl">0.5</span>)</span></code></pre></div>
<p>As I remember, this is the code that takes forever and eventually crash. I also think its memory consumption steadily increase.</p>
<h2 id="way-forward">Way forward</h2>
<p>There is not much Python code in here. Just the loop that queries the consumer. So my guess is that something in MLT consumes memory and eventually crashes. We had a similar problem, I think, before when we created proxies using MLT in this way. On the other hand, it seems unlikely that MLT would crash when exporting a “small” project.</p>
<p>What I want to try today is to export my project as an MLT XML file and try to render it using melt. It should do roughly the same thing as my Python code, but will avoid using the Python binding for MLT.</p>
<p>If there is something wrong with MLT, which I doubt, the export will fail here as well. If not, well, then I don’t know what is wrong, but we can at least rule out MLT (core).</p>
<h2 id="the-test">The test</h2>
<p>We have this code that enables us to export MLT XML:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="cf">if</span> sys.argv[<span class="dv">1</span>:<span class="dv">2</span>] <span class="op">==</span> [<span class="st">&quot;--export-melt&quot;</span>]:</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a>    path <span class="op">=</span> sys.argv[<span class="dv">2</span>]</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a>    <span class="bu">print</span>(<span class="ss">f&quot;Exporting </span><span class="sc">{</span>path<span class="sc">}</span><span class="ss">&quot;</span>)</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a>    project <span class="op">=</span> Project.load(args<span class="op">=</span>sys.argv[<span class="dv">3</span>:])</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a>    consumer <span class="op">=</span> mlt.Consumer(project.profile, <span class="st">&quot;xml&quot;</span>)</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true"></a>    consumer.<span class="bu">set</span>(<span class="st">&quot;resource&quot;</span>, path)</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true"></a>    consumer.<span class="ex">connect</span>(project.get_preview_mlt_producer())</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true"></a>    consumer.start()</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true"></a>    <span class="cf">while</span> consumer.is_stopped() <span class="op">==</span> <span class="dv">0</span>:</span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true"></a>        time.sleep(<span class="fl">0.5</span>)</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true"></a>    <span class="bu">print</span>(<span class="st">&quot;Done&quot;</span>)</span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true"></a>    <span class="cf">return</span></span></code></pre></div>
<p>However, it creates the preview MLT producer which uses the proxy clips.</p>
<p>Since this is just a test, not intended to be committed, I modify this code to instead create an MLT producer with the real clips.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="im">from</span> rlvideolib.domain.project <span class="im">import</span> ExportSourceLoader</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a>producer <span class="op">=</span> project.split_into_sections().to_mlt_producer(</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a>    profile<span class="op">=</span>project.profile,</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a>    cache<span class="op">=</span>ExportSourceLoader(profile<span class="op">=</span>project.profile, project<span class="op">=</span>project)</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true"></a>)</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true"></a>consumer.<span class="ex">connect</span>(producer)</span></code></pre></div>
<p>Now we can export the XML like this:</p>
<pre class="text"><code>$ rlvideo --export-melt test.xml devlog-009.rlvideo 
Exporting test.xml
...
Done</code></pre>
<p>I verify that the XML file has references to the real clips. It does. Perfect!</p>
<p>We can now do the equivalent export with this command:</p>
<pre class="text"><code>mlt-melt test.xml -consumer avformat target=export.mp4</code></pre>
<p>And now, it’s just to wait and see what happens.</p>
<h2 id="a-few-minutes-later">A few minutes later</h2>
<p>The memory consumption seems to be quite stable. Unless there is a memory leak, this is what I expect. If the memory consumption keeps increasing for every frame that is exported, that would mean that you can only export longer videos by getting more memory. That does not seem right.</p>
<p>I should probably also verify that the export in the application keeps increasing memory consumption. If it does, then there might be a memory leak in the Python binding for MLT. Or I might use the binding incorrectly.</p>
<p>Using threads (which is used in the export) has also been problematic. I’ve experienced that the Python threads interfere with the MLT threads. I’m don’t understand the problem fully, it’s just a feeling. So that might be something to look into. Try the export with threading disabled.</p>
<h2 id="a-few-hours-later">A few hours later</h2>
<p>I might have mistaken. The memory consumption seems to keep increasing. However, the export finish without crashing and the final result looks fine.</p>
<h2 id="summary">Summary</h2>
<p>It seems that MLT consumes more and more memory the longer the exported video. To confirm this, I should probably do some more precise measures. Maybe using something like <a href="https://github.com/astrofrog/psrecord">psrecord</a>? However, memory consumption might not be problematic in itself. Perhaps it allocates more memory to speed things up, but will not allocated more than what is available. Perhaps the crash that I experienced before was not related to memory.</p>
<p>We have learned something today, and this knowledge will make us better prepared for the future.</p>
<p>Here are a few things I think of as possible next steps in this area:</p>
<ul>
<li>Measure memory consumption properly</li>
<li>Compare memory consumption from MLT and rlvideo</li>
<li>Try disabling threading in rlvideo</li>
<li>“Optimize” the generated producer. It has many unnecessary tracks which I think will slow rendering down. (Should measure this to confirm.)</li>
</ul>
<p>We’ll see if we work on any of these the next time or something else.</p>
]]></description>
    <pubDate>Wed, 23 Aug 2023 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/devlog-012-investigating-export-crash/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>DevLog 011: Modifying cut out point</title>
    <link>http://rickardlindberg.me/writing/devlog-011-modifying-cut-out-point/</link>
    <description><![CDATA[<h1>DevLog 011: Modifying cut out point</h1>

<p><em>Published on  6 August 2023.</em></p>

<p>I’ve added a few more timeline edit operations to the <a href="/projects/rlvideo/index.html">video editor</a>. For example, it is now possible to change the speed of a cut with ctrl+drag on the right hand side and modify the in point with drag on the left hand side.</p>
<p>
<center>
<img src="move-right.png" title="fig:" alt="Move right." />
</center>
</p>
<p>However, changing the out point of a cut by dragging the right hand side does not yet work. It prints the following in the console:</p>
<pre class="text"><code>TODO: implement move_right!</code></pre>
<p>It is a bit trickier to get working than changing the in point as we will see in a second.</p>
<h2 id="the-call-chain">The call chain</h2>
<p>Here is roughly what happens when you drag the right hand side of a cut:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a>transaction <span class="op">=</span> project.new_transaction()</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a>transaction.modify(cut_id, <span class="kw">lambda</span> cut: cut.move_right(delta))</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a>transaction.commit()</span></code></pre></div>
<p>Here is <code>Transaction.modify</code>:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="kw">def</span> modify(<span class="va">self</span>, cut_id, fn):</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a>    <span class="va">self</span>.project.set_project_data(<span class="va">self</span>.project.project_data.modify_cut(cut_id, fn))</span></code></pre></div>
<p>Here is <code>ProjectData.modify_cut</code>:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="kw">def</span> modify_cut(<span class="va">self</span>, cut_id, fn):</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a>    <span class="cf">return</span> <span class="va">self</span>._replace(cuts<span class="op">=</span><span class="va">self</span>.cuts.modify(cut_id, fn))</span></code></pre></div>
<p>Here is <code>Cuts.modify</code>:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="kw">def</span> modify(<span class="va">self</span>, cut_id, fn):</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a>    ...</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a>    old_cut <span class="op">=</span> <span class="va">self</span>.cut_map[cut_id]</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true"></a>    new_cut <span class="op">=</span> fn(old_cut)</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true"></a>    new_cuts <span class="op">=</span> <span class="bu">dict</span>(<span class="va">self</span>.cut_map)</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true"></a>    new_cuts[cut_id] <span class="op">=</span> new_cut</span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true"></a>    <span class="cf">return</span> <span class="va">self</span>._replace(</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true"></a>        cut_map<span class="op">=</span>new_cuts,</span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true"></a>        region_to_cuts<span class="op">=</span>...,</span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true"></a>    )</span></code></pre></div>
<p>And it is here that the lambda gets called to modify the cut.</p>
<p>The problem is that when we modify the out point, we can’t place it outside the length of the source. And the cut itself does not know how long the source is. It just has a source id where it can be looked up, but only in the <code>ProjectData</code> structure, which is two levels above.</p>
<h2 id="data-structure-consistency">Data structure consistency</h2>
<p>Let’s have a look at the data structures and what they contain:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="kw">class</span> ProjectData(namedtuple(<span class="st">&quot;ProjectData&quot;</span>, <span class="st">&quot;sources,cuts&quot;</span>)):</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a><span class="kw">class</span> Sources(namedtuple(<span class="st">&quot;Sources&quot;</span>, <span class="st">&quot;id_to_source&quot;</span>)):</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a><span class="kw">class</span> FileSource(namedtuple(<span class="st">&quot;FileSource&quot;</span>, <span class="st">&quot;id,path,length&quot;</span>)):</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true"></a><span class="kw">class</span> TextSource(namedtuple(<span class="st">&quot;TextSource&quot;</span>, <span class="st">&quot;id,text&quot;</span>)):</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true"></a><span class="kw">class</span> Cuts(namedtuple(<span class="st">&quot;Cuts&quot;</span>, <span class="st">&quot;cut_map,region_to_cuts,region_group_size&quot;</span>)):</span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true"></a><span class="kw">class</span> Cut(namedtuple(<span class="st">&quot;Cut&quot;</span>, <span class="st">&quot;source,in_out,position,id,mix_strategy,volume,speed&quot;</span>)):</span></code></pre></div>
<p>Put in a more hierarchical format:</p>
<ul>
<li>ProjectData
<ul>
<li>sources (Sources)</li>
<li>cuts (Cuts)</li>
</ul></li>
<li>Sources
<ul>
<li>id_to_source (id -&gt; source)</li>
</ul></li>
<li>Source
<ul>
<li>FileSource</li>
<li>TextSource</li>
</ul></li>
<li>Cuts
<ul>
<li>cut_map (id -&gt; Cut)</li>
<li>region_to_cuts</li>
<li>region_group_size</li>
</ul></li>
<li>Cut
<ul>
<li>source (id)</li>
<li>in_out</li>
<li>position</li>
<li>id</li>
<li>mix_strategy</li>
<li>volume</li>
<li>speed</li>
</ul></li>
</ul>
<p>To make sure that a cut’s out point does not exceed the length of the source, we have to make the check in ProjectData since that is the only structure that has both the source information and the cut information.</p>
<h2 id="modify-cut">Modify cut</h2>
<p>Let’s have a look at <code>ProjectData.modify_cut</code> again:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a><span class="kw">def</span> modify_cut(<span class="va">self</span>, cut_id, fn):</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a>    <span class="cf">return</span> <span class="va">self</span>._replace(cuts<span class="op">=</span><span class="va">self</span>.cuts.modify(cut_id, fn))</span></code></pre></div>
<p>How about if we did something like this:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a><span class="kw">def</span> modify_cut(<span class="va">self</span>, cut_id, fn):</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true"></a>    <span class="kw">def</span> wrapper(cut):</span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true"></a>        <span class="cf">return</span> <span class="va">self</span>.sources.get(cut.source).limit_out_point(fn(cut))</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true"></a>    <span class="cf">return</span> <span class="va">self</span>._replace(cuts<span class="op">=</span><span class="va">self</span>.cuts.modify(cut_id, wrapper))</span></code></pre></div>
<p>That is, we let the original lambda modify the out point beyond the length of the source. Then in the wrapper above we get the source of the clip and have it adjust the out point to not exceed the length.</p>
<p>I think this will actually work.</p>
<h2 id="reflections">Reflections</h2>
<p>When first thinking about this problem I had a much more complicated solution in mind. I was annoyed that the cut itself did not know about the maximum length. I was thinking that <code>Cut.modify</code> somehow has to be passed a length so that it could do the limiting itself.</p>
<p>Then I started writing about it, and I thought that each data structure should be responsible for validating itself. Since a cut has no information about length, it is ok to specify any length. But when a cut is put into a <code>ProjectData</code> and is associated with a source, the validation must happen.</p>
<p>This makes a lot of sense to me, and I feel like a made a breakthrough.</p>
<p>You could argue that the design of the data structure is wrong. Perhaps a cut should have more information about its source so that it can do more validation.</p>
<p>But when it looks as it does, I think this will be fine.</p>
<p>Let’s see if we can test this.</p>
<h2 id="testing-limiting-out-point">Testing limiting out point</h2>
<p>Here is the test that I come up with:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true"></a><span class="co">A cut&#39;s out point is adjusted if going outside the limit:</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true"></a></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; data = ProjectData.empty()</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; data = data.add_source(FileSource(id=&quot;source_a&quot;, path=&quot;a.mp4&quot;, length=5))</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; data = data.add_cut(Cut.test_instance(name=&quot;source_a&quot;, start=0, end=3, id=&quot;cut_a&quot;))</span></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; data = data.modify_cut(&quot;cut_a&quot;, lambda cut: cut.move_right(10))</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; data.get_cut(&quot;cut_a&quot;).in_out</span></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true"></a><span class="co">Region(start=0, end=5)</span></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>We create project data with one source and one cut. The source is of length 5 and the cut is of length 3. We can extend it two more frames before we have reached the end of the source.</p>
<p>Then we modify the cut by trying to extend it by 10 frames.</p>
<p>Then we assert that the end point is limited to 5.</p>
<p>This fails with this:</p>
<pre class="text"><code>Failed example:
    data = data.modify_cut(&quot;cut_a&quot;, lambda cut: cut.move_right(10))
Differences (ndiff with -expected +actual):
    + TODO: implement move_right!</code></pre>
<p>I implement <code>Cut.move_right</code> like this:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true"></a><span class="kw">def</span> move_right(<span class="va">self</span>, amount):</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true"></a>    <span class="cf">return</span> <span class="va">self</span>._replace(</span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true"></a>        in_out<span class="op">=</span><span class="va">self</span>.in_out.move_end(amount),</span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true"></a>    )</span></code></pre></div>
<p>Then we get this failure:</p>
<pre class="text"><code>Failed example:
    data.get_cut(&quot;cut_a&quot;).in_out
Differences (ndiff with -expected +actual):
    - Region(start=0, end=5)
    ?                     ^
    + Region(start=0, end=13)
    ?                     ^^</code></pre>
<p>I expected this. We don’t do any limiting yet.</p>
<p>Let’s modify <code>ProjectData.modify_cut</code> to what we had in mind. I write this:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true"></a><span class="kw">def</span> modify_cut(<span class="va">self</span>, cut_id, fn):</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true"></a>    <span class="kw">def</span> wrapper(cut):</span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true"></a>        <span class="cf">return</span> <span class="va">self</span>.get_source(cut.source.source_id).limit_in_out(fn(cut))</span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true"></a>    <span class="cf">return</span> <span class="va">self</span>._replace(cuts<span class="op">=</span><span class="va">self</span>.cuts.modify(cut_id, wrapper))</span></code></pre></div>
<p>We now get this error:</p>
<pre class="text"><code>AttributeError: &#39;TextSource&#39; object has no attribute &#39;limit_in_out&#39;</code></pre>
<p>This is also to be expected. Now we need to implement <code>limit_in_out</code> on every type of source. At the moment those are <code>TextSource</code> and <code>FileSource</code>. Let’s see if we have coverage for both. We get a failure for <code>TextSource</code> now, so let’s start there.</p>
<p>A text source does not have a length. It is infinite. So <code>limit_in_out</code> just becomes this:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true"></a><span class="kw">def</span> limit_in_out(<span class="va">self</span>, cut):</span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true"></a>    <span class="cf">return</span> cut</span></code></pre></div>
<p>Now we get the same error for the file source.</p>
<p>I implement <code>FileSource.limit_in_out</code> like this:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true"></a><span class="kw">def</span> limit_in_out(<span class="va">self</span>, cut):</span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true"></a>    <span class="cf">return</span> cut.limit_out(<span class="va">self</span>.length)</span></code></pre></div>
<p>The test now complains about this:</p>
<pre class="text"><code>AttributeError: &#39;Cut&#39; object has no attribute &#39;limit_out&#39;</code></pre>
<p>I implement it like this:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true"></a><span class="kw">def</span> limit_out(<span class="va">self</span>, max_out):</span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true"></a>    <span class="cf">return</span> <span class="va">self</span>._replace(in_out<span class="op">=</span><span class="va">self</span>.in_out.limit_end(max_out))</span></code></pre></div>
<p>And <code>Region.limit_end</code> like this:</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true"></a>    <span class="kw">def</span> limit_end(<span class="va">self</span>, max_end):</span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true"></a>        <span class="cf">return</span> <span class="va">self</span>._replace(end<span class="op">=</span><span class="bu">min</span>(<span class="va">self</span>.end, max_end))</span></code></pre></div>
<p>And wow, that actually works.</p>
<pre class="text"><code>$ ./make.py commit -m &#39;ProjectData.modify_cut ensures that in_out is withing source limit.&#39;
...................................................................
----------------------------------------------------------------------
Ran 67 tests in 3.925s

OK
[main a9eb857] ProjectData.modify_cut ensures that in_out is withing source limit.
 4 files changed, 29 insertions(+), 3 deletions(-)</code></pre>
<h2 id="improving-design">Improving design</h2>
<p>Right above <code>modify_cut</code> I see <code>add_cut</code> which also has a TODO:</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true"></a><span class="kw">def</span> add_cut(<span class="va">self</span>, cut):</span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true"></a>    <span class="co"># </span><span class="al">TODO</span><span class="co">: assert that source id exists (even for json loading)</span></span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true"></a>    <span class="cf">return</span> <span class="va">self</span>._replace(cuts<span class="op">=</span><span class="va">self</span>.cuts.add(cut))</span></code></pre></div>
<p>Now that we have touched this area of the code, let’s have a closer look if we can make something cleaner with our new insights.</p>
<p>The <code>add_cut</code> could probably also benefit from having the in and out points limited.</p>
<p>However, it is not used by the JSON loading mechanism.</p>
<p>I move the JSON loading part of the comment to here:</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true"></a><span class="at">@staticmethod</span></span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true"></a><span class="kw">def</span> from_json(json):</span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true"></a>    <span class="co"># </span><span class="al">TODO</span><span class="co">: validate the cuts point to valid sources and that they have</span></span>
<span id="cb22-4"><a href="#cb22-4" aria-hidden="true"></a>    <span class="co"># valid in/out points.</span></span>
<span id="cb22-5"><a href="#cb22-5" aria-hidden="true"></a>    <span class="cf">return</span> ProjectData(</span>
<span id="cb22-6"><a href="#cb22-6" aria-hidden="true"></a>        sources<span class="op">=</span>Sources.from_json(json[<span class="st">&quot;sources&quot;</span>]),</span>
<span id="cb22-7"><a href="#cb22-7" aria-hidden="true"></a>        cuts<span class="op">=</span>Cuts.from_json(json[<span class="st">&quot;cuts&quot;</span>])</span>
<span id="cb22-8"><a href="#cb22-8" aria-hidden="true"></a>    )</span></code></pre></div>
<p>I’m not sure that we want to adjust cuts that are invalid. We could remove cuts that don’t have a corresponding source, and we could adjust in and out points of cuts with valid sources. But that would change the project. So a load + save will save something else without the user having done any changes. Unless manually modified, a JSON export should never have these problems. So validation should be ok. But I said <strong>should</strong>. If we make a mistake somewhere, we could export invalid JSON. So a load that fixes bad input it probably a good idea. However, in such cases the user should probably be informed about the changes made and a backup file with the old contents should probably be written. I think this work is for a later time. Not really prioritized now.</p>
<p>Let’s go back to <code>ProjectData.add_cut</code>. It is only used when the user actively adds a cut somehow. At that point the cut does not exists yet, and if we modify the in and out points, there is no obvious change.</p>
<p>Let’s modify it guided by this test:</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb23-2"><a href="#cb23-2" aria-hidden="true"></a><span class="co">In/Out is modified according to source:</span></span>
<span id="cb23-3"><a href="#cb23-3" aria-hidden="true"></a></span>
<span id="cb23-4"><a href="#cb23-4" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; ProjectData.empty(</span></span>
<span id="cb23-5"><a href="#cb23-5" aria-hidden="true"></a><span class="co">... ).add_source(</span></span>
<span id="cb23-6"><a href="#cb23-6" aria-hidden="true"></a><span class="co">...     FileSource(id=&quot;source_a&quot;, path=&quot;a.mp4&quot;, length=5)</span></span>
<span id="cb23-7"><a href="#cb23-7" aria-hidden="true"></a><span class="co">... ).add_cut(</span></span>
<span id="cb23-8"><a href="#cb23-8" aria-hidden="true"></a><span class="co">...     Cut.test_instance(name=&quot;source_a&quot;, start=0, end=10, id=&quot;cut_a&quot;)</span></span>
<span id="cb23-9"><a href="#cb23-9" aria-hidden="true"></a><span class="co">... ).get_cut(&quot;cut_a&quot;).in_out</span></span>
<span id="cb23-10"><a href="#cb23-10" aria-hidden="true"></a><span class="co">Region(start=0, end=5)</span></span>
<span id="cb23-11"><a href="#cb23-11" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>It fails with this message:</p>
<pre class="text"><code>Differences (ndiff with -expected +actual):
    - Region(start=0, end=5)
    ?                     ^
    + Region(start=0, end=10)
    ?                     ^^</code></pre>
<p>We fix it in a similar way to before:</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true"></a><span class="cf">return</span> <span class="va">self</span>._replace(cuts<span class="op">=</span><span class="va">self</span>.cuts.add(<span class="va">self</span>.get_source(cut.source.source_id).limit_in_out(cut)))</span></code></pre></div>
<p>That passes all the tests.</p>
<h2 id="speed-issue">Speed issue</h2>
<p>I also noticed an issue with the limiting for cuts that had a changed speed. I modify <code>FileSource.limit_in_out</code> to take speed into account:</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true"></a><span class="kw">def</span> limit_in_out(<span class="va">self</span>, cut):</span>
<span id="cb26-2"><a href="#cb26-2" aria-hidden="true"></a>    <span class="co">&quot;&quot;&quot;</span></span>
<span id="cb26-3"><a href="#cb26-3" aria-hidden="true"></a><span class="co">    &gt;&gt;&gt; source = FileSource(id=&quot;source_a&quot;, path=&quot;a.mp4&quot;, length=5)</span></span>
<span id="cb26-4"><a href="#cb26-4" aria-hidden="true"></a></span>
<span id="cb26-5"><a href="#cb26-5" aria-hidden="true"></a><span class="co">    &gt;&gt;&gt; source.limit_in_out(Cut.test_instance(start=0, end=10)).in_out</span></span>
<span id="cb26-6"><a href="#cb26-6" aria-hidden="true"></a><span class="co">    Region(start=0, end=5)</span></span>
<span id="cb26-7"><a href="#cb26-7" aria-hidden="true"></a></span>
<span id="cb26-8"><a href="#cb26-8" aria-hidden="true"></a><span class="co">    &gt;&gt;&gt; source.limit_in_out(Cut.test_instance(start=0, end=20, speed=0.5)).in_out</span></span>
<span id="cb26-9"><a href="#cb26-9" aria-hidden="true"></a><span class="co">    Region(start=0, end=10)</span></span>
<span id="cb26-10"><a href="#cb26-10" aria-hidden="true"></a><span class="co">    &quot;&quot;&quot;</span></span>
<span id="cb26-11"><a href="#cb26-11" aria-hidden="true"></a>    <span class="cf">return</span> cut.limit_out(<span class="bu">int</span>(<span class="va">self</span>.length<span class="op">/</span>cut.speed))</span></code></pre></div>
<h2 id="summary">Summary</h2>
<p>We added a feature to the application. It is now possible to move the out point of a cut and it is properly limited to not exceed the length of the underlying source.</p>
<p>I was surprised at how elegant the solution came out. The realisation that made this possible was that validation should happen at the point where all data exists. Each data entity validates itself. If parent attributes are needed for the validation, do the validation higher up the hierarchy.</p>
<p>This also makes me wonder if the limit of in point should also be done by the source. Right now the cut assumes that in point &gt;= 0 is ok. It doesn’t need to know anything about the source. But it makes assumptions about the source. I think this assumption is always correct, but I don’t think it hurts to not assume anything and let the source do the decision.</p>
<p>I will probably try that refactoring out. My suspicion is that the code base will be a little cleaner then.</p>
<p>But not in this session. This is it for now. See you next time!</p>
]]></description>
    <pubDate>Sun, 06 Aug 2023 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/devlog-011-modifying-cut-out-point/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>DevLog 010: Debugging MLT/GTK segfault</title>
    <link>http://rickardlindberg.me/writing/devlog-010-debugging-mlt-gtk-segfault/</link>
    <description><![CDATA[<h1>DevLog 010: Debugging MLT/GTK segfault</h1>

<p><em>Published on  3 August 2023.</em></p>

<p>I try to edit some footage with my <a href="/projects/rlvideo/index.html">video editor</a>. Actually, it is footage from <a href="/writing/devlog-009-improve-timeline-scrubbing/index.html">DevLog 009</a> that I hope to put together. Everything is going quite well. After I add a split-cut-at-playhead operation to the editor, in addition to the previously added ripple delete, I am actually able to do some useful edits.</p>
<p>However, after a while I notice that a cut does not seem to render the correct frame. I decide to restart the application, and then it happens. Segfault!</p>
<p>This time, the segfault reproduces consistently. I’m excited to debug this and see how we can resolve it. I’ve got my cup of coffee, and I’m ready to go.</p>
<p>
<center>
<img src="coffee.png" title="fig:" alt="Coffee." />
</center>
</p>
<h2 id="gdb-output">GDB output</h2>
<p>Because this is not the first time I see segfaults in this application, I have added a command to run the application in GDB. Here is how to use it:</p>
<pre class="text"><code>$ ~/rlvideo/make.py gdb devlog-009.rlvideo
...
Starting program: /usr/bin/python3 /home/rick/rlvideo/rlvideo.py devlog-009.rlvideo
...
Thread 1 &quot;python3&quot; received signal SIGSEGV, Segmentation fault.
..
(gdb) bt
#0  0x00007ffff7a64474 in pthread_mutex_lock () at /lib64/libpthread.so.0
#1  0x00007fffe96866af in XrmQGetResource () at /lib64/libX11.so.6
#2  0x00007fffe9667fca in XGetDefault () at /lib64/libX11.so.6
#3  0x00007fffe9a5ae8a in _cairo_xlib_surface_get_font_options () at /lib64/libcairo.so.2
...</code></pre>
<h2 id="analysis-and-ideas">Analysis and ideas</h2>
<p>The segfault seems to happen inside some Cairo drawing code. That is most likely happening because GTK is trying to show a widget that tries to draw itself. I think GTK calls were further down in the backrace.</p>
<p>I find it very unlikely that this can happen from the Python GTK bindings. My suspicion is that this has something to do with MLT. Why? Because the segfault only happens for some projects.</p>
<p>I know that many MLT calls return status codes that I never check. Perhaps I should.</p>
<p>There is also a way to serialize an MLT producer to an XML file which can then be played with <code>melt</code>. That way we can see if MLT has the same problems as we are having given the same MLT producer.</p>
<p>This might be useful for other types of debugging as well.</p>
<p>Let’s see if we can implement that XML export and see if <code>melt</code> segfaults as well or if that works.</p>
<h2 id="debugging-mlt-producers">Debugging MLT producers</h2>
<p>I add this to the main function:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="cf">if</span> sys.argv[<span class="dv">1</span>:<span class="dv">2</span>] <span class="op">==</span> [<span class="st">&quot;--export-melt&quot;</span>]:</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a>    path <span class="op">=</span> sys.argv[<span class="dv">2</span>]</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a>    <span class="bu">print</span>(<span class="ss">f&quot;Exporting </span><span class="sc">{</span>path<span class="sc">}</span><span class="ss">&quot;</span>)</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a>    project <span class="op">=</span> Project.load(args<span class="op">=</span>sys.argv[<span class="dv">3</span>:])</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a>    consumer <span class="op">=</span> mlt.Consumer(project.get_preview_profile(), <span class="st">&quot;xml&quot;</span>)</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a>    consumer.<span class="bu">set</span>(<span class="st">&quot;resource&quot;</span>, path)</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a>    consumer.<span class="ex">connect</span>(project.get_preview_mlt_producer())</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true"></a>    consumer.start()</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true"></a>    <span class="cf">while</span> consumer.is_stopped() <span class="op">==</span> <span class="dv">0</span>:</span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true"></a>        time.sleep(<span class="fl">0.5</span>)</span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true"></a>    <span class="bu">print</span>(<span class="st">&quot;Done&quot;</span>)</span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true"></a>    <span class="cf">return</span></span></code></pre></div>
<p>We can run it like this:</p>
<pre class="text"><code>$ ./make.py rundev --export-melt test.xml
Exporting test.xml
Done</code></pre>
<p>Then we can feed it to <code>melt</code> like this:</p>
<pre class="text"><code>$ mlt-melt test.xml</code></pre>
<p>When I do, I get this:</p>
<pre class="text"><code>[producer_xml] parse fatal: Input is not proper UTF-8, indicate encoding !
Bytes: 0xC0 0xF3 0x68 0x0E
	row: 3	col: 25
[producer_xml] parse fatal: invalid character in attribute value
...</code></pre>
<p>There seems to be an encoding issue. I look at the file and see that the profile description looks weird.</p>
<p>I fix it manually, and then get this:</p>
<pre class="text"><code>$ mlt-melt test.xml
+-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+
|1=-10| |2= -5| |3= -2| |4= -1| |5=  0| |6=  1| |7=  2| |8=  5| |9= 10|
+-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+
+---------------------------------------------------------------------+
|               H = back 1 minute,  L = forward 1 minute              |
|                 h = previous frame,  l = next frame                 |
|           g = start of clip, j = next clip, k = previous clip       |
|                0 = restart, q = quit, space = play                  |
+---------------------------------------------------------------------+
Segmentation fault (core dumped)</code></pre>
<p>Hmm. Now I’m not using the project that I had problems with. Now I’m just using the default test project which works fine otherwise.</p>
<p>When I look closer at the profile in the XML file, other things seem off as well. The width and height don’t seem to be correct either. I try to use the project profile instead of the preview profile in the XML export code. This works better. However, the player only shows a couple of frames where there should be more. What is going on?</p>
<p>Then I notice this at the end of the XML file:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode xml"><code class="sourceCode xml"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a>  <span class="kw">&lt;playlist</span><span class="ot"> id=</span><span class="st">&quot;playlist0&quot;</span><span class="kw">&gt;</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a>    <span class="kw">&lt;entry</span><span class="ot"> producer=</span><span class="st">&quot;playlist1&quot;</span><span class="ot"> in=</span><span class="st">&quot;&quot;</span><span class="ot"> out=</span><span class="st">&quot;&quot;</span><span class="kw">/&gt;</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true"></a>    <span class="kw">&lt;entry</span><span class="ot"> producer=</span><span class="st">&quot;producer4&quot;</span><span class="ot"> in=</span><span class="st">&quot;0&quot;</span><span class="ot"> out=</span><span class="st">&quot;0&quot;</span><span class="kw">/&gt;</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true"></a>  <span class="kw">&lt;/playlist&gt;</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true"></a><span class="er">&lt;</span>/mlt&gt;</span></code></pre></div>
<p>The first item in the playlist, which is another playlist, seems to lack in and out arguments. If I change to the following, the file plays ok:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode xml"><code class="sourceCode xml"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a>    <span class="kw">&lt;entry</span><span class="ot"> producer=</span><span class="st">&quot;playlist1&quot;</span><span class="ot"> in=</span><span class="st">&quot;0&quot;</span><span class="ot"> out=</span><span class="st">&quot;43&quot;</span><span class="kw">/&gt;</span></span></code></pre></div>
<p>I print in and out points for all playlists that we create, and they seem to have valid numbers. Time to dig into the MLT XML export code.</p>
<p>I find this:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true"></a><span class="dt">char</span> *mlt_properties_get_time(mlt_properties self, <span class="dt">const</span> <span class="dt">char</span> *name, mlt_time_format format)</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true"></a>{</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true"></a>    mlt_profile profile = mlt_properties_get_data(self, <span class="st">&quot;_profile&quot;</span>, NULL);</span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true"></a>    <span class="cf">if</span> (profile) {</span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true"></a>        <span class="dt">double</span> fps = mlt_profile_fps(profile);</span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true"></a>        mlt_property value = mlt_properties_find(self, name);</span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true"></a>        property_list *list = self-&gt;local;</span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true"></a>        <span class="cf">return</span> value == NULL ? NULL : mlt_property_get_time(value, format, fps, list-&gt;locale);</span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true"></a>    }</span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true"></a>    <span class="cf">return</span> NULL;</span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true"></a>}</span></code></pre></div>
<p>The <code>mlt_properties_get_time</code> functions seems to be used in the XML export. And it seems to work only if there is a profile.</p>
<p>My playlists don’t have profiles.</p>
<p>I add it like this:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true"></a><span class="kw">diff --git a/rlvideolib/domain/section.py b/rlvideolib/domain/section.py</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true"></a>index 4c50d6d..78a0683 100644</span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true"></a><span class="dt">--- a/rlvideolib/domain/section.py</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true"></a><span class="dt">+++ b/rlvideolib/domain/section.py</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true"></a><span class="dt">@@ -33,7 +33,7 @@ class Sections:</span></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true"></a>         return canvas</span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true"></a></span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true"></a>     def to_mlt_producer(self, profile, cache):</span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true"></a><span class="st">-        playlist = mlt.Playlist()</span></span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true"></a><span class="va">+        playlist = mlt.Playlist(profile)</span></span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true"></a>         for section in self.sections:</span>
<span id="cb10-12"><a href="#cb10-12" aria-hidden="true"></a>             playlist.append(section.to_mlt_producer(profile, cache))</span>
<span id="cb10-13"><a href="#cb10-13" aria-hidden="true"></a>         assert playlist.get_playtime() == self.length</span>
<span id="cb10-14"><a href="#cb10-14" aria-hidden="true"></a><span class="dt">@@ -71,7 +71,7 @@ class PlaylistSection:</span></span>
<span id="cb10-15"><a href="#cb10-15" aria-hidden="true"></a>         return canvas</span>
<span id="cb10-16"><a href="#cb10-16" aria-hidden="true"></a></span>
<span id="cb10-17"><a href="#cb10-17" aria-hidden="true"></a>     def to_mlt_producer(self, profile, cache):</span>
<span id="cb10-18"><a href="#cb10-18" aria-hidden="true"></a><span class="st">-        playlist = mlt.Playlist()</span></span>
<span id="cb10-19"><a href="#cb10-19" aria-hidden="true"></a><span class="va">+        playlist = mlt.Playlist(profile)</span></span>
<span id="cb10-20"><a href="#cb10-20" aria-hidden="true"></a>         for part in self.parts:</span>
<span id="cb10-21"><a href="#cb10-21" aria-hidden="true"></a>             part.add_to_mlt_playlist(profile, cache, playlist)</span>
<span id="cb10-22"><a href="#cb10-22" aria-hidden="true"></a>         assert playlist.get_playtime() == self.length</span></code></pre></div>
<p>Now the export works fine!</p>
<p>Let’s export the XML file for the project that segfaults.</p>
<p>I examine the XML file and notice the same problem for <code>mlt.Tractor</code>. It is also missing in and out arguments. I add profiles to those as well.</p>
<pre class="text"><code>$ ./make.py commit -m &#39;Pass profile to mlt.Tractor so that XML export works properly with in/out points.&#39;
...........................................................
----------------------------------------------------------------------
Ran 59 tests in 3.024s

OK
[main a5db808] Pass profile to mlt.Tractor so that XML export works properly with in/out points.
 1 file changed, 1 insertion(+), 1 deletion(-)</code></pre>
<p>The export works fine and it plays fine in the <code>melt</code> player.</p>
<p>I think that the fixes we made for the XML export only affects the XML export. But it is nice that we now have the ability to play our projects with <code>melt</code>. I suspect it might come in handy in the future as well.</p>
<p>So there doesn’t seem to be anything wrong with the producer that we create. Melt can play it just fine. That is good news, I guess, but what to do next?</p>
<h2 id="weird-cuts">Weird cuts</h2>
<p>I mentioned in the beginning that the reason that I restarted the application was that I thought a cut rendered the wrong frame.</p>
<p>I see this problem when playing the XML file with melt as well.</p>
<p>This is most likely something wrong in our code. However, it doesn’t seem to contribute to the segfault.</p>
<p>I add a TODO in the code in a place where I think the problem is. Let’s deal with that later. We are on the hunt for segfault reasons now.</p>
<h2 id="more-ideas">More ideas</h2>
<p>We have concluded that the producer that we create is probably fine.</p>
<p>My suspicion is that there is something in the combination of MLT and GTK that causes the segfault. MLT and GTK are running in the same process, so it might be possible that they interfere with each other somehow. The backtrace got segfaulted inside the pthread library. So perhaps this is also timing related.</p>
<p>Let’s try a few things out.</p>
<h2 id="removing-the-player">Removing the player</h2>
<p>The thing that connects MLT and GTK is the player. We start an MLT SDL consumer and have it display it’s output in a GTK window.</p>
<p>I try to remove the player like this:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true"></a><span class="co">#mlt_player = MltPlayer(self.project, preview.get_window().get_xid())</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true"></a><span class="kw">class</span> MockPlayer:</span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true"></a>    <span class="kw">def</span> position(<span class="va">self</span>):</span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true"></a>        <span class="cf">return</span> <span class="dv">0</span></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true"></a>mlt_player <span class="op">=</span> MockPlayer()</span></code></pre></div>
<p>And now the application starts!</p>
<p>But of course it doesn’t work properly.</p>
<p>However, it tells me that there is something about this combination that causes the segfault.</p>
<h2 id="timing">Timing</h2>
<p>I then try this:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true"></a><span class="kw">diff --git a/rlvideolib/gui/gtk.py b/rlvideolib/gui/gtk.py</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true"></a>index cb13bef..3feaf87 100644</span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true"></a><span class="dt">--- a/rlvideolib/gui/gtk.py</span></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true"></a><span class="dt">+++ b/rlvideolib/gui/gtk.py</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true"></a><span class="dt">@@ -160,6 +160,9 @@ class MltPlayer:</span></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true"></a>         # TODO: figure out why SDL consumer seems to produce brighter images (black -&gt; grey)</span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true"></a>         self.project = project</span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true"></a>         os.putenv(&quot;SDL_WINDOWID&quot;, str(window_id))</span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true"></a><span class="va">+        GLib.idle_add(self.init_player)</span></span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true"></a><span class="va">+</span></span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true"></a><span class="va">+    def init_player(self):</span></span>
<span id="cb13-12"><a href="#cb13-12" aria-hidden="true"></a>         self.consumer = mlt.Consumer(self.project.get_preview_profile(), &quot;sdl&quot;)</span>
<span id="cb13-13"><a href="#cb13-13" aria-hidden="true"></a>         self.consumer.start()</span>
<span id="cb13-14"><a href="#cb13-14" aria-hidden="true"></a>         self.producer = None</span></code></pre></div>
<p>That is, I create the MLT consumer a little later, once GTK has had time to start up a bit more.</p>
<p>And wow, this actually works!</p>
<p>I though about this idea because I had come across this comment in the <a href="https://github.com/jliljebl/flowblade">Flowblade</a> source code:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true"></a><span class="co"># SDL 2 consumer needs to created after Gtk.main() has run enough for window to be visible</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true"></a><span class="co">#if editorstate.get_sdl_version() == editorstate.SDL_2: # needs more state consideration still</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true"></a><span class="co">#    print &quot;SDL2 timeout launch&quot;</span></span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true"></a><span class="co">#    global sdl2_timeout_id</span></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true"></a><span class="co">#    sdl2_timeout_id = GLib.timeout_add(1500, create_sdl_2_consumer)</span></span></code></pre></div>
<p>The comment was for SDL2, and we are using SDL1, but I thought it was worth a try anyway.</p>
<p>Here is one reason that I think it is valuable documenting my work. I was able to get an idea from Flowblade. From a comment written in the source code. That was valuable to me. Maybe others will find similar value in what I write about. Maybe.</p>
<h2 id="solution-too-soon">Solution too soon?</h2>
<p>I try the <code>idle_add</code> solution a couple of times, and it seems like I was too fast to declare victory. It seems like it still segfaults sometimes.</p>
<p>Then I try to take the SDL consumer out of the picture by replacing it with this:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true"></a><span class="kw">class</span> DummyConsumer:</span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true"></a></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true"></a>    <span class="kw">def</span> disconnect_all_producers(<span class="va">self</span>):</span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true"></a>        <span class="bu">print</span>(<span class="st">&quot;Dummy disconnect&quot;</span>)</span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true"></a></span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true"></a>    <span class="kw">def</span> <span class="ex">connect</span>(<span class="va">self</span>, producer):</span>
<span id="cb15-7"><a href="#cb15-7" aria-hidden="true"></a>        <span class="bu">print</span>(<span class="st">&quot;Dummy connect&quot;</span>)</span></code></pre></div>
<p>And it still segfaults sometimes.</p>
<h2 id="delay-all-mlt-operations">Delay all MLT operations</h2>
<p>I’m thinking that we need to delay all MLT operations until GTK is properly initialized.</p>
<p>I try to get this to work, but I don’t manage. The code is too tangled together.</p>
<p>Many hours pass, and I don’t seem to be making any progress.</p>
<h2 id="overlap">Overlap</h2>
<p>I’m thinking that this segfault might have to do with the bug I talked about in the beginning about the wrong frame being rendered.</p>
<p>I find the problem in the code, write a test that exposes the bug, and then fix it.</p>
<p>That was good, but it did not resolve the segfault.</p>
<p>I keep scratching my head, thinking of things to try. Hours pass. Then I have a breakthrough.</p>
<h2 id="breakthrough">Breakthrough</h2>
<p>But some lucky guess, I find out that the segfault only happens when we have overlapping clips in our project. I decide to comment out transitions (the code that merges multiple, overlapping frames together), and suddenly, the reproducible segfault goes away. The problem seems to be with the <code>qtblend</code> transition. There is another one called <code>frei0r.cairoblend</code> which works as well for our purposes. I switch to that one and write this comment in the code about it.</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true"></a><span class="co"># &#39;qtblend&#39; that was first used first seems to give problems</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true"></a><span class="co"># when used in a GTK context. The application segfaults when</span></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true"></a><span class="co"># started.</span></span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true"></a><span class="co">#</span></span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true"></a><span class="co"># Steps to reproduce:</span></span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true"></a><span class="co">#</span></span>
<span id="cb16-7"><a href="#cb16-7" aria-hidden="true"></a><span class="co"># 1. ./make.py rundev foo.rlvideo resources/*mp4</span></span>
<span id="cb16-8"><a href="#cb16-8" aria-hidden="true"></a><span class="co">#</span></span>
<span id="cb16-9"><a href="#cb16-9" aria-hidden="true"></a><span class="co"># 2. Move a cut so that there is a overlap somewhere</span></span>
<span id="cb16-10"><a href="#cb16-10" aria-hidden="true"></a><span class="co">#</span></span>
<span id="cb16-11"><a href="#cb16-11" aria-hidden="true"></a><span class="co"># 3. ./make.py rundev foo.rlvideo</span></span>
<span id="cb16-12"><a href="#cb16-12" aria-hidden="true"></a><span class="co">#</span></span>
<span id="cb16-13"><a href="#cb16-13" aria-hidden="true"></a><span class="co"># Boom! Stacktrace:</span></span>
<span id="cb16-14"><a href="#cb16-14" aria-hidden="true"></a><span class="co">#</span></span>
<span id="cb16-15"><a href="#cb16-15" aria-hidden="true"></a><span class="co">#     (gdb) bt</span></span>
<span id="cb16-16"><a href="#cb16-16" aria-hidden="true"></a><span class="co">#     #0  0x00007ffff7a64474 in pthread_mutex_lock () at /lib64/libpthread.so.0</span></span>
<span id="cb16-17"><a href="#cb16-17" aria-hidden="true"></a><span class="co">#     #1  0x00007fffe96866af in XrmQGetResource () at /lib64/libX11.so.6</span></span>
<span id="cb16-18"><a href="#cb16-18" aria-hidden="true"></a><span class="co">#     #2  0x00007fffe9667fca in XGetDefault () at /lib64/libX11.so.6</span></span>
<span id="cb16-19"><a href="#cb16-19" aria-hidden="true"></a><span class="co">#     #3  0x00007fffe9a5ae8a in _cairo_xlib_surface_get_font_options () at /lib64/libcairo.so.2</span></span>
<span id="cb16-20"><a href="#cb16-20" aria-hidden="true"></a><span class="co">#     ...</span></span>
<span id="cb16-21"><a href="#cb16-21" aria-hidden="true"></a><span class="co">#</span></span>
<span id="cb16-22"><a href="#cb16-22" aria-hidden="true"></a><span class="co"># frei0r.cairoblend seems to work better.</span></span>
<span id="cb16-23"><a href="#cb16-23" aria-hidden="true"></a><span class="co">#</span></span>
<span id="cb16-24"><a href="#cb16-24" aria-hidden="true"></a><span class="co"># </span><span class="al">TODO</span><span class="co">: How to fix this problem? Is qtblend just incompatible?</span></span></code></pre></div>
<h2 id="summary">Summary</h2>
<p>I am extremely satisfied that we found the reason for the segfault and were able to fix it.</p>
<p>In the process we also found a couple of other bugs that we fixed and added the XML export for easier debugging.</p>
<p>After fixing the segfault I continue to edit. Unfortunately, I get other segfaults now. This time not reproducible, but more random. I conclude that I must learn better the internals of MLT to figure out what I’m doing wrong in the Python code. And after the things I learned from this session, I’m more prepared.</p>
]]></description>
    <pubDate>Thu, 03 Aug 2023 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/devlog-010-debugging-mlt-gtk-segfault/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>DevLog 009: Improve timeline scrubbing</title>
    <link>http://rickardlindberg.me/writing/devlog-009-improve-timeline-scrubbing/</link>
    <description><![CDATA[<h1>DevLog 009: Improve timeline scrubbing</h1>

<p><em>Published on  3 August 2023.</em></p>

<p>As a try to edit some footage with my <a href="/projects/rlvideo/index.html">video editor</a>, I get annoyed by a timeline scrubbing issue.</p>
<p>Scrubbing the timeline means clicking and dragging the playhead and then the frame at that position will play. This works fine today if you click and drag, but if you only click, nothing happens:</p>
<p>
<center>
<img src="scrub-problem.png" title="fig:" alt="Scrub problem." />
</center>
</p>
<p>Sometimes I just want to place the playhead at a certain position. And then I just want to click.</p>
<p>That’s what we’ll work on fixing today.</p>
<h2 id="reviewing-the-scrub-action">Reviewing the scrub action</h2>
<p>Here is the scrub action:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="kw">class</span> ScrubAction(Action):</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, player, scrollbar):</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a>        <span class="va">self</span>.player <span class="op">=</span> player</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a>        <span class="va">self</span>.scrollbar <span class="op">=</span> scrollbar</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a>        <span class="va">self</span>.mouse_up()</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true"></a>    <span class="kw">def</span> left_mouse_down(<span class="va">self</span>, x, y):</span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true"></a>        <span class="va">self</span>.x <span class="op">=</span> x</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true"></a></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true"></a>    <span class="kw">def</span> mouse_up(<span class="va">self</span>):</span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true"></a>        <span class="va">self</span>.x <span class="op">=</span> <span class="va">None</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true"></a></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true"></a>    <span class="kw">def</span> mouse_move(<span class="va">self</span>, x, y):</span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true"></a>        <span class="cf">if</span> <span class="va">self</span>.x <span class="kw">is</span> <span class="kw">not</span> <span class="va">None</span>:</span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true"></a>            <span class="va">self</span>.player.scrub(</span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true"></a>                <span class="bu">int</span>(<span class="bu">round</span>(</span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true"></a>                    <span class="va">self</span>.scrollbar.content_start</span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true"></a>                    <span class="op">+</span></span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true"></a>                    x<span class="op">/</span><span class="va">self</span>.scrollbar.one_length_in_pixels</span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true"></a>                ))</span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true"></a>            )</span></code></pre></div>
<p>We can see that the scrubbing is happening only when we move the mouse, not if we just left click.</p>
<p>The solution seems obvious: make sure to scrub on the click as well.</p>
<p>Let’s see how we can move slowly and carefully and pay attention to design as we go along. Let’s start with a test.</p>
<h2 id="testing-new-functionality">Testing new functionality</h2>
<p>This is the test that I come up with:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a><span class="co">I scrub the player when clicked:</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; class MockPlayer:</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a><span class="co">...     def scrub(self, position):</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a><span class="co">...         print(f&quot;scrub {position}&quot;)</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; class MockScrollbar:</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true"></a><span class="co">...     content_start = 0</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true"></a><span class="co">...     one_length_in_pixels = 1</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; action = ScrubAction(player=MockPlayer(), scrollbar=MockScrollbar())</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; action.simulate_click(x=10)</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true"></a><span class="co">scrub 10</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>The <code>left_mouse_down</code> currently takes both the x and y coordinates. In this test, we only care about the x coordinate. That’s why I introduced <code>Action.simulate_click</code>. The idea is that it should simulate the calls that GTK does when a left click happens. My idea is to extend this further with something like <code>Action.simulate_drag</code> which will fire <code>left_mouse_down</code>, <code>mouse_move</code>, and <code>mouse_up</code> in the same way that GTK would do it.</p>
<p>I implement it like this:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="kw">def</span> simulate_click(<span class="va">self</span>, x<span class="op">=</span><span class="dv">0</span>, y<span class="op">=</span><span class="dv">0</span>):</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a>    <span class="va">self</span>.left_mouse_down(x<span class="op">=</span>x, y<span class="op">=</span>y)</span></code></pre></div>
<p>To make the test pass, I call <code>self.player.scrub</code> in the <code>left_mouse_down</code> event as well. I extract it to a common method to remove the duplication.</p>
<p>This passes the tests, and when I try it in the application, it works as intended.</p>
<p>Are we done?</p>
<h2 id="a-concern">A concern</h2>
<p>Let’s take a moment to think about some design issues.</p>
<p>One thing that worry me is that <code>Action.simulate_click</code> does not actually simulate clicks in the right way. That is, when we hook this up with GTK, the same kinds of events will not be generated.</p>
<p>Let’s have a look at how it works today.</p>
<p>Here is how <code>*_mouse_down</code> is handled:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a>timeline <span class="op">=</span> Gtk.DrawingArea()</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a>timeline.<span class="ex">connect</span>(<span class="st">&quot;button-press-event&quot;</span>, timeline_button)</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a>timeline.add_events(</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a>    timeline.get_events() <span class="op">|</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true"></a>    Gdk.EventMask.SCROLL_MASK <span class="op">|</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true"></a>    Gdk.EventMask.BUTTON_PRESS_MASK <span class="op">|</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true"></a>    Gdk.EventMask.BUTTON_RELEASE_MASK <span class="op">|</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true"></a>    Gdk.EventMask.POINTER_MOTION_MASK</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true"></a>)</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true"></a><span class="kw">def</span> timeline_button(widget, event):</span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true"></a>    <span class="co"># </span><span class="al">TODO</span><span class="co">: clarify what translate_coordinates do</span></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true"></a>    <span class="cf">if</span> event.button <span class="op">==</span> <span class="dv">1</span>:</span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true"></a>        <span class="va">self</span>.timeline.left_mouse_down(<span class="op">*</span>timeline.translate_coordinates(</span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true"></a>            main_window,</span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true"></a>            event.x,</span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true"></a>            event.y</span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true"></a>        ))</span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true"></a>    <span class="cf">elif</span> event.button <span class="op">==</span> <span class="dv">3</span>:</span>
<span id="cb4-19"><a href="#cb4-19" aria-hidden="true"></a>        <span class="va">self</span>.timeline.right_mouse_down(<span class="op">*</span>timeline.translate_coordinates(</span>
<span id="cb4-20"><a href="#cb4-20" aria-hidden="true"></a>            main_window,</span>
<span id="cb4-21"><a href="#cb4-21" aria-hidden="true"></a>            event.x,</span>
<span id="cb4-22"><a href="#cb4-22" aria-hidden="true"></a>            event.y</span>
<span id="cb4-23"><a href="#cb4-23" aria-hidden="true"></a>        ), GtkGui(event))</span></code></pre></div>
<p>This code exists in a method which has a bunch of other GTK setup code and is quite long.</p>
<p>Let’s see if we can extract a GTK widget that has all the mechanisms for custom drawing and event handling.</p>
<p>I slowly start to extract pieces, and eventually end up with this:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="kw">class</span> CustomDrawWidget(Gtk.DrawingArea):</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, main_window, custom_draw_handler):</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true"></a>        Gtk.DrawingArea.<span class="fu">__init__</span>(<span class="va">self</span>)</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true"></a>        <span class="va">self</span>.add_events(</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true"></a>            <span class="va">self</span>.get_events() <span class="op">|</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true"></a>            Gdk.EventMask.SCROLL_MASK <span class="op">|</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true"></a>            Gdk.EventMask.BUTTON_PRESS_MASK <span class="op">|</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true"></a>            Gdk.EventMask.BUTTON_RELEASE_MASK <span class="op">|</span></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true"></a>            Gdk.EventMask.POINTER_MOTION_MASK</span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true"></a>        )</span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true"></a>        <span class="va">self</span>.<span class="ex">connect</span>(<span class="st">&quot;draw&quot;</span>, <span class="va">self</span>.on_draw)</span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true"></a>        <span class="va">self</span>.<span class="ex">connect</span>(<span class="st">&quot;button-press-event&quot;</span>, <span class="va">self</span>.on_button_press_event)</span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true"></a>        <span class="va">self</span>.<span class="ex">connect</span>(<span class="st">&quot;button-release-event&quot;</span>, <span class="va">self</span>.on_button_release_event)</span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true"></a>        <span class="va">self</span>.<span class="ex">connect</span>(<span class="st">&quot;motion-notify-event&quot;</span>, <span class="va">self</span>.on_motion_notify_event)</span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true"></a>        <span class="va">self</span>.rectangle_map <span class="op">=</span> RectangleMap()</span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true"></a>        <span class="va">self</span>.custom_draw_handler <span class="op">=</span> custom_draw_handler</span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true"></a>        <span class="va">self</span>.down_action <span class="op">=</span> <span class="va">None</span></span>
<span id="cb5-19"><a href="#cb5-19" aria-hidden="true"></a>        <span class="va">self</span>.main_window <span class="op">=</span> main_window</span>
<span id="cb5-20"><a href="#cb5-20" aria-hidden="true"></a></span>
<span id="cb5-21"><a href="#cb5-21" aria-hidden="true"></a>    <span class="kw">def</span> on_draw(<span class="va">self</span>, widget, context):</span>
<span id="cb5-22"><a href="#cb5-22" aria-hidden="true"></a>        <span class="va">self</span>.rectangle_map.clear()</span>
<span id="cb5-23"><a href="#cb5-23" aria-hidden="true"></a>        <span class="va">self</span>.custom_draw_handler(context, <span class="va">self</span>.rectangle_map)</span>
<span id="cb5-24"><a href="#cb5-24" aria-hidden="true"></a></span>
<span id="cb5-25"><a href="#cb5-25" aria-hidden="true"></a>    <span class="kw">def</span> on_button_press_event(<span class="va">self</span>, widget, event):</span>
<span id="cb5-26"><a href="#cb5-26" aria-hidden="true"></a>        x, y <span class="op">=</span> <span class="va">self</span>.get_coordinates_relative_self(event)</span>
<span id="cb5-27"><a href="#cb5-27" aria-hidden="true"></a>        <span class="cf">if</span> event.button <span class="op">==</span> <span class="dv">1</span>:</span>
<span id="cb5-28"><a href="#cb5-28" aria-hidden="true"></a>            <span class="va">self</span>.down_action <span class="op">=</span> <span class="va">self</span>.rectangle_map.get(x, y, Action())</span>
<span id="cb5-29"><a href="#cb5-29" aria-hidden="true"></a>            <span class="va">self</span>.down_action.left_mouse_down(x, y)</span>
<span id="cb5-30"><a href="#cb5-30" aria-hidden="true"></a>        <span class="cf">elif</span> event.button <span class="op">==</span> <span class="dv">3</span>:</span>
<span id="cb5-31"><a href="#cb5-31" aria-hidden="true"></a>            <span class="va">self</span>.down_action <span class="op">=</span> <span class="va">self</span>.rectangle_map.get(x, y, Action())</span>
<span id="cb5-32"><a href="#cb5-32" aria-hidden="true"></a>            <span class="va">self</span>.down_action.right_mouse_down(GtkGui(event))</span>
<span id="cb5-33"><a href="#cb5-33" aria-hidden="true"></a></span>
<span id="cb5-34"><a href="#cb5-34" aria-hidden="true"></a>    <span class="kw">def</span> on_motion_notify_event(<span class="va">self</span>, widget, event):</span>
<span id="cb5-35"><a href="#cb5-35" aria-hidden="true"></a>        x, y <span class="op">=</span> <span class="va">self</span>.get_coordinates_relative_self(event)</span>
<span id="cb5-36"><a href="#cb5-36" aria-hidden="true"></a>        <span class="cf">if</span> <span class="va">self</span>.down_action:</span>
<span id="cb5-37"><a href="#cb5-37" aria-hidden="true"></a>            <span class="va">self</span>.down_action.mouse_move(x, y)</span>
<span id="cb5-38"><a href="#cb5-38" aria-hidden="true"></a>        <span class="cf">else</span>:</span>
<span id="cb5-39"><a href="#cb5-39" aria-hidden="true"></a>            <span class="va">self</span>.rectangle_map.get(x, y, Action()).mouse_move(x, y)</span>
<span id="cb5-40"><a href="#cb5-40" aria-hidden="true"></a></span>
<span id="cb5-41"><a href="#cb5-41" aria-hidden="true"></a>    <span class="kw">def</span> on_button_release_event(<span class="va">self</span>, widget, event):</span>
<span id="cb5-42"><a href="#cb5-42" aria-hidden="true"></a>        <span class="cf">if</span> <span class="va">self</span>.down_action:</span>
<span id="cb5-43"><a href="#cb5-43" aria-hidden="true"></a>            <span class="va">self</span>.down_action.mouse_up()</span>
<span id="cb5-44"><a href="#cb5-44" aria-hidden="true"></a>            <span class="va">self</span>.down_action <span class="op">=</span> <span class="va">None</span></span>
<span id="cb5-45"><a href="#cb5-45" aria-hidden="true"></a></span>
<span id="cb5-46"><a href="#cb5-46" aria-hidden="true"></a>    <span class="kw">def</span> get_coordinates_relative_self(<span class="va">self</span>, event):</span>
<span id="cb5-47"><a href="#cb5-47" aria-hidden="true"></a>        <span class="cf">return</span> <span class="va">self</span>.translate_coordinates(</span>
<span id="cb5-48"><a href="#cb5-48" aria-hidden="true"></a>            <span class="va">self</span>.main_window,</span>
<span id="cb5-49"><a href="#cb5-49" aria-hidden="true"></a>            event.x,</span>
<span id="cb5-50"><a href="#cb5-50" aria-hidden="true"></a>            event.y</span>
<span id="cb5-51"><a href="#cb5-51" aria-hidden="true"></a>        )</span></code></pre></div>
<p>The timeline is then created like this:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a>timeline <span class="op">=</span> CustomDrawWidget(</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a>    main_window<span class="op">=</span>main_window,</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a>    custom_draw_handler<span class="op">=</span>timeline_draw,</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true"></a>)</span></code></pre></div>
<p>This part of the code base does not have many tests. I therefore moved slowly and tested my changes manually after each small step.</p>
<p>Let’s discuss some aspects of this and what we have done:</p>
<ul>
<li><p>The <code>CustomDrawWidget</code> now owns the rectangle map. (The timeline gets a reference to it, but there it only one instance, and it is created by <code>CustomDrawWidget</code>.)</p></li>
<li><p>The <code>CustomDrawWidget</code> can handle clearing of the rectangle map on redraw, something that the timeline previously did.</p></li>
<li><p>The <code>CustomDrawWidget</code> can handle mouse events and take the appropriate action by using the rectangle map.</p></li>
<li><p>The timeline widget no longer knows about mouse events. It just has a rectangle map that it can fill with actions to be performed.</p></li>
</ul>
<p>When I look at this, I feel like there are so many more things to improve. However, I will practice stopping here and think that I made a bit of improvement.</p>
<p>We can now see a bit more clearly the connection between GTK events, the rectangle map, and what methods are called on the action. And, if we need a second component that does custom drawing and handles events with a rectangle map, we can re-use <code>CustomDrawWidget</code> and do not need to duplicate as much.</p>
<h2 id="summary">Summary</h2>
<p>We improved the application a tiny bit by allowing click on the timeline to position the playhead. We also cleaned up the code base in the area we touched. It now reflects a little better the ideas that we have about the code. I’m happy with this progress.</p>
]]></description>
    <pubDate>Thu, 03 Aug 2023 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/devlog-009-improve-timeline-scrubbing/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>DevLog 008: How to overcome lack of motivation?</title>
    <link>http://rickardlindberg.me/writing/devlog-008-how-to-overcome-lack-of-motivation/</link>
    <description><![CDATA[<h1>DevLog 008: How to overcome lack of motivation?</h1>

<p><em>Published on  2 August 2023.</em></p>

<p>As I sit down this morning to continue work on my <a href="/projects/rlvideo/index.html">video editor</a>, I don’t feel motivated at all. I browse some code that I worked on yesterday, see problems with it, but can’t really see how to improve it. Everything feels complicated, and I don’t feel like programming at all.</p>
<p>What to do?</p>
<p>Well, this is just a hobby project of mine. I could just do something else today. But let’s pretend that it’s not. After all, I still have a desire to make progress on this project.</p>
<h2 id="options">Options</h2>
<p>Generally speaking, I can make two types of changes to the code:</p>
<ul>
<li>Refactoring to improve the design.</li>
<li>Adding a feature to improve the product.</li>
</ul>
<p>Yesterday, I spent most of the day refactoring and designing. I still feel that the design needs improvements in the area that I worked on, but I find that extra hard to motivate myself to work on today.</p>
<p>And perhaps that is also the wrong thing to do? Yesterday I improved the design a little to the point where fixing an actual problem was easier. Shouldn’t that be enough?</p>
<p>If we keep improving a little bit for every feature we work on, we never have to exclusively work on refactoring.</p>
<p>When I write that, it makes sense to me. I should practice feeling content with having made some improvements. I should practice not striving for perfection.</p>
<h2 id="how-to-improve-the-product">How to improve the product?</h2>
<p>So how can we improve the product? What is something that we can add that makes it easier, more pleasant, or more efficient for me to edit footage?</p>
<p>Yesterday I was annoyed by proxy clip loading time. I am still annoyed by that, but I have a feeling it will be a little difficult to fix. And I don’t feel up for it this morning.</p>
<p>Is there something easier that we can work on?</p>
<p>Yes, there is!</p>
<p>One common thing that happens when I shoot is that some clips turn out to be complete garbage. I might have pressed the record button by mistake or I might have an out of focus shot. In those cases I just want to discard the clip.</p>
<p>Say that clip <code>C0015.MP4</code> below is out of focus.</p>
<p>
<center>
<img src="discard.png" title="fig:" alt="Out of focus clip that I want to discard." />
</center>
</p>
<p>I want to open up the context menu for that cut and choose “ripple delete”. It should remove that cut from the timeline and move all cuts to the right of it left to fill up the space.</p>
<p>If we add this feature, I can actually start editing some footage. Because that is how I usually edit videos. I drop all clips on the timeline and then I cut things apart and make it shorter. With this new feature, I still can’t make any cuts, but I can discard clips.</p>
<h2 id="clips-and-cuts-again">Clips and cuts again</h2>
<p>I keep mixing the words clip and cut. A clip means a file on disk. When a clip is added to the timeline, a cut is created that spans the whole region of the clip. So in the beginning, the clip and the cut is of equal length. However, the cut can change in and out points of the clip, making it shorter.</p>
<h2 id="approach">Approach</h2>
<p>I will try to go slowly when working on this feature and pay attention to the design as I go along.</p>
<p>I will try to make small refactorings to improve the design along the way, but the focus will still be to implement this feature.</p>
<p>Let’s get started.</p>
<h2 id="starting-point">Starting point</h2>
<p>Let’s start with the context menu for a cut.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="kw">class</span> CutAction(Action):</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>    ...</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a>    <span class="kw">def</span> right_mouse_down(<span class="va">self</span>, x, y, gui):</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a>        <span class="kw">def</span> mix_strategy_updater(value):</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a>            <span class="kw">def</span> update():</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true"></a>                <span class="cf">with</span> <span class="va">self</span>.project.new_transaction() <span class="im">as</span> transaction:</span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true"></a>                    transaction.modify(<span class="va">self</span>.cut.<span class="bu">id</span>, <span class="kw">lambda</span> cut:</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true"></a>                        cut.with_mix_strategy(value))</span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true"></a>            <span class="cf">return</span> update</span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true"></a>        gui.show_context_menu([</span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true"></a>            MenuItem(label<span class="op">=</span><span class="st">&quot;over&quot;</span>, action<span class="op">=</span>mix_strategy_updater(<span class="st">&quot;over&quot;</span>)),</span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true"></a>            MenuItem(label<span class="op">=</span><span class="st">&quot;under&quot;</span>, action<span class="op">=</span>mix_strategy_updater(<span class="st">&quot;under&quot;</span>)),</span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true"></a>        ])</span></code></pre></div>
<p>Aha, we are back to the <code>CutAction</code> that we worked on in the previous DevLog. This is an opportunity to make design improvements to it while still focusing on the new ripple delete feature.</p>
<p>Making design improvements is always easier when we have tests, and it is many times my preferred way of adding new functionality. So let’s start there. This is what I come up with:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a><span class="co">I show a menu item for ripple delete:</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; project = None</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; cut = None</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; scrollbar = None</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; action = CutAction(project, cut, scrollbar)</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; gui = TestGui()</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; action.right_mouse_down(x=None, y=None, gui=gui)</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; gui.print_context_menu_items()</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true"></a><span class="co">over</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true"></a><span class="co">under</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true"></a><span class="co">ripple delete</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>At this point, I just want to assert that we have a ripple delete menu item.</p>
<p>I null out any parameters that are not used.</p>
<p>To make this test run, I also have to extend <code>TestGui</code> with <code>print_context_menu_items</code>:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="kw">diff --git a/rlvideolib/gui/testing.py b/rlvideolib/gui/testing.py</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a>index aaba74d..0df0dda 100644</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a><span class="dt">--- a/rlvideolib/gui/testing.py</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a><span class="dt">+++ b/rlvideolib/gui/testing.py</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a><span class="dt">@@ -4,7 +4,12 @@ class TestGui:</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true"></a>         self.click_context_menu = click_context_menu</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true"></a></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true"></a>     def show_context_menu(self, menu):</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true"></a><span class="va">+        self.last_context_menu = menu</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true"></a>         for item in menu:</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true"></a>             if item.label == self.click_context_menu:</span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true"></a>                 item.action()</span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true"></a>                 return</span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true"></a><span class="va">+</span></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true"></a><span class="va">+    def print_context_menu_items(self):</span></span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true"></a><span class="va">+        for item in self.last_context_menu:</span></span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true"></a><span class="va">+            print(item.label)</span></span></code></pre></div>
<p>Let’s make it pass:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="dt">@@ -290,6 +305,7 @@ class CutAction(Action):</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a>         gui.show_context_menu([</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a>             MenuItem(label=&quot;over&quot;, action=mix_strategy_updater(&quot;over&quot;)),</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a>             MenuItem(label=&quot;under&quot;, action=mix_strategy_updater(&quot;under&quot;)),</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true"></a><span class="va">+            MenuItem(label=&quot;ripple delete&quot;, action=lambda: None),</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true"></a>         ])</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true"></a></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true"></a>     def mouse_up(self):</span></code></pre></div>
<p>Just enough to make the test pass. We now have a context menu item that will do nothing when we click on it.</p>
<pre class="text"><code>$ ./make.py commit -m &#39;New ripple delete context menu item that does nothing.&#39;
.....................................................
----------------------------------------------------------------------
Ran 53 tests in 2.893s

OK
[main 2659383] New ripple delete context menu item that does nothing.
 2 files changed, 21 insertions(+)</code></pre>
<h2 id="moving-slowly">Moving slowly</h2>
<p>The <code>TestGui</code> that we had to modify for this test lives in the <code>rlvideolib.gui.testing</code> module. The <code>rlvideolib.gui</code> package looks like this:</p>
<pre class="text"><code>rlvideolib/gui
├── framework.py
├── generic.py
├── gtk.py
├── __init__.py
└── testing.py</code></pre>
<p>We recently extracted the framework module. It contains framework related GUI code that does not depend on GTK and does not depend on our application. It makes sense for a framework to include facilities to help testing, right?</p>
<p>Let’s get rid of the testing module and move its contents to the framework module.</p>
<pre class="text"><code>$ ./make.py commit -m &#39;Move TestGui to rlvideolib.gui.framework and get rid of the testing module.&#39;
.....................................................
----------------------------------------------------------------------
Ran 53 tests in 2.896s

OK
[main 3ea95fc] Move TestGui to rlvideolib.gui.framework and get rid of the testing module.
 4 files changed, 21 insertions(+), 3 deletions(-)
 rename rlvideolib/gui/{testing.py =&gt; framework.py} (58%)</code></pre>
<p>We have made small progress towards the ripple delete feature and made the code base a little cleaner by indicating that test helpers are part of the GUI framework. Nice!</p>
<p>I feel much more motivated now than when I got started. But before I move on, I will take a break and have some breakfast.</p>
<h2 id="back-to-the-test">Back to the test</h2>
<p>Let’s go back to the test. This is what we have:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; project = None</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; cut = None</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; scrollbar = None</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; action = CutAction(project, cut, scrollbar)</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; gui = TestGui()</span></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; action.right_mouse_down(x=None, y=None, gui=gui)</span></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; gui.print_context_menu_items()</span></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true"></a><span class="co">over</span></span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true"></a><span class="co">under</span></span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true"></a><span class="co">ripple delete</span></span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>That feels like a lot of set up to me. And many of the parameters are <code>None</code>.</p>
<p>I take a closer look at the x and y coordinates. As far as I can tell, no action is using those in the <code>right_mouse_down</code> method. Let’s get rid of them.</p>
<pre class="text"><code>$ ./make.py commit -m &#39;Get rid of x and y coordinates in Action.right_mouse_down since they are never used.&#39;
.....................................................
----------------------------------------------------------------------
Ran 53 tests in 3.403s

OK
[main 2c4c80e] Get rid of x and y coordinates in Action.right_mouse_down since they are never used.
 3 files changed, 4 insertions(+), 4 deletions(-)</code></pre>
<p>Let’s further refactor the test to this:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true"></a><span class="co">I show cut menu items on right click:</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true"></a></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; gui = TestGui()</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; action = CutAction(project=None, cut=None, scrollbar=None)</span></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; action.right_mouse_down(gui=gui)</span></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; gui.print_context_menu_items()</span></span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true"></a><span class="co">over</span></span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true"></a><span class="co">under</span></span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true"></a><span class="co">ripple delete</span></span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>This indicates that the showing of the menu does not depend on the project, cut, or scrollbar. I think that it reads quite nicely.</p>
<pre class="text"><code>$ ./make.py commit -m &#39;Change cut action test to be assertion for menu items shown.&#39;
.....................................................
----------------------------------------------------------------------
Ran 53 tests in 3.411s

OK
[main 1708e0c] Change cut action test to be assertion for menu items shown.
 1 file changed, 2 insertions(+), 5 deletions(-)</code></pre>
<p>Now we need a new test for clicking the ripple delete menu item.</p>
<h2 id="ripple-delete-test">Ripple delete test</h2>
<p>I write this test:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true"></a><span class="co">I ripple delete:</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true"></a></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; gui = TestGui(click_context_menu=&quot;ripple delete&quot;)</span></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; action = CutAction(project=None, cut=None, scrollbar=None)</span></span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; action.right_mouse_down(gui=gui)</span></span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true"></a><span class="co">do ripple delete</span></span>
<span id="cb12-8"><a href="#cb12-8" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>That is, I assert that “do ripple delete” is printed when we press that menu item. Baby steps.</p>
<p>I make it pass like this:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true"></a><span class="dt">@@ -299,10 +306,12 @@ class CutAction(Action):</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true"></a>                     transaction.modify(self.cut.id, lambda cut:</span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true"></a>                         cut.with_mix_strategy(value))</span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true"></a>             return update</span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true"></a><span class="va">+        def ripple_delete():</span></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true"></a><span class="va">+            print(&quot;do ripple delete&quot;)</span></span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true"></a>         gui.show_context_menu([</span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true"></a>             MenuItem(label=&quot;over&quot;, action=mix_strategy_updater(&quot;over&quot;)),</span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true"></a>             MenuItem(label=&quot;under&quot;, action=mix_strategy_updater(&quot;under&quot;)),</span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true"></a><span class="st">-            MenuItem(label=&quot;ripple delete&quot;, action=lambda: None),</span></span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true"></a><span class="va">+            MenuItem(label=&quot;ripple delete&quot;, action=ripple_delete),</span></span>
<span id="cb13-12"><a href="#cb13-12" aria-hidden="true"></a>         ])</span></code></pre></div>
<pre class="text"><code>$ ./make.py commit -m &#39;Add non-empty action for ripple delete.&#39;
.....................................................
----------------------------------------------------------------------
Ran 53 tests in 2.909s

OK
[main 4c4e272] Add non-empty action for ripple delete.
 1 file changed, 10 insertions(+), 1 deletion(-)</code></pre>
<h2 id="the-next-step">The next step</h2>
<p>Let’s take the next step and assert that it actually does a ripple delete.</p>
<p>I modify the test to this:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true"></a><span class="co">I ripple delete:</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true"></a></span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; from rlvideolib.domain.project import Project</span></span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; project = Project.new()</span></span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; with project.new_transaction() as transaction:</span></span>
<span id="cb15-7"><a href="#cb15-7" aria-hidden="true"></a><span class="co">...     hello_id = transaction.add_text_clip(&quot;hello&quot;, length=10, id=&quot;A&quot;)</span></span>
<span id="cb15-8"><a href="#cb15-8" aria-hidden="true"></a><span class="co">...     _        = transaction.add_text_clip(&quot;there&quot;, length=10, id=&quot;B&quot;)</span></span>
<span id="cb15-9"><a href="#cb15-9" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; project.split_into_sections().to_ascii_canvas()</span></span>
<span id="cb15-10"><a href="#cb15-10" aria-hidden="true"></a><span class="co">|&lt;-A0-----&gt;&lt;-B0-----&gt;|</span></span>
<span id="cb15-11"><a href="#cb15-11" aria-hidden="true"></a></span>
<span id="cb15-12"><a href="#cb15-12" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; CutAction(</span></span>
<span id="cb15-13"><a href="#cb15-13" aria-hidden="true"></a><span class="co">...     project=project,</span></span>
<span id="cb15-14"><a href="#cb15-14" aria-hidden="true"></a><span class="co">...     cut=project.project_data.get_cut(hello_id),</span></span>
<span id="cb15-15"><a href="#cb15-15" aria-hidden="true"></a><span class="co">...     scrollbar=None</span></span>
<span id="cb15-16"><a href="#cb15-16" aria-hidden="true"></a><span class="co">... ).right_mouse_down(</span></span>
<span id="cb15-17"><a href="#cb15-17" aria-hidden="true"></a><span class="co">...     gui=TestGui(click_context_menu=&quot;ripple delete&quot;)</span></span>
<span id="cb15-18"><a href="#cb15-18" aria-hidden="true"></a><span class="co">... )</span></span>
<span id="cb15-19"><a href="#cb15-19" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; project.split_into_sections().to_ascii_canvas()</span></span>
<span id="cb15-20"><a href="#cb15-20" aria-hidden="true"></a><span class="co">|&lt;-B0-----&gt;|</span></span>
<span id="cb15-21"><a href="#cb15-21" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>This got quite messy. Let’s see if we can break it down. First we setup a new project with two clips next to each other. Then we simulate that the ripple delete menu item is clicked and assert that the first clip is removed and the second clip is moved to the beginning.</p>
<p>The setup of the project is kind of messy. For example, we have to do the import in the doctest to prevent a circular import. And we reach in to grab the project data to get the cut.</p>
<p>There are many things to improve here.</p>
<p>But I think I want to move on and get it to pass. We’ll get back to the issues above. I promise.</p>
<p>I make this change:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true"></a>         def ripple_delete():</span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true"></a><span class="st">-            print(&quot;do ripple delete&quot;)</span></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true"></a><span class="va">+            self.project.ripple_delete(self.cut.id)</span></span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true"></a>         gui.show_context_menu([</span></code></pre></div>
<p>That tells me that ‘Project’ object has no attribute ‘ripple_delete’.</p>
<p>I add it like this:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true"></a><span class="kw">class</span> Project:</span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true"></a></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true"></a>    ...</span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true"></a></span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true"></a>    <span class="kw">def</span> ripple_delete(<span class="va">self</span>, cut_id):</span>
<span id="cb17-6"><a href="#cb17-6" aria-hidden="true"></a>        <span class="cf">with</span> <span class="va">self</span>.new_transaction() <span class="im">as</span> transaction:</span>
<span id="cb17-7"><a href="#cb17-7" aria-hidden="true"></a>            transaction.ripple_delete(cut_id)</span></code></pre></div>
<p>That tells med that ‘Transaction’ object has no attribute ‘ripple_delete’.</p>
<p>We’re getting closer.</p>
<p>I can’t come up with the general solution for ripple delete, so I hard code a solution for the particular case where we only have two cuts in the project:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true"></a><span class="kw">class</span> Transaction:</span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true"></a></span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true"></a>    ...</span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true"></a></span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true"></a>    <span class="kw">def</span> ripple_delete(<span class="va">self</span>, cut_id):</span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true"></a>        data <span class="op">=</span> <span class="va">self</span>.project.project_data</span>
<span id="cb18-7"><a href="#cb18-7" aria-hidden="true"></a>        data <span class="op">=</span> data.remove_cut(cut_id)</span>
<span id="cb18-8"><a href="#cb18-8" aria-hidden="true"></a>        data <span class="op">=</span> data.modify_cut(<span class="bu">list</span>(data.cuts.cut_map.keys())[<span class="dv">0</span>], <span class="kw">lambda</span> cut: cut.move(<span class="op">-</span><span class="dv">10</span>))</span>
<span id="cb18-9"><a href="#cb18-9" aria-hidden="true"></a>        <span class="va">self</span>.project.set_project_data(data)</span></code></pre></div>
<p>And also make a quick and dirty version of <code>remove_cut</code>.</p>
<pre class="text"><code>$ ./make.py commit -m &#39;Quick and dirty version of ripple delete that works in one case.&#39;
.....................................................
----------------------------------------------------------------------
Ran 53 tests in 3.902s

OK
[main 7ba45c9] Quick and dirty version of ripple delete that works in one case.
 2 files changed, 43 insertions(+), 5 deletions(-)</code></pre>
<p>Here is the example project:</p>
<p>
<center>
<img src="ripple1.png" title="fig:" alt="Before ripple delete." />
</center>
</p>
<p>If we try to ripple delete the first clip in the GUI, we get this:</p>
<p>
<center>
<img src="ripple2.png" title="fig:" alt="After ripple delete." />
</center>
</p>
<p>Not quite right, but it shows progress in the right direction.</p>
<p>I think we can leave the cut action test alone for a while now. It is fine. Now we need to turn our attention to the ripple delete method in the transaction and make it work as intended.</p>
<h2 id="generalizing-ripple-delete">Generalizing ripple delete</h2>
<p>The project has a hierarchy of classes representing the different parts. The ripple delete only affects the cuts. I make that clear by just forwarding <code>ripple_delete</code> calls until we get to <code>Cuts</code>.</p>
<p>Transaction forwards to project data:</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true"></a><span class="kw">class</span> Transaction:</span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true"></a></span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true"></a>    ...</span>
<span id="cb20-4"><a href="#cb20-4" aria-hidden="true"></a></span>
<span id="cb20-5"><a href="#cb20-5" aria-hidden="true"></a>    <span class="kw">def</span> ripple_delete(<span class="va">self</span>, cut_id):</span>
<span id="cb20-6"><a href="#cb20-6" aria-hidden="true"></a>        <span class="va">self</span>.project.set_project_data(<span class="va">self</span>.project.project_data.ripple_delete(cut_id))</span></code></pre></div>
<p>And project data forwards to cuts:</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true"></a><span class="kw">class</span> ProjectData(namedtuple(<span class="st">&quot;ProjectData&quot;</span>, <span class="st">&quot;sources,cuts&quot;</span>)):</span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true"></a></span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true"></a>    ...</span>
<span id="cb21-4"><a href="#cb21-4" aria-hidden="true"></a></span>
<span id="cb21-5"><a href="#cb21-5" aria-hidden="true"></a>    <span class="kw">def</span> ripple_delete(<span class="va">self</span>, cut_id):</span>
<span id="cb21-6"><a href="#cb21-6" aria-hidden="true"></a>        <span class="cf">return</span> <span class="va">self</span>._replace(cuts<span class="op">=</span><span class="va">self</span>.cuts.ripple_delete(cut_id))</span></code></pre></div>
<p>And finally, the hard coded ripple delete is here:</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true"></a><span class="kw">class</span> Cuts(namedtuple(<span class="st">&quot;Cuts&quot;</span>, <span class="st">&quot;cut_map,region_to_cuts,region_group_size&quot;</span>)):</span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true"></a></span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true"></a>    ...</span>
<span id="cb22-4"><a href="#cb22-4" aria-hidden="true"></a></span>
<span id="cb22-5"><a href="#cb22-5" aria-hidden="true"></a>    <span class="kw">def</span> ripple_delete(<span class="va">self</span>, cut_id):</span>
<span id="cb22-6"><a href="#cb22-6" aria-hidden="true"></a>        data <span class="op">=</span> <span class="va">self</span></span>
<span id="cb22-7"><a href="#cb22-7" aria-hidden="true"></a>        data <span class="op">=</span> data.remove(cut_id)</span>
<span id="cb22-8"><a href="#cb22-8" aria-hidden="true"></a>        data <span class="op">=</span> data.modify(<span class="bu">list</span>(data.cut_map.keys())[<span class="dv">0</span>], <span class="kw">lambda</span> cut: cut.move(<span class="op">-</span><span class="dv">10</span>))</span>
<span id="cb22-9"><a href="#cb22-9" aria-hidden="true"></a>        <span class="cf">return</span> data</span></code></pre></div>
<pre class="text"><code>$ ./make.py commit -m &#39;Move ripple_delete down to Cuts.&#39;
.....................................................
----------------------------------------------------------------------
Ran 53 tests in 3.397s

OK
[main c5deb77] Move ripple_delete down to Cuts.
 2 files changed, 10 insertions(+), 7 deletions(-)</code></pre>
<p>If we can just get that one working properly, I think our feature is done.</p>
<h2 id="endless-sidetracks">Endless sidetracks?</h2>
<p>Implementing the ripple delete was much more difficult than I expected. I feel like I hit problem after problem that I need to solve before I can actually get to the ripple delete. I get tired and demotivated again.</p>
<p>Let’s recap what’s left on our imaginary TODO list.</p>
<p>First there is the issue of the messy cut action test, where it was particularly painful to setup a project.</p>
<p>And then there is the ripple delete in cuts that is not fully implemented.</p>
<p>I actually think that is it.</p>
<p>Not as much as I felt it was. Writing it down helped me realize that.</p>
<p>I think both of them might be a little difficult and take some time. Instead of documenting them in detail, I will just report on the status once done.</p>
<h2 id="report">Report</h2>
<p>I managed to generalize ripple delete and add some tests for it.</p>
<p>I’m not sure it’s perfect, but we can improve it later with the help of test. I’m sure it is not harmful at least.</p>
<p>However, it brings up another question. What if we do a ripple delete on the wrong clip? How to recover from that? The answer right now is that we can’t. Therefore, I think an undo function is high on the priority list. It should be relatively straight forward to implement thanks to the immutable data structures.</p>
<p>When it comes to the project setup, I just didn’t have the energy to do anything about it. I know this project setup is done in a few test, so I’m sure we will come across it later. Hopefully I have a better idea for how to improve it then. And some more energy. I’m OK leaving it like this. I don’t think we have made things worse. So much for a promise to get back to it.</p>
<h2 id="summary">Summary</h2>
<p>This change took longer than expected in part because the design was not clean enough in a few places, and in part because the project was lacking methods for modifying cuts because there had been no need for it.</p>
<p>We cleaned up the design in a few places add added a bit more functionality for project editing operations.</p>
<p>Next time we work in this area, I think we can move faster.</p>
<p>Is this evolutionary design?</p>
<p>This also gets me thinking about stories and estimating stories and how that does not make sense in this context. If things get easier and easier to implement over time, that would also mean that time to complete a story takes less and less time. So you can’t really estimate multiple stories, because the estimate changes once the previous story is completed. At least if stories somewhat overlap it terms of changes in the code base.</p>
]]></description>
    <pubDate>Wed, 02 Aug 2023 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/devlog-008-how-to-overcome-lack-of-motivation/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>DevLog 007: Which feature to work on next?</title>
    <link>http://rickardlindberg.me/writing/devlog-007-which-feature-to-work-on-next/</link>
    <description><![CDATA[<h1>DevLog 007: Which feature to work on next?</h1>

<p><em>Published on  1 August 2023.</em></p>

<p>In this session I will select what to work on next in my <a href="/projects/rlvideo/index.html">video editor</a> by trying to use it to edit some footage and see where I get stuck.</p>
<p>I’ve previously managed to create a project which has some footage imported and proxy clips generated. I can open that project like this:</p>
<pre class="text"><code>$ rlvideo my-project.rlvideo</code></pre>
<p>When I do that, two things happen that annoy me.</p>
<p>First of all, there are lots of exceptions printed to the console:</p>
<pre class="text"><code>Traceback (most recent call last):
  File &quot;/home/rick/rlvideo/rlvideolib/gui/gtk.py&quot;, line 80, in timeline_draw
    self.timeline.draw_cairo(
  File &quot;/home/rick/rlvideo/rlvideolib/gui/generic.py&quot;, line 200, in draw_cairo
    self.draw_scrollbar(context, area, playhead_position)
  File &quot;/home/rick/rlvideo/rlvideolib/gui/generic.py&quot;, line 287, in draw_scrollbar
    self.rectangle_map.add(Rectangle(
  File &quot;/home/rick/rlvideo/rlvideolib/graphics/rectangle.py&quot;, line 19, in __init__
    raise ValueError(&quot;Width must be &gt; 0.&quot;)
ValueError: Width must be &gt; 0.</code></pre>
<p>And second of all, it seems like it’s loading proxy clips again even though they are already generated:</p>
<p>
<center>
<img src="loading.png" title="fig:" alt="Loading." />
</center>
</p>
<p>Which one should I work on? Should I work on something else? What is most important?</p>
<h2 id="analysis">Analysis</h2>
<p>Let’s do an analysis of why the two problems occur.</p>
<p>The exception when drawing the scrollbar happens because there are too many clips in a too small window, so the width of the scrollbar handle gets smaller than 1 pixel. It can be worked around by zooming out a bit so that a larger portion of the timeline is visible.</p>
<p>This is obviously not good, but not the end of the world.</p>
<p>The fix probably involves setting a minimum width on the handle.</p>
<p>What about proxies?</p>
<p>Actually, proxies are not created again, but in order to find the correct proxy for a clip, the clip’s md5 sum has to be calculated. This is much faster than generating the proxy, but still takes some time, delaying me when I want to edit clips.</p>
<p>The fix probably involves storing the path of the proxy clip in the project file.</p>
<p>It is also not the end of the world. I can open the editor, go make some coffee, and maybe when I’m back, it’s done.</p>
<h2 id="strategy">Strategy</h2>
<p>So which should I work on?</p>
<p>If you work in an agile fashion, doing evolutionary design, what should happen is that it should get easier and easier to work with the code base and add new features. I learned that from <a href="https://www.jamesshore.com/v2/books/aoad2/design">James Shore</a>.</p>
<p>Say I start working on the scrollbar exception now. When I’m done with that, it should be easier to fix the proxy loading issue than it was before, assuming that the areas that need change overlap.</p>
<p>With that kind of thinking, it doesn’t matter that much what we choose to work on as long as we think it is somewhat important. Just pick one and the next thing will be easier.</p>
<p>It almost sounds too good to be true, but I believe in it. For this to work though, we need to practice evolutionary design. We’ll do that today.</p>
<p>Let’s pick the scrollbar issue.</p>
<h2 id="review">Review</h2>
<p>The error happens in <code>draw_scrollbar</code> which looks like this:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="kw">def</span> draw_scrollbar(<span class="va">self</span>, context, area, playhead_position):</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a>    x_start <span class="op">=</span> <span class="va">self</span>.scrollbar.region_shown.start <span class="op">/</span> <span class="va">self</span>.scrollbar.whole_region.length <span class="op">*</span> area.width</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a>    x_end <span class="op">=</span> <span class="va">self</span>.scrollbar.region_shown.end <span class="op">/</span> <span class="va">self</span>.scrollbar.whole_region.length <span class="op">*</span> area.width</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a>    playhead_x <span class="op">=</span> playhead_position <span class="op">/</span> <span class="va">self</span>.scrollbar.whole_region.length <span class="op">*</span> area.width</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true"></a>    <span class="co"># </span><span class="al">TODO</span><span class="co">: add callback mechanism in rectangle map</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true"></a>    x, y, w, h <span class="op">=</span> (</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true"></a>        area.x<span class="op">+</span>x_start,</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true"></a>        area.y,</span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true"></a>        x_end<span class="op">-</span>x_start,</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true"></a>        area.height</span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true"></a>    )</span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true"></a>    rect_x, rect_y <span class="op">=</span> context.user_to_device(x, y)</span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true"></a>    rect_w, rect_h <span class="op">=</span> context.user_to_device_distance(w, h)</span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true"></a>    <span class="va">self</span>.rectangle_map.add(Rectangle(</span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true"></a>        x<span class="op">=</span><span class="bu">int</span>(rect_x),</span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true"></a>        y<span class="op">=</span><span class="bu">int</span>(rect_y),</span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true"></a>        width<span class="op">=</span><span class="bu">int</span>(rect_w),</span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true"></a>        height<span class="op">=</span><span class="bu">int</span>(rect_h)</span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true"></a>    ), <span class="st">&quot;position&quot;</span>)</span>
<span id="cb3-21"><a href="#cb3-21" aria-hidden="true"></a></span>
<span id="cb3-22"><a href="#cb3-22" aria-hidden="true"></a>    context.rectangle(area.x, area.y, area.width, area.height)</span>
<span id="cb3-23"><a href="#cb3-23" aria-hidden="true"></a>    context.set_source_rgba(<span class="fl">0.4</span>, <span class="fl">0.9</span>, <span class="fl">0.4</span>, <span class="fl">0.5</span>)</span>
<span id="cb3-24"><a href="#cb3-24" aria-hidden="true"></a>    context.fill()</span>
<span id="cb3-25"><a href="#cb3-25" aria-hidden="true"></a></span>
<span id="cb3-26"><a href="#cb3-26" aria-hidden="true"></a>    scroll_box <span class="op">=</span> Rectangle(x, y, w, h)</span>
<span id="cb3-27"><a href="#cb3-27" aria-hidden="true"></a>    context.rectangle(scroll_box.x, scroll_box.y, scroll_box.width, scroll_box.height)</span>
<span id="cb3-28"><a href="#cb3-28" aria-hidden="true"></a>    context.set_source_rgba(<span class="fl">0.4</span>, <span class="fl">0.9</span>, <span class="fl">0.4</span>, <span class="fl">0.5</span>)</span>
<span id="cb3-29"><a href="#cb3-29" aria-hidden="true"></a>    context.fill()</span>
<span id="cb3-30"><a href="#cb3-30" aria-hidden="true"></a></span>
<span id="cb3-31"><a href="#cb3-31" aria-hidden="true"></a>    <span class="co"># Playhead</span></span>
<span id="cb3-32"><a href="#cb3-32" aria-hidden="true"></a>    context.set_source_rgb(<span class="fl">0.1</span>, <span class="fl">0.1</span>, <span class="fl">0.1</span>)</span>
<span id="cb3-33"><a href="#cb3-33" aria-hidden="true"></a>    context.move_to(playhead_x, area.top)</span>
<span id="cb3-34"><a href="#cb3-34" aria-hidden="true"></a>    context.line_to(playhead_x, area.bottom)</span>
<span id="cb3-35"><a href="#cb3-35" aria-hidden="true"></a>    context.stroke()</span>
<span id="cb3-36"><a href="#cb3-36" aria-hidden="true"></a></span>
<span id="cb3-37"><a href="#cb3-37" aria-hidden="true"></a>    context.set_source_rgb(<span class="fl">0.1</span>, <span class="fl">0.1</span>, <span class="fl">0.1</span>)</span>
<span id="cb3-38"><a href="#cb3-38" aria-hidden="true"></a>    scroll_box.draw_pixel_perfect_border(context, <span class="dv">2</span>)</span></code></pre></div>
<p>When I look at this, it’s difficult for me to see what is going on. It is just too long and does too much. It doesn’t clearly represent what I had in mind when I wrote it.</p>
<p>If we are going to do evolutionary design, we have to pay more attention to design. All the time.</p>
<p>It’s fine that I didn’t pay too much attention last time I modified this method, but now that we are here again, let’s give it some extra love so that it is easier to work with next time.</p>
<h2 id="further-review">Further review</h2>
<p>The error happens when creating the rectangle in the following piece of code:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="co"># </span><span class="al">TODO</span><span class="co">: add callback mechanism in rectangle map</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a>x, y, w, h <span class="op">=</span> (</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a>    area.x<span class="op">+</span>x_start,</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a>    area.y,</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true"></a>    x_end<span class="op">-</span>x_start,</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true"></a>    area.height</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true"></a>)</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true"></a>rect_x, rect_y <span class="op">=</span> context.user_to_device(x, y)</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true"></a>rect_w, rect_h <span class="op">=</span> context.user_to_device_distance(w, h)</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true"></a><span class="va">self</span>.rectangle_map.add(Rectangle(</span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true"></a>    x<span class="op">=</span><span class="bu">int</span>(rect_x),</span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true"></a>    y<span class="op">=</span><span class="bu">int</span>(rect_y),</span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true"></a>    width<span class="op">=</span><span class="bu">int</span>(rect_w),</span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true"></a>    height<span class="op">=</span><span class="bu">int</span>(rect_h)</span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true"></a>), <span class="st">&quot;position&quot;</span>)</span></code></pre></div>
<p>Look, there is even a TODO comment there. Now that we are touching this piece of code again, perhaps it’s time to deal with it.</p>
<h2 id="the-rectangle-map">The rectangle map</h2>
<p>The rectangle map is used to store areas of the screen that the user can interact with. You can put objects at a given rectangle and retrieve them by position. Here is an example:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; r = RectangleMap()</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; r.add(Rectangle(x=0, y=0, width=10, height=10), &quot;item&quot;)</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; r.get(5, 5)</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true"></a><span class="co">&#39;item&#39;</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; r.get(100, 100) is None</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true"></a><span class="co">True</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>In the timeline area, each cut puts itself in a rectangle, allowing a context menu to be shown when it is right clicked like this:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="kw">def</span> right_mouse_down(<span class="va">self</span>, x, y, gui):</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a>    cut <span class="op">=</span> <span class="va">self</span>.rectangle_map.get(x, y)</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a>    <span class="cf">if</span> <span class="bu">isinstance</span>(cut, Cut):</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true"></a>        <span class="co"># show context menu</span></span></code></pre></div>
<p>The TODO comment that I wrote suggests that we should instead store objects that can handle <code>right_mouse_down</code> events for example so that we don’t need to check instances at the outermost event handler.</p>
<p>Let’s see if we can do it.</p>
<h2 id="action-test">Action test</h2>
<p>I sketch this:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a><span class="kw">class</span> Action:</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true"></a>    <span class="kw">def</span> left_mouse_down(<span class="va">self</span>, x, y):</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true"></a>        <span class="cf">pass</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true"></a></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true"></a>    <span class="kw">def</span> right_mouse_down(<span class="va">self</span>, x, y, gui):</span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true"></a>        <span class="cf">pass</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true"></a></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true"></a>    <span class="kw">def</span> mouse_move(<span class="va">self</span>, x, y):</span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true"></a>        <span class="cf">pass</span></span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true"></a></span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true"></a>    <span class="kw">def</span> mouse_up(<span class="va">self</span>):</span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true"></a>        <span class="cf">pass</span></span>
<span id="cb7-14"><a href="#cb7-14" aria-hidden="true"></a></span>
<span id="cb7-15"><a href="#cb7-15" aria-hidden="true"></a><span class="kw">class</span> ScrollbarDragAction(Action):</span>
<span id="cb7-16"><a href="#cb7-16" aria-hidden="true"></a></span>
<span id="cb7-17"><a href="#cb7-17" aria-hidden="true"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, timeline, scrollbar):</span>
<span id="cb7-18"><a href="#cb7-18" aria-hidden="true"></a>        <span class="va">self</span>.timeline <span class="op">=</span> timeline</span>
<span id="cb7-19"><a href="#cb7-19" aria-hidden="true"></a>        <span class="va">self</span>.scrollbar <span class="op">=</span> scrollbar</span>
<span id="cb7-20"><a href="#cb7-20" aria-hidden="true"></a>        <span class="va">self</span>.mouse_up()</span>
<span id="cb7-21"><a href="#cb7-21" aria-hidden="true"></a></span>
<span id="cb7-22"><a href="#cb7-22" aria-hidden="true"></a>    <span class="kw">def</span> left_mouse_down(<span class="va">self</span>, x, y):</span>
<span id="cb7-23"><a href="#cb7-23" aria-hidden="true"></a>        <span class="va">self</span>.x <span class="op">=</span> x</span>
<span id="cb7-24"><a href="#cb7-24" aria-hidden="true"></a></span>
<span id="cb7-25"><a href="#cb7-25" aria-hidden="true"></a>    <span class="kw">def</span> mouse_up(<span class="va">self</span>):</span>
<span id="cb7-26"><a href="#cb7-26" aria-hidden="true"></a>        <span class="va">self</span>.x <span class="op">=</span> <span class="va">None</span></span>
<span id="cb7-27"><a href="#cb7-27" aria-hidden="true"></a></span>
<span id="cb7-28"><a href="#cb7-28" aria-hidden="true"></a>    <span class="kw">def</span> mouse_move(<span class="va">self</span>, x, y):</span>
<span id="cb7-29"><a href="#cb7-29" aria-hidden="true"></a>        <span class="cf">if</span> <span class="va">self</span>.x <span class="kw">is</span> <span class="kw">not</span> <span class="va">None</span>:</span>
<span id="cb7-30"><a href="#cb7-30" aria-hidden="true"></a>            <span class="va">self</span>.timeline.set_scrollbar(</span>
<span id="cb7-31"><a href="#cb7-31" aria-hidden="true"></a>                <span class="va">self</span>.scrollbar.move_scrollbar(</span>
<span id="cb7-32"><a href="#cb7-32" aria-hidden="true"></a>                    x <span class="op">-</span> <span class="va">self</span>.x</span>
<span id="cb7-33"><a href="#cb7-33" aria-hidden="true"></a>                )</span>
<span id="cb7-34"><a href="#cb7-34" aria-hidden="true"></a>            )</span></code></pre></div>
<p>Let’s see if we can use it.</p>
<p>I modify <code>right_mouse_down</code> and all the other event handlers to this:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a><span class="kw">def</span> right_mouse_down(<span class="va">self</span>, x, y, gui):</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true"></a>    item <span class="op">=</span> <span class="va">self</span>.rectangle_map.get(x, y)</span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true"></a>    <span class="cf">if</span> <span class="bu">isinstance</span>(item, Action):</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true"></a>        item.right_mouse_down(x, y, gui)</span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true"></a>        <span class="va">self</span>.down_item <span class="op">=</span> item</span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true"></a>        <span class="cf">return</span></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true"></a>    ...</span></code></pre></div>
<p>This is special handling for the case where the entry in the rectangle map is an <code>Action</code>. Eventually, we want there to be only actions in there, and then the instance check can be removed.</p>
<p>Next I change what we put into the rectangle map for the scrollbar to this:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true"></a><span class="va">self</span>.rectangle_map.add(Rectangle(</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true"></a>    x<span class="op">=</span><span class="bu">int</span>(rect_x),</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true"></a>    y<span class="op">=</span><span class="bu">int</span>(rect_y),</span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true"></a>    width<span class="op">=</span><span class="bu">int</span>(rect_w),</span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true"></a>    height<span class="op">=</span><span class="bu">int</span>(rect_h)</span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true"></a>), ScrollbarDragAction(<span class="va">self</span>, <span class="va">self</span>.scrollbar))</span></code></pre></div>
<p>Boom! Test failure:</p>
<pre class="text"><code>Failed example:
    timeline.rectangle_map # doctest: +ELLIPSIS
Differences (ndiff with -expected +actual):
    ...
      Rectangle(x=0, y=0, width=300, height=20):
        scrub
      Rectangle(x=0, y=77, width=300, height=23):
    -   position
    +   &lt;rlvideolib.gui.generic.ScrollbarDragAction object at 0x7fd1f8891d00&gt;</code></pre>
<p>There is now another object in the rectangle map. Let’s modify the test to assert that instead.</p>
<p>The question now is, will it work in the application?</p>
<p>This behavior I think lacks tests, so let’s try.</p>
<p>Nothing happens.</p>
<p>I review the code and find that I had forgotten the <code>mouse_move</code> event:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true"></a><span class="kw">def</span> mouse_move(<span class="va">self</span>, x, y):</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true"></a>    <span class="cf">if</span> <span class="va">self</span>.down_item:</span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true"></a>        <span class="va">self</span>.down_item.mouse_move(x, y)</span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true"></a>        <span class="cf">return</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true"></a>    ...</span></code></pre></div>
<p>And that actually works!</p>
<pre class="text"><code>$ ./make.py commit -m &#39;Add a ScrollbarDragAction instead of position string.&#39;
...................................................
----------------------------------------------------------------------
Ran 51 tests in 3.405s

OK
[main 87c9b07] Add a ScrollbarDragAction instead of position string.
 1 file changed, 59 insertions(+), 2 deletions(-)</code></pre>
<p>I make the same change for the remaining actions.</p>
<p>Here is the one for scrubbing the timeline:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true"></a><span class="kw">class</span> ScrubAction(Action):</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true"></a></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, player, scrollbar):</span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true"></a>        <span class="va">self</span>.player <span class="op">=</span> player</span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true"></a>        <span class="va">self</span>.scrollbar <span class="op">=</span> scrollbar</span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true"></a>        <span class="va">self</span>.mouse_up()</span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true"></a></span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true"></a>    <span class="kw">def</span> left_mouse_down(<span class="va">self</span>, x, y):</span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true"></a>        <span class="va">self</span>.x <span class="op">=</span> x</span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true"></a></span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true"></a>    <span class="kw">def</span> mouse_up(<span class="va">self</span>):</span>
<span id="cb13-12"><a href="#cb13-12" aria-hidden="true"></a>        <span class="va">self</span>.x <span class="op">=</span> <span class="va">None</span></span>
<span id="cb13-13"><a href="#cb13-13" aria-hidden="true"></a></span>
<span id="cb13-14"><a href="#cb13-14" aria-hidden="true"></a>    <span class="kw">def</span> mouse_move(<span class="va">self</span>, x, y):</span>
<span id="cb13-15"><a href="#cb13-15" aria-hidden="true"></a>        <span class="cf">if</span> <span class="va">self</span>.x <span class="kw">is</span> <span class="kw">not</span> <span class="va">None</span>:</span>
<span id="cb13-16"><a href="#cb13-16" aria-hidden="true"></a>            <span class="va">self</span>.player.scrub(</span>
<span id="cb13-17"><a href="#cb13-17" aria-hidden="true"></a>                <span class="bu">int</span>(<span class="bu">round</span>(</span>
<span id="cb13-18"><a href="#cb13-18" aria-hidden="true"></a>                    <span class="va">self</span>.scrollbar.content_start</span>
<span id="cb13-19"><a href="#cb13-19" aria-hidden="true"></a>                    <span class="op">+</span></span>
<span id="cb13-20"><a href="#cb13-20" aria-hidden="true"></a>                    x<span class="op">/</span><span class="va">self</span>.scrollbar.one_length_in_pixels</span>
<span id="cb13-21"><a href="#cb13-21" aria-hidden="true"></a>                ))</span>
<span id="cb13-22"><a href="#cb13-22" aria-hidden="true"></a>            )</span></code></pre></div>
<p>And here is the one for moving a cut and opening the context menu for a cut:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true"></a><span class="kw">class</span> CutAction(Action):</span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true"></a></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, project, cut, scrollbar):</span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true"></a>        <span class="va">self</span>.project <span class="op">=</span> project</span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true"></a>        <span class="va">self</span>.cut <span class="op">=</span> cut</span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true"></a>        <span class="va">self</span>.scrollbar <span class="op">=</span> scrollbar</span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true"></a>        <span class="va">self</span>.mouse_up()</span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true"></a></span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true"></a>    <span class="kw">def</span> left_mouse_down(<span class="va">self</span>, x, y):</span>
<span id="cb14-10"><a href="#cb14-10" aria-hidden="true"></a>        <span class="va">self</span>.transaction <span class="op">=</span> <span class="va">self</span>.project.new_transaction()</span>
<span id="cb14-11"><a href="#cb14-11" aria-hidden="true"></a>        <span class="va">self</span>.x <span class="op">=</span> x</span>
<span id="cb14-12"><a href="#cb14-12" aria-hidden="true"></a></span>
<span id="cb14-13"><a href="#cb14-13" aria-hidden="true"></a>    <span class="kw">def</span> right_mouse_down(<span class="va">self</span>, x, y, gui):</span>
<span id="cb14-14"><a href="#cb14-14" aria-hidden="true"></a>        <span class="kw">def</span> mix_strategy_updater(value):</span>
<span id="cb14-15"><a href="#cb14-15" aria-hidden="true"></a>            <span class="kw">def</span> update():</span>
<span id="cb14-16"><a href="#cb14-16" aria-hidden="true"></a>                <span class="cf">with</span> <span class="va">self</span>.project.new_transaction() <span class="im">as</span> transaction:</span>
<span id="cb14-17"><a href="#cb14-17" aria-hidden="true"></a>                    transaction.modify(<span class="va">self</span>.cut.<span class="bu">id</span>, <span class="kw">lambda</span> cut:</span>
<span id="cb14-18"><a href="#cb14-18" aria-hidden="true"></a>                        cut.with_mix_strategy(value))</span>
<span id="cb14-19"><a href="#cb14-19" aria-hidden="true"></a>            <span class="cf">return</span> update</span>
<span id="cb14-20"><a href="#cb14-20" aria-hidden="true"></a>        gui.show_context_menu([</span>
<span id="cb14-21"><a href="#cb14-21" aria-hidden="true"></a>            MenuItem(label<span class="op">=</span><span class="st">&quot;over&quot;</span>, action<span class="op">=</span>mix_strategy_updater(<span class="st">&quot;over&quot;</span>)),</span>
<span id="cb14-22"><a href="#cb14-22" aria-hidden="true"></a>            MenuItem(label<span class="op">=</span><span class="st">&quot;under&quot;</span>, action<span class="op">=</span>mix_strategy_updater(<span class="st">&quot;under&quot;</span>)),</span>
<span id="cb14-23"><a href="#cb14-23" aria-hidden="true"></a>        ])</span>
<span id="cb14-24"><a href="#cb14-24" aria-hidden="true"></a></span>
<span id="cb14-25"><a href="#cb14-25" aria-hidden="true"></a>    <span class="kw">def</span> mouse_up(<span class="va">self</span>):</span>
<span id="cb14-26"><a href="#cb14-26" aria-hidden="true"></a>        <span class="va">self</span>.transaction <span class="op">=</span> <span class="va">None</span></span>
<span id="cb14-27"><a href="#cb14-27" aria-hidden="true"></a>        <span class="va">self</span>.x <span class="op">=</span> <span class="va">None</span></span>
<span id="cb14-28"><a href="#cb14-28" aria-hidden="true"></a></span>
<span id="cb14-29"><a href="#cb14-29" aria-hidden="true"></a>    <span class="kw">def</span> mouse_move(<span class="va">self</span>, x, y):</span>
<span id="cb14-30"><a href="#cb14-30" aria-hidden="true"></a>        <span class="cf">if</span> <span class="va">self</span>.transaction <span class="kw">is</span> <span class="kw">not</span> <span class="va">None</span>:</span>
<span id="cb14-31"><a href="#cb14-31" aria-hidden="true"></a>            <span class="va">self</span>.transaction.rollback()</span>
<span id="cb14-32"><a href="#cb14-32" aria-hidden="true"></a>            <span class="va">self</span>.transaction.modify(<span class="va">self</span>.cut.<span class="bu">id</span>, <span class="kw">lambda</span> cut:</span>
<span id="cb14-33"><a href="#cb14-33" aria-hidden="true"></a>                cut.move(<span class="bu">int</span>((x<span class="op">-</span><span class="va">self</span>.x)<span class="op">/</span><span class="va">self</span>.scrollbar.one_length_in_pixels)))</span></code></pre></div>
<h2 id="clean-up">Clean up</h2>
<p>At this point, we only put actions into the rectangle map, and we can simplify the event handlers to this:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true"></a><span class="kw">def</span> left_mouse_down(<span class="va">self</span>, x, y):</span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true"></a>    <span class="va">self</span>.down_action <span class="op">=</span> <span class="va">self</span>.rectangle_map.get(x, y, Action())</span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true"></a>    <span class="va">self</span>.down_action.left_mouse_down(x, y)</span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true"></a></span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true"></a><span class="kw">def</span> right_mouse_down(<span class="va">self</span>, x, y, gui):</span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true"></a>    <span class="va">self</span>.down_action <span class="op">=</span> <span class="va">self</span>.rectangle_map.get(x, y, Action())</span>
<span id="cb15-7"><a href="#cb15-7" aria-hidden="true"></a>    <span class="va">self</span>.down_action.right_mouse_down(x, y, gui)</span>
<span id="cb15-8"><a href="#cb15-8" aria-hidden="true"></a></span>
<span id="cb15-9"><a href="#cb15-9" aria-hidden="true"></a><span class="kw">def</span> mouse_move(<span class="va">self</span>, x, y):</span>
<span id="cb15-10"><a href="#cb15-10" aria-hidden="true"></a>    <span class="cf">if</span> <span class="va">self</span>.down_action:</span>
<span id="cb15-11"><a href="#cb15-11" aria-hidden="true"></a>        <span class="va">self</span>.down_action.mouse_move(x, y)</span>
<span id="cb15-12"><a href="#cb15-12" aria-hidden="true"></a>    <span class="cf">else</span>:</span>
<span id="cb15-13"><a href="#cb15-13" aria-hidden="true"></a>        <span class="va">self</span>.rectangle_map.get(x, y, Action()).mouse_move(x, y)</span>
<span id="cb15-14"><a href="#cb15-14" aria-hidden="true"></a></span>
<span id="cb15-15"><a href="#cb15-15" aria-hidden="true"></a><span class="kw">def</span> mouse_up(<span class="va">self</span>):</span>
<span id="cb15-16"><a href="#cb15-16" aria-hidden="true"></a>    <span class="cf">if</span> <span class="va">self</span>.down_action:</span>
<span id="cb15-17"><a href="#cb15-17" aria-hidden="true"></a>        <span class="va">self</span>.down_action.mouse_up()</span>
<span id="cb15-18"><a href="#cb15-18" aria-hidden="true"></a>        <span class="va">self</span>.down_action <span class="op">=</span> <span class="va">None</span></span></code></pre></div>
<pre class="text"><code>$ ./make.py commit -m &#39;Timeline assumes there are Actions in rectangle map.&#39;
...................................................
----------------------------------------------------------------------
Ran 51 tests in 3.381s

OK
[main 3c8e9b9] Timeline assumes there are Actions in rectangle map.
 Date: Mon Jul 31 14:32:06 2023 +0200
 2 files changed, 14 insertions(+), 64 deletions(-)</code></pre>
<h2 id="transaction-problem">Transaction problem</h2>
<p>Everything seems to work fine. However, I notice that the committing of the transaction has disappeared.</p>
<p>This is not tested anywhere, missed my manual tests, and is pretty severe.</p>
<p>Let’s see if we can make the code a little more reliable. I write this test:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; project = Project.new()</span></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; transaction = project.new_transaction()</span></span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; transaction = project.new_transaction()</span></span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true"></a><span class="co">Traceback (most recent call last):</span></span>
<span id="cb17-6"><a href="#cb17-6" aria-hidden="true"></a><span class="co">  ...</span></span>
<span id="cb17-7"><a href="#cb17-7" aria-hidden="true"></a><span class="co">ValueError: transaction already in progress</span></span>
<span id="cb17-8"><a href="#cb17-8" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>I make it pass, and I am now more confident that this error will show up when testing in the application.</p>
<pre class="text"><code>$ ./make.py commit -m &#39;Ensure there can be only one transaction active at a time.&#39;
....................................................
----------------------------------------------------------------------
Ran 52 tests in 3.402s

OK
[main 2b36bdb] Ensure there can be only one transaction active at a time.
 2 files changed, 34 insertions(+), 7 deletions(-)</code></pre>
<p>And sure enough, it does. The second time I try to drag a cut, I get the “transaction already in progress” error.</p>
<p>Nice!</p>
<p>The fix:</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true"></a>     def mouse_up(self):</span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true"></a><span class="va">+        if self.transaction:</span></span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true"></a><span class="va">+            self.transaction.commit()</span></span>
<span id="cb19-4"><a href="#cb19-4" aria-hidden="true"></a>         self.transaction = None</span>
<span id="cb19-5"><a href="#cb19-5" aria-hidden="true"></a>         self.x = None</span></code></pre></div>
<pre class="text"><code>$ ./make.py commit -m &#39;Ensure CutAction transaction is commited at mouse_up.&#39;
....................................................
----------------------------------------------------------------------
Ran 52 tests in 3.406s

OK
[main 5fd460d] Ensure CutAction transaction is commited at mouse_up.
 1 file changed, 4 insertions(+), 1 deletion(-)</code></pre>
<p>Normally you use a transaction like this:</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true"></a><span class="cf">with</span> project.new_transaction() <span class="im">as</span> transaction:</span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true"></a>    _ <span class="op">=</span> transaction.add_text_clip(<span class="st">&quot;hello&quot;</span>, length<span class="op">=</span><span class="dv">30</span>)</span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true"></a>    x <span class="op">=</span> transaction.add_text_clip(<span class="st">&quot;world&quot;</span>, length<span class="op">=</span><span class="dv">35</span>)</span>
<span id="cb21-4"><a href="#cb21-4" aria-hidden="true"></a>    _ <span class="op">=</span> transaction.add_text_clip(<span class="st">&quot;end&quot;</span>, length<span class="op">=</span><span class="dv">20</span>)</span>
<span id="cb21-5"><a href="#cb21-5" aria-hidden="true"></a>    _ <span class="op">=</span> transaction.add_text_clip(<span class="st">&quot;end&quot;</span>, length<span class="op">=</span><span class="dv">20</span>)</span>
<span id="cb21-6"><a href="#cb21-6" aria-hidden="true"></a>    transaction.modify(x, <span class="kw">lambda</span> cut: cut.move(<span class="op">-</span><span class="dv">10</span>))</span></code></pre></div>
<p>In that case a commit/rollback is guaranteed.</p>
<p>However, when dealing with mouse events, we can not use the context manager and instead have to deal with mouse events.</p>
<p>The new check that prevents multiple transactions ensures that everything stops working if we forget to close a transaction.</p>
<p>But I would like to come up with a nicer pattern for ensuring that transactions close.</p>
<p>I’ll add a TODO for it and maybe we can come up with a nicer solution later.</p>
<h2 id="further-cleanup">Further cleanup</h2>
<p>In order to satisfy Python’s import mechanism, I put <code>Action</code> and <code>MenuItem</code> in the <code>rlvideolib.domain.cut</code> module.</p>
<p>They obviously don’t belong there.</p>
<p>Here is what the gui package looks like now:</p>
<pre class="text"><code>rlvideolib/gui/
├── generic.py
├── gtk.py
├── __init__.py
└── testing.py</code></pre>
<p>Previously <code>Action</code> and <code>MenuItem</code> were defined in <code>generic</code>. That makes sense. But now we have a dependency on them from <code>rlvideolib.domain.cut</code>. Should a domain object depend on GUI? Maybe that is ok.</p>
<p>I think what I’ll do is create another module inside the gui package called <code>framework</code>. It will contain generic GUI elements that do not depend on GTK or our application.</p>
<pre class="text"><code>$ ./make.py commit -m &#39;Move generic framework GUI code to new rlvideolib.gui.framework.&#39;
....................................................
----------------------------------------------------------------------
Ran 52 tests in 3.393s

OK
[main b1a8f5d] Move generic framework GUI code to new rlvideolib.gui.framework.
 5 files changed, 23 insertions(+), 19 deletions(-)
 create mode 100644 rlvideolib/gui/framework.py</code></pre>
<h2 id="progress">Progress?</h2>
<p>Back to this code where we started:</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true"></a><span class="co"># </span><span class="al">TODO</span><span class="co">: add callback mechanism in rectangle map</span></span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true"></a>x, y, w, h <span class="op">=</span> (</span>
<span id="cb24-3"><a href="#cb24-3" aria-hidden="true"></a>    area.x<span class="op">+</span>x_start,</span>
<span id="cb24-4"><a href="#cb24-4" aria-hidden="true"></a>    area.y,</span>
<span id="cb24-5"><a href="#cb24-5" aria-hidden="true"></a>    x_end<span class="op">-</span>x_start,</span>
<span id="cb24-6"><a href="#cb24-6" aria-hidden="true"></a>    area.height</span>
<span id="cb24-7"><a href="#cb24-7" aria-hidden="true"></a>)</span>
<span id="cb24-8"><a href="#cb24-8" aria-hidden="true"></a>rect_x, rect_y <span class="op">=</span> context.user_to_device(x, y)</span>
<span id="cb24-9"><a href="#cb24-9" aria-hidden="true"></a>rect_w, rect_h <span class="op">=</span> context.user_to_device_distance(w, h)</span>
<span id="cb24-10"><a href="#cb24-10" aria-hidden="true"></a><span class="va">self</span>.rectangle_map.add(Rectangle(</span>
<span id="cb24-11"><a href="#cb24-11" aria-hidden="true"></a>    x<span class="op">=</span><span class="bu">int</span>(rect_x),</span>
<span id="cb24-12"><a href="#cb24-12" aria-hidden="true"></a>    y<span class="op">=</span><span class="bu">int</span>(rect_y),</span>
<span id="cb24-13"><a href="#cb24-13" aria-hidden="true"></a>    width<span class="op">=</span><span class="bu">int</span>(rect_w),</span>
<span id="cb24-14"><a href="#cb24-14" aria-hidden="true"></a>    height<span class="op">=</span><span class="bu">int</span>(rect_h)</span>
<span id="cb24-15"><a href="#cb24-15" aria-hidden="true"></a>), ScrollbarDragAction(<span class="va">self</span>, <span class="va">self</span>.scrollbar))</span></code></pre></div>
<p>Ah, the TODO is actually done now.</p>
<pre class="text"><code>$ ./make.py commit -m &#39;Remove completed TODO about callback mechanism for rectangle map.&#39;
....................................................
----------------------------------------------------------------------
Ran 52 tests in 3.392s

OK
[main b757e3a] Remove completed TODO about callback mechanism for rectangle map.
 1 file changed, 1 deletion(-)</code></pre>
<p>We still haven’t made any progress on the exception problem though. But we have fixed design issues in related areas.</p>
<p>Let’s focus again on the exception.</p>
<h2 id="a-common-pattern">A common pattern</h2>
<p>I think the following pattern exists in all places where we add actions to the rectangle map:</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true"></a>rect_x, rect_y <span class="op">=</span> context.user_to_device(x, y)</span>
<span id="cb26-2"><a href="#cb26-2" aria-hidden="true"></a>rect_w, rect_h <span class="op">=</span> context.user_to_device_distance(w, h)</span>
<span id="cb26-3"><a href="#cb26-3" aria-hidden="true"></a><span class="va">self</span>.rectangle_map.add(Rectangle(</span>
<span id="cb26-4"><a href="#cb26-4" aria-hidden="true"></a>    x<span class="op">=</span><span class="bu">int</span>(rect_x),</span>
<span id="cb26-5"><a href="#cb26-5" aria-hidden="true"></a>    y<span class="op">=</span><span class="bu">int</span>(rect_y),</span>
<span id="cb26-6"><a href="#cb26-6" aria-hidden="true"></a>    width<span class="op">=</span><span class="bu">int</span>(rect_w),</span>
<span id="cb26-7"><a href="#cb26-7" aria-hidden="true"></a>    height<span class="op">=</span><span class="bu">int</span>(rect_h)</span>
<span id="cb26-8"><a href="#cb26-8" aria-hidden="true"></a>), ...)</span></code></pre></div>
<p>What about if we add a method to <code>RectangleMap</code> like this:</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb27-1"><a href="#cb27-1" aria-hidden="true"></a><span class="kw">def</span> add_from_context(<span class="va">self</span>, x, y, w, h, context, item):</span>
<span id="cb27-2"><a href="#cb27-2" aria-hidden="true"></a>    rect_x, rect_y <span class="op">=</span> context.user_to_device(x, y)</span>
<span id="cb27-3"><a href="#cb27-3" aria-hidden="true"></a>    rect_w, rect_h <span class="op">=</span> context.user_to_device_distance(w, h)</span>
<span id="cb27-4"><a href="#cb27-4" aria-hidden="true"></a>    <span class="va">self</span>.add(Rectangle(</span>
<span id="cb27-5"><a href="#cb27-5" aria-hidden="true"></a>        x<span class="op">=</span><span class="bu">int</span>(rect_x),</span>
<span id="cb27-6"><a href="#cb27-6" aria-hidden="true"></a>        y<span class="op">=</span><span class="bu">int</span>(rect_y),</span>
<span id="cb27-7"><a href="#cb27-7" aria-hidden="true"></a>        width<span class="op">=</span><span class="bu">int</span>(rect_w),</span>
<span id="cb27-8"><a href="#cb27-8" aria-hidden="true"></a>        height<span class="op">=</span><span class="bu">int</span>(rect_h)</span>
<span id="cb27-9"><a href="#cb27-9" aria-hidden="true"></a>    ), item)</span></code></pre></div>
<p>We can use that method to add both the scroll action and the scrub action.</p>
<p>However, the cut action looks slightly different:</p>
<div class="sourceCode" id="cb28"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb28-1"><a href="#cb28-1" aria-hidden="true"></a>rect_x, rect_y <span class="op">=</span> context.user_to_device(rectangle.x, rectangle.y)</span>
<span id="cb28-2"><a href="#cb28-2" aria-hidden="true"></a>rect_w, rect_h <span class="op">=</span> context.user_to_device_distance(rectangle.width, rectangle.height)</span>
<span id="cb28-3"><a href="#cb28-3" aria-hidden="true"></a><span class="cf">if</span> <span class="bu">int</span>(rect_w) <span class="op">&gt;</span> <span class="dv">0</span> <span class="kw">and</span> <span class="bu">int</span>(rect_h) <span class="op">&gt;</span> <span class="dv">0</span>:</span>
<span id="cb28-4"><a href="#cb28-4" aria-hidden="true"></a>    rectangle_map.add(Rectangle(</span>
<span id="cb28-5"><a href="#cb28-5" aria-hidden="true"></a>        x<span class="op">=</span><span class="bu">int</span>(rect_x),</span>
<span id="cb28-6"><a href="#cb28-6" aria-hidden="true"></a>        y<span class="op">=</span><span class="bu">int</span>(rect_y),</span>
<span id="cb28-7"><a href="#cb28-7" aria-hidden="true"></a>        width<span class="op">=</span><span class="bu">int</span>(rect_w),</span>
<span id="cb28-8"><a href="#cb28-8" aria-hidden="true"></a>        height<span class="op">=</span><span class="bu">int</span>(rect_h)</span>
<span id="cb28-9"><a href="#cb28-9" aria-hidden="true"></a>    ), CutAction(project, <span class="va">self</span>.get_source_cut(), scrollbar))</span></code></pre></div>
<p>It actually has the check that we also need for the scrollbar. That is, we only add the rectangle to the map if it has a width and height.</p>
<p>Let’s add those checks to <code>add_from_context</code>:</p>
<div class="sourceCode" id="cb29"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb29-1"><a href="#cb29-1" aria-hidden="true"></a><span class="kw">def</span> add_from_context(<span class="va">self</span>, x, y, w, h, context, item):</span>
<span id="cb29-2"><a href="#cb29-2" aria-hidden="true"></a>    rect_x, rect_y <span class="op">=</span> context.user_to_device(x, y)</span>
<span id="cb29-3"><a href="#cb29-3" aria-hidden="true"></a>    rect_w, rect_h <span class="op">=</span> context.user_to_device_distance(w, h)</span>
<span id="cb29-4"><a href="#cb29-4" aria-hidden="true"></a>    <span class="cf">if</span> <span class="bu">int</span>(rect_w) <span class="op">&gt;</span> <span class="dv">0</span> <span class="kw">and</span> <span class="bu">int</span>(rect_h) <span class="op">&gt;</span> <span class="dv">0</span>:</span>
<span id="cb29-5"><a href="#cb29-5" aria-hidden="true"></a>        <span class="va">self</span>.add(</span>
<span id="cb29-6"><a href="#cb29-6" aria-hidden="true"></a>            Rectangle(</span>
<span id="cb29-7"><a href="#cb29-7" aria-hidden="true"></a>                x<span class="op">=</span><span class="bu">int</span>(rect_x),</span>
<span id="cb29-8"><a href="#cb29-8" aria-hidden="true"></a>                y<span class="op">=</span><span class="bu">int</span>(rect_y),</span>
<span id="cb29-9"><a href="#cb29-9" aria-hidden="true"></a>                width<span class="op">=</span><span class="bu">int</span>(rect_w),</span>
<span id="cb29-10"><a href="#cb29-10" aria-hidden="true"></a>                height<span class="op">=</span><span class="bu">int</span>(rect_h)</span>
<span id="cb29-11"><a href="#cb29-11" aria-hidden="true"></a>            ),</span>
<span id="cb29-12"><a href="#cb29-12" aria-hidden="true"></a>            item</span>
<span id="cb29-13"><a href="#cb29-13" aria-hidden="true"></a>        )</span></code></pre></div>
<pre class="text"><code>$ ./make.py commit -m &#39;Extract RectangleMap.add_from_context which does width/height checks.&#39;
....................................................
----------------------------------------------------------------------
Ran 52 tests in 3.498s

OK
[main cd38e3e] Extract RectangleMap.add_from_context which does width/height checks.
 3 files changed, 17 insertions(+), 25 deletions(-)</code></pre>
<p>And this actually resolves the exception problem when I open my project.</p>
<h1 id="summary">Summary</h1>
<p>I don’t have much experience doing evolutionary design. My feeling right now is that I need to spend much more time designing than what I am currently doing. I feel like I need to do at least 60% designing and only 40% adding new features. If you are reading this and have any experience with evolutionary design, feel free to share it with me. I should probably also re-read the chapters in James’ book to refresh my memory.</p>
]]></description>
    <pubDate>Tue, 01 Aug 2023 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/devlog-007-which-feature-to-work-on-next/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>DevLog 006: Adding the concept of a clip</title>
    <link>http://rickardlindberg.me/writing/devlog-006-adding-the-concept-of-a-clip/</link>
    <description><![CDATA[<h1>DevLog 006: Adding the concept of a clip</h1>

<p><em>Published on 31 July 2023.</em></p>

<p>When working on the <a href="/projects/rlvideo/index.html">video editor</a> and writing about it, I keep talking about clips. But there is nothing called a clip in the source code. Today I will explore the idea of adding that as a concept and see what kind of functionality it will attract.</p>
<h2 id="finishing-ffmpeg-proxy-generation">Finishing FFmpeg proxy generation</h2>
<p>Here is the cleaned up diff from yesterday’s work on moving back to FFmpeg for proxy generation:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="dt">@@ -70,15 +70,16 @@ class FileSource(namedtuple(&quot;FileSource&quot;, &quot;id,path,number_of_frames_at_project_f</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a>         proxy_tmp_path = proxy_spec.get_tmp_path(checksum)</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>         if not os.path.exists(proxy_path):</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a>             proxy_spec.ensure_dir()</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a><span class="st">-            p = mlt.Profile()</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a><span class="st">-            p.from_producer(producer)</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a><span class="st">-            proxy_spec.adjust_profile(p)</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true"></a><span class="st">-            producer = mlt.Producer(p, self.path)</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true"></a><span class="st">-            consumer = mlt.Consumer(p, &quot;avformat&quot;)</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true"></a><span class="st">-            consumer.set(&quot;target&quot;, proxy_tmp_path)</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true"></a><span class="st">-            proxy_spec.adjust_consumer(consumer)</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true"></a><span class="st">-            run_consumer(consumer, producer, progress)</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true"></a><span class="st">-            self.create_producer(profile, proxy_tmp_path)</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true"></a><span class="va">+            subprocess.check_call([</span></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true"></a><span class="va">+                &quot;ffmpeg&quot;,</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true"></a><span class="va">+                &quot;-y&quot;,</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true"></a><span class="va">+                &quot;-i&quot;, self.path,</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true"></a><span class="va">+                &quot;-vf&quot;, &quot;yadif,scale=960:540&quot;,</span></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true"></a><span class="va">+                &quot;-q:v&quot;, &quot;3&quot;,</span></span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true"></a><span class="va">+                &quot;-vcodec&quot;, &quot;mjpeg&quot;,</span></span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true"></a><span class="va">+                &quot;-acodec&quot;, &quot;pcm_s16le&quot;,</span></span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true"></a><span class="va">+                proxy_tmp_path</span></span>
<span id="cb1-23"><a href="#cb1-23" aria-hidden="true"></a><span class="va">+            ])</span></span>
<span id="cb1-24"><a href="#cb1-24" aria-hidden="true"></a>             os.rename(proxy_tmp_path, proxy_path)</span>
<span id="cb1-25"><a href="#cb1-25" aria-hidden="true"></a>         return self.create_producer(profile, proxy_path)</span></code></pre></div>
<p>Let’s commit that and see how we can refactor in this area.</p>
<pre class="text"><code>$ ./make.py commit -m &#39;Use FFmpeg for proxy generation.&#39;
...................................................
----------------------------------------------------------------------
Ran 51 tests in 2.959s

OK
[main 078c9f2] Use FFmpeg for proxy generation.
 1 file changed, 10 insertions(+), 9 deletions(-)</code></pre>
<h2 id="the-start-of-clip">The start of Clip</h2>
<p>The proxy generation code has this line:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a>checksum <span class="op">=</span> md5(<span class="va">self</span>.path)</span></code></pre></div>
<p>Where <code>md5</code> is a top level function.</p>
<p>Let’s extract a <code>Clip</code> class and put the <code>md5</code> method there. My idea is that a clip represents a file on disk that we can load into a <code>FileSource</code> and display on our timeline.</p>
<p>Here it is:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="kw">class</span> Clip:</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, path):</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a>        <span class="va">self</span>.path <span class="op">=</span> path</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true"></a></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true"></a>    <span class="kw">def</span> md5(<span class="va">self</span>):</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true"></a>        <span class="cf">return</span> subprocess.check_output([<span class="st">&quot;md5sum&quot;</span>, <span class="va">self</span>.path])[:<span class="dv">32</span>].decode(<span class="st">&quot;ascii&quot;</span>)</span></code></pre></div>
<p>We can see again that we use an external program, <code>md5sum</code>, to calculate the md5. I think I did that because the Python module for calculating md5 did not have a convenient function for calculating the sum on large files. As I noted previously, I’m fine with this. We should probably add a test though to make sure it works with the external program.</p>
<p>Anyway, the proxy code can now be written like this:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a>checksum <span class="op">=</span> Clip(<span class="va">self</span>.path).md5()</span></code></pre></div>
<p>Perfect! Time to commit:</p>
<pre class="text"><code>$ ./make.py commit -m &#39;Extract Clip and move the md5 function to it.&#39;
...................................................
----------------------------------------------------------------------
Ran 51 tests in 2.966s

OK
[main 6488c05] Extract Clip and move the md5 function to it.
 3 files changed, 12 insertions(+), 4 deletions(-)
 create mode 100644 rlvideolib/domain/clip.py</code></pre>
<h2 id="revising-mlthelpers">Revising mlthelpers</h2>
<p>When working on proxies before, we extracted this module:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a>rlvideolib.mlthelpers</span></code></pre></div>
<p>First of all, its <code>run_consumer</code> function is no longer used when we generate proxies with FFmpeg. Let’s remove it.</p>
<pre class="text"><code>$ ./make.py commit -m &#39;Remove rlvideolib.mlthelpers.run_consumer since it is no longer used.&#39;
...................................................
----------------------------------------------------------------------
Ran 51 tests in 2.974s

OK
[main aff41ef] Remove rlvideolib.mlthelpers.run_consumer since it is no longer used.
 2 files changed, 9 deletions(-)</code></pre>
<p>The only thing left now is this class:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true"></a><span class="kw">class</span> FileInfo:</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true"></a></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, path):</span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true"></a>        <span class="va">self</span>.path <span class="op">=</span> path</span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true"></a></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true"></a>    <span class="kw">def</span> get_number_of_frames(<span class="va">self</span>, profile):</span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true"></a>        <span class="cf">return</span> mlt.Producer(profile, <span class="va">self</span>.path).get_playtime()</span></code></pre></div>
<p>This looks a lot like it can be merged into our new <code>Clip</code>. Let’s see where it is used.</p>
<p>I find an unused import of it and remove it.</p>
<pre class="text"><code>$ ./make.py commit -m &#39;Remove unused import of FileInfo.&#39;
...................................................
----------------------------------------------------------------------
Ran 51 tests in 2.967s

OK
[main dda14cf] Remove unused import of FileInfo.
 1 file changed, 1 deletion(-)</code></pre>
<p>I wonder if there is a tool that can automatically remove unused imports. Then we can include it in our test runner perhaps? Along with an auto formatter?</p>
<p>Anyway, the only other use is here:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true"></a><span class="kw">class</span> Transaction:</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true"></a></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true"></a>    ...</span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true"></a></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true"></a>    <span class="kw">def</span> add_clip(<span class="va">self</span>, path, <span class="bu">id</span><span class="op">=</span><span class="va">None</span>):</span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true"></a>        source <span class="op">=</span> FileSource(</span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true"></a>            <span class="bu">id</span><span class="op">=</span><span class="bu">id</span>,</span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true"></a>            path<span class="op">=</span>path,</span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true"></a>            number_of_frames_at_project_fps<span class="op">=</span>FileInfo(</span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true"></a>                path</span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true"></a>            ).get_number_of_frames(<span class="va">self</span>.project.profile)</span>
<span id="cb11-12"><a href="#cb11-12" aria-hidden="true"></a>        )</span>
<span id="cb11-13"><a href="#cb11-13" aria-hidden="true"></a>        <span class="cf">return</span> <span class="va">self</span>.add_source(source, source.number_of_frames_at_project_fps)</span></code></pre></div>
<p>Here we are actually talking about adding a clip. I had forgotten about that. It would make more sense to create a <code>Clip</code> then instead of a <code>FileInfo</code>. Let’s add <code>get_number_of_frames</code> to <code>Clip</code> and then we can get rid of <code>FileInfo</code> and <code>rlvideolib.mlthelpers</code> completely.</p>
<pre class="text"><code>$ ./make.py commit -m &#39;Move get_number_of_frames to Clip.&#39;
...................................................
----------------------------------------------------------------------
Ran 51 tests in 2.955s

OK
[main c13f4cb] Move get_number_of_frames to Clip.
 4 files changed, 7 insertions(+), 14 deletions(-)
 delete mode 100644 rlvideolib/mlthelpers.py</code></pre>
<h2 id="thinking-about-number-of-frames">Thinking about number of frames</h2>
<p>We saw in an <a href="/writing/devlog-004-proxies-with-correct-fps/index.html">earlier devlog</a> that the number of frames that we store is actually the number of frames at the current project FPS. I dig into the MLT source code and see that the out point seems to be calculated based on the FPS:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true"></a>mlt_position frames = (mlt_position) lrint(format-&gt;duration * mlt_profile_fps(profile)</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true"></a>                                           / AV_TIME_BASE);</span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true"></a><span class="cf">if</span> (mlt_properties_get_position(properties, <span class="st">&quot;out&quot;</span>) &lt;= <span class="dv">0</span>)</span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true"></a>    mlt_properties_set_position(properties, <span class="st">&quot;out&quot;</span>, frames - <span class="dv">1</span>);</span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true"></a><span class="cf">if</span> (mlt_properties_get_position(properties, <span class="st">&quot;length&quot;</span>) &lt;= <span class="dv">0</span>)</span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true"></a>    mlt_properties_set_position(properties, <span class="st">&quot;length&quot;</span>, frames);</span></code></pre></div>
<p>I wonder if we can do the same calculation so that we don’t have to depend on MLT for <code>get_number_of_frames</code>?</p>
<p>I’m not ready for that. Let’s rewrite</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true"></a><span class="kw">def</span> get_number_of_frames(<span class="va">self</span>, profile):</span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true"></a>    <span class="cf">return</span> mlt.Producer(profile, <span class="va">self</span>.path).get_playtime()</span></code></pre></div>
<p>to this</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true"></a><span class="kw">def</span> calculate_length_at_fps(<span class="va">self</span>, mlt_profile):</span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true"></a>    <span class="cf">return</span> mlt.Producer(mlt_profile, <span class="va">self</span>.path).get_playtime()</span></code></pre></div>
<p>to clarify a bit more what it is actually doing.</p>
<p>With this change, I think that the previous rename we did of <code>FileSource.length</code> to <code>FileSource.number_of_frames_at_project_fps</code> can be reverted. I think it makes sense to talk about a length in terms of frames. If we change the project FPS, all lengths have to be recalculated, and I think this makes sense. With the new <code>calculate_length_at_fps</code> it is still clear that this length depends on the FPS I think.</p>
<p>Let’s commit:</p>
<pre class="text"><code>$ ./make.py commit -m &#39;Rename Clip..get_number_of_frames to Clip..calculate_length_at_fps.&#39;
...................................................
----------------------------------------------------------------------
Ran 51 tests in 3.457s

OK
[main 94de3c1] Rename Clip..get_number_of_frames to Clip..calculate_length_at_fps.
 2 files changed, 3 insertions(+), 3 deletions(-)</code></pre>
<pre class="text"><code>$ ./make.py commit -m &#39;Rename FileSource.number_of_frames_at_project_fps to FileSource.length.&#39;
...................................................
----------------------------------------------------------------------
Ran 51 tests in 2.952s

OK
[main 5bca102] Rename FileSource.number_of_frames_at_project_fps to FileSource.length.
 2 files changed, 12 insertions(+), 12 deletions(-)</code></pre>
<p>Now when <code>Transaction.add_clip</code> reads like this</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true"></a><span class="kw">def</span> add_clip(<span class="va">self</span>, path, <span class="bu">id</span><span class="op">=</span><span class="va">None</span>):</span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true"></a>    source <span class="op">=</span> FileSource(</span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true"></a>        <span class="bu">id</span><span class="op">=</span><span class="bu">id</span>,</span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true"></a>        path<span class="op">=</span>path,</span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true"></a>        length<span class="op">=</span>Clip(</span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true"></a>            path</span>
<span id="cb18-7"><a href="#cb18-7" aria-hidden="true"></a>        ).calculate_length_at_fps(mlt_profile<span class="op">=</span><span class="va">self</span>.project.profile)</span>
<span id="cb18-8"><a href="#cb18-8" aria-hidden="true"></a>    )</span>
<span id="cb18-9"><a href="#cb18-9" aria-hidden="true"></a>    <span class="cf">return</span> <span class="va">self</span>.add_source(source, source.length)</span></code></pre></div>
<p>I don’t think we need this comment anymore:</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true"></a><span class="co"># </span><span class="al">NOTE</span><span class="co">: The length depends on the FPS of the project. Once the first</span></span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true"></a><span class="co"># FileSource is added to the project, the FPS of the project can not be</span></span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true"></a><span class="co"># changed.</span></span></code></pre></div>
<p>I think the code above makes it clear enough that the length depends on the FPS of the project.</p>
<pre class="text"><code>$ ./make.py commit -m &#39;Remove note about length/FPS since this is clear enough in the code now.&#39;
...................................................
----------------------------------------------------------------------
Ran 51 tests in 2.955s

OK
[main ab10ec9] Remove note about length/FPS since this is clear enough in the code now.
 1 file changed, 4 deletions(-)</code></pre>
<p>Sometimes I feel bad for changing the code back and forth. But I don’t think I should feel bad. I think it’s a good thing to always make the code express our intentions as well as possible. If that means that names change back and forth, that’s ok.</p>
<h2 id="clip-proxies">Clip proxies</h2>
<p>What more functionality can the clip class attract? How about proxy generation?</p>
<p>A proxy clip is an alternative version of a clip. An alternative file on disk that represents the same thing but in a format that is easier to work with.</p>
<p>It makes sense.</p>
<p>Let’s extract it:</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true"></a><span class="kw">class</span> Clip:</span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true"></a></span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true"></a>    ...</span>
<span id="cb21-4"><a href="#cb21-4" aria-hidden="true"></a></span>
<span id="cb21-5"><a href="#cb21-5" aria-hidden="true"></a>    <span class="kw">def</span> generate_proxy(<span class="va">self</span>, proxy_spec, progress):</span>
<span id="cb21-6"><a href="#cb21-6" aria-hidden="true"></a>        <span class="co"># </span><span class="al">TODO</span><span class="co">: call progress</span></span>
<span id="cb21-7"><a href="#cb21-7" aria-hidden="true"></a>        checksum <span class="op">=</span> <span class="va">self</span>.md5()</span>
<span id="cb21-8"><a href="#cb21-8" aria-hidden="true"></a>        proxy_path <span class="op">=</span> proxy_spec.get_path(checksum)</span>
<span id="cb21-9"><a href="#cb21-9" aria-hidden="true"></a>        proxy_tmp_path <span class="op">=</span> proxy_spec.get_tmp_path(checksum)</span>
<span id="cb21-10"><a href="#cb21-10" aria-hidden="true"></a>        <span class="cf">if</span> <span class="kw">not</span> os.path.exists(proxy_path):</span>
<span id="cb21-11"><a href="#cb21-11" aria-hidden="true"></a>            proxy_spec.ensure_dir()</span>
<span id="cb21-12"><a href="#cb21-12" aria-hidden="true"></a>            subprocess.check_call([</span>
<span id="cb21-13"><a href="#cb21-13" aria-hidden="true"></a>                <span class="st">&quot;ffmpeg&quot;</span>,</span>
<span id="cb21-14"><a href="#cb21-14" aria-hidden="true"></a>                <span class="st">&quot;-y&quot;</span>,</span>
<span id="cb21-15"><a href="#cb21-15" aria-hidden="true"></a>                <span class="st">&quot;-i&quot;</span>, <span class="va">self</span>.path,</span>
<span id="cb21-16"><a href="#cb21-16" aria-hidden="true"></a>                <span class="st">&quot;-vf&quot;</span>, <span class="st">&quot;yadif,scale=960:540&quot;</span>,</span>
<span id="cb21-17"><a href="#cb21-17" aria-hidden="true"></a>                <span class="st">&quot;-q:v&quot;</span>, <span class="st">&quot;3&quot;</span>,</span>
<span id="cb21-18"><a href="#cb21-18" aria-hidden="true"></a>                <span class="st">&quot;-vcodec&quot;</span>, <span class="st">&quot;mjpeg&quot;</span>,</span>
<span id="cb21-19"><a href="#cb21-19" aria-hidden="true"></a>                <span class="st">&quot;-acodec&quot;</span>, <span class="st">&quot;pcm_s16le&quot;</span>,</span>
<span id="cb21-20"><a href="#cb21-20" aria-hidden="true"></a>                proxy_tmp_path</span>
<span id="cb21-21"><a href="#cb21-21" aria-hidden="true"></a>            ])</span>
<span id="cb21-22"><a href="#cb21-22" aria-hidden="true"></a>            os.rename(proxy_tmp_path, proxy_path)</span>
<span id="cb21-23"><a href="#cb21-23" aria-hidden="true"></a>        <span class="cf">return</span> proxy_path</span></code></pre></div>
<p>And <code>FileSource.load_proxy</code> can be reduced to this:</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true"></a><span class="kw">def</span> load_proxy(<span class="va">self</span>, profile, proxy_spec, progress):</span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true"></a>    <span class="cf">return</span> <span class="va">self</span>.create_producer(</span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true"></a>        profile,</span>
<span id="cb22-4"><a href="#cb22-4" aria-hidden="true"></a>        Clip(<span class="va">self</span>.path).generate_proxy(proxy_spec, progress)</span>
<span id="cb22-5"><a href="#cb22-5" aria-hidden="true"></a>    )</span></code></pre></div>
<p>This reads quite nicely I think. Let’s commit:</p>
<pre class="text"><code>$ ./make.py commit -m &#39;Extract Clip.generate_proxy.&#39;
...................................................
----------------------------------------------------------------------
Ran 51 tests in 2.929s

OK
[main cc85022] Extract Clip.generate_proxy.
 2 files changed, 25 insertions(+), 18 deletions(-)</code></pre>
<h2 id="proxy-spec-location">Proxy spec location</h2>
<p>The <code>ProxySpec</code> class currently lives in <code>rlvideolib.domain.project</code>. I think a much better place would be <code>rlvideolib.domain.clip</code>.</p>
<p>Let’s move it over.</p>
<pre class="text"><code>$ ./make.py commit -m &#39;Move ProxySpec to rlvideolib.domain.clip.&#39;
...................................................
----------------------------------------------------------------------
Ran 51 tests in 2.903s

OK
[main 36932f0] Move ProxySpec to rlvideolib.domain.clip.
 2 files changed, 50 insertions(+), 49 deletions(-)</code></pre>
<h2 id="proxy-spec-cleanup">Proxy spec cleanup</h2>
<p>The proxy spec has a method for setting properties on a consumer:</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true"></a><span class="kw">def</span> adjust_consumer(<span class="va">self</span>, consumer):</span>
<span id="cb25-2"><a href="#cb25-2" aria-hidden="true"></a>    consumer.<span class="bu">set</span>(<span class="st">&quot;vcodec&quot;</span>, <span class="va">self</span>.vcodec)</span>
<span id="cb25-3"><a href="#cb25-3" aria-hidden="true"></a>    consumer.<span class="bu">set</span>(<span class="st">&quot;acodec&quot;</span>, <span class="va">self</span>.acodec)</span>
<span id="cb25-4"><a href="#cb25-4" aria-hidden="true"></a>    consumer.<span class="bu">set</span>(<span class="st">&quot;qscale&quot;</span>, <span class="va">self</span>.qscale)</span></code></pre></div>
<p>Now when we use FFmpeg for proxy generation, this is no longer used.</p>
<p>But we did hardcode some values for FFmpeg, let’s change <code>adjust_consumer</code> to <code>get_ffmpeg_arguments</code>:</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true"></a><span class="kw">def</span> get_ffmpeg_arguments(<span class="va">self</span>):</span>
<span id="cb26-2"><a href="#cb26-2" aria-hidden="true"></a>    <span class="cf">return</span> [</span>
<span id="cb26-3"><a href="#cb26-3" aria-hidden="true"></a>        <span class="st">&quot;-vf&quot;</span>, <span class="ss">f&quot;yadif,scale=-1:</span><span class="sc">{</span><span class="va">self</span><span class="sc">.</span>height<span class="sc">}</span><span class="ss">&quot;</span>,</span>
<span id="cb26-4"><a href="#cb26-4" aria-hidden="true"></a>        <span class="st">&quot;-q:v&quot;</span>, <span class="va">self</span>.qscale,</span>
<span id="cb26-5"><a href="#cb26-5" aria-hidden="true"></a>        <span class="st">&quot;-vcodec&quot;</span>, <span class="va">self</span>.vcodec,</span>
<span id="cb26-6"><a href="#cb26-6" aria-hidden="true"></a>        <span class="st">&quot;-acodec&quot;</span>, <span class="va">self</span>.acodec,</span>
<span id="cb26-7"><a href="#cb26-7" aria-hidden="true"></a>    ]</span></code></pre></div>
<p>And use it like this:</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb27-1"><a href="#cb27-1" aria-hidden="true"></a><span class="kw">def</span> generate_proxy(<span class="va">self</span>, proxy_spec, progress):</span>
<span id="cb27-2"><a href="#cb27-2" aria-hidden="true"></a></span>
<span id="cb27-3"><a href="#cb27-3" aria-hidden="true"></a>    ...</span>
<span id="cb27-4"><a href="#cb27-4" aria-hidden="true"></a></span>
<span id="cb27-5"><a href="#cb27-5" aria-hidden="true"></a>    subprocess.check_call(</span>
<span id="cb27-6"><a href="#cb27-6" aria-hidden="true"></a>        [</span>
<span id="cb27-7"><a href="#cb27-7" aria-hidden="true"></a>            <span class="st">&quot;ffmpeg&quot;</span>,</span>
<span id="cb27-8"><a href="#cb27-8" aria-hidden="true"></a>            <span class="st">&quot;-y&quot;</span>,</span>
<span id="cb27-9"><a href="#cb27-9" aria-hidden="true"></a>            <span class="st">&quot;-i&quot;</span>, <span class="va">self</span>.path,</span>
<span id="cb27-10"><a href="#cb27-10" aria-hidden="true"></a>        ]</span>
<span id="cb27-11"><a href="#cb27-11" aria-hidden="true"></a>        <span class="op">+</span></span>
<span id="cb27-12"><a href="#cb27-12" aria-hidden="true"></a>        proxy_spec.get_ffmpeg_arguments()</span>
<span id="cb27-13"><a href="#cb27-13" aria-hidden="true"></a>        <span class="op">+</span></span>
<span id="cb27-14"><a href="#cb27-14" aria-hidden="true"></a>        [</span>
<span id="cb27-15"><a href="#cb27-15" aria-hidden="true"></a>            proxy_tmp_path</span>
<span id="cb27-16"><a href="#cb27-16" aria-hidden="true"></a>        ]</span>
<span id="cb27-17"><a href="#cb27-17" aria-hidden="true"></a>    )</span></code></pre></div>
<p>Commit:</p>
<pre class="text"><code>$ ./make.py commit -m &#39;ProxySpec know how to generate FFmpeg arguments for conversion.&#39;
...................................................
----------------------------------------------------------------------
Ran 51 tests in 3.412s

OK
[main 6579178] ProxySpec know how to generate FFmpeg arguments for conversion.
 1 file changed, 20 insertions(+), 14 deletions(-)</code></pre>
<h2 id="summary">Summary</h2>
<p>I am quite happy with the refactoring that we did in this session. We finally have a concept of a clip in the source code and it turned out that it attracted a bit of functionality that previously was spread across the code.</p>
<p>The code base is now a little cleaner.</p>
<p>Why is that important?</p>
<p>Because clear thinking is clear writing and vice versa. It applies to code as well. If we have expressed our thinking clear in code, thinking about it is easier, and so making the next change is easier. And to think clearly about it, we need to write about it, refactor it, until it expresses our ideas clearly. It’s a circle that probably never ends but perhaps slows down as our ideas and the expression of them in code approach each other.</p>
]]></description>
    <pubDate>Mon, 31 Jul 2023 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/devlog-006-adding-the-concept-of-a-clip/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>DevLog 005: MLT proxy hell</title>
    <link>http://rickardlindberg.me/writing/devlog-005-mlt-proxy-hell/</link>
    <description><![CDATA[<h1>DevLog 005: MLT proxy hell</h1>

<p><em>Published on 31 July 2023.</em></p>

<p>I want to use the <a href="/projects/rlvideo/index.html">video editor</a> to edit footage that I have shot this summer. It starts out well, gives me a lot of problems, and resolves in the end.</p>
<h2 id="a-promising-start">A promising start</h2>
<p>To load all clips that I have, I try this command:</p>
<pre class="text"><code>$ rlvideo a6400/* hero8/*</code></pre>
<p>It takes a while to load all the clips. This is expected. When we load a clip we need to figure out its length so that we can correctly place it on the timeline. This is a one time cost when adding new clips. And I have shot many clips this summer:</p>
<pre class="text"><code>$ ls a6400/* hero8/* | wc -l
270</code></pre>
<p>I patiently wait.</p>
<p>After a while the GUI pops up and proxy clips start to render in the background. Meanwhile the GUI is quite snappy and we can start to make edits right away.</p>
<p>Aside from the lack of progress bar when loading clips, the application works as intended.</p>
<p>I figure it will take a while to render all proxy clips, so I leave it open and go do something else for a while.</p>
<p>
<center>
<img src="loading.png" title="fig:" alt="Loading clips." />
</center>
</p>
<h2 id="crashes">Crashes</h2>
<p>Then I hear that the fan stops making noises. Already done I think? Hmm. Where did my application go? The window is closed, and so is the terminal from which I opened it. How is that even possible? Reading the <code>dmesg</code> output, the application seems to have segfaulted.</p>
<p>I spend many hours trying to figure out what is going on. What is particularly annoying is that you have to wait a long time to reproduce it. The segfault does not happen right away.</p>
<p>Eventually I narrow down the problem to proxy generation. At least I think so. If I comment out generation of proxy clips, I can load many clips without a crash.</p>
<p>In an earlier version of the program, we generated proxy clips using FFmpeg. Then we switched over to using MLT. I got the idea that you can do it with MLT from <a href="http://jliljebl.github.io/flowblade/">Flowblade</a>. It also made it easier to show progress in the GUI.</p>
<p>When we made the switch, I noticed that something happened to the colors of the proxy clips. They seemed to look a little bleaker than the original. I don’t recall having this problem when we generated proxies using FFmpeg.</p>
<p>Odd looking colors and segfaults. I think it’s time to go back to generating proxy clips using FFmpeg.</p>
<h2 id="proxies-with-ffmpeg">Proxies with FFmpeg</h2>
<p>Here is what I’m trying right now.</p>
<p>Instead of this:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="kw">def</span> load_proxy(<span class="va">self</span>, profile, proxy_spec, progress):</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a>    producer <span class="op">=</span> <span class="va">self</span>.create_producer(profile, <span class="va">self</span>.path)</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a>    checksum <span class="op">=</span> md5(<span class="va">self</span>.path)</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a>    proxy_path <span class="op">=</span> proxy_spec.get_path(checksum)</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a>    proxy_tmp_path <span class="op">=</span> proxy_spec.get_tmp_path(checksum)</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true"></a>    <span class="cf">if</span> <span class="kw">not</span> os.path.exists(proxy_path):</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true"></a>        proxy_spec.ensure_dir()</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true"></a>        p <span class="op">=</span> mlt.Profile()</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true"></a>        p.from_producer(producer)</span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true"></a>        proxy_spec.adjust_profile(p)</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true"></a>        producer <span class="op">=</span> mlt.Producer(p, <span class="va">self</span>.path)</span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true"></a>        consumer <span class="op">=</span> mlt.Consumer(p, <span class="st">&quot;avformat&quot;</span>)</span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true"></a>        consumer.<span class="bu">set</span>(<span class="st">&quot;target&quot;</span>, proxy_tmp_path)</span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true"></a>        proxy_spec.adjust_consumer(consumer)</span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true"></a>        run_consumer(consumer, producer, progress)</span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true"></a>        <span class="va">self</span>.create_producer(profile, proxy_tmp_path)</span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true"></a>        os.rename(proxy_tmp_path, proxy_path)</span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true"></a>    <span class="cf">return</span> <span class="va">self</span>.create_producer(profile, proxy_path)</span></code></pre></div>
<p>We do this:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="kw">def</span> load_proxy(<span class="va">self</span>, profile, proxy_spec, progress):</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a>    producer <span class="op">=</span> <span class="va">self</span>.create_producer(profile, <span class="va">self</span>.path)</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a>    checksum <span class="op">=</span> md5(<span class="va">self</span>.path)</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a>    proxy_path <span class="op">=</span> proxy_spec.get_path(checksum)</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true"></a>    proxy_tmp_path <span class="op">=</span> proxy_spec.get_tmp_path(checksum)</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true"></a>    <span class="cf">if</span> <span class="kw">not</span> os.path.exists(proxy_path):</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true"></a>        proxy_spec.ensure_dir()</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true"></a>        subprocess.check_call([</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true"></a>            <span class="st">&quot;ffmpeg&quot;</span>,</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true"></a>            <span class="st">&quot;-y&quot;</span>,</span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true"></a>            <span class="st">&quot;-i&quot;</span>, <span class="va">self</span>.path,</span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true"></a>            <span class="st">&quot;-vf&quot;</span>, <span class="st">&quot;yadif,scale=960:540&quot;</span>,</span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true"></a>            <span class="st">&quot;-q:v&quot;</span>, <span class="st">&quot;3&quot;</span>,</span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true"></a>            <span class="st">&quot;-vcodec&quot;</span>, <span class="st">&quot;mjpeg&quot;</span>,</span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true"></a>            <span class="st">&quot;-acodec&quot;</span>, <span class="st">&quot;pcm_s16le&quot;</span>,</span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true"></a>            proxy_tmp_path</span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true"></a>        ])</span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true"></a>        os.rename(proxy_tmp_path, proxy_path)</span>
<span id="cb4-19"><a href="#cb4-19" aria-hidden="true"></a>    <span class="cf">return</span> <span class="va">self</span>.create_producer(profile, proxy_path)</span></code></pre></div>
<p>We can can let the <code>proxy_spec</code> set the FFmpeg options. The above is just an experiment to see if this works better.</p>
<p>So far, it looks promising. It has been working for a couple of hours and the proxy clips look better than before.</p>
<p>I’m gonna make some dinner and we’ll see the status later on.</p>
<h2 id="after-dinner">After dinner</h2>
<p>All proxy clips rendered successfully. The editor is still alive and I can scrub all the clips. Nice!</p>
<h2 id="summary">Summary</h2>
<p>Generating proxies using MLT always felt a little awkward. All we want to do is to scale the clip, encode it using a seek-friendly format, and leave everything else as is. With MLT we had to fiddle around with different profiles to make sure FPS was preserved and recreate producers with different profiles. It never felt like the proper solution.</p>
<p>Doing the conversion using FFmpeg is much more straight forward. There are two objections that I can have to that solution:</p>
<ol type="1">
<li>It calls an external process</li>
<li>We lost the call to <code>progress</code></li>
</ol>
<p>I browsed the web for solutions to the progress problem. And there seems to be many solutions for that. We can probably figure out one that works for us. And to be honest, right now, progress in the GUI is not the most important thing. Right now, FFmpeg outputs some statistics to the terminal, so we could have a look there for some kind of progress.</p>
<p>When it comes to calling external processes, I’m not sure what I think. I know I don’t have a problem with it. Why do I object then? Honestly, I don’t know. Something tells me that it is a little ugly.</p>
<p>When I started this project, I thought it would only be possible to do with the help of MLT. If the Python MLT bindings keep giving me segfaults and other hard times, will the project fail? Maybe. So what is my strategy? I think I will try to isolate the MLT code as much as possible and use other tools where possible (FFmpeg for proxy generation for example). If I manage to isolate the core of a video editor that is not depending on MLT, then perhaps I can also make it work with another video library if there is one. It will be an interesting exercise.</p>
]]></description>
    <pubDate>Mon, 31 Jul 2023 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/devlog-005-mlt-proxy-hell/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>DevLog 004: Proxies with correct FPS</title>
    <link>http://rickardlindberg.me/writing/devlog-004-proxies-with-correct-fps/</link>
    <description><![CDATA[<h1>DevLog 004: Proxies with correct FPS</h1>

<p><em>Published on 30 July 2023.</em></p>

<p>In this episode we will continue work on the <a href="/projects/rlvideo/index.html">video editor</a>. I have some footage that I would like to edit. Wouldn’t it be cool if I can do that in my own video editor? I will use that as a guide for the development. What is stopping me from using my video editor today? Fix that and move on to the next thing.</p>
<p>In this episode we will fix an issue with proxy clips sometimes having the incorrect FPS.</p>
<h2 id="why-devlogs">Why DevLogs?</h2>
<p>I do them for various reasons. Here are the ones that I can think of now.</p>
<ul>
<li><p>I think there is value in documenting the work that I do.</p></li>
<li><p>People reading these DevLogs might pick up something that I do and incorporate into their workflow.</p></li>
<li><p>Clear thinking is clear writing and vice versa. Writing helps me think more clearly about topics. Sometimes, by writing about a problem, I think I can reach a solution faster even though writing takes time.</p></li>
<li><p>I want to practice writing.</p></li>
</ul>
<h2 id="the-problem-with-proxies-and-fps">The problem with proxies and FPS</h2>
<p>For most of my videos, I use a frame rate of 25. That is 25 frames per second (FPS). I have coded that as a default in the video editor.</p>
<p>However, sometimes I shoot footage in a higher frame rate and slow it down in post.</p>
<p>Here is an example:</p>
<pre class="shell"><code>$ ffprobe GX010802.MP4 2&gt;&amp;1 | grep fps
  Stream #0:0(eng): Video: hevc (Main) (hvc1 / 0x31637668), yuvj420p(pc, bt709), 2704x1520 [SAR 1:1 DAR 169:95], 97187 kb/s, 100 fps, 100 tbr, 90k tbn, 100 tbc (default)</code></pre>
<p>You can see there in the middle that is says <code>100 fps</code>.</p>
<p>When I drop this clip on a 25 FPS timeline, only every 4th frame will be used from that clip and the rest are discarded. However, if I slow down the clip to 25% speed, the runtime will be 4 times longer and all the frames will be used.</p>
<p>The problem is that the video editor uses proxy clips for preview. A proxy clip is typically a lower resolution version of the original clip to allow real time editing on a slower computer.</p>
<p>And proxy clips are currently generated with the same frame rate as the project (which is 25).</p>
<p>Here is what <code>ffprobe</code> says about our proxy clip:</p>
<pre class="shell"><code>$ ffprobe /tmp/de63dcd626503cbde6f3da76b0af3e8c.mkv 2&gt;&amp;1 | grep fps
  Stream #0:0: Video: mjpeg (Baseline), yuvj420p(pc, bt470bg/bt709/bt709), 960x540 [SAR 1:1 DAR 16:9], 25 fps, 25 tbr, 1k tbn, 1k tbc (default)</code></pre>
<h2 id="proxy-generation-today">Proxy generation today</h2>
<p>With some details removed, here is how proxies are generated today:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a>producer <span class="op">=</span> mlt.Producer(profile, CLIP_PATH)</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a>consumer <span class="op">=</span> mlt.Consumer(proxy_profile, <span class="st">&quot;avformat&quot;</span>)</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a>consumer.<span class="bu">set</span>(<span class="st">&quot;target&quot;</span>, PROXY_PATH)</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a>consumer.<span class="bu">set</span>(<span class="st">&quot;vcodec&quot;</span>, <span class="st">&quot;mjpeg&quot;</span>)</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true"></a>consumer.<span class="bu">set</span>(<span class="st">&quot;acodec&quot;</span>, <span class="st">&quot;pcm_s16le&quot;</span>)</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true"></a>consumer.<span class="bu">set</span>(<span class="st">&quot;qscale&quot;</span>, <span class="st">&quot;3&quot;</span>)</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true"></a></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true"></a>consumer.<span class="ex">connect</span>(producer)</span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true"></a>consumer.start()</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true"></a><span class="cf">while</span> consumer.is_stopped() <span class="op">==</span> <span class="dv">0</span>:</span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true"></a>    time.sleep(<span class="fl">0.5</span>)</span></code></pre></div>
<p>The <code>profile</code> and the <code>proxy_profile</code> differ only in that the <code>proxy_profile</code> has a lower resolution (width x height). They are otherwise identical.</p>
<p>What we need to do is to get the profile for a consumer and only change the size of it. We want the profile FPS to be the FPS of the clip.</p>
<h2 id="sidetracked">Sidetracked</h2>
<p>As I start writing some code, I notice something odd in the output of the tests:</p>
<pre class="text"><code>.............................[matroska,webm @ 0x5599e1354fc0] Could not find codec parameters for stream 0 (Video: mjpeg, none(pc, bt470bg/bt470bg/smpte170m), 720x576): unspecified pixel format
Consider increasing the value for the &#39;analyzeduration&#39; (0) and &#39;probesize&#39; (5000000) options
[matroska,webm @ 0x5599e0f51540] Could not find codec parameters for stream 0 (Video: mjpeg, none(pc, bt470bg/bt470bg/smpte170m), 720x576): unspecified pixel format
Consider increasing the value for the &#39;analyzeduration&#39; (0) and &#39;probesize&#39; (5000000) options
....................
----------------------------------------------------------------------
Ran 49 tests in 2.001s</code></pre>
<p>I <code>git stash</code> my current changes and see that the output is still there.</p>
<p>I increase the verbosity of the test runner to figure out which test is causing the output and I get this:</p>
<pre class="text"><code>Doctest: rlvideolib.domain.project.Project ... [matroska,webm @ 0x56544c299700] Could not find codec parameters for stream 0 (Video: mjpeg, none(pc, bt470bg/bt470bg/smpte170m), 720x576): unspecified pixel format
Consider increasing the value for the &#39;analyzeduration&#39; (0) and &#39;probesize&#39; (5000000) options
[matroska,webm @ 0x56544c4061c0] Could not find codec parameters for stream 0 (Video: mjpeg, none(pc, bt470bg/bt470bg/smpte170m), 720x576): unspecified pixel format
Consider increasing the value for the &#39;analyzeduration&#39; (0) and &#39;probesize&#39; (5000000) options</code></pre>
<p>The problem is that there is a sort of integration test that, when run, generates proxy clips, and the output is not captured in the test and instead redirected to the terminal.</p>
<p>I add the <code>capture_stdout_stderr</code> helper in the test, and the output now looks clean.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; with capture_stdout_stderr():</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a><span class="co">...     with project.new_transaction() as transaction:</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true"></a><span class="co">...         ...</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>Let’s commit:</p>
<pre class="text"><code>$ ./make.py commit -m &#39;Capture stdout/stderr in Project test to not clutter the test output.&#39;
.................................................
----------------------------------------------------------------------
Ran 49 tests in 1.990s

OK
[main 9846016] Capture stdout/stderr in Project test to not clutter the test output.
 1 file changed, 4 insertions(+), 3 deletions(-)</code></pre>
<p>Sometimes when I encounter a small problem when working on something, I prefer to <code>git stash</code> my changes, fix the small problem, and then get back to what I was working on with <code>git stash pop</code>.</p>
<p>If the problem turns out to be not so small, I might write a note about it instead.</p>
<h2 id="back-to-the-problem">Back to the problem</h2>
<p>I create this function to get a native producer and profile:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a><span class="kw">def</span> mlt_producer_with_native_profile(path):</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true"></a>    <span class="co">&quot;&quot;&quot;</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true"></a><span class="co">    &gt;&gt;&gt; _ = mlt.Factory().init()</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true"></a><span class="co">    &gt;&gt;&gt; producer, profile = mlt_producer_with_native_profile(&quot;resources/one.mp4&quot;)</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true"></a><span class="co">    &gt;&gt;&gt; profile.fps()</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true"></a><span class="co">    25.0</span></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true"></a><span class="co">    &quot;&quot;&quot;</span></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true"></a>    profile <span class="op">=</span> mlt.Profile()</span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true"></a>    producer <span class="op">=</span> mlt.Producer(profile, path)</span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true"></a>    profile.from_producer(producer)</span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true"></a>    <span class="co"># Re-open the producer with the new profile to ensure it gets all the</span></span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true"></a>    <span class="co"># properties from it and does not retain properties from the old profile.</span></span>
<span id="cb8-13"><a href="#cb8-13" aria-hidden="true"></a>    producer <span class="op">=</span> mlt.Producer(profile, path)</span>
<span id="cb8-14"><a href="#cb8-14" aria-hidden="true"></a>    <span class="cf">return</span> (producer, profile)</span></code></pre></div>
<p>I don’t have any clips in the resources folder that are other than 25 FPS, but this at leas shows that my code doesn’t crash.</p>
<p>I try to use it when generating proxies. The tests pass after my modification, so I try to run the application with my 100 FPS test clip and get this:</p>
<pre class="text"><code>$ rm /tmp/*.mkv; rlvideo GX010802.MP4
...
  File &quot;/home/rick/rlvideo/rlvideolib/domain/source.py&quot;, line 59, in load_proxy
    assert self.length == native_producer.get_playtime()</code></pre>
<p>This reveals a problem to me. In the Python structures for a <code>Source</code> we store its length. My intention was to store the number of frames in the file so that we can check that we make valid cuts:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true"></a><span class="kw">class</span> FileSource(namedtuple(<span class="st">&quot;FileSource&quot;</span>, <span class="st">&quot;id,path,length&quot;</span>)):</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true"></a></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true"></a>    ...</span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true"></a></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true"></a>    <span class="kw">def</span> create_cut(<span class="va">self</span>, start, end):</span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true"></a>        <span class="cf">if</span> start <span class="op">&lt;</span> <span class="dv">0</span> <span class="kw">or</span> end <span class="op">&gt;</span> <span class="va">self</span>.length:</span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true"></a>            <span class="cf">raise</span> <span class="pp">ValueError</span>(<span class="st">&quot;Invalid cut.&quot;</span>)</span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true"></a>        ...</span></code></pre></div>
<p>But I think the <code>producer.get_playtime()</code> is not giving frames, but rather frames at the current frame rate. A quick test confirms that this is the case:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; profile = mlt.Profile()</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; profile.fps()</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true"></a><span class="co">25.0</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; producer = mlt.Producer(profile, &quot;resources/one.mp4&quot;)</span></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; producer.get_playtime()</span></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true"></a><span class="co">15</span></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true"></a></span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; profile.set_frame_rate(50, 1)</span></span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; profile.fps()</span></span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true"></a><span class="co">50.0</span></span>
<span id="cb11-12"><a href="#cb11-12" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; producer = mlt.Producer(profile, &quot;resources/one.mp4&quot;)</span></span>
<span id="cb11-13"><a href="#cb11-13" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; producer.get_playtime()</span></span>
<span id="cb11-14"><a href="#cb11-14" aria-hidden="true"></a><span class="co">31</span></span>
<span id="cb11-15"><a href="#cb11-15" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>What to do?</p>
<p>I think it’s time for another <code>git stash</code> and clarify length.</p>
<h2 id="clarify-length">Clarify length</h2>
<p>I want to rename <code>FileSource.length</code> to <code>FileSource.number_of_frames_at_project_fps</code>. That is a really long name, but it is more clear about what it represents. I value that more now. After the refactoring, I might uncover other issues. Let’s see.</p>
<pre class="text"><code>$ ./make.py commit -m &#39;Rename FileSource.length to FileSource.number_of_frames_at_project_fps.&#39;
.................................................
----------------------------------------------------------------------
Ran 49 tests in 1.994s

OK
[main 8baae0a] Rename FileSource.length to FileSource.number_of_frames_at_project_fps.
 2 files changed, 10 insertions(+), 10 deletions(-)</code></pre>
<p>The parameter is used in only one place outside <code>FileSource</code>:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true"></a><span class="kw">class</span> Transaction:</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true"></a></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true"></a>    ...</span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true"></a></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true"></a>    <span class="kw">def</span> add_clip(<span class="va">self</span>, path, <span class="bu">id</span><span class="op">=</span><span class="va">None</span>):</span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true"></a>        producer <span class="op">=</span> mlt.Producer(<span class="va">self</span>.project.profile, path)</span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true"></a>        source <span class="op">=</span> FileSource(<span class="bu">id</span><span class="op">=</span><span class="bu">id</span>, path<span class="op">=</span>path, number_of_frames_at_project_fps<span class="op">=</span>producer.get_playtime())</span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true"></a>        <span class="cf">return</span> <span class="va">self</span>.add_source(source, source.number_of_frames_at_project_fps)</span></code></pre></div>
<p>I find it a little unclear the connection between a producer, its playtime, and the number of frames. Let’s see if we can make a helper to clarify this:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true"></a><span class="kw">def</span> add_clip(<span class="va">self</span>, path, <span class="bu">id</span><span class="op">=</span><span class="va">None</span>):</span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true"></a>    source <span class="op">=</span> FileSource(</span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true"></a>        <span class="bu">id</span><span class="op">=</span><span class="bu">id</span>,</span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true"></a>        path<span class="op">=</span>path,</span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true"></a>        number_of_frames_at_project_fps<span class="op">=</span>FileInfo(</span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true"></a>            path</span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true"></a>        ).get_number_of_frames(<span class="va">self</span>.project.profile)</span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true"></a>    )</span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true"></a>    <span class="cf">return</span> <span class="va">self</span>.add_source(source, source.number_of_frames_at_project_fps)</span></code></pre></div>
<p>And here is <code>FileInfo</code>:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true"></a><span class="kw">class</span> FileInfo:</span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true"></a></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, path):</span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true"></a>        <span class="va">self</span>.path <span class="op">=</span> path</span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true"></a></span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true"></a>    <span class="kw">def</span> get_number_of_frames(<span class="va">self</span>, profile):</span>
<span id="cb15-7"><a href="#cb15-7" aria-hidden="true"></a>        <span class="cf">return</span> mlt.Producer(profile, <span class="va">self</span>.path).get_playtime()</span></code></pre></div>
<p>This makes it a little more clear that the number of frames in a file depends on the profile.</p>
<pre class="text"><code>$ ./make.py commit -m &#39;Extract FileInfo.&#39;
.................................................
----------------------------------------------------------------------
Ran 49 tests in 1.982s

OK
[main fd89715] Extract FileInfo.
 1 file changed, 15 insertions(+), 2 deletions(-)</code></pre>
<h2 id="change-project-fps-after">Change project FPS after?</h2>
<p>This brings up the question if we can change the project frame rate after we have added some clips.</p>
<p>My guess is not.</p>
<p>I remember reading that you should never do this in Kdenlive. Then weird things will happen.</p>
<p>I suppose we could try to re-calculate all positions and lengths when we change the frame rate. Or have the unit of measurement be time instead. But I think that will be hard since that is not what MLT works with, and also, it make sense to work in terms of frames.</p>
<p>I add a note in the source code about this and move on. This is probably fine.</p>
<h2 id="back">Back</h2>
<p>I <code>git stash pop</code> my earlier changes. Because of the rename, I have to resolve conflicts, but it goes well.</p>
<p>I then spot this:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true"></a>native_producer, native_profile <span class="op">=</span> mlt_producer_with_native_profile(<span class="va">self</span>.path)</span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true"></a><span class="cf">assert</span> <span class="va">self</span>.number_of_frames_at_project_fps <span class="op">==</span> native_producer.get_playtime()</span></code></pre></div>
<p>With our new knowledge, this is obviously wrong. And the new name helps us see that. The native profile has the FPS of the clip whereas the project profile has the FPS of the project. Those might not be the same, so therefore the assertion is not always going to work.</p>
<p>I see some more usages for <code>FileInfo</code>, so I yet again stash my changes and update <code>FileInfo</code> to this:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true"></a><span class="kw">class</span> FileInfo:</span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true"></a></span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, path):</span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true"></a>        <span class="va">self</span>.path <span class="op">=</span> path</span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true"></a></span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true"></a>    <span class="kw">def</span> get_number_of_frames(<span class="va">self</span>, profile):</span>
<span id="cb18-7"><a href="#cb18-7" aria-hidden="true"></a>        <span class="cf">return</span> <span class="va">self</span>.get_mlt_producer(profile).get_playtime()</span>
<span id="cb18-8"><a href="#cb18-8" aria-hidden="true"></a></span>
<span id="cb18-9"><a href="#cb18-9" aria-hidden="true"></a>    <span class="kw">def</span> get_mlt_producer(<span class="va">self</span>, profile):</span>
<span id="cb18-10"><a href="#cb18-10" aria-hidden="true"></a>        <span class="cf">return</span> mlt.Producer(profile, <span class="va">self</span>.path)</span></code></pre></div>
<p>Commit:</p>
<pre class="shell"><code>$ ./make.py commit -m &#39;Allow clearer code by extending FileInfo.&#39;
.................................................
----------------------------------------------------------------------
Ran 49 tests in 1.996s

OK
[main acb6702] Allow clearer code by extending FileInfo.
 4 files changed, 18 insertions(+), 11 deletions(-)
 create mode 100644 rlvideolib/mlthelpers.py</code></pre>
<h2 id="break">Break</h2>
<p>I’m having a hard time reasoning about proxy generation code. I decide it’s time for a break.</p>
<h2 id="another-strategy">Another strategy</h2>
<p>So far we have made no actual progress on improving proxy generation, but we have cleaned up the code in related areas and gained some new knowledge.</p>
<p>Since I was not able to fix the proxy generation in a small step, I decide to change approach and take much smaller steps.</p>
<p>Let’s see if we can refactor the <code>load_proxy</code> method and perhaps we might see more clearly how to modify it.</p>
<p>For reference, this is what it looks now:</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true"></a><span class="kw">def</span> load_proxy(<span class="va">self</span>, profile, proxy_profile, progress):</span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true"></a>    producer <span class="op">=</span> mlt.Producer(profile, <span class="va">self</span>.path)</span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true"></a>    <span class="cf">assert</span> <span class="va">self</span>.number_of_frames_at_project_fps <span class="op">==</span> producer.get_playtime()</span>
<span id="cb20-4"><a href="#cb20-4" aria-hidden="true"></a>    chechsum <span class="op">=</span> md5(<span class="va">self</span>.path)</span>
<span id="cb20-5"><a href="#cb20-5" aria-hidden="true"></a>    proxy_path <span class="op">=</span> <span class="ss">f&quot;/tmp/</span><span class="sc">{</span>chechsum<span class="sc">}</span><span class="ss">.mkv&quot;</span></span>
<span id="cb20-6"><a href="#cb20-6" aria-hidden="true"></a>    proxy_tmp_path <span class="op">=</span> <span class="ss">f&quot;/tmp/</span><span class="sc">{</span>chechsum<span class="sc">}</span><span class="ss">.tmp.mkv&quot;</span></span>
<span id="cb20-7"><a href="#cb20-7" aria-hidden="true"></a>    <span class="cf">if</span> <span class="kw">not</span> os.path.exists(proxy_path):</span>
<span id="cb20-8"><a href="#cb20-8" aria-hidden="true"></a>        consumer <span class="op">=</span> mlt.Consumer(proxy_profile, <span class="st">&quot;avformat&quot;</span>)</span>
<span id="cb20-9"><a href="#cb20-9" aria-hidden="true"></a>        consumer.<span class="bu">set</span>(<span class="st">&quot;target&quot;</span>, proxy_tmp_path)</span>
<span id="cb20-10"><a href="#cb20-10" aria-hidden="true"></a>        consumer.<span class="bu">set</span>(<span class="st">&quot;vcodec&quot;</span>, <span class="st">&quot;mjpeg&quot;</span>)</span>
<span id="cb20-11"><a href="#cb20-11" aria-hidden="true"></a>        consumer.<span class="bu">set</span>(<span class="st">&quot;acodec&quot;</span>, <span class="st">&quot;pcm_s16le&quot;</span>)</span>
<span id="cb20-12"><a href="#cb20-12" aria-hidden="true"></a>        consumer.<span class="bu">set</span>(<span class="st">&quot;qscale&quot;</span>, <span class="st">&quot;3&quot;</span>)</span>
<span id="cb20-13"><a href="#cb20-13" aria-hidden="true"></a>        consumer.<span class="ex">connect</span>(producer)</span>
<span id="cb20-14"><a href="#cb20-14" aria-hidden="true"></a>        consumer.start()</span>
<span id="cb20-15"><a href="#cb20-15" aria-hidden="true"></a>        <span class="cf">while</span> consumer.is_stopped() <span class="op">==</span> <span class="dv">0</span>:</span>
<span id="cb20-16"><a href="#cb20-16" aria-hidden="true"></a>            progress(producer.position()<span class="op">/</span>producer.get_playtime())</span>
<span id="cb20-17"><a href="#cb20-17" aria-hidden="true"></a>            time.sleep(<span class="fl">0.5</span>)</span>
<span id="cb20-18"><a href="#cb20-18" aria-hidden="true"></a>        os.rename(proxy_tmp_path, proxy_path)</span>
<span id="cb20-19"><a href="#cb20-19" aria-hidden="true"></a>    producer <span class="op">=</span> mlt.Producer(profile, proxy_path)</span>
<span id="cb20-20"><a href="#cb20-20" aria-hidden="true"></a>    <span class="cf">assert</span> <span class="va">self</span>.number_of_frames_at_project_fps <span class="op">==</span> producer.get_playtime()</span>
<span id="cb20-21"><a href="#cb20-21" aria-hidden="true"></a>    <span class="cf">return</span> producer</span></code></pre></div>
<p>Let’s try to extract <code>get_file_info</code> (which can then also be used in another place):</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true"></a><span class="kw">def</span> get_file_info(<span class="va">self</span>, profile):</span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true"></a>    file_info <span class="op">=</span> FileInfo(<span class="va">self</span>.path)</span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true"></a>    <span class="cf">assert</span> <span class="va">self</span>.number_of_frames_at_project_fps <span class="op">==</span> file_info.get_number_of_frames(profile)</span>
<span id="cb21-4"><a href="#cb21-4" aria-hidden="true"></a>    <span class="cf">return</span> file_info</span></code></pre></div>
<p>In <code>load_proxy</code> we can use it like this:</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true"></a><span class="st">-        producer = mlt.Producer(profile, self.path)</span></span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true"></a><span class="st">-        assert self.number_of_frames_at_project_fps == producer.get_playtime()</span></span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true"></a><span class="va">+        file_info = self.get_file_info(profile)</span></span>
<span id="cb22-4"><a href="#cb22-4" aria-hidden="true"></a>         chechsum = md5(self.path)</span>
<span id="cb22-5"><a href="#cb22-5" aria-hidden="true"></a>         proxy_path = f&quot;/tmp/{chechsum}.mkv&quot;</span>
<span id="cb22-6"><a href="#cb22-6" aria-hidden="true"></a>         proxy_tmp_path = f&quot;/tmp/{chechsum}.tmp.mkv&quot;</span>
<span id="cb22-7"><a href="#cb22-7" aria-hidden="true"></a>         if not os.path.exists(proxy_path):</span>
<span id="cb22-8"><a href="#cb22-8" aria-hidden="true"></a><span class="va">+            producer = file_info.get_mlt_producer(profile)</span></span>
<span id="cb22-9"><a href="#cb22-9" aria-hidden="true"></a>             consumer = mlt.Consumer(proxy_profile, &quot;avformat&quot;)</span>
<span id="cb22-10"><a href="#cb22-10" aria-hidden="true"></a>             consumer.set(&quot;target&quot;, proxy_tmp_path)</span>
<span id="cb22-11"><a href="#cb22-11" aria-hidden="true"></a>             consumer.set(&quot;vcodec&quot;, &quot;mjpeg&quot;)</span></code></pre></div>
<p>This ensures that the file has the same length as we have recorded.</p>
<p>Let’s extract <code>run_consumer</code>:</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true"></a><span class="kw">def</span> run_consumer(consumer, producer, progress):</span>
<span id="cb23-2"><a href="#cb23-2" aria-hidden="true"></a>    consumer.<span class="ex">connect</span>(producer)</span>
<span id="cb23-3"><a href="#cb23-3" aria-hidden="true"></a>    consumer.start()</span>
<span id="cb23-4"><a href="#cb23-4" aria-hidden="true"></a>    <span class="cf">while</span> consumer.is_stopped() <span class="op">==</span> <span class="dv">0</span>:</span>
<span id="cb23-5"><a href="#cb23-5" aria-hidden="true"></a>        progress(producer.position()<span class="op">/</span>producer.get_playtime())</span>
<span id="cb23-6"><a href="#cb23-6" aria-hidden="true"></a>        time.sleep(<span class="fl">0.5</span>)</span></code></pre></div>
<p>I forgot to commit last refactoring. Let’s do that now:</p>
<pre class="text"><code>$ ./make.py commit -m &#39;Extract get_file_info and run_consumer.&#39;
.................................................
----------------------------------------------------------------------
Ran 49 tests in 1.983s

OK
[main 49df31e] Extract get_file_info and run_consumer.
 2 files changed, 20 insertions(+), 11 deletions(-)</code></pre>
<p>There is a test for proxy generation, but it does not run fully if the proxy file already exists. I add a testing flag that we can set to True in tests. I’m not sure I like this, but it will help us when refactoring this method:</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true"></a><span class="kw">def</span> load_proxy(<span class="va">self</span>, profile, proxy_profile, progress, testing<span class="op">=</span><span class="va">False</span>):</span>
<span id="cb25-2"><a href="#cb25-2" aria-hidden="true"></a>    ...</span>
<span id="cb25-3"><a href="#cb25-3" aria-hidden="true"></a>    proxy_tmp_path <span class="op">=</span> <span class="ss">f&quot;/tmp/</span><span class="sc">{</span>chechsum<span class="sc">}</span><span class="ss">.tmp.mkv&quot;</span></span>
<span id="cb25-4"><a href="#cb25-4" aria-hidden="true"></a>    <span class="cf">if</span> <span class="kw">not</span> os.path.exists(proxy_path) <span class="kw">or</span> testing:</span>
<span id="cb25-5"><a href="#cb25-5" aria-hidden="true"></a>        producer <span class="op">=</span> file_info.get_mlt_producer(profile)</span>
<span id="cb25-6"><a href="#cb25-6" aria-hidden="true"></a>        ...</span></code></pre></div>
<h2 id="break-1">Break</h2>
<p>I keep trying to clean up the proxy loading code but I just can’t seem to find the right abstractions. Furthermore, I get segfaults and all kinds of strange behavior from MLT. This demotivates me. I force myself to take a break.</p>
<h2 id="revert">Revert</h2>
<p>Since MLT is giving me all kinds of weird behavior, I think that perhaps the <code>get_file_info</code> abstraction was wrong. Maybe it creates more trouble at the moment. Let’s see if we can inline some of it instead.</p>
<p>We get this:</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true"></a><span class="dt">@@ -65,12 +65,11 @@ class FileSource(namedtuple(&quot;FileSource&quot;, &quot;id,path,number_of_frames_at_project_f</span></span>
<span id="cb26-2"><a href="#cb26-2" aria-hidden="true"></a>         &quot;&quot;&quot;</span>
<span id="cb26-3"><a href="#cb26-3" aria-hidden="true"></a>         # TODO: generate proxy with same profile as source clip (same colorspace, etc,</span>
<span id="cb26-4"><a href="#cb26-4" aria-hidden="true"></a>         # but with smaller size)</span>
<span id="cb26-5"><a href="#cb26-5" aria-hidden="true"></a><span class="st">-        file_info = self.get_file_info(profile)</span></span>
<span id="cb26-6"><a href="#cb26-6" aria-hidden="true"></a><span class="va">+        producer = self.validate_producer(mlt.Producer(profile, self.path))</span></span>
<span id="cb26-7"><a href="#cb26-7" aria-hidden="true"></a>         chechsum = md5(self.path)</span>
<span id="cb26-8"><a href="#cb26-8" aria-hidden="true"></a>         proxy_path = f&quot;/tmp/{chechsum}.mkv&quot;</span>
<span id="cb26-9"><a href="#cb26-9" aria-hidden="true"></a>         proxy_tmp_path = f&quot;/tmp/{chechsum}.tmp.mkv&quot;</span>
<span id="cb26-10"><a href="#cb26-10" aria-hidden="true"></a>         if not os.path.exists(proxy_path) or testing:</span>
<span id="cb26-11"><a href="#cb26-11" aria-hidden="true"></a><span class="st">-            producer = file_info.get_mlt_producer(profile)</span></span>
<span id="cb26-12"><a href="#cb26-12" aria-hidden="true"></a>             consumer = mlt.Consumer(proxy_profile, &quot;avformat&quot;)</span>
<span id="cb26-13"><a href="#cb26-13" aria-hidden="true"></a>             consumer.set(&quot;target&quot;, proxy_tmp_path)</span>
<span id="cb26-14"><a href="#cb26-14" aria-hidden="true"></a>             consumer.set(&quot;vcodec&quot;, &quot;mjpeg&quot;)</span>
<span id="cb26-15"><a href="#cb26-15" aria-hidden="true"></a><span class="dt">@@ -78,14 +77,11 @@ class FileSource(namedtuple(&quot;FileSource&quot;, &quot;id,path,number_of_frames_at_project_f</span></span>
<span id="cb26-16"><a href="#cb26-16" aria-hidden="true"></a>             consumer.set(&quot;qscale&quot;, &quot;3&quot;)</span>
<span id="cb26-17"><a href="#cb26-17" aria-hidden="true"></a>             run_consumer(consumer, producer, progress)</span>
<span id="cb26-18"><a href="#cb26-18" aria-hidden="true"></a>             os.rename(proxy_tmp_path, proxy_path)</span>
<span id="cb26-19"><a href="#cb26-19" aria-hidden="true"></a><span class="st">-        producer = mlt.Producer(profile, proxy_path)</span></span>
<span id="cb26-20"><a href="#cb26-20" aria-hidden="true"></a><span class="st">-        assert self.number_of_frames_at_project_fps == producer.get_playtime()</span></span>
<span id="cb26-21"><a href="#cb26-21" aria-hidden="true"></a><span class="st">-        return producer</span></span>
<span id="cb26-22"><a href="#cb26-22" aria-hidden="true"></a><span class="va">+        return self.validate_producer(mlt.Producer(profile, proxy_path))</span></span></code></pre></div>
<p>Where <code>validate_producer</code> is this:</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb27-1"><a href="#cb27-1" aria-hidden="true"></a><span class="kw">def</span> validate_producer(<span class="va">self</span>, producer):</span>
<span id="cb27-2"><a href="#cb27-2" aria-hidden="true"></a>    <span class="cf">assert</span> producer.get_playtime() <span class="op">==</span> <span class="va">self</span>.number_of_frames_at_project_fps</span>
<span id="cb27-3"><a href="#cb27-3" aria-hidden="true"></a>    <span class="cf">return</span> producer</span></code></pre></div>
<p>Commit:</p>
<pre class="text"><code>$ ./make.py commit -m &#39;Inline some of FileInfo.&#39;
.................................................
----------------------------------------------------------------------
Ran 49 tests in 2.493s

OK
[main c47ea68] Inline some of FileInfo.
 2 files changed, 7 insertions(+), 14 deletions(-)</code></pre>
<p>Then finally I can make this relatively small change:</p>
<div class="sourceCode" id="cb29"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb29-1"><a href="#cb29-1" aria-hidden="true"></a><span class="dt">@@ -70,7 +70,12 @@ class FileSource(namedtuple(&quot;FileSource&quot;, &quot;id,path,number_of_frames_at_project_f</span></span>
<span id="cb29-2"><a href="#cb29-2" aria-hidden="true"></a>         proxy_path = f&quot;/tmp/{chechsum}.mkv&quot;</span>
<span id="cb29-3"><a href="#cb29-3" aria-hidden="true"></a>         proxy_tmp_path = f&quot;/tmp/{chechsum}.tmp.mkv&quot;</span>
<span id="cb29-4"><a href="#cb29-4" aria-hidden="true"></a>         if not os.path.exists(proxy_path) or testing:</span>
<span id="cb29-5"><a href="#cb29-5" aria-hidden="true"></a><span class="st">-            consumer = mlt.Consumer(proxy_profile, &quot;avformat&quot;)</span></span>
<span id="cb29-6"><a href="#cb29-6" aria-hidden="true"></a><span class="va">+            p = mlt.Profile()</span></span>
<span id="cb29-7"><a href="#cb29-7" aria-hidden="true"></a><span class="va">+            p.from_producer(producer)</span></span>
<span id="cb29-8"><a href="#cb29-8" aria-hidden="true"></a><span class="va">+            p.set_width(proxy_profile.width())</span></span>
<span id="cb29-9"><a href="#cb29-9" aria-hidden="true"></a><span class="va">+            p.set_height(proxy_profile.height())</span></span>
<span id="cb29-10"><a href="#cb29-10" aria-hidden="true"></a><span class="va">+            producer = mlt.Producer(p, self.path)</span></span>
<span id="cb29-11"><a href="#cb29-11" aria-hidden="true"></a><span class="va">+            consumer = mlt.Consumer(p, &quot;avformat&quot;)</span></span>
<span id="cb29-12"><a href="#cb29-12" aria-hidden="true"></a>             consumer.set(&quot;target&quot;, proxy_tmp_path)</span>
<span id="cb29-13"><a href="#cb29-13" aria-hidden="true"></a>             consumer.set(&quot;vcodec&quot;, &quot;mjpeg&quot;)</span>
<span id="cb29-14"><a href="#cb29-14" aria-hidden="true"></a>             consumer.set(&quot;acodec&quot;, &quot;pcm_s16le&quot;)</span></code></pre></div>
<p>With this, proxy clips now retain their FPS:</p>
<pre class="text"><code>$ ffprobe /tmp/de63dcd626503cbde6f3da76b0af3e8c.mkv 2&gt;&amp;1 | grep fps
  Stream #0:0: Video: mjpeg (Baseline), yuvj420p(pc, bt470bg/bt709/bt709), 960x540 [SAR 1:1 DAR 16:9], 100 fps, 100 tbr, 1k tbn, 1k tbc (default)</code></pre>
<p>It seems to work fine in the application as well.</p>
<p>Let’s commit this:</p>
<pre class="text"><code>$ ./make.py commit -m &#39;Produce proxy clips with native profile to preserve FPS.&#39;
.................................................
----------------------------------------------------------------------
Ran 49 tests in 2.560s

OK
[main b69cfb7] Produce proxy clips with native profile to preserve FPS.
 1 file changed, 6 insertions(+), 3 deletions(-)</code></pre>
<h2 id="summary">Summary</h2>
<p>This session turned out to be rather painful. Every time I do something that involves MLT, things get painful. That tells med to isolate as much of the MLT code as possible. It also tells me that I need to learn MLT better to understand issues.</p>
<p>But segfaults worry me a bit. When working in Python, we should really not be getting segfaults. Is there something wrong in the Python binding for MLT?</p>
<p>I’m sure we have to revisit proxy generation at some point. But I’m done for now.</p>
]]></description>
    <pubDate>Sun, 30 Jul 2023 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/devlog-004-proxies-with-correct-fps/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>DevLog 003: Clarify GUI separation</title>
    <link>http://rickardlindberg.me/writing/devlog-003-clarify-gui-separation/</link>
    <description><![CDATA[<h1>DevLog 003: Clarify GUI separation</h1>

<p><em>Published on 29 July 2023.</em></p>

<p>In the <a href="/projects/rlvideo/index.html">video editor</a>, there is the idea that we want to isolate the GTK code and have as few classes as possible depend on it. However, this idea is not clearly expressed in the code. So new readers of the code base will not necessarily understand that this separation is intentional and something that we want to do.</p>
<p>In this episode I want to refactor the code to make that more clear.</p>
<h2 id="current-state">Current state</h2>
<p>The current layout of the Python files looks like this:</p>
<pre class="text"><code>.
├── rlvideolib
│   ├── asciicanvas.py
│   ├── debug.py
│   ├── domain
│   │   ├── cut.py
│   │   ├── __init__.py
│   │   ├── project.py
│   │   ├── region.py
│   │   ├── section.py
│   │   └── source.py
│   ├── events.py
│   ├── graphics
│   │   ├── __init__.py
│   │   └── rectangle.py
│   ├── __init__.py
│   ├── jobs.py
│   └── testing.py
└── rlvideo.py</code></pre>
<p>There is the “main” file <code>rlvideo.py</code> and the <code>rlvideolib</code> package.</p>
<p>The main file is sort of the default place where new things go that don’t fit anywhere else. It currently has a mix of classes with different areas of responsibility:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="kw">class</span> FakeGui:</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a><span class="kw">class</span> GtkGui:</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a><span class="kw">class</span> MenuItem(namedtuple(<span class="st">&quot;MenuItem&quot;</span>, <span class="st">&quot;label,action&quot;</span>)):</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a><span class="kw">class</span> App:</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a><span class="kw">class</span> MltPlayer:</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a><span class="kw">class</span> Timeline:</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a><span class="kw">class</span> Scrollbar(namedtuple(<span class="st">&quot;Scrollbar&quot;</span>, <span class="st">&quot;content_length,one_length_in_pixels,ui_size,content_desired_start&quot;</span>)):</span></code></pre></div>
<p>Some of these classes deal with GTK. Others with GUI code that does not depend on GTK directly.</p>
<p>I would like to create a new <code>rlvideolib.gui</code> package that has three modules:</p>
<ul>
<li>gtk</li>
<li>generic</li>
<li>testing</li>
</ul>
<h2 id="testing">Testing</h2>
<p>I extract a new testing module like this:</p>
<pre class="shell"><code>$ mkdir rlvideolib/gui
$ touch rlvideolib/gui/__init__.py
$ touch rlvideolib/gui/testing.py</code></pre>
<p>Then I move the <code>FakeGui</code> class to that module and also rename it to <code>TestGui</code> as I think that is a more descriptive name. I also make sure to import it from <code>rlvideo.py</code>.</p>
<p>Let’s commit:</p>
<pre class="shell"><code>$ ./make.py commit -m &#39;Extract rlvideolib.gui.testing.&#39;
................................................
----------------------------------------------------------------------
Ran 48 tests in 1.931s

OK
[main 91b63c2] Extract rlvideolib.gui.testing.
 4 files changed, 14 insertions(+), 12 deletions(-)
 create mode 100644 rlvideolib/gui/__init__.py
 create mode 100644 rlvideolib/gui/testing.py</code></pre>
<h2 id="generic">Generic</h2>
<p>Let’s do the same thing for generic GUI code:</p>
<pre class="shell"><code>$ touch rlvideolib/gui/generic.py</code></pre>
<p>I move over the following classes:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="kw">class</span> Timeline:</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a><span class="kw">class</span> Scrollbar(namedtuple(<span class="st">&quot;Scrollbar&quot;</span>, <span class="st">&quot;content_length,one_length_in_pixels,ui_size,content_desired_start&quot;</span>)):</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a><span class="kw">class</span> MenuItem(namedtuple(<span class="st">&quot;MenuItem&quot;</span>, <span class="st">&quot;label,action&quot;</span>)):</span></code></pre></div>
<p>If we look at the imports for the generic GUI module, we see this:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a><span class="im">from</span> collections <span class="im">import</span> namedtuple</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true"></a><span class="im">import</span> cairo</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true"></a><span class="im">import</span> mlt</span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true"></a></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true"></a><span class="im">from</span> rlvideolib.debug <span class="im">import</span> timeit</span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true"></a><span class="im">from</span> rlvideolib.domain.project <span class="im">import</span> Project</span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true"></a><span class="im">from</span> rlvideolib.graphics.rectangle <span class="im">import</span> RectangleMap</span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true"></a><span class="im">from</span> rlvideolib.graphics.rectangle <span class="im">import</span> Rectangle</span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true"></a><span class="im">from</span> rlvideolib.events <span class="im">import</span> Event</span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true"></a><span class="im">from</span> rlvideolib.domain.region <span class="im">import</span> Region</span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true"></a><span class="im">from</span> rlvideolib.gui.testing <span class="im">import</span> TestGui</span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true"></a><span class="im">from</span> rlvideolib.domain.cut <span class="im">import</span> Cut</span></code></pre></div>
<p>We can see that it depends on Cairo. That is ok. The drawing of generic GUI components is done with Cairo. I don’t see as big a reason to abstract that compared to GTK. Cairo can also most likely be used with other GUI frameworks. The important thing here is that there is no import of GTK.</p>
<p>Let’s commit this:</p>
<pre class="shell"><code>$ ./make.py commit -m &#39;Extract timelinelib.gui.generic.&#39;
................................................
----------------------------------------------------------------------
Ran 48 tests in 1.937s

OK
[main e392173] Extract timelinelib.gui.generic.
 3 files changed, 220 insertions(+), 819 deletions(-)
 rewrite rlvideo.py (64%)
 copy rlvideo.py =&gt; rlvideolib/gui/generic.py (65%)</code></pre>
<p>We should probably also run the application to see that I didn’t mess up anything major. I get this:</p>
<pre class="text"><code>Traceback (most recent call last):
  File &quot;/home/rick/rlvideo/rlvideo.py&quot;, line 213, in &lt;module&gt;
    App().run()
  File &quot;/home/rick/rlvideo/rlvideo.py&quot;, line 156, in run
    self.timeline = Timeline(project=self.project, player=mlt_player)
NameError: name &#39;Timeline&#39; is not defined</code></pre>
<p>Woopsie.</p>
<p>I add the missing import to <code>rlvideo.py</code>:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true"></a><span class="im">from</span> rlvideolib.gui.generic <span class="im">import</span> Timeline</span></code></pre></div>
<p>If we want to catch this error in the test suite, we must run the whole application which incudes starting the GTK main loop.</p>
<p>I’m thinking that we can separate the construction of the GUI from the actual main loop, something like this:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true"></a><span class="kw">class</span> App:</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true"></a></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true"></a>    <span class="kw">def</span> run(<span class="va">self</span>):</span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true"></a>        <span class="va">self</span>.init()</span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true"></a>        Gtk.main()</span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true"></a></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true"></a>    ...</span></code></pre></div>
<p>And then we can run <code>App().init()</code> in a test to make sure that construction of the GUI works.</p>
<p>I try this, but run into all kinds of issues.</p>
<p>I decide to leave this as is for now.</p>
<h2 id="gui">GUI</h2>
<p>All classes that are left in <code>rlvideo.py</code> are now related to GTK. Let’s move them to its own module, leaving only this:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true"></a><span class="im">from</span> rlvideolib.gui.gtk <span class="im">import</span> App</span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true"></a></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true"></a><span class="cf">if</span> <span class="va">__name__</span> <span class="op">==</span> <span class="st">&quot;__main__&quot;</span>:</span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true"></a>    App().run()</span></code></pre></div>
<p>Let’s commit:</p>
<pre class="text"><code>$ ./make.py commit -m &#39;Extract timelinelib.gui.gtk.&#39;
................................................
----------------------------------------------------------------------
Ran 48 tests in 1.941s

OK
[main c4702cc] Extract timelinelib.gui.gtk.
 3 files changed, 5 insertions(+), 217 deletions(-)
 rewrite rlvideo.py (99%)
 copy rlvideo.py =&gt; rlvideolib/gui/gtk.py (99%)</code></pre>
<h2 id="summary">Summary</h2>
<p>The new structure looks like this:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true"></a>rlvideolib<span class="op">/</span>gui<span class="op">/</span>testing.py</span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true"></a><span class="dv">1</span>:<span class="kw">class</span> TestGui:</span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true"></a></span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true"></a>rlvideolib<span class="op">/</span>gui<span class="op">/</span>generic.py</span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true"></a><span class="dv">17</span>:<span class="kw">class</span> Timeline:</span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true"></a><span class="dv">312</span>:<span class="kw">class</span> Scrollbar(namedtuple(<span class="st">&quot;Scrollbar&quot;</span>, <span class="st">&quot;content_length,one_length_in_pixels,ui_size,content_desired_start&quot;</span>)):</span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true"></a><span class="dv">400</span>:<span class="kw">class</span> MenuItem(namedtuple(<span class="st">&quot;MenuItem&quot;</span>, <span class="st">&quot;label,action&quot;</span>)):</span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true"></a></span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true"></a>rlvideolib<span class="op">/</span>gui<span class="op">/</span>gtk.py</span>
<span id="cb14-10"><a href="#cb14-10" aria-hidden="true"></a><span class="dv">16</span>:<span class="kw">class</span> GtkGui:</span>
<span id="cb14-11"><a href="#cb14-11" aria-hidden="true"></a><span class="dv">41</span>:<span class="kw">class</span> App:</span>
<span id="cb14-12"><a href="#cb14-12" aria-hidden="true"></a><span class="dv">163</span>:<span class="kw">class</span> MltPlayer:</span></code></pre></div>
<p>I think this structure tells the reader that there is a clear separation between GTK related GUI code and generic GUI code and that this separation is intentional.</p>
<p>The <code>MltPlayer</code> that we see in the GTK module has only very little to do with GTK. Most of it just works with an MLT producer. GTK is needed for the embedding of the video display from the MLT consumer inside a GTK window.</p>
<p>I think part of <code>MltPlayer</code> should probably be extracted to a new class and be put in the generic GUI module or somewhere else. This refactoring to separate the different GUI modules revealed that to me. I find that is often the case. You make one refactoring to clarify something and you discover something else that is unclear.</p>
]]></description>
    <pubDate>Sat, 29 Jul 2023 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/devlog-003-clarify-gui-separation/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>DevLog 002: Change mix strategy for cuts in GUI</title>
    <link>http://rickardlindberg.me/writing/devlog-002-selecting-cut-type-in-gui/</link>
    <description><![CDATA[<h1>DevLog 002: Change mix strategy for cuts in GUI</h1>

<p><em>Published on 29 July 2023.</em></p>

<p>In the <a href="/writing/devlog-001-jcut-lcut/index.html">previous devlog</a> we worked on adding the concept of a cut type to a clip in the <a href="/projects/rlvideo/index.html">video editor</a>. That is, how should two overlapping clips be mixed together? Which one should be on top? Should it be a <a href="https://en.wikipedia.org/wiki/J_cut">J-cut</a>?</p>
<p>I’ve since added support for two types of cuts: over and under. So we can (programmatically) set this property on clips and they will render in the correct order.</p>
<p>The default cut is under so that later clips will be mixed under the previous clips:</p>
<p>
<center>
<img src="under.png" title="fig:" alt="Default under cut." />
</center>
</p>
<p>There is not yet a way to change this default from the GUI, so that’s what we will work on in this episode.</p>
<h2 id="aside-clips-and-cuts">Aside: clips and cuts</h2>
<p>When writing about this and when looking at the source code, I’m a bit confused by the terminology. I write about clips och cuts, but in the source code there is no concept of a clip, only a cut and a source.</p>
<p>A source represents a file on disk or some generator of frames. A cut represents a region of a source.</p>
<p>A cut has a property called <code>cut</code> which is how to mix this cut with the previous cut on the timeline. That confuses things further.</p>
<p>Let’s rename it to <code>mix_strategy</code> to lessen the confusion.</p>
<pre class="shell"><code>$ ./make.py commit -m &#39;Rename Cut.cut to Cut.mix_strategy.&#39;
...............................................
----------------------------------------------------------------------
Ran 47 tests in 1.918s

OK
[main 425909a] Rename Cut.cut to Cut.mix_strategy.
 1 file changed, 11 insertions(+), 11 deletions(-)</code></pre>
<p>That’s better.</p>
<h2 id="two-possible-ways">Two possible ways</h2>
<p>I can think of two possible ways to set the mix strategy for a cut in the GUI. Either we can right click on a cut and have a context menu pop up where we can select the mix strategy. Or we can select a clip and have a “set mix strategy” operation applied to the selected clip.</p>
<p>Currently, there is no concept of a selected clip. You can’t select anything. But there is a concept of clicking and dragging a clip. Therefore I think a context menu is easier to get started with.</p>
<h2 id="reviewing-mouse-click-code">Reviewing mouse click code</h2>
<p>Let’s look at how click and drag is handled today.</p>
<p>I see this GTK event is connected:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a>timeline.<span class="ex">connect</span>(<span class="st">&quot;button-press-event&quot;</span>, timeline_button)</span></code></pre></div>
<p>And <code>timeline_button</code> is defined like this:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="kw">def</span> timeline_button(widget, event):</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a>    <span class="va">self</span>.timeline.mouse_down(<span class="op">*</span>timeline.translate_coordinates(</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a>        main_window,</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a>        event.x,</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a>        event.y</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true"></a>    ))</span></code></pre></div>
<p>This code does not seem to distinguish between left and right mouse button click. Interesting.</p>
<p>Does that mean that we can move a cut on the timeline by clicking and dragging with the right mouse button? I try it in the application. And it indeed works. That was really not my intention. Let’s see if we can fix that.</p>
<p>I add a debug print to see what properties of the event might indicate the button:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="kw">def</span> timeline_button(widget, event):</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a>    <span class="bu">print</span>(<span class="bu">dir</span>(event))</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a>    ...</span></code></pre></div>
<p>I find this:</p>
<pre class="text"><code>[..., &#39;button&#39;, ..., &#39;get_button&#39;, ...]</code></pre>
<p>Let’s try this:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="kw">def</span> timeline_button(widget, event):</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a>    <span class="bu">print</span>(event.button)</span></code></pre></div>
<p>When I press the left button, it prints 1, and when I press the right button, it prints 3. There must be some constants for these. I search the GTK documentation and find <a href="https://docs.gtk.org/gdk3/struct.EventButton.html">this</a>:</p>
<blockquote>
<p>The button which was pressed or released, numbered from 1 to 5. Normally button 1 is the left mouse button, 2 is the middle button, and 3 is the right button.</p>
</blockquote>
<p>Maybe there are no constants?</p>
<p>Let’s codify our new knowledge like this:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a><span class="kw">def</span> timeline_button(widget, event):</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a>    <span class="cf">if</span> event.button <span class="op">==</span> <span class="dv">1</span>:</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true"></a>        <span class="va">self</span>.timeline.left_mouse_down(<span class="op">*</span>timeline.translate_coordinates(</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true"></a>            main_window,</span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true"></a>            event.x,</span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true"></a>            event.y</span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true"></a>        ))</span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true"></a>    <span class="cf">elif</span> event.button <span class="op">==</span> <span class="dv">3</span>:</span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true"></a>        <span class="va">self</span>.timeline.right_mouse_down(<span class="op">*</span>timeline.translate_coordinates(</span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true"></a>            main_window,</span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true"></a>            event.x,</span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true"></a>            event.y</span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true"></a>        ))</span></code></pre></div>
<p>We rename the previous <code>mouse_down</code> to <code>left_mouse_down</code> and add a new empty method for <code>right_mouse_down</code>.</p>
<pre class="shell"><code>$ ./make.py commit -m &#39;Timeline receives both left and right mouse down events.&#39;
...............................................
----------------------------------------------------------------------
Ran 47 tests in 1.923s

OK
[main 0fc6fb1] Timeline receives both left and right mouse down events.
 1 file changed, 17 insertions(+), 7 deletions(-)</code></pre>
<h2 id="review">Review</h2>
<p>It’s a little unnclear to me what the translation of coordinates are doing. I think the coordinates received in the event are relative to the whole GTK window and the timeline expects coordinates relative to itself.</p>
<p>I don’t really want to focus on this now, but I add a TODO in the code that I should clarify this.</p>
<p>In this project I’ve tried to keep my “backlog” in the source code in the form of TODO comments. Some I will probably never get back to, and others will serve as a reminder. But so far I kind of like this approach.</p>
<h2 id="separation-of-timeline-and-gtk">Separation of timeline and GTK</h2>
<p>The timeline component is unaware of GTK. So when it receives the right mouse down event, it can find the cut that we clicked on, but it doesn’t have the ability to show a context menu, because it needs to use GTK for that.</p>
<p>This separation is intentional. I’ve tried to isolate GTK code to the outermost layer to keep the inner layers free from those details and make them easier to test.</p>
<p>But this presents a problem now.</p>
<p>The only solution that comes to mind if we want to maintain this separation is to create some kind of abstraction. Something like this:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true"></a><span class="kw">class</span> GtkGuiAbstraction:</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true"></a></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true"></a>    <span class="kw">def</span> show_context_menu(<span class="va">self</span>, generic_menu_description):</span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true"></a>        <span class="co"># Create GTK context menu from generic_menu_description</span></span></code></pre></div>
<p>And then pass that to the timeline so that it can do something like this:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true"></a><span class="kw">def</span> right_mouse_down(<span class="va">self</span>, x, y):</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true"></a>    <span class="va">self</span>.gui.show_context_menu([</span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true"></a>        MenuItem(label<span class="op">=</span><span class="st">&quot;over&quot;</span>, action<span class="op">=</span><span class="kw">lambda</span>: ...),</span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true"></a>        MenuItem(label<span class="op">=</span><span class="st">&quot;under&quot;</span>, action<span class="op">=</span><span class="kw">lambda</span>: ...),</span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true"></a>    ])</span></code></pre></div>
<p>I’m not sure what I think about this. On the one hand it feels like a complex extra layer. On the other hand I really want to isolate GTK code. My experience tells me that GUI code can easily leak in to every part of the application and it just makes everything more messy.</p>
<p>I will try to create the simplest possible solution of this design and see what it feels like.</p>
<h2 id="gtk-gui-abstraction">GTK GUI abstraction</h2>
<p>Let’s start with a test:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true"></a><span class="kw">class</span> GtkGui:</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true"></a></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true"></a>    <span class="kw">def</span> show_context_menu(<span class="va">self</span>, menu):</span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true"></a>        <span class="co">&quot;&quot;&quot;</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true"></a><span class="co">        &gt;&gt;&gt; GtkGui().show_context_menu([</span></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true"></a><span class="co">        ...     MenuItem(label=&quot;over&quot;, action=lambda: print(&quot;over&quot;)),</span></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true"></a><span class="co">        ...     MenuItem(label=&quot;under&quot;, action=lambda: print(&quot;under&quot;)),</span></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true"></a><span class="co">        ... ])</span></span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true"></a><span class="co">        &quot;&quot;&quot;</span></span></code></pre></div>
<p>This fails with</p>
<pre class="text"><code>NameError: name &#39;MenuItem&#39; is not defined</code></pre>
<p>I define <code>MenuItem</code> and we are green:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true"></a><span class="kw">class</span> MenuItem(namedtuple(<span class="st">&quot;MenuItem&quot;</span>, <span class="st">&quot;label,action&quot;</span>)):</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true"></a>    <span class="cf">pass</span></span></code></pre></div>
<p>Let’s commit:</p>
<pre class="shell"><code>$ ./make.py commit -m &#39;The start of GtkGui and its show_context_menu method.&#39;
................................................
----------------------------------------------------------------------
Ran 48 tests in 1.923s

OK
[main e64b93e] The start of GtkGui and its show_context_menu method.
 1 file changed, 13 insertions(+)</code></pre>
<p>The test so far does not assert anything. It just checks that the code does not crash. But that is enough to experiment with the GTK API. Let’s try to create the menu and the test will tell is if we use the GKT API wrong.</p>
<p>I try this:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true"></a>menu <span class="op">=</span> gtk.Menu()</span></code></pre></div>
<p>Test immediately fails:</p>
<pre class="text"><code>NameError: name &#39;gtk&#39; is not defined</code></pre>
<p>Ah, it should be <code>Gtk</code> I see in the imports at the top of the file. Thank you test.</p>
<p>I search the web for examples how to show a context menu in GTK. After a bit of reading and trying, I end up with this:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true"></a><span class="kw">def</span> show_context_menu(<span class="va">self</span>, menu):</span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true"></a>    <span class="co">&quot;&quot;&quot;</span></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true"></a><span class="co">    &gt;&gt;&gt; event = namedtuple(&quot;FakeEvent&quot;, &quot;button,time&quot;)(3, 0)</span></span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true"></a><span class="co">    &gt;&gt;&gt; GtkGui(event).show_context_menu([</span></span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true"></a><span class="co">    ...     MenuItem(label=&quot;over&quot;, action=lambda: print(&quot;over&quot;)),</span></span>
<span id="cb17-6"><a href="#cb17-6" aria-hidden="true"></a><span class="co">    ...     MenuItem(label=&quot;under&quot;, action=lambda: print(&quot;under&quot;)),</span></span>
<span id="cb17-7"><a href="#cb17-7" aria-hidden="true"></a><span class="co">    ... ])</span></span>
<span id="cb17-8"><a href="#cb17-8" aria-hidden="true"></a><span class="co">    &quot;&quot;&quot;</span></span>
<span id="cb17-9"><a href="#cb17-9" aria-hidden="true"></a>    <span class="kw">def</span> create_gtk_handler(menu_item):</span>
<span id="cb17-10"><a href="#cb17-10" aria-hidden="true"></a>        <span class="kw">def</span> handler(widget):</span>
<span id="cb17-11"><a href="#cb17-11" aria-hidden="true"></a>            menu_item.action()</span>
<span id="cb17-12"><a href="#cb17-12" aria-hidden="true"></a>        <span class="cf">return</span> handler</span>
<span id="cb17-13"><a href="#cb17-13" aria-hidden="true"></a>    gtk_menu <span class="op">=</span> Gtk.Menu()</span>
<span id="cb17-14"><a href="#cb17-14" aria-hidden="true"></a>    <span class="cf">for</span> menu_item <span class="kw">in</span> menu:</span>
<span id="cb17-15"><a href="#cb17-15" aria-hidden="true"></a>        gtk_menu_item <span class="op">=</span> Gtk.MenuItem(label<span class="op">=</span>menu_item.label)</span>
<span id="cb17-16"><a href="#cb17-16" aria-hidden="true"></a>        gtk_menu_item.<span class="ex">connect</span>(<span class="st">&quot;activate&quot;</span>, create_gtk_handler(menu_item))</span>
<span id="cb17-17"><a href="#cb17-17" aria-hidden="true"></a>        gtk_menu_item.show()</span>
<span id="cb17-18"><a href="#cb17-18" aria-hidden="true"></a>        gtk_menu.append(gtk_menu_item)</span>
<span id="cb17-19"><a href="#cb17-19" aria-hidden="true"></a>    gtk_menu.popup(<span class="va">None</span>, <span class="va">None</span>, <span class="va">None</span>, <span class="va">None</span>, <span class="va">self</span>.event.button, <span class="va">self</span>.event.time)</span></code></pre></div>
<p>The <code>Gtk.Menu</code> seems to need an event to show itself according to examples. So I pass that along to <code>GtkGui</code> and use a fake one in the test. The event handler looks like this:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true"></a><span class="kw">def</span> right_mouse_down(<span class="va">self</span>, x, y, gui):</span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true"></a>    gui.show_context_menu([</span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true"></a>        MenuItem(label<span class="op">=</span><span class="st">&quot;over&quot;</span>, action<span class="op">=</span><span class="kw">lambda</span>: <span class="bu">print</span>(<span class="st">&quot;over&quot;</span>)),</span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true"></a>        MenuItem(label<span class="op">=</span><span class="st">&quot;under&quot;</span>, action<span class="op">=</span><span class="kw">lambda</span>: <span class="bu">print</span>(<span class="st">&quot;under&quot;</span>)),</span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true"></a>    ])</span></code></pre></div>
<p>I decide to pass the <code>gui</code> along in the method call. That way, it can more easily be constructed with the right click event in the outer layer:</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true"></a><span class="cf">elif</span> event.button <span class="op">==</span> <span class="dv">3</span>:</span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true"></a>    <span class="va">self</span>.timeline.right_mouse_down(<span class="op">*</span>timeline.translate_coordinates(</span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true"></a>        main_window,</span>
<span id="cb19-4"><a href="#cb19-4" aria-hidden="true"></a>        event.x,</span>
<span id="cb19-5"><a href="#cb19-5" aria-hidden="true"></a>        event.y</span>
<span id="cb19-6"><a href="#cb19-6" aria-hidden="true"></a>    ), GtkGui(event))</span></code></pre></div>
<p>This works fine and when I click the menu items, the corresponding text is shown in the console:</p>
<p>
<center>
<img src="popup.png" title="fig:" alt="Context menu popup." />
</center>
</p>
<p>Let’s commit:</p>
<pre class="shell"><code>$ ./make.py commit -m &#39;Show a context menu when right clicking in timeline.&#39;
................................................
----------------------------------------------------------------------
Ran 48 tests in 1.954s

OK
[main 4201621] Show a context menu when right clicking in timeline.
 1 file changed, 22 insertions(+), 4 deletions(-)</code></pre>
<h2 id="modify-cut">Modify cut</h2>
<p>I continue to modify <code>right_mouse_down</code> to this:</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true"></a><span class="kw">def</span> right_mouse_down(<span class="va">self</span>, x, y, gui):</span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true"></a>    cut <span class="op">=</span> <span class="va">self</span>.rectangle_map.get(x, y)</span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true"></a>    <span class="cf">if</span> <span class="bu">isinstance</span>(cut, Cut):</span>
<span id="cb21-4"><a href="#cb21-4" aria-hidden="true"></a>        gui.show_context_menu([</span>
<span id="cb21-5"><a href="#cb21-5" aria-hidden="true"></a>            MenuItem(label<span class="op">=</span><span class="st">&quot;over&quot;</span>, action<span class="op">=</span><span class="kw">lambda</span>: <span class="bu">print</span>(<span class="st">&quot;over&quot;</span>)),</span>
<span id="cb21-6"><a href="#cb21-6" aria-hidden="true"></a>            MenuItem(label<span class="op">=</span><span class="st">&quot;under&quot;</span>, action<span class="op">=</span><span class="kw">lambda</span>: <span class="bu">print</span>(<span class="st">&quot;under&quot;</span>)),</span>
<span id="cb21-7"><a href="#cb21-7" aria-hidden="true"></a>        ])</span></code></pre></div>
<p>I want to show the context menu only if we right click on a cut. We can use the rectangle map for that.</p>
<p>All tests pass, but when I try this in the application, it fails with this:</p>
<pre class="text"><code>NameError: name &#39;Cut&#39; is not defined</code></pre>
<p>I should have started with a test. Let’s move a little slower.</p>
<p>I add this line in a larger timeline test where we have some objects setup:</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb23-2"><a href="#cb23-2" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; timeline.right_mouse_down(5, 25, FakeGui(click_context_menu=&quot;over&quot;))</span></span>
<span id="cb23-3"><a href="#cb23-3" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>And here comes one benefit of the GUI abstraction: easier testing. In the test we can pass a <code>FakeGui</code> that will simulate that we click a context menu item. We implement it like this:</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true"></a><span class="kw">class</span> FakeGui:</span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true"></a></span>
<span id="cb24-3"><a href="#cb24-3" aria-hidden="true"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, click_context_menu<span class="op">=</span><span class="va">None</span>):</span>
<span id="cb24-4"><a href="#cb24-4" aria-hidden="true"></a>        <span class="va">self</span>.click_context_menu <span class="op">=</span> click_context_menu</span>
<span id="cb24-5"><a href="#cb24-5" aria-hidden="true"></a></span>
<span id="cb24-6"><a href="#cb24-6" aria-hidden="true"></a>    <span class="kw">def</span> show_context_menu(<span class="va">self</span>, menu):</span>
<span id="cb24-7"><a href="#cb24-7" aria-hidden="true"></a>        <span class="cf">for</span> menu_item <span class="kw">in</span> menu:</span>
<span id="cb24-8"><a href="#cb24-8" aria-hidden="true"></a>            <span class="cf">if</span> menu.label <span class="op">==</span> <span class="va">self</span>.click_context_menu:</span>
<span id="cb24-9"><a href="#cb24-9" aria-hidden="true"></a>                menu.action()</span>
<span id="cb24-10"><a href="#cb24-10" aria-hidden="true"></a>                <span class="cf">return</span></span></code></pre></div>
<p>Now we get the same error about <code>Cut</code> not being defined. But this time, we get it when running the test suite. Success!</p>
<p>I import <code>Cut</code> and get an error that ‘list’ object has no attribute ‘label’. Ah. I made a mistake in the fake GUI. <code>label</code> and <code>action</code> should be accessed on the item, not the menu.</p>
<p>The current context menu just prints its label, so to make the test pass, let’s assert on that:</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb25-2"><a href="#cb25-2" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; timeline.right_mouse_down(5, 25, FakeGui(click_context_menu=&quot;over&quot;))</span></span>
<span id="cb25-3"><a href="#cb25-3" aria-hidden="true"></a><span class="co">over</span></span>
<span id="cb25-4"><a href="#cb25-4" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>And we are back to green. Let’s commit:</p>
<pre class="shell"><code>$ ./make.py commit -m &#39;Test right clicking a cut.&#39;
................................................
----------------------------------------------------------------------
Ran 48 tests in 1.957s

OK
[main 7bf3e14] Test right clicking a cut.
 1 file changed, 33 insertions(+), 7 deletions(-)</code></pre>
<p>But we don’t want to print the menu item label. We want to change the <code>mix_strategy</code> of the clicked cut. Let’s assert on that instead:</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb27-1"><a href="#cb27-1" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb27-2"><a href="#cb27-2" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; timeline.right_mouse_down(5, 25, FakeGui(click_context_menu=&quot;over&quot;))</span></span>
<span id="cb27-3"><a href="#cb27-3" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; timeline.get_cut(cut_id).mix_strategy</span></span>
<span id="cb27-4"><a href="#cb27-4" aria-hidden="true"></a><span class="co">&#39;over&#39;</span></span>
<span id="cb27-5"><a href="#cb27-5" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>This fails because <code>right_mouse_down</code> still prints its label. I remove the print and it now fails because <code>Timeline.get_cut</code> is not defined. I add it and get the correct failure:</p>
<pre class="text"><code>Failed example:
    timeline.get_cut(cut_id).mix_strategy
Differences (ndiff with -expected +actual):
    - &#39;over&#39;
    + &#39;under&#39;</code></pre>
<p>The original mix strategy is <code>over</code> and this test should have changed it to <code>under</code>, but it didn’t. Let’s fix that. As I try to get this test to pass, I get many test failures. The failures guide me what to do next. This method is not defined. Define it. This name does not exist. Fix spell error. I eventually end up with this:</p>
<div class="sourceCode" id="cb29"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb29-1"><a href="#cb29-1" aria-hidden="true"></a><span class="kw">def</span> right_mouse_down(<span class="va">self</span>, x, y, gui):</span>
<span id="cb29-2"><a href="#cb29-2" aria-hidden="true"></a>    cut <span class="op">=</span> <span class="va">self</span>.rectangle_map.get(x, y)</span>
<span id="cb29-3"><a href="#cb29-3" aria-hidden="true"></a>    <span class="cf">if</span> <span class="bu">isinstance</span>(cut, Cut):</span>
<span id="cb29-4"><a href="#cb29-4" aria-hidden="true"></a>        <span class="kw">def</span> mix_strategy_updater(value):</span>
<span id="cb29-5"><a href="#cb29-5" aria-hidden="true"></a>            <span class="kw">def</span> update():</span>
<span id="cb29-6"><a href="#cb29-6" aria-hidden="true"></a>                <span class="cf">with</span> <span class="va">self</span>.project.new_transaction() <span class="im">as</span> transaction:</span>
<span id="cb29-7"><a href="#cb29-7" aria-hidden="true"></a>                    transaction.modify(cut.<span class="bu">id</span>, <span class="kw">lambda</span> cut:</span>
<span id="cb29-8"><a href="#cb29-8" aria-hidden="true"></a>                        cut.with_mix_strategy(value))</span>
<span id="cb29-9"><a href="#cb29-9" aria-hidden="true"></a>            <span class="cf">return</span> update</span>
<span id="cb29-10"><a href="#cb29-10" aria-hidden="true"></a>        gui.show_context_menu([</span>
<span id="cb29-11"><a href="#cb29-11" aria-hidden="true"></a>            MenuItem(label<span class="op">=</span><span class="st">&quot;over&quot;</span>, action<span class="op">=</span>mix_strategy_updater(<span class="st">&quot;over&quot;</span>)),</span>
<span id="cb29-12"><a href="#cb29-12" aria-hidden="true"></a>            MenuItem(label<span class="op">=</span><span class="st">&quot;under&quot;</span>, action<span class="op">=</span>mix_strategy_updater(<span class="st">&quot;under&quot;</span>)),</span>
<span id="cb29-13"><a href="#cb29-13" aria-hidden="true"></a>        ])</span></code></pre></div>
<p>This makes the test pass and also works beautifully in the application. Let’s commit:</p>
<pre class="shell"><code>$ ./make.py commit -m &#39;Can change mix strategy of clip with context menu.&#39;
................................................
----------------------------------------------------------------------
Ran 48 tests in 1.956s

OK
[main 776171a] Can change mix strategy of clip with context menu.
 3 files changed, 26 insertions(+), 4 deletions(-)</code></pre>
<h2 id="summary">Summary</h2>
<p>We now have a way to change the mix strategy of a cut in the GUI. The application is a little more useful now.</p>
<p>Working with third party frameworks, like GTK, I find often slows you down. You need to learn the details of it and it is often difficult to write tests. Therefore I’m quite happy with the abstraction that we created. I want to keep as many classes as possible away from messy GTK code.</p>
]]></description>
    <pubDate>Sat, 29 Jul 2023 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/devlog-002-selecting-cut-type-in-gui/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>Writing my own video editor</title>
    <link>http://rickardlindberg.me/writing/writing-my-own-video-editor/</link>
    <description><![CDATA[<h1>Writing my own video editor</h1>

<p><em>Published on 28 July 2023.</em></p>

<p>On May 28 I write <a href="https://hachyderm.io/@rickardlindberg/110447282439624451">this</a>:</p>
<blockquote>
<p>Got the urge to write my own video editor. Tired of kdenlive’s instability. And I don’t need something that advanced. Reading a bit about the MLT framework makes me think that it might actually be possible to do in a reasonable time.</p>
<p>Sometimes I feel bad for starting more projects than i finish. On the other hand, every project I do teach me something. And I do this (believe it or not) for my enjoyment.</p>
</blockquote>
<p>It happens to me from time to time. I get an idea for something that I want to build. Sometimes the urge goes away. This time it doesn’t.</p>
<h2 id="why-write-a-video-editor">Why write a video editor?</h2>
<p>I like to build things. In particular I like to build things that I have a use for myself.</p>
<p>Currently, I use <a href="https://kdenlive.org/en/">Kdenlive</a> as my video editor. It has served me well. However, every time I work with it, I get a little frustrated. It often crashes on me, it often feels slow, and there are certain things that I want to do that I don’t know how.</p>
<p>The normal way of solving those problems I think would include</p>
<ul>
<li>Trying the latest version of Kdenlive (would require me to upgrade Fedora version as well)</li>
<li>Buying a faster computer</li>
<li>Learning Kdenlive better</li>
</ul>
<p>But I can program, and I like to build things. So from that point of view, the obvious solution is to build my own video editor specifically for my needs.</p>
<p>Even if it ends up being unusable as my video editor, I will have had a good time working on it and most likely learned a thing or two.</p>
<h2 id="more-ideas">More ideas</h2>
<p>On June 16 I sketch the following in my notebook:</p>
<p>
<center>
<img src="sketch-initial.png" title="fig:" alt="Initial sketch of a timeline." />
</center>
</p>
<p>I think about how to represent clips on a timeline in my ideal video editor. This sketch also tells me that the urge has not gone away.</p>
<h2 id="researching-mlt">Researching MLT</h2>
<p>Writing a video editor seems like a daunting task. The only reason that I think it will be possible is with help from <a href="https://www.mltframework.org/">MLT</a>. From their website:</p>
<blockquote>
<p>MLT is an open source multimedia framework, designed and developed for television broadcasting. It provides a toolkit for broadcasters, video editors, media players, transcoders, web streamers and many more types of applications.</p>
</blockquote>
<p>So a lot of the heavy lifting of a video editor can be done by MLT. That is my guess and hope anyway. What I can focus on is writing a nice frontend for it.</p>
<p>Instead of speculating, I do some spikes to learn how to use MLT from Python.</p>
<p>Here is one example how to put two clips next to each other on a timeline and preview the result:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="im">import</span> time</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a><span class="im">import</span> mlt</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a>mlt.Factory().init()</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a>profile <span class="op">=</span> mlt.Profile()</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a>playlist <span class="op">=</span> mlt.Playlist()</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a>playlist.append(mlt.Producer(profile, <span class="st">&quot;VID_20230611_120041.mp4&quot;</span>))</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true"></a>playlist.append(mlt.Producer(profile, <span class="st">&quot;VID_20230611_115932.mp4&quot;</span>))</span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true"></a>consumer <span class="op">=</span> mlt.Consumer(profile, <span class="st">&quot;sdl&quot;</span>)</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true"></a>consumer.<span class="bu">set</span>(<span class="st">&quot;rescale&quot;</span>, <span class="st">&quot;none&quot;</span>)</span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true"></a>consumer.<span class="ex">connect</span>(playlist)</span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true"></a>consumer.start()</span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true"></a><span class="cf">while</span> consumer.is_stopped() <span class="op">==</span> <span class="dv">0</span>:</span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true"></a>    time.sleep(<span class="dv">1</span>)</span></code></pre></div>
<p>More examples from my spikes can be found <a href="https://github.com/rickardlindberg/rlvideo/blob/91dd25a0d39cbe25e8ce85157115d023b4d2c78c/spikes/mlt_hello_world.py">here</a>.</p>
<p>To help me do the spikes, I use the following resources:</p>
<ul>
<li><p><a href="https://www.mltframework.org/docs/framework/">MLT Framework Design</a>: A good introduction to how MLT works.</p></li>
<li><p><a href="https://github.com/mltframework/mlt/tree/master/src/swig/python">Python examples</a>: Examples how to use MLT from Python. They are quite limited, but give you a good starting point.</p></li>
<li><p><a href="https://www.mltframework.org/doxygen/annotated.html">MLT API documentation</a>: The C API documentation. Translating this to Python has been mostly straight forward.</p></li>
<li><p><a href="https://github.com/jliljebl/flowblade">Flowblade</a>: Another video editor that is written in Python and MLT.</p></li>
</ul>
<h2 id="design-idea">Design idea</h2>
<p>By doing the spikes, I have a basic understanding of how to use MLT and how it could be used to build a video editor.</p>
<p>The design I have in mind for the video editor looks something like this:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="kw">class</span> Timeline:</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>):</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a>        <span class="va">self</span>.clips <span class="op">=</span> []</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a>    <span class="kw">def</span> add(<span class="va">self</span>, clip):</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a>        <span class="va">self</span>.clips.add(clip)</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true"></a></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true"></a>    <span class="kw">def</span> to_mlt_producer(<span class="va">self</span>, ...):</span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true"></a>        ...</span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true"></a></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true"></a>    <span class="kw">def</span> draw(<span class="va">self</span>, ...):</span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true"></a>        ...</span></code></pre></div>
<p>That is, I want to use custom data structures for representing clips on a timeline. I think that will give us a design which is clean and easy to work with. We can design those structures to be good for the kinds of operations that we want to perform.</p>
<p>However, somehow those structures must be turned into an MLT producer. That is what <code>to_mlt_producer</code> is for. Transforming from our world into the MLT world. When we have an MLT producer, we can preview the composition and render a final result. But all the edit operations will be done on our custom data structures.</p>
<h2 id="timeline-representation">Timeline representation</h2>
<p>So what representation of clips is best? It depends on how it’s going to be used. How do I want to work with clips on a timeline in my ideal video editor?</p>
<p>On June 28 I sketch this:</p>
<p>
<center>
<img src="sketch-timeline-visualization.png" title="fig:" alt="Sketch of a timeline visualization of overlap." />
</center>
</p>
<p>And on June 30 I sketch this:</p>
<p>
<center>
<img src="sketch-split-sections.png" title="fig:" alt="Sketch of a timeline splits." />
</center>
</p>
<p>I don’t think that I want to have multiple tracks in the timeline. There should only be one track. When clips overlap, multiple tracks might be created in the background, but the user should not need to create tracks manually.</p>
<p>The sketches help me figure this out.</p>
<p>I think that we can have one structure with all the clips and their positions. Then we can split those up into sections. One type of section has no overlaps, and the other do. Overlaps must be handled differently. They both render differently (stacked on top of each other) and they must produce multiple MLT tracks in the background.</p>
<p>I work on this section splitting code and end up with this:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; a = Source(&quot;A&quot;).create_cut(0, 20).at(0)</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; b = Source(&quot;b&quot;).create_cut(0, 20).at(10)</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; cuts = Cuts()</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; cuts = cuts.add(a)</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; cuts = cuts.add(b)</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; cuts.split_into_sections().to_ascii_canvas()</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true"></a><span class="co">|&lt;-A0------|--A10----&gt;|--b10----&gt;|</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true"></a><span class="co">|          |&lt;-b0------|          |</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; cuts.modify(b, lambda cut: cut.move(1)).split_into_sections().to_ascii_canvas()</span></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true"></a><span class="co">|&lt;-A0-------|--A11---&gt;|--b9------&gt;|</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true"></a><span class="co">|           |&lt;-b0-----|           |</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>The <code>to_ascii_canvas</code> is only used in tests to give me faster feedback on the splitting code. It also documents quite nicely what the timeline would look like in different situations.</p>
<h2 id="putting-it-together">Putting it together</h2>
<p>I spend quite some time getting the splitting of cuts to work. Even before I know if this design will work out. (Not very smart.) We know if it will work out when we put everything together.</p>
<p>I first try to put everything together in a Pygame application, but it gives me all kinds of problems, so I decide to try GTK instead.</p>
<p>The application has two parts: one that shows the timeline, and one that shows the preview window.</p>
<p>The timeline is created something like this:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="kw">def</span> timeline_draw(widget, context):</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a>    sections.draw(context, ...)</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a>timeline <span class="op">=</span> Gtk.DrawingArea()</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a>timeline.<span class="ex">connect</span>(<span class="st">&quot;draw&quot;</span>, timeline_draw)</span></code></pre></div>
<p>It hooks up the draw event and lets the sections (created by <code>split_into_sections</code>) do all the drawing.</p>
<p>The preview window is created something like this:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a>preview <span class="op">=</span> Gtk.DrawingArea()</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a>os.putenv(<span class="st">&quot;SDL_WINDOWID&quot;</span>, <span class="bu">str</span>(preview.get_window().get_xid()))</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a>consumer <span class="op">=</span> mlt.Consumer(profile, <span class="st">&quot;sdl&quot;</span>)</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true"></a>consumer.start()</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true"></a>consumer.<span class="ex">connect</span>(sections.to_mlt_producer(profile))</span></code></pre></div>
<p>It connects the SDL consumer to the preview window and the producer (created by <code>to_mlt_producer</code>) to the consumer. I learn how to make the SDL consumer draw its output inside a GTK window by looking at the Flowblade source code.</p>
<p>I get a basic version of <code>Sections.draw</code> and <code>Sections.to_mlt_producer</code> and end up with this on July 3:</p>
<p>
<center>
<img src="current-status.png" title="fig:" alt="Current look of application." />
</center>
</p>
<h2 id="future">Future</h2>
<p>At this point we have a sort of proof of concept of the design. We can now</p>
<ul>
<li>Programmaticlly load clips into a timeline data structure.</li>
<li>This structure can draw itself onto a Cairo context which we can use to render it inside a GTK application.</li>
<li>This structure can also generate an MLT producer which we can use to preview the composition using the SDL consumer and have the output shown in a window in our GTK application via <code>SDL_WINDOWID</code>.</li>
</ul>
<p>One thing that I worry about with this design is performance. Every time we modify the timeline, we have to generate a new sections object and from that generate a new MLT producer. That might take time. My hope and guess is that we can do smart things to get good enough performance. But it is worth looking into to quite soon to ensure that this design will hold even for larger projects.</p>
<p>There for sure are many, many more details to flesh out before we have a functioning video editor. But I’m quite pleased that we have gotten this far in this quite short amount of time.</p>
<p>You can find the source code on <a href="https://github.com/rickardlindberg/rlvideo">GitHub</a>.</p>
]]></description>
    <pubDate>Fri, 28 Jul 2023 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/writing-my-own-video-editor/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>How to get fast feedback on graphical code?</title>
    <link>http://rickardlindberg.me/writing/fast-feedback-on-graphical-code/</link>
    <description><![CDATA[<h1>How to get fast feedback on graphical code?</h1>

<p><em>Published on 28 July 2023.</em></p>

<p>I am working on <a href="/writing/writing-my-own-video-editor/index.html">my own video editor</a>. It currently looks like this:</p>
<p>
<center>
<img src="rlvideo.png" title="fig:" alt="Current state of video editor." />
</center>
</p>
<p>The bottom pane shows the timeline with all the clips. It is a <code>Gtk.DrawingArea</code> where all the drawing is done using Cairo.</p>
<p>When I work on the drawing code, I want fast feedback on it. Does it look good? Does it draw as intended?</p>
<p>Usually I use TDD for this kind of feedback, but graphical output it hard to test.</p>
<p>In the beginning, I used to run the application after every change. This was quite fast because the application is still small and I can start it up with a sample timeline quite quickly. However, it still takes a few seconds and a couple of keystrokes.</p>
<p>Then I came up with a much better workflow.</p>
<p>I added a (doc)test to my test suite that does something like this (some details removed):</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; surface = cairo.ImageSurface(cairo.FORMAT_ARGB32, width, height)</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; context = cairo.Context(surface)</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; project = Project.new()</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; with project.new_transaction() as transaction:</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a><span class="co">...     _ = transaction.add_text_clip(&quot;hello&quot;, length=30)</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a><span class="co">...     x = transaction.add_text_clip(&quot;world&quot;, length=35)</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true"></a><span class="co">...     _ = transaction.add_text_clip(&quot;end&quot;, length=20)</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true"></a><span class="co">...     _ = transaction.add_text_clip(&quot;end&quot;, length=20)</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true"></a><span class="co">...     transaction.modify(x, lambda cut: cut.move(-10))</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; timeline = Timeline(project)</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; timeline.draw_cairo(</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true"></a><span class="co">...     context=context,</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true"></a><span class="co">...     playhead_position=40,</span></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true"></a><span class="co">...     width=width,</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true"></a><span class="co">...     height=height</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true"></a><span class="co">... )</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; surface.write_to_png(&quot;timeline.png&quot;)</span></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>The <code>Timeline</code> class is what does the drawing of the timeline. Fortunately, it is separated from the GTK component onto which it is drawn. This allows us to create our own Cairo surface, let the timeline draw itself on that, and in the end, write that surface to a file.</p>
<p>Every time we run the test suite (which I like to do automatically on every save) we get a new <code>timeline.png</code> file where the example clips that we populated in the test are drawn. If we open this file in the GNOME image viewer (<code>eog timeline.png</code>) it will automatically reload the image when it changes.</p>
<p>In this workflow, this is my typical setup:</p>
<p>
<center>
<img src="workflow1.png" title="fig:" alt="Workflow setup." />
</center>
</p>
<p>I have my editor to the right, the automatic test suite runner in the top left, and the timeline image in the bottom left.</p>
<p>In this example I draw two timelines with different zoom levels so that I can quickly see how that looks.</p>
<p>Then I can make a change to some color for example, and within a second or two, my test suite has automatically run and my desktop looks like this:</p>
<p>
<center>
<img src="workflow2.png" title="fig:" alt="Workflow after a change." />
</center>
</p>
<p>I can tweak numbers until I think it looks good and I never have to leave my editor.</p>
]]></description>
    <pubDate>Fri, 28 Jul 2023 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/fast-feedback-on-graphical-code/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>DevLog 001: J-cuts and L-cuts in my video editor?</title>
    <link>http://rickardlindberg.me/writing/devlog-001-jcut-lcut/</link>
    <description><![CDATA[<h1>DevLog 001: J-cuts and L-cuts in my video editor?</h1>

<p><em>Published on 28 July 2023.</em></p>

<h2 id="about-devlogs">About DevLogs</h2>
<p>DevLogs is an experiment to try to document development that I do on various projects. I will try to write what is going on in my head as I do various development tasks.</p>
<h2 id="todays-problem">Today’s problem</h2>
<p>In my video editor, there is a problem with overlapping clips. How they overlap appears to be almost random.</p>
<p>In this edit, the <code>two.mp4</code> clip is rendered below:</p>
<p>
<center>
<img src="edit1.png" title="fig:" alt="Alternative text." />
</center>
</p>
<p>If we edit the <code>one.mp4</code> clip, then the two switch order.</p>
<p>
<center>
<img src="edit2.png" title="fig:" alt="Alternative text." />
</center>
</p>
<p>So the order depends on the modification times of clips.</p>
<p>That is not very good.</p>
<h2 id="plan">Plan</h2>
<p>My idea for how to solve this is that each clip can specify how it should be cut into the previous one.</p>
<p>I imagine a library of cuts such as:</p>
<ul>
<li>over</li>
<li>under</li>
<li>j-cut</li>
<li>l-cut</li>
<li>overlay (with priority)</li>
<li>background (with priority)</li>
</ul>
<p>To make progress on this, we can probably assume a default cut (maybe under) and make sure it works. Then we can extend the library of cuts.</p>
<h2 id="writing-a-test">Writing a test</h2>
<p>The relevant code for this is mostly here:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="kw">def</span> extract_mix_section(<span class="va">self</span>, region):</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a>    <span class="co">&quot;&quot;&quot;</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a><span class="co">    &gt;&gt;&gt; cuts = Cuts.from_list([</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a><span class="co">    ...     Cut.test_instance(name=&quot;A&quot;, start=0, end=8, position=1),</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a><span class="co">    ...     Cut.test_instance(name=&quot;B&quot;, start=0, end=8, position=5),</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a><span class="co">    ... ])</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a><span class="co">    &gt;&gt;&gt; cuts.to_ascii_canvas()</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true"></a><span class="co">    | &lt;-A0---&gt;    |</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true"></a><span class="co">    |     &lt;-B0---&gt;|</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true"></a><span class="co">    &gt;&gt;&gt; cuts.extract_mix_section(Region(start=0, end=15)).to_ascii_canvas()</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true"></a><span class="co">    %&lt;-A0---&gt;%%%%%%</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true"></a><span class="co">    %%%%%&lt;-B0---&gt;%%</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true"></a><span class="co">    &quot;&quot;&quot;</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true"></a>    <span class="co"># </span><span class="al">TODO</span><span class="co">: sort based on cut (j-cut, l-cut, overlay, background).</span></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true"></a>    playlists <span class="op">=</span> []</span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true"></a>    <span class="cf">for</span> cut <span class="kw">in</span> <span class="va">self</span>.create_cut(region).cut_map.values():</span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true"></a>        playlists.append(Cuts.empty().add(cut).extract_playlist_section(region))</span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true"></a>    <span class="cf">return</span> MixSection(length<span class="op">=</span>region.length, playlists<span class="op">=</span>playlists)</span></code></pre></div>
<p>Let’s write a test that shows the current behavior first:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; region = Region(start=0, end=15)</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; a_cut = Cut.test_instance(name=&quot;A&quot;, start=0, end=8, position=1)</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; b_cut = Cut.test_instance(name=&quot;B&quot;, start=0, end=8, position=5)</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; Cuts.from_list([</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a><span class="co">...     a_cut,</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true"></a><span class="co">...     b_cut,</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true"></a><span class="co">... ]).extract_mix_section(region).to_ascii_canvas()</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true"></a><span class="co">%&lt;-A0---&gt;%%%%%%</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true"></a><span class="co">%%%%%&lt;-B0---&gt;%%</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true"></a></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; Cuts.from_list([</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true"></a><span class="co">...     b_cut,</span></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true"></a><span class="co">...     a_cut,</span></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true"></a><span class="co">... ]).extract_mix_section(region).to_ascii_canvas()</span></span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true"></a><span class="co">%%%%%&lt;-B0---&gt;%%</span></span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true"></a><span class="co">%&lt;-A0---&gt;%%%%%%</span></span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>So depending on the order in which cuts are added, they mix differently. This is exactly the behavior that we want to change. We want them to mix the same no matter what order they are added in.</p>
<p>Let’s commit this as a baseline:</p>
<pre class="shell"><code>$ ./make.py commit -m &#39;Pinpoint current behavior of mixing cuts.&#39;</code></pre>
<p>The <code>./make.py commit</code> script is a wrapper around <code>git commit</code> that also runs the tests and makes sure there are no untracked files. A real handy tool to make sure we don’t commit “bad” code.</p>
<h2 id="cut-the-same">Cut the same</h2>
<p>I modify the test above to assert that the same mix is created even when the cuts are in the reverse order.</p>
<p>I make it pass by sorting the clips by start time, making “later” clips appear below which would be the equivalent of having the cut on the second b clip set to “under”:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="kw">def</span> sort_cuts(<span class="va">self</span>, cuts):</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a>    <span class="cf">return</span> <span class="bu">sorted</span>(cuts, key<span class="op">=</span><span class="kw">lambda</span> cut: cut.get_source_cut().start)</span></code></pre></div>
<p>That works as intended in the application as well. Let’s commit:</p>
<pre class="shell"><code>$ ./make.py commit -m &#39;Always mix cuts below previous cut.&#39;</code></pre>
<h2 id="clips-with-the-same-start">Clips with the same start</h2>
<p>If two cuts have the same start, the sorting will have no effect and we still have the same problem.</p>
<p>First of all, I don’t think this scenario will be that common in a real situation.</p>
<p>I’m thinking we can handle it with a warning. If such situation appears, the user has to resolve the issue by hinting how the mix should be done.</p>
<p>We can also take the end position into account. Then only cuts with the same start and end has the problem. In which case the user must explicitly tell which should be on top somehow.</p>
<h2 id="summary">Summary</h2>
<p>We made progress towards mixing cuts in a better way. Next step in this area I think is to allow the type of cut to be specified per clip and take that into account when sorting cuts. I think it should be quite easy to write tests for this and we should be able to move steady and carefully using TDD.</p>
]]></description>
    <pubDate>Fri, 28 Jul 2023 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/devlog-001-jcut-lcut/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>

    </channel>
</rss>
