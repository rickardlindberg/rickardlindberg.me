<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Rickard's personal homepage: latest posts tagged rlvideo</title>
    <link href="http://rickardlindberg.me/tags/rlvideo/atom.xml" rel="self" />
    <link href="http://rickardlindberg.me" />
    <id>http://rickardlindberg.me/tags/rlvideo/atom.xml</id>
    <author>
        <name>Rickard Lindberg</name>
        <email>rickard@rickardlindberg.me</email>
    </author>
    <updated>2023-08-01T00:00:00Z</updated>
    <entry>
    <title>DevLog 007: Which feature to work on next?</title>
    <link href="http://rickardlindberg.me/writing/devlog-007-which-feature-to-work-on-next/" />
    <id>http://rickardlindberg.me/writing/devlog-007-which-feature-to-work-on-next/</id>
    <published>2023-08-01T00:00:00Z</published>
    <updated>2023-08-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>DevLog 007: Which feature to work on next?</h1>

<p><em>Published on  1 August 2023.</em></p>

<p>In this session I will select what to work on next in my <a href="/projects/rlvideo/index.html">video editor</a> by trying to use it to edit some footage and see where I get stuck.</p>
<p>I’ve previously managed to create a project which has some footage imported and proxy clips generated. I can open that project like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ rlvideo my-project.rlvideo
</pre>
</div>
</div>
</div>
<p>When I do that, two things happen that annoy me.</p>
<p>First of all, there are lots of exceptions printed to the console:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>Traceback (most recent call last):
  File &quot;/home/rick/rlvideo/rlvideolib/gui/gtk.py&quot;, line 80, in timeline_draw
    self.timeline.draw_cairo(
  File &quot;/home/rick/rlvideo/rlvideolib/gui/generic.py&quot;, line 200, in draw_cairo
    self.draw_scrollbar(context, area, playhead_position)
  File &quot;/home/rick/rlvideo/rlvideolib/gui/generic.py&quot;, line 287, in draw_scrollbar
    self.rectangle_map.add(Rectangle(
  File &quot;/home/rick/rlvideo/rlvideolib/graphics/rectangle.py&quot;, line 19, in __init__
    raise ValueError(&quot;Width must be &gt; 0.&quot;)
ValueError: Width must be &gt; 0.
</pre>
</div>
</div>
</div>
<p>And second of all, it seems like it’s loading proxy clips again even though they are already generated:</p>
<p>
<center>
<img src="loading.png" title="fig:" alt="Loading." />
</center>
</p>
<p>Which one should I work on? Should I work on something else? What is most important?</p>
<h2 id="analysis">Analysis</h2>
<p>Let’s do an analysis of why the two problems occur.</p>
<p>The exception when drawing the scrollbar happens because there are too many clips in a too small window, so the width of the scrollbar handle gets smaller than 1 pixel. It can be worked around by zooming out a bit so that a larger portion of the timeline is visible.</p>
<p>This is obviously not good, but not the end of the world.</p>
<p>The fix probably involves setting a minimum width on the handle.</p>
<p>What about proxies?</p>
<p>Actually, proxies are not created again, but in order to find the correct proxy for a clip, the clip’s md5 sum has to be calculated. This is much faster than generating the proxy, but still takes some time, delaying me when I want to edit clips.</p>
<p>The fix probably involves storing the path of the proxy clip in the project file.</p>
<p>It is also not the end of the world. I can open the editor, go make some coffee, and maybe when I’m back, it’s done.</p>
<h2 id="strategy">Strategy</h2>
<p>So which should I work on?</p>
<p>If you work in an agile fashion, doing evolutionary design, what should happen is that it should get easier and easier to work with the code base and add new features. I learned that from <a href="https://www.jamesshore.com/v2/books/aoad2/design">James Shore</a>.</p>
<p>Say I start working on the scrollbar exception now. When I’m done with that, it should be easier to fix the proxy loading issue than it was before, assuming that the areas that need change overlap.</p>
<p>With that kind of thinking, it doesn’t matter that much what we choose to work on as long as we think it is somewhat important. Just pick one and the next thing will be easier.</p>
<p>It almost sounds too good to be true, but I believe in it. For this to work though, we need to practice evolutionary design. We’ll do that today.</p>
<p>Let’s pick the scrollbar issue.</p>
<h2 id="review">Review</h2>
<p>The error happens in <code>draw_scrollbar</code> which looks like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">draw_scrollbar</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">context</span><span class="p">,</span> <span class="n">area</span><span class="p">,</span> <span class="n">playhead_position</span><span class="p">):</span>
    <span class="n">x_start</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">scrollbar</span><span class="o">.</span><span class="n">region_shown</span><span class="o">.</span><span class="n">start</span> <span class="o">/</span> <span class="bp">self</span><span class="o">.</span><span class="n">scrollbar</span><span class="o">.</span><span class="n">whole_region</span><span class="o">.</span><span class="n">length</span> <span class="o">*</span> <span class="n">area</span><span class="o">.</span><span class="n">width</span>
    <span class="n">x_end</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">scrollbar</span><span class="o">.</span><span class="n">region_shown</span><span class="o">.</span><span class="n">end</span> <span class="o">/</span> <span class="bp">self</span><span class="o">.</span><span class="n">scrollbar</span><span class="o">.</span><span class="n">whole_region</span><span class="o">.</span><span class="n">length</span> <span class="o">*</span> <span class="n">area</span><span class="o">.</span><span class="n">width</span>
    <span class="n">playhead_x</span> <span class="o">=</span> <span class="n">playhead_position</span> <span class="o">/</span> <span class="bp">self</span><span class="o">.</span><span class="n">scrollbar</span><span class="o">.</span><span class="n">whole_region</span><span class="o">.</span><span class="n">length</span> <span class="o">*</span> <span class="n">area</span><span class="o">.</span><span class="n">width</span>

    <span class="c1"># TODO: add callback mechanism in rectangle map</span>
    <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">h</span> <span class="o">=</span> <span class="p">(</span>
        <span class="n">area</span><span class="o">.</span><span class="n">x</span><span class="o">+</span><span class="n">x_start</span><span class="p">,</span>
        <span class="n">area</span><span class="o">.</span><span class="n">y</span><span class="p">,</span>
        <span class="n">x_end</span><span class="o">-</span><span class="n">x_start</span><span class="p">,</span>
        <span class="n">area</span><span class="o">.</span><span class="n">height</span>
    <span class="p">)</span>
    <span class="n">rect_x</span><span class="p">,</span> <span class="n">rect_y</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">user_to_device</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
    <span class="n">rect_w</span><span class="p">,</span> <span class="n">rect_h</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">user_to_device_distance</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">)</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">rectangle_map</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Rectangle</span><span class="p">(</span>
        <span class="n">x</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_x</span><span class="p">),</span>
        <span class="n">y</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_y</span><span class="p">),</span>
        <span class="n">width</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_w</span><span class="p">),</span>
        <span class="n">height</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_h</span><span class="p">)</span>
    <span class="p">),</span> <span class="s2">&quot;position&quot;</span><span class="p">)</span>

    <span class="n">context</span><span class="o">.</span><span class="n">rectangle</span><span class="p">(</span><span class="n">area</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">area</span><span class="o">.</span><span class="n">y</span><span class="p">,</span> <span class="n">area</span><span class="o">.</span><span class="n">width</span><span class="p">,</span> <span class="n">area</span><span class="o">.</span><span class="n">height</span><span class="p">)</span>
    <span class="n">context</span><span class="o">.</span><span class="n">set_source_rgba</span><span class="p">(</span><span class="mf">0.4</span><span class="p">,</span> <span class="mf">0.9</span><span class="p">,</span> <span class="mf">0.4</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">)</span>
    <span class="n">context</span><span class="o">.</span><span class="n">fill</span><span class="p">()</span>

    <span class="n">scroll_box</span> <span class="o">=</span> <span class="n">Rectangle</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">)</span>
    <span class="n">context</span><span class="o">.</span><span class="n">rectangle</span><span class="p">(</span><span class="n">scroll_box</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">scroll_box</span><span class="o">.</span><span class="n">y</span><span class="p">,</span> <span class="n">scroll_box</span><span class="o">.</span><span class="n">width</span><span class="p">,</span> <span class="n">scroll_box</span><span class="o">.</span><span class="n">height</span><span class="p">)</span>
    <span class="n">context</span><span class="o">.</span><span class="n">set_source_rgba</span><span class="p">(</span><span class="mf">0.4</span><span class="p">,</span> <span class="mf">0.9</span><span class="p">,</span> <span class="mf">0.4</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">)</span>
    <span class="n">context</span><span class="o">.</span><span class="n">fill</span><span class="p">()</span>

    <span class="c1"># Playhead</span>
    <span class="n">context</span><span class="o">.</span><span class="n">set_source_rgb</span><span class="p">(</span><span class="mf">0.1</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">)</span>
    <span class="n">context</span><span class="o">.</span><span class="n">move_to</span><span class="p">(</span><span class="n">playhead_x</span><span class="p">,</span> <span class="n">area</span><span class="o">.</span><span class="n">top</span><span class="p">)</span>
    <span class="n">context</span><span class="o">.</span><span class="n">line_to</span><span class="p">(</span><span class="n">playhead_x</span><span class="p">,</span> <span class="n">area</span><span class="o">.</span><span class="n">bottom</span><span class="p">)</span>
    <span class="n">context</span><span class="o">.</span><span class="n">stroke</span><span class="p">()</span>

    <span class="n">context</span><span class="o">.</span><span class="n">set_source_rgb</span><span class="p">(</span><span class="mf">0.1</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">)</span>
    <span class="n">scroll_box</span><span class="o">.</span><span class="n">draw_pixel_perfect_border</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>When I look at this, it’s difficult for me to see what is going on. It is just too long and does too much. It doesn’t clearly represent what I had in mind when I wrote it.</p>
<p>If we are going to do evolutionary design, we have to pay more attention to design. All the time.</p>
<p>It’s fine that I didn’t pay too much attention last time I modified this method, but now that we are here again, let’s give it some extra love so that it is easier to work with next time.</p>
<h2 id="further-review">Further review</h2>
<p>The error happens when creating the rectangle in the following piece of code:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="c1"># TODO: add callback mechanism in rectangle map</span>
<span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">h</span> <span class="o">=</span> <span class="p">(</span>
    <span class="n">area</span><span class="o">.</span><span class="n">x</span><span class="o">+</span><span class="n">x_start</span><span class="p">,</span>
    <span class="n">area</span><span class="o">.</span><span class="n">y</span><span class="p">,</span>
    <span class="n">x_end</span><span class="o">-</span><span class="n">x_start</span><span class="p">,</span>
    <span class="n">area</span><span class="o">.</span><span class="n">height</span>
<span class="p">)</span>
<span class="n">rect_x</span><span class="p">,</span> <span class="n">rect_y</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">user_to_device</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
<span class="n">rect_w</span><span class="p">,</span> <span class="n">rect_h</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">user_to_device_distance</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">)</span>
<span class="bp">self</span><span class="o">.</span><span class="n">rectangle_map</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Rectangle</span><span class="p">(</span>
    <span class="n">x</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_x</span><span class="p">),</span>
    <span class="n">y</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_y</span><span class="p">),</span>
    <span class="n">width</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_w</span><span class="p">),</span>
    <span class="n">height</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_h</span><span class="p">)</span>
<span class="p">),</span> <span class="s2">&quot;position&quot;</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>Look, there is even a TODO comment there. Now that we are touching this piece of code again, perhaps it’s time to deal with it.</p>
<h2 id="the-rectangle-map">The rectangle map</h2>
<p>The rectangle map is used to store areas of the screen that the user can interact with. You can put objects at a given rectangle and retrieve them by position. Here is an example:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">&gt;&gt;&gt; r = RectangleMap()</span>
<span class="sd">&gt;&gt;&gt; r.add(Rectangle(x=0, y=0, width=10, height=10), &quot;item&quot;)</span>
<span class="sd">&gt;&gt;&gt; r.get(5, 5)</span>
<span class="sd">&#39;item&#39;</span>
<span class="sd">&gt;&gt;&gt; r.get(100, 100) is None</span>
<span class="sd">True</span>
<span class="sd">&quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<p>In the timeline area, each cut puts itself in a rectangle, allowing a context menu to be shown when it is right clicked like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">right_mouse_down</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">gui</span><span class="p">):</span>
    <span class="n">cut</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">rectangle_map</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
    <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">cut</span><span class="p">,</span> <span class="n">Cut</span><span class="p">):</span>
        <span class="c1"># show context menu</span>
</pre>
</div>
</div>
</div>
<p>The TODO comment that I wrote suggests that we should instead store objects that can handle <code>right_mouse_down</code> events for example so that we don’t need to check instances at the outermost event handler.</p>
<p>Let’s see if we can do it.</p>
<h2 id="action-test">Action test</h2>
<p>I sketch this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">Action</span><span class="p">:</span>

    <span class="k">def</span> <span class="nf">left_mouse_down</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
        <span class="k">pass</span>

    <span class="k">def</span> <span class="nf">right_mouse_down</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">gui</span><span class="p">):</span>
        <span class="k">pass</span>

    <span class="k">def</span> <span class="nf">mouse_move</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
        <span class="k">pass</span>

    <span class="k">def</span> <span class="nf">mouse_up</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">pass</span>

<span class="k">class</span> <span class="nc">ScrollbarDragAction</span><span class="p">(</span><span class="n">Action</span><span class="p">):</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">timeline</span><span class="p">,</span> <span class="n">scrollbar</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">timeline</span> <span class="o">=</span> <span class="n">timeline</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">scrollbar</span> <span class="o">=</span> <span class="n">scrollbar</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">mouse_up</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">left_mouse_down</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">x</span>

    <span class="k">def</span> <span class="nf">mouse_up</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="kc">None</span>

    <span class="k">def</span> <span class="nf">mouse_move</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">x</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">timeline</span><span class="o">.</span><span class="n">set_scrollbar</span><span class="p">(</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">scrollbar</span><span class="o">.</span><span class="n">move_scrollbar</span><span class="p">(</span>
                    <span class="n">x</span> <span class="o">-</span> <span class="bp">self</span><span class="o">.</span><span class="n">x</span>
                <span class="p">)</span>
            <span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>Let’s see if we can use it.</p>
<p>I modify <code>right_mouse_down</code> and all the other event handlers to this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">right_mouse_down</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">gui</span><span class="p">):</span>
    <span class="n">item</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">rectangle_map</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
    <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">Action</span><span class="p">):</span>
        <span class="n">item</span><span class="o">.</span><span class="n">right_mouse_down</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">gui</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">down_item</span> <span class="o">=</span> <span class="n">item</span>
        <span class="k">return</span>
    <span class="o">...</span>
</pre>
</div>
</div>
</div>
<p>This is special handling for the case where the entry in the rectangle map is an <code>Action</code>. Eventually, we want there to be only actions in there, and then the instance check can be removed.</p>
<p>Next I change what we put into the rectangle map for the scrollbar to this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="bp">self</span><span class="o">.</span><span class="n">rectangle_map</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Rectangle</span><span class="p">(</span>
    <span class="n">x</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_x</span><span class="p">),</span>
    <span class="n">y</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_y</span><span class="p">),</span>
    <span class="n">width</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_w</span><span class="p">),</span>
    <span class="n">height</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_h</span><span class="p">)</span>
<span class="p">),</span> <span class="n">ScrollbarDragAction</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">scrollbar</span><span class="p">))</span>
</pre>
</div>
</div>
</div>
<p>Boom! Test failure:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>Failed example:
    timeline.rectangle_map # doctest: +ELLIPSIS
Differences (ndiff with -expected +actual):
    ...
      Rectangle(x=0, y=0, width=300, height=20):
        scrub
      Rectangle(x=0, y=77, width=300, height=23):
    -   position
    +   &lt;rlvideolib.gui.generic.ScrollbarDragAction object at 0x7fd1f8891d00&gt;
</pre>
</div>
</div>
</div>
<p>There is now another object in the rectangle map. Let’s modify the test to assert that instead.</p>
<p>The question now is, will it work in the application?</p>
<p>This behavior I think lacks tests, so let’s try.</p>
<p>Nothing happens.</p>
<p>I review the code and find that I had forgotten the <code>mouse_move</code> event:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">mouse_move</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
    <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">down_item</span><span class="p">:</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">down_item</span><span class="o">.</span><span class="n">mouse_move</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
        <span class="k">return</span>
    <span class="o">...</span>
</pre>
</div>
</div>
</div>
<p>And that actually works!</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m &#39;Add a ScrollbarDragAction instead of position string.&#39;
...................................................
----------------------------------------------------------------------
Ran 51 tests in 3.405s

OK
[main 87c9b07] Add a ScrollbarDragAction instead of position string.
 1 file changed, 59 insertions(+), 2 deletions(-)
</pre>
</div>
</div>
</div>
<p>I make the same change for the remaining actions.</p>
<p>Here is the one for scrubbing the timeline:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">ScrubAction</span><span class="p">(</span><span class="n">Action</span><span class="p">):</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">player</span><span class="p">,</span> <span class="n">scrollbar</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">player</span> <span class="o">=</span> <span class="n">player</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">scrollbar</span> <span class="o">=</span> <span class="n">scrollbar</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">mouse_up</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">left_mouse_down</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">x</span>

    <span class="k">def</span> <span class="nf">mouse_up</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="kc">None</span>

    <span class="k">def</span> <span class="nf">mouse_move</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">x</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">player</span><span class="o">.</span><span class="n">scrub</span><span class="p">(</span>
                <span class="nb">int</span><span class="p">(</span><span class="nb">round</span><span class="p">(</span>
                    <span class="bp">self</span><span class="o">.</span><span class="n">scrollbar</span><span class="o">.</span><span class="n">content_start</span>
                    <span class="o">+</span>
                    <span class="n">x</span><span class="o">/</span><span class="bp">self</span><span class="o">.</span><span class="n">scrollbar</span><span class="o">.</span><span class="n">one_length_in_pixels</span>
                <span class="p">))</span>
            <span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>And here is the one for moving a cut and opening the context menu for a cut:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">CutAction</span><span class="p">(</span><span class="n">Action</span><span class="p">):</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">project</span><span class="p">,</span> <span class="n">cut</span><span class="p">,</span> <span class="n">scrollbar</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">project</span> <span class="o">=</span> <span class="n">project</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">cut</span> <span class="o">=</span> <span class="n">cut</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">scrollbar</span> <span class="o">=</span> <span class="n">scrollbar</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">mouse_up</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">left_mouse_down</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">transaction</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">project</span><span class="o">.</span><span class="n">new_transaction</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">x</span>

    <span class="k">def</span> <span class="nf">right_mouse_down</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">gui</span><span class="p">):</span>
        <span class="k">def</span> <span class="nf">mix_strategy_updater</span><span class="p">(</span><span class="n">value</span><span class="p">):</span>
            <span class="k">def</span> <span class="nf">update</span><span class="p">():</span>
                <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">project</span><span class="o">.</span><span class="n">new_transaction</span><span class="p">()</span> <span class="k">as</span> <span class="n">transaction</span><span class="p">:</span>
                    <span class="n">transaction</span><span class="o">.</span><span class="n">modify</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">cut</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="k">lambda</span> <span class="n">cut</span><span class="p">:</span>
                        <span class="n">cut</span><span class="o">.</span><span class="n">with_mix_strategy</span><span class="p">(</span><span class="n">value</span><span class="p">))</span>
            <span class="k">return</span> <span class="n">update</span>
        <span class="n">gui</span><span class="o">.</span><span class="n">show_context_menu</span><span class="p">([</span>
            <span class="n">MenuItem</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="s2">&quot;over&quot;</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="n">mix_strategy_updater</span><span class="p">(</span><span class="s2">&quot;over&quot;</span><span class="p">)),</span>
            <span class="n">MenuItem</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="s2">&quot;under&quot;</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="n">mix_strategy_updater</span><span class="p">(</span><span class="s2">&quot;under&quot;</span><span class="p">)),</span>
        <span class="p">])</span>

    <span class="k">def</span> <span class="nf">mouse_up</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">transaction</span> <span class="o">=</span> <span class="kc">None</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="kc">None</span>

    <span class="k">def</span> <span class="nf">mouse_move</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">transaction</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">transaction</span><span class="o">.</span><span class="n">rollback</span><span class="p">()</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">transaction</span><span class="o">.</span><span class="n">modify</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">cut</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="k">lambda</span> <span class="n">cut</span><span class="p">:</span>
                <span class="n">cut</span><span class="o">.</span><span class="n">move</span><span class="p">(</span><span class="nb">int</span><span class="p">((</span><span class="n">x</span><span class="o">-</span><span class="bp">self</span><span class="o">.</span><span class="n">x</span><span class="p">)</span><span class="o">/</span><span class="bp">self</span><span class="o">.</span><span class="n">scrollbar</span><span class="o">.</span><span class="n">one_length_in_pixels</span><span class="p">)))</span>
</pre>
</div>
</div>
</div>
<h2 id="clean-up">Clean up</h2>
<p>At this point, we only put actions into the rectangle map, and we can simplify the event handlers to this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">left_mouse_down</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">down_action</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">rectangle_map</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">Action</span><span class="p">())</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">down_action</span><span class="o">.</span><span class="n">left_mouse_down</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">right_mouse_down</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">gui</span><span class="p">):</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">down_action</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">rectangle_map</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">Action</span><span class="p">())</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">down_action</span><span class="o">.</span><span class="n">right_mouse_down</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">gui</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">mouse_move</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
    <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">down_action</span><span class="p">:</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">down_action</span><span class="o">.</span><span class="n">mouse_move</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">rectangle_map</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">Action</span><span class="p">())</span><span class="o">.</span><span class="n">mouse_move</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">mouse_up</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">down_action</span><span class="p">:</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">down_action</span><span class="o">.</span><span class="n">mouse_up</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">down_action</span> <span class="o">=</span> <span class="kc">None</span>
</pre>
</div>
</div>
</div>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m &#39;Timeline assumes there are Actions in rectangle map.&#39;
...................................................
----------------------------------------------------------------------
Ran 51 tests in 3.381s

OK
[main 3c8e9b9] Timeline assumes there are Actions in rectangle map.
 Date: Mon Jul 31 14:32:06 2023 +0200
 2 files changed, 14 insertions(+), 64 deletions(-)
</pre>
</div>
</div>
</div>
<h2 id="transaction-problem">Transaction problem</h2>
<p>Everything seems to work fine. However, I notice that the committing of the transaction has disappeared.</p>
<p>This is not tested anywhere, missed my manual tests, and is pretty severe.</p>
<p>Let’s see if we can make the code a little more reliable. I write this test:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">&gt;&gt;&gt; project = Project.new()</span>
<span class="sd">&gt;&gt;&gt; transaction = project.new_transaction()</span>
<span class="sd">&gt;&gt;&gt; transaction = project.new_transaction()</span>
<span class="sd">Traceback (most recent call last):</span>
<span class="sd">  ...</span>
<span class="sd">ValueError: transaction already in progress</span>
<span class="sd">&quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<p>I make it pass, and I am now more confident that this error will show up when testing in the application.</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m &#39;Ensure there can be only one transaction active at a time.&#39;
....................................................
----------------------------------------------------------------------
Ran 52 tests in 3.402s

OK
[main 2b36bdb] Ensure there can be only one transaction active at a time.
 2 files changed, 34 insertions(+), 7 deletions(-)
</pre>
</div>
</div>
</div>
<p>And sure enough, it does. The second time I try to drag a cut, I get the “transaction already in progress” error.</p>
<p>Nice!</p>
<p>The fix:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>     def mouse_up(self):
<span class="gi">+        if self.transaction:</span>
<span class="gi">+            self.transaction.commit()</span>
         self.transaction = None
         self.x = None
</pre>
</div>
</div>
</div>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m &#39;Ensure CutAction transaction is commited at mouse_up.&#39;
....................................................
----------------------------------------------------------------------
Ran 52 tests in 3.406s

OK
[main 5fd460d] Ensure CutAction transaction is commited at mouse_up.
 1 file changed, 4 insertions(+), 1 deletion(-)
</pre>
</div>
</div>
</div>
<p>Normally you use a transaction like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">with</span> <span class="n">project</span><span class="o">.</span><span class="n">new_transaction</span><span class="p">()</span> <span class="k">as</span> <span class="n">transaction</span><span class="p">:</span>
    <span class="n">_</span> <span class="o">=</span> <span class="n">transaction</span><span class="o">.</span><span class="n">add_text_clip</span><span class="p">(</span><span class="s2">&quot;hello&quot;</span><span class="p">,</span> <span class="n">length</span><span class="o">=</span><span class="mi">30</span><span class="p">)</span>
    <span class="n">x</span> <span class="o">=</span> <span class="n">transaction</span><span class="o">.</span><span class="n">add_text_clip</span><span class="p">(</span><span class="s2">&quot;world&quot;</span><span class="p">,</span> <span class="n">length</span><span class="o">=</span><span class="mi">35</span><span class="p">)</span>
    <span class="n">_</span> <span class="o">=</span> <span class="n">transaction</span><span class="o">.</span><span class="n">add_text_clip</span><span class="p">(</span><span class="s2">&quot;end&quot;</span><span class="p">,</span> <span class="n">length</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
    <span class="n">_</span> <span class="o">=</span> <span class="n">transaction</span><span class="o">.</span><span class="n">add_text_clip</span><span class="p">(</span><span class="s2">&quot;end&quot;</span><span class="p">,</span> <span class="n">length</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
    <span class="n">transaction</span><span class="o">.</span><span class="n">modify</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="k">lambda</span> <span class="n">cut</span><span class="p">:</span> <span class="n">cut</span><span class="o">.</span><span class="n">move</span><span class="p">(</span><span class="o">-</span><span class="mi">10</span><span class="p">))</span>
</pre>
</div>
</div>
</div>
<p>In that case a commit/rollback is guaranteed.</p>
<p>However, when dealing with mouse events, we can not use the context manager and instead have to deal with mouse events.</p>
<p>The new check that prevents multiple transactions ensures that everything stops working if we forget to close a transaction.</p>
<p>But I would like to come up with a nicer pattern for ensuring that transactions close.</p>
<p>I’ll add a TODO for it and maybe we can come up with a nicer solution later.</p>
<h2 id="further-cleanup">Further cleanup</h2>
<p>In order to satisfy Python’s import mechanism, I put <code>Action</code> and <code>MenuItem</code> in the <code>rlvideolib.domain.cut</code> module.</p>
<p>They obviously don’t belong there.</p>
<p>Here is what the gui package looks like now:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>rlvideolib/gui/
├── generic.py
├── gtk.py
├── __init__.py
└── testing.py
</pre>
</div>
</div>
</div>
<p>Previously <code>Action</code> and <code>MenuItem</code> were defined in <code>generic</code>. That makes sense. But now we have a dependency on them from <code>rlvideolib.domain.cut</code>. Should a domain object depend on GUI? Maybe that is ok.</p>
<p>I think what I’ll do is create another module inside the gui package called <code>framework</code>. It will contain generic GUI elements that do not depend on GTK or our application.</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m &#39;Move generic framework GUI code to new rlvideolib.gui.framework.&#39;
....................................................
----------------------------------------------------------------------
Ran 52 tests in 3.393s

OK
[main b1a8f5d] Move generic framework GUI code to new rlvideolib.gui.framework.
 5 files changed, 23 insertions(+), 19 deletions(-)
 create mode 100644 rlvideolib/gui/framework.py
</pre>
</div>
</div>
</div>
<h2 id="progress">Progress?</h2>
<p>Back to this code where we started:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="c1"># TODO: add callback mechanism in rectangle map</span>
<span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">h</span> <span class="o">=</span> <span class="p">(</span>
    <span class="n">area</span><span class="o">.</span><span class="n">x</span><span class="o">+</span><span class="n">x_start</span><span class="p">,</span>
    <span class="n">area</span><span class="o">.</span><span class="n">y</span><span class="p">,</span>
    <span class="n">x_end</span><span class="o">-</span><span class="n">x_start</span><span class="p">,</span>
    <span class="n">area</span><span class="o">.</span><span class="n">height</span>
<span class="p">)</span>
<span class="n">rect_x</span><span class="p">,</span> <span class="n">rect_y</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">user_to_device</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
<span class="n">rect_w</span><span class="p">,</span> <span class="n">rect_h</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">user_to_device_distance</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">)</span>
<span class="bp">self</span><span class="o">.</span><span class="n">rectangle_map</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Rectangle</span><span class="p">(</span>
    <span class="n">x</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_x</span><span class="p">),</span>
    <span class="n">y</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_y</span><span class="p">),</span>
    <span class="n">width</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_w</span><span class="p">),</span>
    <span class="n">height</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_h</span><span class="p">)</span>
<span class="p">),</span> <span class="n">ScrollbarDragAction</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">scrollbar</span><span class="p">))</span>
</pre>
</div>
</div>
</div>
<p>Ah, the TODO is actually done now.</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m &#39;Remove completed TODO about callback mechanism for rectangle map.&#39;
....................................................
----------------------------------------------------------------------
Ran 52 tests in 3.392s

OK
[main b757e3a] Remove completed TODO about callback mechanism for rectangle map.
 1 file changed, 1 deletion(-)
</pre>
</div>
</div>
</div>
<p>We still haven’t made any progress on the exception problem though. But we have fixed design issues in related areas.</p>
<p>Let’s focus again on the exception.</p>
<h2 id="a-common-pattern">A common pattern</h2>
<p>I think the following pattern exists in all places where we add actions to the rectangle map:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="n">rect_x</span><span class="p">,</span> <span class="n">rect_y</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">user_to_device</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
<span class="n">rect_w</span><span class="p">,</span> <span class="n">rect_h</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">user_to_device_distance</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">)</span>
<span class="bp">self</span><span class="o">.</span><span class="n">rectangle_map</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Rectangle</span><span class="p">(</span>
    <span class="n">x</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_x</span><span class="p">),</span>
    <span class="n">y</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_y</span><span class="p">),</span>
    <span class="n">width</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_w</span><span class="p">),</span>
    <span class="n">height</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_h</span><span class="p">)</span>
<span class="p">),</span> <span class="o">...</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>What about if we add a method to <code>RectangleMap</code> like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">add_from_context</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">,</span> <span class="n">context</span><span class="p">,</span> <span class="n">item</span><span class="p">):</span>
    <span class="n">rect_x</span><span class="p">,</span> <span class="n">rect_y</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">user_to_device</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
    <span class="n">rect_w</span><span class="p">,</span> <span class="n">rect_h</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">user_to_device_distance</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">)</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Rectangle</span><span class="p">(</span>
        <span class="n">x</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_x</span><span class="p">),</span>
        <span class="n">y</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_y</span><span class="p">),</span>
        <span class="n">width</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_w</span><span class="p">),</span>
        <span class="n">height</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_h</span><span class="p">)</span>
    <span class="p">),</span> <span class="n">item</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>We can use that method to add both the scroll action and the scrub action.</p>
<p>However, the cut action looks slightly different:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="n">rect_x</span><span class="p">,</span> <span class="n">rect_y</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">user_to_device</span><span class="p">(</span><span class="n">rectangle</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">rectangle</span><span class="o">.</span><span class="n">y</span><span class="p">)</span>
<span class="n">rect_w</span><span class="p">,</span> <span class="n">rect_h</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">user_to_device_distance</span><span class="p">(</span><span class="n">rectangle</span><span class="o">.</span><span class="n">width</span><span class="p">,</span> <span class="n">rectangle</span><span class="o">.</span><span class="n">height</span><span class="p">)</span>
<span class="k">if</span> <span class="nb">int</span><span class="p">(</span><span class="n">rect_w</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="nb">int</span><span class="p">(</span><span class="n">rect_h</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
    <span class="n">rectangle_map</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Rectangle</span><span class="p">(</span>
        <span class="n">x</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_x</span><span class="p">),</span>
        <span class="n">y</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_y</span><span class="p">),</span>
        <span class="n">width</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_w</span><span class="p">),</span>
        <span class="n">height</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_h</span><span class="p">)</span>
    <span class="p">),</span> <span class="n">CutAction</span><span class="p">(</span><span class="n">project</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_source_cut</span><span class="p">(),</span> <span class="n">scrollbar</span><span class="p">))</span>
</pre>
</div>
</div>
</div>
<p>It actually has the check that we also need for the scrollbar. That is, we only add the rectangle to the map if it has a width and height.</p>
<p>Let’s add those checks to <code>add_from_context</code>:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">add_from_context</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">,</span> <span class="n">context</span><span class="p">,</span> <span class="n">item</span><span class="p">):</span>
    <span class="n">rect_x</span><span class="p">,</span> <span class="n">rect_y</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">user_to_device</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
    <span class="n">rect_w</span><span class="p">,</span> <span class="n">rect_h</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">user_to_device_distance</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">)</span>
    <span class="k">if</span> <span class="nb">int</span><span class="p">(</span><span class="n">rect_w</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="nb">int</span><span class="p">(</span><span class="n">rect_h</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">add</span><span class="p">(</span>
            <span class="n">Rectangle</span><span class="p">(</span>
                <span class="n">x</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_x</span><span class="p">),</span>
                <span class="n">y</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_y</span><span class="p">),</span>
                <span class="n">width</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_w</span><span class="p">),</span>
                <span class="n">height</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_h</span><span class="p">)</span>
            <span class="p">),</span>
            <span class="n">item</span>
        <span class="p">)</span>
</pre>
</div>
</div>
</div>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m &#39;Extract RectangleMap.add_from_context which does width/height checks.&#39;
....................................................
----------------------------------------------------------------------
Ran 52 tests in 3.498s

OK
[main cd38e3e] Extract RectangleMap.add_from_context which does width/height checks.
 3 files changed, 17 insertions(+), 25 deletions(-)
</pre>
</div>
</div>
</div>
<p>And this actually resolves the exception problem when I open my project.</p>
<h1 id="summary">Summary</h1>
<p>I don’t have much experience doing evolutionary design. My feeling right now is that I need to spend much more time designing than what I am currently doing. I feel like I need to do at least 60% designing and only 40% adding new features. If you are reading this and have any experience with evolutionary design, feel free to share it with me. I should probably also re-read the chapters in James’ book to refresh my memory.</p>
]]></summary>
</entry>
<entry>
    <title>DevLog 006: Adding the concept of a clip</title>
    <link href="http://rickardlindberg.me/writing/devlog-006-adding-the-concept-of-a-clip/" />
    <id>http://rickardlindberg.me/writing/devlog-006-adding-the-concept-of-a-clip/</id>
    <published>2023-07-31T00:00:00Z</published>
    <updated>2023-07-31T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>DevLog 006: Adding the concept of a clip</h1>

<p><em>Published on 31 July 2023.</em></p>

<p>When working on the <a href="/projects/rlvideo/index.html">video editor</a> and writing about it, I keep talking about clips. But there is nothing called a clip in the source code. Today I will explore the idea of adding that as a concept and see what kind of functionality it will attract.</p>
<h2 id="finishing-ffmpeg-proxy-generation">Finishing FFmpeg proxy generation</h2>
<p>Here is the cleaned up diff from yesterday’s work on moving back to FFmpeg for proxy generation:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="gu">@@ -70,15 +70,16 @@ class FileSource(namedtuple(&quot;FileSource&quot;, &quot;id,path,number_of_frames_at_project_f</span>
         proxy_tmp_path = proxy_spec.get_tmp_path(checksum)
         if not os.path.exists(proxy_path):
             proxy_spec.ensure_dir()
<span class="gd">-            p = mlt.Profile()</span>
<span class="gd">-            p.from_producer(producer)</span>
<span class="gd">-            proxy_spec.adjust_profile(p)</span>
<span class="gd">-            producer = mlt.Producer(p, self.path)</span>
<span class="gd">-            consumer = mlt.Consumer(p, &quot;avformat&quot;)</span>
<span class="gd">-            consumer.set(&quot;target&quot;, proxy_tmp_path)</span>
<span class="gd">-            proxy_spec.adjust_consumer(consumer)</span>
<span class="gd">-            run_consumer(consumer, producer, progress)</span>
<span class="gd">-            self.create_producer(profile, proxy_tmp_path)</span>
<span class="gi">+            subprocess.check_call([</span>
<span class="gi">+                &quot;ffmpeg&quot;,</span>
<span class="gi">+                &quot;-y&quot;,</span>
<span class="gi">+                &quot;-i&quot;, self.path,</span>
<span class="gi">+                &quot;-vf&quot;, &quot;yadif,scale=960:540&quot;,</span>
<span class="gi">+                &quot;-q:v&quot;, &quot;3&quot;,</span>
<span class="gi">+                &quot;-vcodec&quot;, &quot;mjpeg&quot;,</span>
<span class="gi">+                &quot;-acodec&quot;, &quot;pcm_s16le&quot;,</span>
<span class="gi">+                proxy_tmp_path</span>
<span class="gi">+            ])</span>
             os.rename(proxy_tmp_path, proxy_path)
         return self.create_producer(profile, proxy_path)
</pre>
</div>
</div>
</div>
<p>Let’s commit that and see how we can refactor in this area.</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m &#39;Use FFmpeg for proxy generation.&#39;
...................................................
----------------------------------------------------------------------
Ran 51 tests in 2.959s

OK
[main 078c9f2] Use FFmpeg for proxy generation.
 1 file changed, 10 insertions(+), 9 deletions(-)
</pre>
</div>
</div>
</div>
<h2 id="the-start-of-clip">The start of Clip</h2>
<p>The proxy generation code has this line:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="n">checksum</span> <span class="o">=</span> <span class="n">md5</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">path</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>Where <code>md5</code> is a top level function.</p>
<p>Let’s extract a <code>Clip</code> class and put the <code>md5</code> method there. My idea is that a clip represents a file on disk that we can load into a <code>FileSource</code> and display on our timeline.</p>
<p>Here it is:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">Clip</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">path</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">path</span> <span class="o">=</span> <span class="n">path</span>

    <span class="k">def</span> <span class="nf">md5</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">check_output</span><span class="p">([</span><span class="s2">&quot;md5sum&quot;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">path</span><span class="p">])[:</span><span class="mi">32</span><span class="p">]</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s2">&quot;ascii&quot;</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>We can see again that we use an external program, <code>md5sum</code>, to calculate the md5. I think I did that because the Python module for calculating md5 did not have a convenient function for calculating the sum on large files. As I noted previously, I’m fine with this. We should probably add a test though to make sure it works with the external program.</p>
<p>Anyway, the proxy code can now be written like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="n">checksum</span> <span class="o">=</span> <span class="n">Clip</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">path</span><span class="p">)</span><span class="o">.</span><span class="n">md5</span><span class="p">()</span>
</pre>
</div>
</div>
</div>
<p>Perfect! Time to commit:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m &#39;Extract Clip and move the md5 function to it.&#39;
...................................................
----------------------------------------------------------------------
Ran 51 tests in 2.966s

OK
[main 6488c05] Extract Clip and move the md5 function to it.
 3 files changed, 12 insertions(+), 4 deletions(-)
 create mode 100644 rlvideolib/domain/clip.py
</pre>
</div>
</div>
</div>
<h2 id="revising-mlthelpers">Revising mlthelpers</h2>
<p>When working on proxies before, we extracted this module:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="n">rlvideolib</span><span class="o">.</span><span class="n">mlthelpers</span>
</pre>
</div>
</div>
</div>
<p>First of all, its <code>run_consumer</code> function is no longer used when we generate proxies with FFmpeg. Let’s remove it.</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m &#39;Remove rlvideolib.mlthelpers.run_consumer since it is no longer used.&#39;
...................................................
----------------------------------------------------------------------
Ran 51 tests in 2.974s

OK
[main aff41ef] Remove rlvideolib.mlthelpers.run_consumer since it is no longer used.
 2 files changed, 9 deletions(-)
</pre>
</div>
</div>
</div>
<p>The only thing left now is this class:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">FileInfo</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">path</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">path</span> <span class="o">=</span> <span class="n">path</span>

    <span class="k">def</span> <span class="nf">get_number_of_frames</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">profile</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">mlt</span><span class="o">.</span><span class="n">Producer</span><span class="p">(</span><span class="n">profile</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">path</span><span class="p">)</span><span class="o">.</span><span class="n">get_playtime</span><span class="p">()</span>
</pre>
</div>
</div>
</div>
<p>This looks a lot like it can be merged into our new <code>Clip</code>. Let’s see where it is used.</p>
<p>I find an unused import of it and remove it.</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m &#39;Remove unused import of FileInfo.&#39;
...................................................
----------------------------------------------------------------------
Ran 51 tests in 2.967s

OK
[main dda14cf] Remove unused import of FileInfo.
 1 file changed, 1 deletion(-)
</pre>
</div>
</div>
</div>
<p>I wonder if there is a tool that can automatically remove unused imports. Then we can include it in our test runner perhaps? Along with an auto formatter?</p>
<p>Anyway, the only other use is here:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">Transaction</span><span class="p">:</span>

    <span class="o">...</span>

    <span class="k">def</span> <span class="nf">add_clip</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="nb">id</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
        <span class="n">source</span> <span class="o">=</span> <span class="n">FileSource</span><span class="p">(</span>
            <span class="nb">id</span><span class="o">=</span><span class="nb">id</span><span class="p">,</span>
            <span class="n">path</span><span class="o">=</span><span class="n">path</span><span class="p">,</span>
            <span class="n">number_of_frames_at_project_fps</span><span class="o">=</span><span class="n">FileInfo</span><span class="p">(</span>
                <span class="n">path</span>
            <span class="p">)</span><span class="o">.</span><span class="n">get_number_of_frames</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">project</span><span class="o">.</span><span class="n">profile</span><span class="p">)</span>
        <span class="p">)</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">add_source</span><span class="p">(</span><span class="n">source</span><span class="p">,</span> <span class="n">source</span><span class="o">.</span><span class="n">number_of_frames_at_project_fps</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>Here we are actually talking about adding a clip. I had forgotten about that. It would make more sense to create a <code>Clip</code> then instead of a <code>FileInfo</code>. Let’s add <code>get_number_of_frames</code> to <code>Clip</code> and then we can get rid of <code>FileInfo</code> and <code>rlvideolib.mlthelpers</code> completely.</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m &#39;Move get_number_of_frames to Clip.&#39;
...................................................
----------------------------------------------------------------------
Ran 51 tests in 2.955s

OK
[main c13f4cb] Move get_number_of_frames to Clip.
 4 files changed, 7 insertions(+), 14 deletions(-)
 delete mode 100644 rlvideolib/mlthelpers.py
</pre>
</div>
</div>
</div>
<h2 id="thinking-about-number-of-frames">Thinking about number of frames</h2>
<p>We saw in an <a href="/writing/devlog-004-proxies-with-correct-fps/index.html">earlier devlog</a> that the number of frames that we store is actually the number of frames at the current project FPS. I dig into the MLT source code and see that the out point seems to be calculated based on the FPS:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="n">mlt_position</span> <span class="n">frames</span> <span class="o">=</span> <span class="p">(</span><span class="n">mlt_position</span><span class="p">)</span> <span class="n">lrint</span><span class="p">(</span><span class="n">format</span><span class="o">-&gt;</span><span class="n">duration</span> <span class="o">*</span> <span class="n">mlt_profile_fps</span><span class="p">(</span><span class="n">profile</span><span class="p">)</span>
                                           <span class="o">/</span> <span class="n">AV_TIME_BASE</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="n">mlt_properties_get_position</span><span class="p">(</span><span class="n">properties</span><span class="p">,</span> <span class="s">&quot;out&quot;</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span>
    <span class="n">mlt_properties_set_position</span><span class="p">(</span><span class="n">properties</span><span class="p">,</span> <span class="s">&quot;out&quot;</span><span class="p">,</span> <span class="n">frames</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="n">mlt_properties_get_position</span><span class="p">(</span><span class="n">properties</span><span class="p">,</span> <span class="s">&quot;length&quot;</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span>
    <span class="n">mlt_properties_set_position</span><span class="p">(</span><span class="n">properties</span><span class="p">,</span> <span class="s">&quot;length&quot;</span><span class="p">,</span> <span class="n">frames</span><span class="p">);</span>
</pre>
</div>
</div>
</div>
<p>I wonder if we can do the same calculation so that we don’t have to depend on MLT for <code>get_number_of_frames</code>?</p>
<p>I’m not ready for that. Let’s rewrite</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">get_number_of_frames</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">profile</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">mlt</span><span class="o">.</span><span class="n">Producer</span><span class="p">(</span><span class="n">profile</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">path</span><span class="p">)</span><span class="o">.</span><span class="n">get_playtime</span><span class="p">()</span>
</pre>
</div>
</div>
</div>
<p>to this</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">calculate_length_at_fps</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">mlt_profile</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">mlt</span><span class="o">.</span><span class="n">Producer</span><span class="p">(</span><span class="n">mlt_profile</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">path</span><span class="p">)</span><span class="o">.</span><span class="n">get_playtime</span><span class="p">()</span>
</pre>
</div>
</div>
</div>
<p>to clarify a bit more what it is actually doing.</p>
<p>With this change, I think that the previous rename we did of <code>FileSource.length</code> to <code>FileSource.number_of_frames_at_project_fps</code> can be reverted. I think it makes sense to talk about a length in terms of frames. If we change the project FPS, all lengths have to be recalculated, and I think this makes sense. With the new <code>calculate_length_at_fps</code> it is still clear that this length depends on the FPS I think.</p>
<p>Let’s commit:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m &#39;Rename Clip..get_number_of_frames to Clip..calculate_length_at_fps.&#39;
...................................................
----------------------------------------------------------------------
Ran 51 tests in 3.457s

OK
[main 94de3c1] Rename Clip..get_number_of_frames to Clip..calculate_length_at_fps.
 2 files changed, 3 insertions(+), 3 deletions(-)
</pre>
</div>
</div>
</div>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m &#39;Rename FileSource.number_of_frames_at_project_fps to FileSource.length.&#39;
...................................................
----------------------------------------------------------------------
Ran 51 tests in 2.952s

OK
[main 5bca102] Rename FileSource.number_of_frames_at_project_fps to FileSource.length.
 2 files changed, 12 insertions(+), 12 deletions(-)
</pre>
</div>
</div>
</div>
<p>Now when <code>Transaction.add_clip</code> reads like this</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">add_clip</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="nb">id</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
    <span class="n">source</span> <span class="o">=</span> <span class="n">FileSource</span><span class="p">(</span>
        <span class="nb">id</span><span class="o">=</span><span class="nb">id</span><span class="p">,</span>
        <span class="n">path</span><span class="o">=</span><span class="n">path</span><span class="p">,</span>
        <span class="n">length</span><span class="o">=</span><span class="n">Clip</span><span class="p">(</span>
            <span class="n">path</span>
        <span class="p">)</span><span class="o">.</span><span class="n">calculate_length_at_fps</span><span class="p">(</span><span class="n">mlt_profile</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">project</span><span class="o">.</span><span class="n">profile</span><span class="p">)</span>
    <span class="p">)</span>
    <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">add_source</span><span class="p">(</span><span class="n">source</span><span class="p">,</span> <span class="n">source</span><span class="o">.</span><span class="n">length</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>I don’t think we need this comment anymore:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="c1"># NOTE: The length depends on the FPS of the project. Once the first</span>
<span class="c1"># FileSource is added to the project, the FPS of the project can not be</span>
<span class="c1"># changed.</span>
</pre>
</div>
</div>
</div>
<p>I think the code above makes it clear enough that the length depends on the FPS of the project.</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m &#39;Remove note about length/FPS since this is clear enough in the code now.&#39;
...................................................
----------------------------------------------------------------------
Ran 51 tests in 2.955s

OK
[main ab10ec9] Remove note about length/FPS since this is clear enough in the code now.
 1 file changed, 4 deletions(-)
</pre>
</div>
</div>
</div>
<p>Sometimes I feel bad for changing the code back and forth. But I don’t think I should feel bad. I think it’s a good thing to always make the code express our intentions as well as possible. If that means that names change back and forth, that’s ok.</p>
<h2 id="clip-proxies">Clip proxies</h2>
<p>What more functionality can the clip class attract? How about proxy generation?</p>
<p>A proxy clip is an alternative version of a clip. An alternative file on disk that represents the same thing but in a format that is easier to work with.</p>
<p>It makes sense.</p>
<p>Let’s extract it:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">Clip</span><span class="p">:</span>

    <span class="o">...</span>

    <span class="k">def</span> <span class="nf">generate_proxy</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">proxy_spec</span><span class="p">,</span> <span class="n">progress</span><span class="p">):</span>
        <span class="c1"># TODO: call progress</span>
        <span class="n">checksum</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">md5</span><span class="p">()</span>
        <span class="n">proxy_path</span> <span class="o">=</span> <span class="n">proxy_spec</span><span class="o">.</span><span class="n">get_path</span><span class="p">(</span><span class="n">checksum</span><span class="p">)</span>
        <span class="n">proxy_tmp_path</span> <span class="o">=</span> <span class="n">proxy_spec</span><span class="o">.</span><span class="n">get_tmp_path</span><span class="p">(</span><span class="n">checksum</span><span class="p">)</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">proxy_path</span><span class="p">):</span>
            <span class="n">proxy_spec</span><span class="o">.</span><span class="n">ensure_dir</span><span class="p">()</span>
            <span class="n">subprocess</span><span class="o">.</span><span class="n">check_call</span><span class="p">([</span>
                <span class="s2">&quot;ffmpeg&quot;</span><span class="p">,</span>
                <span class="s2">&quot;-y&quot;</span><span class="p">,</span>
                <span class="s2">&quot;-i&quot;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">path</span><span class="p">,</span>
                <span class="s2">&quot;-vf&quot;</span><span class="p">,</span> <span class="s2">&quot;yadif,scale=960:540&quot;</span><span class="p">,</span>
                <span class="s2">&quot;-q:v&quot;</span><span class="p">,</span> <span class="s2">&quot;3&quot;</span><span class="p">,</span>
                <span class="s2">&quot;-vcodec&quot;</span><span class="p">,</span> <span class="s2">&quot;mjpeg&quot;</span><span class="p">,</span>
                <span class="s2">&quot;-acodec&quot;</span><span class="p">,</span> <span class="s2">&quot;pcm_s16le&quot;</span><span class="p">,</span>
                <span class="n">proxy_tmp_path</span>
            <span class="p">])</span>
            <span class="n">os</span><span class="o">.</span><span class="n">rename</span><span class="p">(</span><span class="n">proxy_tmp_path</span><span class="p">,</span> <span class="n">proxy_path</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">proxy_path</span>
</pre>
</div>
</div>
</div>
<p>And <code>FileSource.load_proxy</code> can be reduced to this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">load_proxy</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">profile</span><span class="p">,</span> <span class="n">proxy_spec</span><span class="p">,</span> <span class="n">progress</span><span class="p">):</span>
    <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">create_producer</span><span class="p">(</span>
        <span class="n">profile</span><span class="p">,</span>
        <span class="n">Clip</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">path</span><span class="p">)</span><span class="o">.</span><span class="n">generate_proxy</span><span class="p">(</span><span class="n">proxy_spec</span><span class="p">,</span> <span class="n">progress</span><span class="p">)</span>
    <span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>This reads quite nicely I think. Let’s commit:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m &#39;Extract Clip.generate_proxy.&#39;
...................................................
----------------------------------------------------------------------
Ran 51 tests in 2.929s

OK
[main cc85022] Extract Clip.generate_proxy.
 2 files changed, 25 insertions(+), 18 deletions(-)
</pre>
</div>
</div>
</div>
<h2 id="proxy-spec-location">Proxy spec location</h2>
<p>The <code>ProxySpec</code> class currently lives in <code>rlvideolib.domain.project</code>. I think a much better place would be <code>rlvideolib.domain.clip</code>.</p>
<p>Let’s move it over.</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m &#39;Move ProxySpec to rlvideolib.domain.clip.&#39;
...................................................
----------------------------------------------------------------------
Ran 51 tests in 2.903s

OK
[main 36932f0] Move ProxySpec to rlvideolib.domain.clip.
 2 files changed, 50 insertions(+), 49 deletions(-)
</pre>
</div>
</div>
</div>
<h2 id="proxy-spec-cleanup">Proxy spec cleanup</h2>
<p>The proxy spec has a method for setting properties on a consumer:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">adjust_consumer</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">consumer</span><span class="p">):</span>
    <span class="n">consumer</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;vcodec&quot;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">vcodec</span><span class="p">)</span>
    <span class="n">consumer</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;acodec&quot;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">acodec</span><span class="p">)</span>
    <span class="n">consumer</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;qscale&quot;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">qscale</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>Now when we use FFmpeg for proxy generation, this is no longer used.</p>
<p>But we did hardcode some values for FFmpeg, let’s change <code>adjust_consumer</code> to <code>get_ffmpeg_arguments</code>:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">get_ffmpeg_arguments</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="k">return</span> <span class="p">[</span>
        <span class="s2">&quot;-vf&quot;</span><span class="p">,</span> <span class="sa">f</span><span class="s2">&quot;yadif,scale=-1:</span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">height</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>
        <span class="s2">&quot;-q:v&quot;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">qscale</span><span class="p">,</span>
        <span class="s2">&quot;-vcodec&quot;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">vcodec</span><span class="p">,</span>
        <span class="s2">&quot;-acodec&quot;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">acodec</span><span class="p">,</span>
    <span class="p">]</span>
</pre>
</div>
</div>
</div>
<p>And use it like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">generate_proxy</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">proxy_spec</span><span class="p">,</span> <span class="n">progress</span><span class="p">):</span>

    <span class="o">...</span>

    <span class="n">subprocess</span><span class="o">.</span><span class="n">check_call</span><span class="p">(</span>
        <span class="p">[</span>
            <span class="s2">&quot;ffmpeg&quot;</span><span class="p">,</span>
            <span class="s2">&quot;-y&quot;</span><span class="p">,</span>
            <span class="s2">&quot;-i&quot;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">path</span><span class="p">,</span>
        <span class="p">]</span>
        <span class="o">+</span>
        <span class="n">proxy_spec</span><span class="o">.</span><span class="n">get_ffmpeg_arguments</span><span class="p">()</span>
        <span class="o">+</span>
        <span class="p">[</span>
            <span class="n">proxy_tmp_path</span>
        <span class="p">]</span>
    <span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>Commit:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m &#39;ProxySpec know how to generate FFmpeg arguments for conversion.&#39;
...................................................
----------------------------------------------------------------------
Ran 51 tests in 3.412s

OK
[main 6579178] ProxySpec know how to generate FFmpeg arguments for conversion.
 1 file changed, 20 insertions(+), 14 deletions(-)
</pre>
</div>
</div>
</div>
<h2 id="summary">Summary</h2>
<p>I am quite happy with the refactoring that we did in this session. We finally have a concept of a clip in the source code and it turned out that it attracted a bit of functionality that previously was spread across the code.</p>
<p>The code base is now a little cleaner.</p>
<p>Why is that important?</p>
<p>Because clear thinking is clear writing and vice versa. It applies to code as well. If we have expressed our thinking clear in code, thinking about it is easier, and so making the next change is easier. And to think clearly about it, we need to write about it, refactor it, until it expresses our ideas clearly. It’s a circle that probably never ends but perhaps slows down as our ideas and the expression of them in code approach each other.</p>
]]></summary>
</entry>
<entry>
    <title>DevLog 005: MLT proxy hell</title>
    <link href="http://rickardlindberg.me/writing/devlog-005-mlt-proxy-hell/" />
    <id>http://rickardlindberg.me/writing/devlog-005-mlt-proxy-hell/</id>
    <published>2023-07-31T00:00:00Z</published>
    <updated>2023-07-31T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>DevLog 005: MLT proxy hell</h1>

<p><em>Published on 31 July 2023.</em></p>

<p>I want to use the <a href="/projects/rlvideo/index.html">video editor</a> to edit footage that I have shot this summer. It starts out well, gives me a lot of problems, and resolves in the end.</p>
<h2 id="a-promising-start">A promising start</h2>
<p>To load all clips that I have, I try this command:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ rlvideo a6400/* hero8/*
</pre>
</div>
</div>
</div>
<p>It takes a while to load all the clips. This is expected. When we load a clip we need to figure out its length so that we can correctly place it on the timeline. This is a one time cost when adding new clips. And I have shot many clips this summer:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ls a6400/* hero8/* | wc -l
270
</pre>
</div>
</div>
</div>
<p>I patiently wait.</p>
<p>After a while the GUI pops up and proxy clips start to render in the background. Meanwhile the GUI is quite snappy and we can start to make edits right away.</p>
<p>Aside from the lack of progress bar when loading clips, the application works as intended.</p>
<p>I figure it will take a while to render all proxy clips, so I leave it open and go do something else for a while.</p>
<p>
<center>
<img src="loading.png" title="fig:" alt="Loading clips." />
</center>
</p>
<h2 id="crashes">Crashes</h2>
<p>Then I hear that the fan stops making noises. Already done I think? Hmm. Where did my application go? The window is closed, and so is the terminal from which I opened it. How is that even possible? Reading the <code>dmesg</code> output, the application seems to have segfaulted.</p>
<p>I spend many hours trying to figure out what is going on. What is particularly annoying is that you have to wait a long time to reproduce it. The segfault does not happen right away.</p>
<p>Eventually I narrow down the problem to proxy generation. At least I think so. If I comment out generation of proxy clips, I can load many clips without a crash.</p>
<p>In an earlier version of the program, we generated proxy clips using FFmpeg. Then we switched over to using MLT. I got the idea that you can do it with MLT from <a href="http://jliljebl.github.io/flowblade/">Flowblade</a>. It also made it easier to show progress in the GUI.</p>
<p>When we made the switch, I noticed that something happened to the colors of the proxy clips. They seemed to look a little bleaker than the original. I don’t recall having this problem when we generated proxies using FFmpeg.</p>
<p>Odd looking colors and segfaults. I think it’s time to go back to generating proxy clips using FFmpeg.</p>
<h2 id="proxies-with-ffmpeg">Proxies with FFmpeg</h2>
<p>Here is what I’m trying right now.</p>
<p>Instead of this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">load_proxy</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">profile</span><span class="p">,</span> <span class="n">proxy_spec</span><span class="p">,</span> <span class="n">progress</span><span class="p">):</span>
    <span class="n">producer</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">create_producer</span><span class="p">(</span><span class="n">profile</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">path</span><span class="p">)</span>
    <span class="n">checksum</span> <span class="o">=</span> <span class="n">md5</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">path</span><span class="p">)</span>
    <span class="n">proxy_path</span> <span class="o">=</span> <span class="n">proxy_spec</span><span class="o">.</span><span class="n">get_path</span><span class="p">(</span><span class="n">checksum</span><span class="p">)</span>
    <span class="n">proxy_tmp_path</span> <span class="o">=</span> <span class="n">proxy_spec</span><span class="o">.</span><span class="n">get_tmp_path</span><span class="p">(</span><span class="n">checksum</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">proxy_path</span><span class="p">):</span>
        <span class="n">proxy_spec</span><span class="o">.</span><span class="n">ensure_dir</span><span class="p">()</span>
        <span class="n">p</span> <span class="o">=</span> <span class="n">mlt</span><span class="o">.</span><span class="n">Profile</span><span class="p">()</span>
        <span class="n">p</span><span class="o">.</span><span class="n">from_producer</span><span class="p">(</span><span class="n">producer</span><span class="p">)</span>
        <span class="n">proxy_spec</span><span class="o">.</span><span class="n">adjust_profile</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
        <span class="n">producer</span> <span class="o">=</span> <span class="n">mlt</span><span class="o">.</span><span class="n">Producer</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">path</span><span class="p">)</span>
        <span class="n">consumer</span> <span class="o">=</span> <span class="n">mlt</span><span class="o">.</span><span class="n">Consumer</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="s2">&quot;avformat&quot;</span><span class="p">)</span>
        <span class="n">consumer</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;target&quot;</span><span class="p">,</span> <span class="n">proxy_tmp_path</span><span class="p">)</span>
        <span class="n">proxy_spec</span><span class="o">.</span><span class="n">adjust_consumer</span><span class="p">(</span><span class="n">consumer</span><span class="p">)</span>
        <span class="n">run_consumer</span><span class="p">(</span><span class="n">consumer</span><span class="p">,</span> <span class="n">producer</span><span class="p">,</span> <span class="n">progress</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">create_producer</span><span class="p">(</span><span class="n">profile</span><span class="p">,</span> <span class="n">proxy_tmp_path</span><span class="p">)</span>
        <span class="n">os</span><span class="o">.</span><span class="n">rename</span><span class="p">(</span><span class="n">proxy_tmp_path</span><span class="p">,</span> <span class="n">proxy_path</span><span class="p">)</span>
    <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">create_producer</span><span class="p">(</span><span class="n">profile</span><span class="p">,</span> <span class="n">proxy_path</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>We do this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">load_proxy</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">profile</span><span class="p">,</span> <span class="n">proxy_spec</span><span class="p">,</span> <span class="n">progress</span><span class="p">):</span>
    <span class="n">producer</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">create_producer</span><span class="p">(</span><span class="n">profile</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">path</span><span class="p">)</span>
    <span class="n">checksum</span> <span class="o">=</span> <span class="n">md5</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">path</span><span class="p">)</span>
    <span class="n">proxy_path</span> <span class="o">=</span> <span class="n">proxy_spec</span><span class="o">.</span><span class="n">get_path</span><span class="p">(</span><span class="n">checksum</span><span class="p">)</span>
    <span class="n">proxy_tmp_path</span> <span class="o">=</span> <span class="n">proxy_spec</span><span class="o">.</span><span class="n">get_tmp_path</span><span class="p">(</span><span class="n">checksum</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">proxy_path</span><span class="p">):</span>
        <span class="n">proxy_spec</span><span class="o">.</span><span class="n">ensure_dir</span><span class="p">()</span>
        <span class="n">subprocess</span><span class="o">.</span><span class="n">check_call</span><span class="p">([</span>
            <span class="s2">&quot;ffmpeg&quot;</span><span class="p">,</span>
            <span class="s2">&quot;-y&quot;</span><span class="p">,</span>
            <span class="s2">&quot;-i&quot;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">path</span><span class="p">,</span>
            <span class="s2">&quot;-vf&quot;</span><span class="p">,</span> <span class="s2">&quot;yadif,scale=960:540&quot;</span><span class="p">,</span>
            <span class="s2">&quot;-q:v&quot;</span><span class="p">,</span> <span class="s2">&quot;3&quot;</span><span class="p">,</span>
            <span class="s2">&quot;-vcodec&quot;</span><span class="p">,</span> <span class="s2">&quot;mjpeg&quot;</span><span class="p">,</span>
            <span class="s2">&quot;-acodec&quot;</span><span class="p">,</span> <span class="s2">&quot;pcm_s16le&quot;</span><span class="p">,</span>
            <span class="n">proxy_tmp_path</span>
        <span class="p">])</span>
        <span class="n">os</span><span class="o">.</span><span class="n">rename</span><span class="p">(</span><span class="n">proxy_tmp_path</span><span class="p">,</span> <span class="n">proxy_path</span><span class="p">)</span>
    <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">create_producer</span><span class="p">(</span><span class="n">profile</span><span class="p">,</span> <span class="n">proxy_path</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>We can can let the <code>proxy_spec</code> set the FFmpeg options. The above is just an experiment to see if this works better.</p>
<p>So far, it looks promising. It has been working for a couple of hours and the proxy clips look better than before.</p>
<p>I’m gonna make some dinner and we’ll see the status later on.</p>
<h2 id="after-dinner">After dinner</h2>
<p>All proxy clips rendered successfully. The editor is still alive and I can scrub all the clips. Nice!</p>
<h2 id="summary">Summary</h2>
<p>Generating proxies using MLT always felt a little awkward. All we want to do is to scale the clip, encode it using a seek-friendly format, and leave everything else as is. With MLT we had to fiddle around with different profiles to make sure FPS was preserved and recreate producers with different profiles. It never felt like the proper solution.</p>
<p>Doing the conversion using FFmpeg is much more straight forward. There are two objections that I can have to that solution:</p>
<ol type="1">
<li>It calls an external process</li>
<li>We lost the call to <code>progress</code></li>
</ol>
<p>I browsed the web for solutions to the progress problem. And there seems to be many solutions for that. We can probably figure out one that works for us. And to be honest, right now, progress in the GUI is not the most important thing. Right now, FFmpeg outputs some statistics to the terminal, so we could have a look there for some kind of progress.</p>
<p>When it comes to calling external processes, I’m not sure what I think. I know I don’t have a problem with it. Why do I object then? Honestly, I don’t know. Something tells me that it is a little ugly.</p>
<p>When I started this project, I thought it would only be possible to do with the help of MLT. If the Python MLT bindings keep giving me segfaults and other hard times, will the project fail? Maybe. So what is my strategy? I think I will try to isolate the MLT code as much as possible and use other tools where possible (FFmpeg for proxy generation for example). If I manage to isolate the core of a video editor that is not depending on MLT, then perhaps I can also make it work with another video library if there is one. It will be an interesting exercise.</p>
]]></summary>
</entry>
<entry>
    <title>DevLog 004: Proxies with correct FPS</title>
    <link href="http://rickardlindberg.me/writing/devlog-004-proxies-with-correct-fps/" />
    <id>http://rickardlindberg.me/writing/devlog-004-proxies-with-correct-fps/</id>
    <published>2023-07-30T00:00:00Z</published>
    <updated>2023-07-30T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>DevLog 004: Proxies with correct FPS</h1>

<p><em>Published on 30 July 2023.</em></p>

<p>In this episode we will continue work on the <a href="/projects/rlvideo/index.html">video editor</a>. I have some footage that I would like to edit. Wouldn’t it be cool if I can do that in my own video editor? I will use that as a guide for the development. What is stopping me from using my video editor today? Fix that and move on to the next thing.</p>
<p>In this episode we will fix an issue with proxy clips sometimes having the incorrect FPS.</p>
<h2 id="why-devlogs">Why DevLogs?</h2>
<p>I do them for various reasons. Here are the ones that I can think of now.</p>
<ul>
<li><p>I think there is value in documenting the work that I do.</p></li>
<li><p>People reading these DevLogs might pick up something that I do and incorporate into their workflow.</p></li>
<li><p>Clear thinking is clear writing and vice versa. Writing helps me think more clearly about topics. Sometimes, by writing about a problem, I think I can reach a solution faster even though writing takes time.</p></li>
<li><p>I want to practice writing.</p></li>
</ul>
<h2 id="the-problem-with-proxies-and-fps">The problem with proxies and FPS</h2>
<p>For most of my videos, I use a frame rate of 25. That is 25 frames per second (FPS). I have coded that as a default in the video editor.</p>
<p>However, sometimes I shoot footage in a higher frame rate and slow it down in post.</p>
<p>Here is an example:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ffprobe GX010802.MP4 <span class="m">2</span>&gt;<span class="p">&amp;</span><span class="m">1</span> <span class="p">|</span> grep fps
  Stream <span class="c1">#0:0(eng): Video: hevc (Main) (hvc1 / 0x31637668), yuvj420p(pc, bt709), 2704x1520 [SAR 1:1 DAR 169:95], 97187 kb/s, 100 fps, 100 tbr, 90k tbn, 100 tbc (default)</span>
</pre>
</div>
</div>
</div>
<p>You can see there in the middle that is says <code>100 fps</code>.</p>
<p>When I drop this clip on a 25 FPS timeline, only every 4th frame will be used from that clip and the rest are discarded. However, if I slow down the clip to 25% speed, the runtime will be 4 times longer and all the frames will be used.</p>
<p>The problem is that the video editor uses proxy clips for preview. A proxy clip is typically a lower resolution version of the original clip to allow real time editing on a slower computer.</p>
<p>And proxy clips are currently generated with the same frame rate as the project (which is 25).</p>
<p>Here is what <code>ffprobe</code> says about our proxy clip:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ffprobe /tmp/de63dcd626503cbde6f3da76b0af3e8c.mkv <span class="m">2</span>&gt;<span class="p">&amp;</span><span class="m">1</span> <span class="p">|</span> grep fps
  Stream <span class="c1">#0:0: Video: mjpeg (Baseline), yuvj420p(pc, bt470bg/bt709/bt709), 960x540 [SAR 1:1 DAR 16:9], 25 fps, 25 tbr, 1k tbn, 1k tbc (default)</span>
</pre>
</div>
</div>
</div>
<h2 id="proxy-generation-today">Proxy generation today</h2>
<p>With some details removed, here is how proxies are generated today:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="n">producer</span> <span class="o">=</span> <span class="n">mlt</span><span class="o">.</span><span class="n">Producer</span><span class="p">(</span><span class="n">profile</span><span class="p">,</span> <span class="n">CLIP_PATH</span><span class="p">)</span>

<span class="n">consumer</span> <span class="o">=</span> <span class="n">mlt</span><span class="o">.</span><span class="n">Consumer</span><span class="p">(</span><span class="n">proxy_profile</span><span class="p">,</span> <span class="s2">&quot;avformat&quot;</span><span class="p">)</span>
<span class="n">consumer</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;target&quot;</span><span class="p">,</span> <span class="n">PROXY_PATH</span><span class="p">)</span>
<span class="n">consumer</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;vcodec&quot;</span><span class="p">,</span> <span class="s2">&quot;mjpeg&quot;</span><span class="p">)</span>
<span class="n">consumer</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;acodec&quot;</span><span class="p">,</span> <span class="s2">&quot;pcm_s16le&quot;</span><span class="p">)</span>
<span class="n">consumer</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;qscale&quot;</span><span class="p">,</span> <span class="s2">&quot;3&quot;</span><span class="p">)</span>

<span class="n">consumer</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">producer</span><span class="p">)</span>
<span class="n">consumer</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
<span class="k">while</span> <span class="n">consumer</span><span class="o">.</span><span class="n">is_stopped</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>The <code>profile</code> and the <code>proxy_profile</code> differ only in that the <code>proxy_profile</code> has a lower resolution (width x height). They are otherwise identical.</p>
<p>What we need to do is to get the profile for a consumer and only change the size of it. We want the profile FPS to be the FPS of the clip.</p>
<h2 id="sidetracked">Sidetracked</h2>
<p>As I start writing some code, I notice something odd in the output of the tests:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>.............................[matroska,webm @ 0x5599e1354fc0] Could not find codec parameters for stream 0 (Video: mjpeg, none(pc, bt470bg/bt470bg/smpte170m), 720x576): unspecified pixel format
Consider increasing the value for the &#39;analyzeduration&#39; (0) and &#39;probesize&#39; (5000000) options
[matroska,webm @ 0x5599e0f51540] Could not find codec parameters for stream 0 (Video: mjpeg, none(pc, bt470bg/bt470bg/smpte170m), 720x576): unspecified pixel format
Consider increasing the value for the &#39;analyzeduration&#39; (0) and &#39;probesize&#39; (5000000) options
....................
----------------------------------------------------------------------
Ran 49 tests in 2.001s
</pre>
</div>
</div>
</div>
<p>I <code>git stash</code> my current changes and see that the output is still there.</p>
<p>I increase the verbosity of the test runner to figure out which test is causing the output and I get this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>Doctest: rlvideolib.domain.project.Project ... [matroska,webm @ 0x56544c299700] Could not find codec parameters for stream 0 (Video: mjpeg, none(pc, bt470bg/bt470bg/smpte170m), 720x576): unspecified pixel format
Consider increasing the value for the &#39;analyzeduration&#39; (0) and &#39;probesize&#39; (5000000) options
[matroska,webm @ 0x56544c4061c0] Could not find codec parameters for stream 0 (Video: mjpeg, none(pc, bt470bg/bt470bg/smpte170m), 720x576): unspecified pixel format
Consider increasing the value for the &#39;analyzeduration&#39; (0) and &#39;probesize&#39; (5000000) options
</pre>
</div>
</div>
</div>
<p>The problem is that there is a sort of integration test that, when run, generates proxy clips, and the output is not captured in the test and instead redirected to the terminal.</p>
<p>I add the <code>capture_stdout_stderr</code> helper in the test, and the output now looks clean.</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">&gt;&gt;&gt; with capture_stdout_stderr():</span>
<span class="sd">...     with project.new_transaction() as transaction:</span>
<span class="sd">...         ...</span>
<span class="sd">&quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<p>Let’s commit:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m &#39;Capture stdout/stderr in Project test to not clutter the test output.&#39;
.................................................
----------------------------------------------------------------------
Ran 49 tests in 1.990s

OK
[main 9846016] Capture stdout/stderr in Project test to not clutter the test output.
 1 file changed, 4 insertions(+), 3 deletions(-)
</pre>
</div>
</div>
</div>
<p>Sometimes when I encounter a small problem when working on something, I prefer to <code>git stash</code> my changes, fix the small problem, and then get back to what I was working on with <code>git stash pop</code>.</p>
<p>If the problem turns out to be not so small, I might write a note about it instead.</p>
<h2 id="back-to-the-problem">Back to the problem</h2>
<p>I create this function to get a native producer and profile:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">mlt_producer_with_native_profile</span><span class="p">(</span><span class="n">path</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">    &gt;&gt;&gt; _ = mlt.Factory().init()</span>
<span class="sd">    &gt;&gt;&gt; producer, profile = mlt_producer_with_native_profile(&quot;resources/one.mp4&quot;)</span>
<span class="sd">    &gt;&gt;&gt; profile.fps()</span>
<span class="sd">    25.0</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="n">profile</span> <span class="o">=</span> <span class="n">mlt</span><span class="o">.</span><span class="n">Profile</span><span class="p">()</span>
    <span class="n">producer</span> <span class="o">=</span> <span class="n">mlt</span><span class="o">.</span><span class="n">Producer</span><span class="p">(</span><span class="n">profile</span><span class="p">,</span> <span class="n">path</span><span class="p">)</span>
    <span class="n">profile</span><span class="o">.</span><span class="n">from_producer</span><span class="p">(</span><span class="n">producer</span><span class="p">)</span>
    <span class="c1"># Re-open the producer with the new profile to ensure it gets all the</span>
    <span class="c1"># properties from it and does not retain properties from the old profile.</span>
    <span class="n">producer</span> <span class="o">=</span> <span class="n">mlt</span><span class="o">.</span><span class="n">Producer</span><span class="p">(</span><span class="n">profile</span><span class="p">,</span> <span class="n">path</span><span class="p">)</span>
    <span class="k">return</span> <span class="p">(</span><span class="n">producer</span><span class="p">,</span> <span class="n">profile</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>I don’t have any clips in the resources folder that are other than 25 FPS, but this at leas shows that my code doesn’t crash.</p>
<p>I try to use it when generating proxies. The tests pass after my modification, so I try to run the application with my 100 FPS test clip and get this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ rm /tmp/*.mkv; rlvideo GX010802.MP4
...
  File &quot;/home/rick/rlvideo/rlvideolib/domain/source.py&quot;, line 59, in load_proxy
    assert self.length == native_producer.get_playtime()
</pre>
</div>
</div>
</div>
<p>This reveals a problem to me. In the Python structures for a <code>Source</code> we store its length. My intention was to store the number of frames in the file so that we can check that we make valid cuts:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">FileSource</span><span class="p">(</span><span class="n">namedtuple</span><span class="p">(</span><span class="s2">&quot;FileSource&quot;</span><span class="p">,</span> <span class="s2">&quot;id,path,length&quot;</span><span class="p">)):</span>

    <span class="o">...</span>

    <span class="k">def</span> <span class="nf">create_cut</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">start</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">end</span> <span class="o">&gt;</span> <span class="bp">self</span><span class="o">.</span><span class="n">length</span><span class="p">:</span>
            <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s2">&quot;Invalid cut.&quot;</span><span class="p">)</span>
        <span class="o">...</span>
</pre>
</div>
</div>
</div>
<p>But I think the <code>producer.get_playtime()</code> is not giving frames, but rather frames at the current frame rate. A quick test confirms that this is the case:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">&gt;&gt;&gt; profile = mlt.Profile()</span>
<span class="sd">&gt;&gt;&gt; profile.fps()</span>
<span class="sd">25.0</span>
<span class="sd">&gt;&gt;&gt; producer = mlt.Producer(profile, &quot;resources/one.mp4&quot;)</span>
<span class="sd">&gt;&gt;&gt; producer.get_playtime()</span>
<span class="sd">15</span>

<span class="sd">&gt;&gt;&gt; profile.set_frame_rate(50, 1)</span>
<span class="sd">&gt;&gt;&gt; profile.fps()</span>
<span class="sd">50.0</span>
<span class="sd">&gt;&gt;&gt; producer = mlt.Producer(profile, &quot;resources/one.mp4&quot;)</span>
<span class="sd">&gt;&gt;&gt; producer.get_playtime()</span>
<span class="sd">31</span>
<span class="sd">&quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<p>What to do?</p>
<p>I think it’s time for another <code>git stash</code> and clarify length.</p>
<h2 id="clarify-length">Clarify length</h2>
<p>I want to rename <code>FileSource.length</code> to <code>FileSource.number_of_frames_at_project_fps</code>. That is a really long name, but it is more clear about what it represents. I value that more now. After the refactoring, I might uncover other issues. Let’s see.</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m &#39;Rename FileSource.length to FileSource.number_of_frames_at_project_fps.&#39;
.................................................
----------------------------------------------------------------------
Ran 49 tests in 1.994s

OK
[main 8baae0a] Rename FileSource.length to FileSource.number_of_frames_at_project_fps.
 2 files changed, 10 insertions(+), 10 deletions(-)
</pre>
</div>
</div>
</div>
<p>The parameter is used in only one place outside <code>FileSource</code>:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">Transaction</span><span class="p">:</span>

    <span class="o">...</span>

    <span class="k">def</span> <span class="nf">add_clip</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="nb">id</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
        <span class="n">producer</span> <span class="o">=</span> <span class="n">mlt</span><span class="o">.</span><span class="n">Producer</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">project</span><span class="o">.</span><span class="n">profile</span><span class="p">,</span> <span class="n">path</span><span class="p">)</span>
        <span class="n">source</span> <span class="o">=</span> <span class="n">FileSource</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="nb">id</span><span class="p">,</span> <span class="n">path</span><span class="o">=</span><span class="n">path</span><span class="p">,</span> <span class="n">number_of_frames_at_project_fps</span><span class="o">=</span><span class="n">producer</span><span class="o">.</span><span class="n">get_playtime</span><span class="p">())</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">add_source</span><span class="p">(</span><span class="n">source</span><span class="p">,</span> <span class="n">source</span><span class="o">.</span><span class="n">number_of_frames_at_project_fps</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>I find it a little unclear the connection between a producer, its playtime, and the number of frames. Let’s see if we can make a helper to clarify this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">add_clip</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="nb">id</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
    <span class="n">source</span> <span class="o">=</span> <span class="n">FileSource</span><span class="p">(</span>
        <span class="nb">id</span><span class="o">=</span><span class="nb">id</span><span class="p">,</span>
        <span class="n">path</span><span class="o">=</span><span class="n">path</span><span class="p">,</span>
        <span class="n">number_of_frames_at_project_fps</span><span class="o">=</span><span class="n">FileInfo</span><span class="p">(</span>
            <span class="n">path</span>
        <span class="p">)</span><span class="o">.</span><span class="n">get_number_of_frames</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">project</span><span class="o">.</span><span class="n">profile</span><span class="p">)</span>
    <span class="p">)</span>
    <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">add_source</span><span class="p">(</span><span class="n">source</span><span class="p">,</span> <span class="n">source</span><span class="o">.</span><span class="n">number_of_frames_at_project_fps</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>And here is <code>FileInfo</code>:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">FileInfo</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">path</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">path</span> <span class="o">=</span> <span class="n">path</span>

    <span class="k">def</span> <span class="nf">get_number_of_frames</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">profile</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">mlt</span><span class="o">.</span><span class="n">Producer</span><span class="p">(</span><span class="n">profile</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">path</span><span class="p">)</span><span class="o">.</span><span class="n">get_playtime</span><span class="p">()</span>
</pre>
</div>
</div>
</div>
<p>This makes it a little more clear that the number of frames in a file depends on the profile.</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m &#39;Extract FileInfo.&#39;
.................................................
----------------------------------------------------------------------
Ran 49 tests in 1.982s

OK
[main fd89715] Extract FileInfo.
 1 file changed, 15 insertions(+), 2 deletions(-)
</pre>
</div>
</div>
</div>
<h2 id="change-project-fps-after">Change project FPS after?</h2>
<p>This brings up the question if we can change the project frame rate after we have added some clips.</p>
<p>My guess is not.</p>
<p>I remember reading that you should never do this in Kdenlive. Then weird things will happen.</p>
<p>I suppose we could try to re-calculate all positions and lengths when we change the frame rate. Or have the unit of measurement be time instead. But I think that will be hard since that is not what MLT works with, and also, it make sense to work in terms of frames.</p>
<p>I add a note in the source code about this and move on. This is probably fine.</p>
<h2 id="back">Back</h2>
<p>I <code>git stash pop</code> my earlier changes. Because of the rename, I have to resolve conflicts, but it goes well.</p>
<p>I then spot this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="n">native_producer</span><span class="p">,</span> <span class="n">native_profile</span> <span class="o">=</span> <span class="n">mlt_producer_with_native_profile</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">path</span><span class="p">)</span>
<span class="k">assert</span> <span class="bp">self</span><span class="o">.</span><span class="n">number_of_frames_at_project_fps</span> <span class="o">==</span> <span class="n">native_producer</span><span class="o">.</span><span class="n">get_playtime</span><span class="p">()</span>
</pre>
</div>
</div>
</div>
<p>With our new knowledge, this is obviously wrong. And the new name helps us see that. The native profile has the FPS of the clip whereas the project profile has the FPS of the project. Those might not be the same, so therefore the assertion is not always going to work.</p>
<p>I see some more usages for <code>FileInfo</code>, so I yet again stash my changes and update <code>FileInfo</code> to this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">FileInfo</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">path</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">path</span> <span class="o">=</span> <span class="n">path</span>

    <span class="k">def</span> <span class="nf">get_number_of_frames</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">profile</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_mlt_producer</span><span class="p">(</span><span class="n">profile</span><span class="p">)</span><span class="o">.</span><span class="n">get_playtime</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">get_mlt_producer</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">profile</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">mlt</span><span class="o">.</span><span class="n">Producer</span><span class="p">(</span><span class="n">profile</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">path</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>Commit:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m <span class="s1">&#39;Allow clearer code by extending FileInfo.&#39;</span>
.................................................
----------------------------------------------------------------------
Ran <span class="m">49</span> tests <span class="k">in</span> <span class="m">1</span>.996s

OK
<span class="o">[</span>main acb6702<span class="o">]</span> Allow clearer code by extending FileInfo.
 <span class="m">4</span> files changed, <span class="m">18</span> insertions<span class="o">(</span>+<span class="o">)</span>, <span class="m">11</span> deletions<span class="o">(</span>-<span class="o">)</span>
 create mode <span class="m">100644</span> rlvideolib/mlthelpers.py
</pre>
</div>
</div>
</div>
<h2 id="break">Break</h2>
<p>I’m having a hard time reasoning about proxy generation code. I decide it’s time for a break.</p>
<h2 id="another-strategy">Another strategy</h2>
<p>So far we have made no actual progress on improving proxy generation, but we have cleaned up the code in related areas and gained some new knowledge.</p>
<p>Since I was not able to fix the proxy generation in a small step, I decide to change approach and take much smaller steps.</p>
<p>Let’s see if we can refactor the <code>load_proxy</code> method and perhaps we might see more clearly how to modify it.</p>
<p>For reference, this is what it looks now:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">load_proxy</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">profile</span><span class="p">,</span> <span class="n">proxy_profile</span><span class="p">,</span> <span class="n">progress</span><span class="p">):</span>
    <span class="n">producer</span> <span class="o">=</span> <span class="n">mlt</span><span class="o">.</span><span class="n">Producer</span><span class="p">(</span><span class="n">profile</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">path</span><span class="p">)</span>
    <span class="k">assert</span> <span class="bp">self</span><span class="o">.</span><span class="n">number_of_frames_at_project_fps</span> <span class="o">==</span> <span class="n">producer</span><span class="o">.</span><span class="n">get_playtime</span><span class="p">()</span>
    <span class="n">chechsum</span> <span class="o">=</span> <span class="n">md5</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">path</span><span class="p">)</span>
    <span class="n">proxy_path</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;/tmp/</span><span class="si">{</span><span class="n">chechsum</span><span class="si">}</span><span class="s2">.mkv&quot;</span>
    <span class="n">proxy_tmp_path</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;/tmp/</span><span class="si">{</span><span class="n">chechsum</span><span class="si">}</span><span class="s2">.tmp.mkv&quot;</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">proxy_path</span><span class="p">):</span>
        <span class="n">consumer</span> <span class="o">=</span> <span class="n">mlt</span><span class="o">.</span><span class="n">Consumer</span><span class="p">(</span><span class="n">proxy_profile</span><span class="p">,</span> <span class="s2">&quot;avformat&quot;</span><span class="p">)</span>
        <span class="n">consumer</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;target&quot;</span><span class="p">,</span> <span class="n">proxy_tmp_path</span><span class="p">)</span>
        <span class="n">consumer</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;vcodec&quot;</span><span class="p">,</span> <span class="s2">&quot;mjpeg&quot;</span><span class="p">)</span>
        <span class="n">consumer</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;acodec&quot;</span><span class="p">,</span> <span class="s2">&quot;pcm_s16le&quot;</span><span class="p">)</span>
        <span class="n">consumer</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;qscale&quot;</span><span class="p">,</span> <span class="s2">&quot;3&quot;</span><span class="p">)</span>
        <span class="n">consumer</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">producer</span><span class="p">)</span>
        <span class="n">consumer</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
        <span class="k">while</span> <span class="n">consumer</span><span class="o">.</span><span class="n">is_stopped</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">progress</span><span class="p">(</span><span class="n">producer</span><span class="o">.</span><span class="n">position</span><span class="p">()</span><span class="o">/</span><span class="n">producer</span><span class="o">.</span><span class="n">get_playtime</span><span class="p">())</span>
            <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>
        <span class="n">os</span><span class="o">.</span><span class="n">rename</span><span class="p">(</span><span class="n">proxy_tmp_path</span><span class="p">,</span> <span class="n">proxy_path</span><span class="p">)</span>
    <span class="n">producer</span> <span class="o">=</span> <span class="n">mlt</span><span class="o">.</span><span class="n">Producer</span><span class="p">(</span><span class="n">profile</span><span class="p">,</span> <span class="n">proxy_path</span><span class="p">)</span>
    <span class="k">assert</span> <span class="bp">self</span><span class="o">.</span><span class="n">number_of_frames_at_project_fps</span> <span class="o">==</span> <span class="n">producer</span><span class="o">.</span><span class="n">get_playtime</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">producer</span>
</pre>
</div>
</div>
</div>
<p>Let’s try to extract <code>get_file_info</code> (which can then also be used in another place):</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">get_file_info</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">profile</span><span class="p">):</span>
    <span class="n">file_info</span> <span class="o">=</span> <span class="n">FileInfo</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">path</span><span class="p">)</span>
    <span class="k">assert</span> <span class="bp">self</span><span class="o">.</span><span class="n">number_of_frames_at_project_fps</span> <span class="o">==</span> <span class="n">file_info</span><span class="o">.</span><span class="n">get_number_of_frames</span><span class="p">(</span><span class="n">profile</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">file_info</span>
</pre>
</div>
</div>
</div>
<p>In <code>load_proxy</code> we can use it like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="gd">-        producer = mlt.Producer(profile, self.path)</span>
<span class="gd">-        assert self.number_of_frames_at_project_fps == producer.get_playtime()</span>
<span class="gi">+        file_info = self.get_file_info(profile)</span>
         chechsum = md5(self.path)
         proxy_path = f&quot;/tmp/{chechsum}.mkv&quot;
         proxy_tmp_path = f&quot;/tmp/{chechsum}.tmp.mkv&quot;
         if not os.path.exists(proxy_path):
<span class="gi">+            producer = file_info.get_mlt_producer(profile)</span>
             consumer = mlt.Consumer(proxy_profile, &quot;avformat&quot;)
             consumer.set(&quot;target&quot;, proxy_tmp_path)
             consumer.set(&quot;vcodec&quot;, &quot;mjpeg&quot;)
</pre>
</div>
</div>
</div>
<p>This ensures that the file has the same length as we have recorded.</p>
<p>Let’s extract <code>run_consumer</code>:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">run_consumer</span><span class="p">(</span><span class="n">consumer</span><span class="p">,</span> <span class="n">producer</span><span class="p">,</span> <span class="n">progress</span><span class="p">):</span>
    <span class="n">consumer</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">producer</span><span class="p">)</span>
    <span class="n">consumer</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
    <span class="k">while</span> <span class="n">consumer</span><span class="o">.</span><span class="n">is_stopped</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="n">progress</span><span class="p">(</span><span class="n">producer</span><span class="o">.</span><span class="n">position</span><span class="p">()</span><span class="o">/</span><span class="n">producer</span><span class="o">.</span><span class="n">get_playtime</span><span class="p">())</span>
        <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>I forgot to commit last refactoring. Let’s do that now:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m &#39;Extract get_file_info and run_consumer.&#39;
.................................................
----------------------------------------------------------------------
Ran 49 tests in 1.983s

OK
[main 49df31e] Extract get_file_info and run_consumer.
 2 files changed, 20 insertions(+), 11 deletions(-)
</pre>
</div>
</div>
</div>
<p>There is a test for proxy generation, but it does not run fully if the proxy file already exists. I add a testing flag that we can set to True in tests. I’m not sure I like this, but it will help us when refactoring this method:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">load_proxy</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">profile</span><span class="p">,</span> <span class="n">proxy_profile</span><span class="p">,</span> <span class="n">progress</span><span class="p">,</span> <span class="n">testing</span><span class="o">=</span><span class="kc">False</span><span class="p">):</span>
    <span class="o">...</span>
    <span class="n">proxy_tmp_path</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;/tmp/</span><span class="si">{</span><span class="n">chechsum</span><span class="si">}</span><span class="s2">.tmp.mkv&quot;</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">proxy_path</span><span class="p">)</span> <span class="ow">or</span> <span class="n">testing</span><span class="p">:</span>
        <span class="n">producer</span> <span class="o">=</span> <span class="n">file_info</span><span class="o">.</span><span class="n">get_mlt_producer</span><span class="p">(</span><span class="n">profile</span><span class="p">)</span>
        <span class="o">...</span>
</pre>
</div>
</div>
</div>
<h2 id="break-1">Break</h2>
<p>I keep trying to clean up the proxy loading code but I just can’t seem to find the right abstractions. Furthermore, I get segfaults and all kinds of strange behavior from MLT. This demotivates me. I force myself to take a break.</p>
<h2 id="revert">Revert</h2>
<p>Since MLT is giving me all kinds of weird behavior, I think that perhaps the <code>get_file_info</code> abstraction was wrong. Maybe it creates more trouble at the moment. Let’s see if we can inline some of it instead.</p>
<p>We get this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="gu">@@ -65,12 +65,11 @@ class FileSource(namedtuple(&quot;FileSource&quot;, &quot;id,path,number_of_frames_at_project_f</span>
         &quot;&quot;&quot;
         # TODO: generate proxy with same profile as source clip (same colorspace, etc,
         # but with smaller size)
<span class="gd">-        file_info = self.get_file_info(profile)</span>
<span class="gi">+        producer = self.validate_producer(mlt.Producer(profile, self.path))</span>
         chechsum = md5(self.path)
         proxy_path = f&quot;/tmp/{chechsum}.mkv&quot;
         proxy_tmp_path = f&quot;/tmp/{chechsum}.tmp.mkv&quot;
         if not os.path.exists(proxy_path) or testing:
<span class="gd">-            producer = file_info.get_mlt_producer(profile)</span>
             consumer = mlt.Consumer(proxy_profile, &quot;avformat&quot;)
             consumer.set(&quot;target&quot;, proxy_tmp_path)
             consumer.set(&quot;vcodec&quot;, &quot;mjpeg&quot;)
<span class="gu">@@ -78,14 +77,11 @@ class FileSource(namedtuple(&quot;FileSource&quot;, &quot;id,path,number_of_frames_at_project_f</span>
             consumer.set(&quot;qscale&quot;, &quot;3&quot;)
             run_consumer(consumer, producer, progress)
             os.rename(proxy_tmp_path, proxy_path)
<span class="gd">-        producer = mlt.Producer(profile, proxy_path)</span>
<span class="gd">-        assert self.number_of_frames_at_project_fps == producer.get_playtime()</span>
<span class="gd">-        return producer</span>
<span class="gi">+        return self.validate_producer(mlt.Producer(profile, proxy_path))</span>
</pre>
</div>
</div>
</div>
<p>Where <code>validate_producer</code> is this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">validate_producer</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">producer</span><span class="p">):</span>
    <span class="k">assert</span> <span class="n">producer</span><span class="o">.</span><span class="n">get_playtime</span><span class="p">()</span> <span class="o">==</span> <span class="bp">self</span><span class="o">.</span><span class="n">number_of_frames_at_project_fps</span>
    <span class="k">return</span> <span class="n">producer</span>
</pre>
</div>
</div>
</div>
<p>Commit:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m &#39;Inline some of FileInfo.&#39;
.................................................
----------------------------------------------------------------------
Ran 49 tests in 2.493s

OK
[main c47ea68] Inline some of FileInfo.
 2 files changed, 7 insertions(+), 14 deletions(-)
</pre>
</div>
</div>
</div>
<p>Then finally I can make this relatively small change:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="gu">@@ -70,7 +70,12 @@ class FileSource(namedtuple(&quot;FileSource&quot;, &quot;id,path,number_of_frames_at_project_f</span>
         proxy_path = f&quot;/tmp/{chechsum}.mkv&quot;
         proxy_tmp_path = f&quot;/tmp/{chechsum}.tmp.mkv&quot;
         if not os.path.exists(proxy_path) or testing:
<span class="gd">-            consumer = mlt.Consumer(proxy_profile, &quot;avformat&quot;)</span>
<span class="gi">+            p = mlt.Profile()</span>
<span class="gi">+            p.from_producer(producer)</span>
<span class="gi">+            p.set_width(proxy_profile.width())</span>
<span class="gi">+            p.set_height(proxy_profile.height())</span>
<span class="gi">+            producer = mlt.Producer(p, self.path)</span>
<span class="gi">+            consumer = mlt.Consumer(p, &quot;avformat&quot;)</span>
             consumer.set(&quot;target&quot;, proxy_tmp_path)
             consumer.set(&quot;vcodec&quot;, &quot;mjpeg&quot;)
             consumer.set(&quot;acodec&quot;, &quot;pcm_s16le&quot;)
</pre>
</div>
</div>
</div>
<p>With this, proxy clips now retain their FPS:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ffprobe /tmp/de63dcd626503cbde6f3da76b0af3e8c.mkv 2&gt;&amp;1 | grep fps
  Stream #0:0: Video: mjpeg (Baseline), yuvj420p(pc, bt470bg/bt709/bt709), 960x540 [SAR 1:1 DAR 16:9], 100 fps, 100 tbr, 1k tbn, 1k tbc (default)
</pre>
</div>
</div>
</div>
<p>It seems to work fine in the application as well.</p>
<p>Let’s commit this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m &#39;Produce proxy clips with native profile to preserve FPS.&#39;
.................................................
----------------------------------------------------------------------
Ran 49 tests in 2.560s

OK
[main b69cfb7] Produce proxy clips with native profile to preserve FPS.
 1 file changed, 6 insertions(+), 3 deletions(-)
</pre>
</div>
</div>
</div>
<h2 id="summary">Summary</h2>
<p>This session turned out to be rather painful. Every time I do something that involves MLT, things get painful. That tells med to isolate as much of the MLT code as possible. It also tells me that I need to learn MLT better to understand issues.</p>
<p>But segfaults worry me a bit. When working in Python, we should really not be getting segfaults. Is there something wrong in the Python binding for MLT?</p>
<p>I’m sure we have to revisit proxy generation at some point. But I’m done for now.</p>
]]></summary>
</entry>
<entry>
    <title>DevLog 003: Clarify GUI separation</title>
    <link href="http://rickardlindberg.me/writing/devlog-003-clarify-gui-separation/" />
    <id>http://rickardlindberg.me/writing/devlog-003-clarify-gui-separation/</id>
    <published>2023-07-29T00:00:00Z</published>
    <updated>2023-07-29T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>DevLog 003: Clarify GUI separation</h1>

<p><em>Published on 29 July 2023.</em></p>

<p>In the <a href="/projects/rlvideo/index.html">video editor</a>, there is the idea that we want to isolate the GTK code and have as few classes as possible depend on it. However, this idea is not clearly expressed in the code. So new readers of the code base will not necessarily understand that this separation is intentional and something that we want to do.</p>
<p>In this episode I want to refactor the code to make that more clear.</p>
<h2 id="current-state">Current state</h2>
<p>The current layout of the Python files looks like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>.
├── rlvideolib
│   ├── asciicanvas.py
│   ├── debug.py
│   ├── domain
│   │   ├── cut.py
│   │   ├── __init__.py
│   │   ├── project.py
│   │   ├── region.py
│   │   ├── section.py
│   │   └── source.py
│   ├── events.py
│   ├── graphics
│   │   ├── __init__.py
│   │   └── rectangle.py
│   ├── __init__.py
│   ├── jobs.py
│   └── testing.py
└── rlvideo.py
</pre>
</div>
</div>
</div>
<p>There is the “main” file <code>rlvideo.py</code> and the <code>rlvideolib</code> package.</p>
<p>The main file is sort of the default place where new things go that don’t fit anywhere else. It currently has a mix of classes with different areas of responsibility:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">FakeGui</span><span class="p">:</span>
<span class="k">class</span> <span class="nc">GtkGui</span><span class="p">:</span>
<span class="k">class</span> <span class="nc">MenuItem</span><span class="p">(</span><span class="n">namedtuple</span><span class="p">(</span><span class="s2">&quot;MenuItem&quot;</span><span class="p">,</span> <span class="s2">&quot;label,action&quot;</span><span class="p">)):</span>
<span class="k">class</span> <span class="nc">App</span><span class="p">:</span>
<span class="k">class</span> <span class="nc">MltPlayer</span><span class="p">:</span>
<span class="k">class</span> <span class="nc">Timeline</span><span class="p">:</span>
<span class="k">class</span> <span class="nc">Scrollbar</span><span class="p">(</span><span class="n">namedtuple</span><span class="p">(</span><span class="s2">&quot;Scrollbar&quot;</span><span class="p">,</span> <span class="s2">&quot;content_length,one_length_in_pixels,ui_size,content_desired_start&quot;</span><span class="p">)):</span>
</pre>
</div>
</div>
</div>
<p>Some of these classes deal with GTK. Others with GUI code that does not depend on GTK directly.</p>
<p>I would like to create a new <code>rlvideolib.gui</code> package that has three modules:</p>
<ul>
<li>gtk</li>
<li>generic</li>
<li>testing</li>
</ul>
<h2 id="testing">Testing</h2>
<p>I extract a new testing module like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ mkdir rlvideolib/gui
$ touch rlvideolib/gui/__init__.py
$ touch rlvideolib/gui/testing.py
</pre>
</div>
</div>
</div>
<p>Then I move the <code>FakeGui</code> class to that module and also rename it to <code>TestGui</code> as I think that is a more descriptive name. I also make sure to import it from <code>rlvideo.py</code>.</p>
<p>Let’s commit:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m <span class="s1">&#39;Extract rlvideolib.gui.testing.&#39;</span>
................................................
----------------------------------------------------------------------
Ran <span class="m">48</span> tests <span class="k">in</span> <span class="m">1</span>.931s

OK
<span class="o">[</span>main 91b63c2<span class="o">]</span> Extract rlvideolib.gui.testing.
 <span class="m">4</span> files changed, <span class="m">14</span> insertions<span class="o">(</span>+<span class="o">)</span>, <span class="m">12</span> deletions<span class="o">(</span>-<span class="o">)</span>
 create mode <span class="m">100644</span> rlvideolib/gui/__init__.py
 create mode <span class="m">100644</span> rlvideolib/gui/testing.py
</pre>
</div>
</div>
</div>
<h2 id="generic">Generic</h2>
<p>Let’s do the same thing for generic GUI code:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ touch rlvideolib/gui/generic.py
</pre>
</div>
</div>
</div>
<p>I move over the following classes:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">Timeline</span><span class="p">:</span>
<span class="k">class</span> <span class="nc">Scrollbar</span><span class="p">(</span><span class="n">namedtuple</span><span class="p">(</span><span class="s2">&quot;Scrollbar&quot;</span><span class="p">,</span> <span class="s2">&quot;content_length,one_length_in_pixels,ui_size,content_desired_start&quot;</span><span class="p">)):</span>
<span class="k">class</span> <span class="nc">MenuItem</span><span class="p">(</span><span class="n">namedtuple</span><span class="p">(</span><span class="s2">&quot;MenuItem&quot;</span><span class="p">,</span> <span class="s2">&quot;label,action&quot;</span><span class="p">)):</span>
</pre>
</div>
</div>
</div>
<p>If we look at the imports for the generic GUI module, we see this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">namedtuple</span>

<span class="kn">import</span> <span class="nn">cairo</span>
<span class="kn">import</span> <span class="nn">mlt</span>

<span class="kn">from</span> <span class="nn">rlvideolib.debug</span> <span class="kn">import</span> <span class="n">timeit</span>
<span class="kn">from</span> <span class="nn">rlvideolib.domain.project</span> <span class="kn">import</span> <span class="n">Project</span>
<span class="kn">from</span> <span class="nn">rlvideolib.graphics.rectangle</span> <span class="kn">import</span> <span class="n">RectangleMap</span>
<span class="kn">from</span> <span class="nn">rlvideolib.graphics.rectangle</span> <span class="kn">import</span> <span class="n">Rectangle</span>
<span class="kn">from</span> <span class="nn">rlvideolib.events</span> <span class="kn">import</span> <span class="n">Event</span>
<span class="kn">from</span> <span class="nn">rlvideolib.domain.region</span> <span class="kn">import</span> <span class="n">Region</span>
<span class="kn">from</span> <span class="nn">rlvideolib.gui.testing</span> <span class="kn">import</span> <span class="n">TestGui</span>
<span class="kn">from</span> <span class="nn">rlvideolib.domain.cut</span> <span class="kn">import</span> <span class="n">Cut</span>
</pre>
</div>
</div>
</div>
<p>We can see that it depends on Cairo. That is ok. The drawing of generic GUI components is done with Cairo. I don’t see as big a reason to abstract that compared to GTK. Cairo can also most likely be used with other GUI frameworks. The important thing here is that there is no import of GTK.</p>
<p>Let’s commit this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m <span class="s1">&#39;Extract timelinelib.gui.generic.&#39;</span>
................................................
----------------------------------------------------------------------
Ran <span class="m">48</span> tests <span class="k">in</span> <span class="m">1</span>.937s

OK
<span class="o">[</span>main e392173<span class="o">]</span> Extract timelinelib.gui.generic.
 <span class="m">3</span> files changed, <span class="m">220</span> insertions<span class="o">(</span>+<span class="o">)</span>, <span class="m">819</span> deletions<span class="o">(</span>-<span class="o">)</span>
 rewrite rlvideo.py <span class="o">(</span><span class="m">64</span>%<span class="o">)</span>
 copy rlvideo.py <span class="o">=</span>&gt; rlvideolib/gui/generic.py <span class="o">(</span><span class="m">65</span>%<span class="o">)</span>
</pre>
</div>
</div>
</div>
<p>We should probably also run the application to see that I didn’t mess up anything major. I get this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>Traceback (most recent call last):
  File &quot;/home/rick/rlvideo/rlvideo.py&quot;, line 213, in &lt;module&gt;
    App().run()
  File &quot;/home/rick/rlvideo/rlvideo.py&quot;, line 156, in run
    self.timeline = Timeline(project=self.project, player=mlt_player)
NameError: name &#39;Timeline&#39; is not defined
</pre>
</div>
</div>
</div>
<p>Woopsie.</p>
<p>I add the missing import to <code>rlvideo.py</code>:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="kn">from</span> <span class="nn">rlvideolib.gui.generic</span> <span class="kn">import</span> <span class="n">Timeline</span>
</pre>
</div>
</div>
</div>
<p>If we want to catch this error in the test suite, we must run the whole application which incudes starting the GTK main loop.</p>
<p>I’m thinking that we can separate the construction of the GUI from the actual main loop, something like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">App</span><span class="p">:</span>

    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">init</span><span class="p">()</span>
        <span class="n">Gtk</span><span class="o">.</span><span class="n">main</span><span class="p">()</span>

    <span class="o">...</span>
</pre>
</div>
</div>
</div>
<p>And then we can run <code>App().init()</code> in a test to make sure that construction of the GUI works.</p>
<p>I try this, but run into all kinds of issues.</p>
<p>I decide to leave this as is for now.</p>
<h2 id="gui">GUI</h2>
<p>All classes that are left in <code>rlvideo.py</code> are now related to GTK. Let’s move them to its own module, leaving only this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="kn">from</span> <span class="nn">rlvideolib.gui.gtk</span> <span class="kn">import</span> <span class="n">App</span>

<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&quot;__main__&quot;</span><span class="p">:</span>
    <span class="n">App</span><span class="p">()</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</pre>
</div>
</div>
</div>
<p>Let’s commit:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m &#39;Extract timelinelib.gui.gtk.&#39;
................................................
----------------------------------------------------------------------
Ran 48 tests in 1.941s

OK
[main c4702cc] Extract timelinelib.gui.gtk.
 3 files changed, 5 insertions(+), 217 deletions(-)
 rewrite rlvideo.py (99%)
 copy rlvideo.py =&gt; rlvideolib/gui/gtk.py (99%)
</pre>
</div>
</div>
</div>
<h2 id="summary">Summary</h2>
<p>The new structure looks like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="n">rlvideolib</span><span class="o">/</span><span class="n">gui</span><span class="o">/</span><span class="n">testing</span><span class="o">.</span><span class="n">py</span>
<span class="mi">1</span><span class="p">:</span><span class="k">class</span> <span class="nc">TestGui</span><span class="p">:</span>

<span class="n">rlvideolib</span><span class="o">/</span><span class="n">gui</span><span class="o">/</span><span class="n">generic</span><span class="o">.</span><span class="n">py</span>
<span class="mi">17</span><span class="p">:</span><span class="k">class</span> <span class="nc">Timeline</span><span class="p">:</span>
<span class="mi">312</span><span class="p">:</span><span class="k">class</span> <span class="nc">Scrollbar</span><span class="p">(</span><span class="n">namedtuple</span><span class="p">(</span><span class="s2">&quot;Scrollbar&quot;</span><span class="p">,</span> <span class="s2">&quot;content_length,one_length_in_pixels,ui_size,content_desired_start&quot;</span><span class="p">)):</span>
<span class="mi">400</span><span class="p">:</span><span class="k">class</span> <span class="nc">MenuItem</span><span class="p">(</span><span class="n">namedtuple</span><span class="p">(</span><span class="s2">&quot;MenuItem&quot;</span><span class="p">,</span> <span class="s2">&quot;label,action&quot;</span><span class="p">)):</span>

<span class="n">rlvideolib</span><span class="o">/</span><span class="n">gui</span><span class="o">/</span><span class="n">gtk</span><span class="o">.</span><span class="n">py</span>
<span class="mi">16</span><span class="p">:</span><span class="k">class</span> <span class="nc">GtkGui</span><span class="p">:</span>
<span class="mi">41</span><span class="p">:</span><span class="k">class</span> <span class="nc">App</span><span class="p">:</span>
<span class="mi">163</span><span class="p">:</span><span class="k">class</span> <span class="nc">MltPlayer</span><span class="p">:</span>
</pre>
</div>
</div>
</div>
<p>I think this structure tells the reader that there is a clear separation between GTK related GUI code and generic GUI code and that this separation is intentional.</p>
<p>The <code>MltPlayer</code> that we see in the GTK module has only very little to do with GTK. Most of it just works with an MLT producer. GTK is needed for the embedding of the video display from the MLT consumer inside a GTK window.</p>
<p>I think part of <code>MltPlayer</code> should probably be extracted to a new class and be put in the generic GUI module or somewhere else. This refactoring to separate the different GUI modules revealed that to me. I find that is often the case. You make one refactoring to clarify something and you discover something else that is unclear.</p>
]]></summary>
</entry>
<entry>
    <title>DevLog 002: Change mix strategy for cuts in GUI</title>
    <link href="http://rickardlindberg.me/writing/devlog-002-selecting-cut-type-in-gui/" />
    <id>http://rickardlindberg.me/writing/devlog-002-selecting-cut-type-in-gui/</id>
    <published>2023-07-29T00:00:00Z</published>
    <updated>2023-07-29T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>DevLog 002: Change mix strategy for cuts in GUI</h1>

<p><em>Published on 29 July 2023.</em></p>

<p>In the <a href="/writing/devlog-001-jcut-lcut/index.html">previous devlog</a> we worked on adding the concept of a cut type to a clip in the <a href="/projects/rlvideo/index.html">video editor</a>. That is, how should two overlapping clips be mixed together? Which one should be on top? Should it be a <a href="https://en.wikipedia.org/wiki/J_cut">J-cut</a>?</p>
<p>I’ve since added support for two types of cuts: over and under. So we can (programmatically) set this property on clips and they will render in the correct order.</p>
<p>The default cut is under so that later clips will be mixed under the previous clips:</p>
<p>
<center>
<img src="under.png" title="fig:" alt="Default under cut." />
</center>
</p>
<p>There is not yet a way to change this default from the GUI, so that’s what we will work on in this episode.</p>
<h2 id="aside-clips-and-cuts">Aside: clips and cuts</h2>
<p>When writing about this and when looking at the source code, I’m a bit confused by the terminology. I write about clips och cuts, but in the source code there is no concept of a clip, only a cut and a source.</p>
<p>A source represents a file on disk or some generator of frames. A cut represents a region of a source.</p>
<p>A cut has a property called <code>cut</code> which is how to mix this cut with the previous cut on the timeline. That confuses things further.</p>
<p>Let’s rename it to <code>mix_strategy</code> to lessen the confusion.</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m <span class="s1">&#39;Rename Cut.cut to Cut.mix_strategy.&#39;</span>
...............................................
----------------------------------------------------------------------
Ran <span class="m">47</span> tests <span class="k">in</span> <span class="m">1</span>.918s

OK
<span class="o">[</span>main 425909a<span class="o">]</span> Rename Cut.cut to Cut.mix_strategy.
 <span class="m">1</span> file changed, <span class="m">11</span> insertions<span class="o">(</span>+<span class="o">)</span>, <span class="m">11</span> deletions<span class="o">(</span>-<span class="o">)</span>
</pre>
</div>
</div>
</div>
<p>That’s better.</p>
<h2 id="two-possible-ways">Two possible ways</h2>
<p>I can think of two possible ways to set the mix strategy for a cut in the GUI. Either we can right click on a cut and have a context menu pop up where we can select the mix strategy. Or we can select a clip and have a “set mix strategy” operation applied to the selected clip.</p>
<p>Currently, there is no concept of a selected clip. You can’t select anything. But there is a concept of clicking and dragging a clip. Therefore I think a context menu is easier to get started with.</p>
<h2 id="reviewing-mouse-click-code">Reviewing mouse click code</h2>
<p>Let’s look at how click and drag is handled today.</p>
<p>I see this GTK event is connected:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="n">timeline</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s2">&quot;button-press-event&quot;</span><span class="p">,</span> <span class="n">timeline_button</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>And <code>timeline_button</code> is defined like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">timeline_button</span><span class="p">(</span><span class="n">widget</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">timeline</span><span class="o">.</span><span class="n">mouse_down</span><span class="p">(</span><span class="o">*</span><span class="n">timeline</span><span class="o">.</span><span class="n">translate_coordinates</span><span class="p">(</span>
        <span class="n">main_window</span><span class="p">,</span>
        <span class="n">event</span><span class="o">.</span><span class="n">x</span><span class="p">,</span>
        <span class="n">event</span><span class="o">.</span><span class="n">y</span>
    <span class="p">))</span>
</pre>
</div>
</div>
</div>
<p>This code does not seem to distinguish between left and right mouse button click. Interesting.</p>
<p>Does that mean that we can move a cut on the timeline by clicking and dragging with the right mouse button? I try it in the application. And it indeed works. That was really not my intention. Let’s see if we can fix that.</p>
<p>I add a debug print to see what properties of the event might indicate the button:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">timeline_button</span><span class="p">(</span><span class="n">widget</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>
    <span class="nb">print</span><span class="p">(</span><span class="nb">dir</span><span class="p">(</span><span class="n">event</span><span class="p">))</span>
    <span class="o">...</span>
</pre>
</div>
</div>
</div>
<p>I find this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>[..., &#39;button&#39;, ..., &#39;get_button&#39;, ...]
</pre>
</div>
</div>
</div>
<p>Let’s try this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">timeline_button</span><span class="p">(</span><span class="n">widget</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">event</span><span class="o">.</span><span class="n">button</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>When I press the left button, it prints 1, and when I press the right button, it prints 3. There must be some constants for these. I search the GTK documentation and find <a href="https://docs.gtk.org/gdk3/struct.EventButton.html">this</a>:</p>
<blockquote>
<p>The button which was pressed or released, numbered from 1 to 5. Normally button 1 is the left mouse button, 2 is the middle button, and 3 is the right button.</p>
</blockquote>
<p>Maybe there are no constants?</p>
<p>Let’s codify our new knowledge like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">timeline_button</span><span class="p">(</span><span class="n">widget</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">event</span><span class="o">.</span><span class="n">button</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">timeline</span><span class="o">.</span><span class="n">left_mouse_down</span><span class="p">(</span><span class="o">*</span><span class="n">timeline</span><span class="o">.</span><span class="n">translate_coordinates</span><span class="p">(</span>
            <span class="n">main_window</span><span class="p">,</span>
            <span class="n">event</span><span class="o">.</span><span class="n">x</span><span class="p">,</span>
            <span class="n">event</span><span class="o">.</span><span class="n">y</span>
        <span class="p">))</span>
    <span class="k">elif</span> <span class="n">event</span><span class="o">.</span><span class="n">button</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">timeline</span><span class="o">.</span><span class="n">right_mouse_down</span><span class="p">(</span><span class="o">*</span><span class="n">timeline</span><span class="o">.</span><span class="n">translate_coordinates</span><span class="p">(</span>
            <span class="n">main_window</span><span class="p">,</span>
            <span class="n">event</span><span class="o">.</span><span class="n">x</span><span class="p">,</span>
            <span class="n">event</span><span class="o">.</span><span class="n">y</span>
        <span class="p">))</span>
</pre>
</div>
</div>
</div>
<p>We rename the previous <code>mouse_down</code> to <code>left_mouse_down</code> and add a new empty method for <code>right_mouse_down</code>.</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m <span class="s1">&#39;Timeline receives both left and right mouse down events.&#39;</span>
...............................................
----------------------------------------------------------------------
Ran <span class="m">47</span> tests <span class="k">in</span> <span class="m">1</span>.923s

OK
<span class="o">[</span>main 0fc6fb1<span class="o">]</span> Timeline receives both left and right mouse down events.
 <span class="m">1</span> file changed, <span class="m">17</span> insertions<span class="o">(</span>+<span class="o">)</span>, <span class="m">7</span> deletions<span class="o">(</span>-<span class="o">)</span>
</pre>
</div>
</div>
</div>
<h2 id="review">Review</h2>
<p>It’s a little unnclear to me what the translation of coordinates are doing. I think the coordinates received in the event are relative to the whole GTK window and the timeline expects coordinates relative to itself.</p>
<p>I don’t really want to focus on this now, but I add a TODO in the code that I should clarify this.</p>
<p>In this project I’ve tried to keep my “backlog” in the source code in the form of TODO comments. Some I will probably never get back to, and others will serve as a reminder. But so far I kind of like this approach.</p>
<h2 id="separation-of-timeline-and-gtk">Separation of timeline and GTK</h2>
<p>The timeline component is unaware of GTK. So when it receives the right mouse down event, it can find the cut that we clicked on, but it doesn’t have the ability to show a context menu, because it needs to use GTK for that.</p>
<p>This separation is intentional. I’ve tried to isolate GTK code to the outermost layer to keep the inner layers free from those details and make them easier to test.</p>
<p>But this presents a problem now.</p>
<p>The only solution that comes to mind if we want to maintain this separation is to create some kind of abstraction. Something like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">GtkGuiAbstraction</span><span class="p">:</span>

    <span class="k">def</span> <span class="nf">show_context_menu</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">generic_menu_description</span><span class="p">):</span>
        <span class="c1"># Create GTK context menu from generic_menu_description</span>
</pre>
</div>
</div>
</div>
<p>And then pass that to the timeline so that it can do something like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">right_mouse_down</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">gui</span><span class="o">.</span><span class="n">show_context_menu</span><span class="p">([</span>
        <span class="n">MenuItem</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="s2">&quot;over&quot;</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="k">lambda</span><span class="p">:</span> <span class="o">...</span><span class="p">),</span>
        <span class="n">MenuItem</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="s2">&quot;under&quot;</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="k">lambda</span><span class="p">:</span> <span class="o">...</span><span class="p">),</span>
    <span class="p">])</span>
</pre>
</div>
</div>
</div>
<p>I’m not sure what I think about this. On the one hand it feels like a complex extra layer. On the other hand I really want to isolate GTK code. My experience tells me that GUI code can easily leak in to every part of the application and it just makes everything more messy.</p>
<p>I will try to create the simplest possible solution of this design and see what it feels like.</p>
<h2 id="gtk-gui-abstraction">GTK GUI abstraction</h2>
<p>Let’s start with a test:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">GtkGui</span><span class="p">:</span>

    <span class="k">def</span> <span class="nf">show_context_menu</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">menu</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">        &gt;&gt;&gt; GtkGui().show_context_menu([</span>
<span class="sd">        ...     MenuItem(label=&quot;over&quot;, action=lambda: print(&quot;over&quot;)),</span>
<span class="sd">        ...     MenuItem(label=&quot;under&quot;, action=lambda: print(&quot;under&quot;)),</span>
<span class="sd">        ... ])</span>
<span class="sd">        &quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<p>This fails with</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>NameError: name &#39;MenuItem&#39; is not defined
</pre>
</div>
</div>
</div>
<p>I define <code>MenuItem</code> and we are green:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">MenuItem</span><span class="p">(</span><span class="n">namedtuple</span><span class="p">(</span><span class="s2">&quot;MenuItem&quot;</span><span class="p">,</span> <span class="s2">&quot;label,action&quot;</span><span class="p">)):</span>
    <span class="k">pass</span>
</pre>
</div>
</div>
</div>
<p>Let’s commit:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m <span class="s1">&#39;The start of GtkGui and its show_context_menu method.&#39;</span>
................................................
----------------------------------------------------------------------
Ran <span class="m">48</span> tests <span class="k">in</span> <span class="m">1</span>.923s

OK
<span class="o">[</span>main e64b93e<span class="o">]</span> The start of GtkGui and its show_context_menu method.
 <span class="m">1</span> file changed, <span class="m">13</span> insertions<span class="o">(</span>+<span class="o">)</span>
</pre>
</div>
</div>
</div>
<p>The test so far does not assert anything. It just checks that the code does not crash. But that is enough to experiment with the GTK API. Let’s try to create the menu and the test will tell is if we use the GKT API wrong.</p>
<p>I try this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="n">menu</span> <span class="o">=</span> <span class="n">gtk</span><span class="o">.</span><span class="n">Menu</span><span class="p">()</span>
</pre>
</div>
</div>
</div>
<p>Test immediately fails:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>NameError: name &#39;gtk&#39; is not defined
</pre>
</div>
</div>
</div>
<p>Ah, it should be <code>Gtk</code> I see in the imports at the top of the file. Thank you test.</p>
<p>I search the web for examples how to show a context menu in GTK. After a bit of reading and trying, I end up with this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">show_context_menu</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">menu</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">    &gt;&gt;&gt; event = namedtuple(&quot;FakeEvent&quot;, &quot;button,time&quot;)(3, 0)</span>
<span class="sd">    &gt;&gt;&gt; GtkGui(event).show_context_menu([</span>
<span class="sd">    ...     MenuItem(label=&quot;over&quot;, action=lambda: print(&quot;over&quot;)),</span>
<span class="sd">    ...     MenuItem(label=&quot;under&quot;, action=lambda: print(&quot;under&quot;)),</span>
<span class="sd">    ... ])</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="k">def</span> <span class="nf">create_gtk_handler</span><span class="p">(</span><span class="n">menu_item</span><span class="p">):</span>
        <span class="k">def</span> <span class="nf">handler</span><span class="p">(</span><span class="n">widget</span><span class="p">):</span>
            <span class="n">menu_item</span><span class="o">.</span><span class="n">action</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">handler</span>
    <span class="n">gtk_menu</span> <span class="o">=</span> <span class="n">Gtk</span><span class="o">.</span><span class="n">Menu</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">menu_item</span> <span class="ow">in</span> <span class="n">menu</span><span class="p">:</span>
        <span class="n">gtk_menu_item</span> <span class="o">=</span> <span class="n">Gtk</span><span class="o">.</span><span class="n">MenuItem</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="n">menu_item</span><span class="o">.</span><span class="n">label</span><span class="p">)</span>
        <span class="n">gtk_menu_item</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s2">&quot;activate&quot;</span><span class="p">,</span> <span class="n">create_gtk_handler</span><span class="p">(</span><span class="n">menu_item</span><span class="p">))</span>
        <span class="n">gtk_menu_item</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
        <span class="n">gtk_menu</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">gtk_menu_item</span><span class="p">)</span>
    <span class="n">gtk_menu</span><span class="o">.</span><span class="n">popup</span><span class="p">(</span><span class="kc">None</span><span class="p">,</span> <span class="kc">None</span><span class="p">,</span> <span class="kc">None</span><span class="p">,</span> <span class="kc">None</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">event</span><span class="o">.</span><span class="n">button</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">event</span><span class="o">.</span><span class="n">time</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>The <code>Gtk.Menu</code> seems to need an event to show itself according to examples. So I pass that along to <code>GtkGui</code> and use a fake one in the test. The event handler looks like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">right_mouse_down</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">gui</span><span class="p">):</span>
    <span class="n">gui</span><span class="o">.</span><span class="n">show_context_menu</span><span class="p">([</span>
        <span class="n">MenuItem</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="s2">&quot;over&quot;</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="k">lambda</span><span class="p">:</span> <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;over&quot;</span><span class="p">)),</span>
        <span class="n">MenuItem</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="s2">&quot;under&quot;</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="k">lambda</span><span class="p">:</span> <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;under&quot;</span><span class="p">)),</span>
    <span class="p">])</span>
</pre>
</div>
</div>
</div>
<p>I decide to pass the <code>gui</code> along in the method call. That way, it can more easily be constructed with the right click event in the outer layer:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">elif</span> <span class="n">event</span><span class="o">.</span><span class="n">button</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">timeline</span><span class="o">.</span><span class="n">right_mouse_down</span><span class="p">(</span><span class="o">*</span><span class="n">timeline</span><span class="o">.</span><span class="n">translate_coordinates</span><span class="p">(</span>
        <span class="n">main_window</span><span class="p">,</span>
        <span class="n">event</span><span class="o">.</span><span class="n">x</span><span class="p">,</span>
        <span class="n">event</span><span class="o">.</span><span class="n">y</span>
    <span class="p">),</span> <span class="n">GtkGui</span><span class="p">(</span><span class="n">event</span><span class="p">))</span>
</pre>
</div>
</div>
</div>
<p>This works fine and when I click the menu items, the corresponding text is shown in the console:</p>
<p>
<center>
<img src="popup.png" title="fig:" alt="Context menu popup." />
</center>
</p>
<p>Let’s commit:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m <span class="s1">&#39;Show a context menu when right clicking in timeline.&#39;</span>
................................................
----------------------------------------------------------------------
Ran <span class="m">48</span> tests <span class="k">in</span> <span class="m">1</span>.954s

OK
<span class="o">[</span>main <span class="m">4201621</span><span class="o">]</span> Show a context menu when right clicking <span class="k">in</span> timeline.
 <span class="m">1</span> file changed, <span class="m">22</span> insertions<span class="o">(</span>+<span class="o">)</span>, <span class="m">4</span> deletions<span class="o">(</span>-<span class="o">)</span>
</pre>
</div>
</div>
</div>
<h2 id="modify-cut">Modify cut</h2>
<p>I continue to modify <code>right_mouse_down</code> to this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">right_mouse_down</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">gui</span><span class="p">):</span>
    <span class="n">cut</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">rectangle_map</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
    <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">cut</span><span class="p">,</span> <span class="n">Cut</span><span class="p">):</span>
        <span class="n">gui</span><span class="o">.</span><span class="n">show_context_menu</span><span class="p">([</span>
            <span class="n">MenuItem</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="s2">&quot;over&quot;</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="k">lambda</span><span class="p">:</span> <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;over&quot;</span><span class="p">)),</span>
            <span class="n">MenuItem</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="s2">&quot;under&quot;</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="k">lambda</span><span class="p">:</span> <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;under&quot;</span><span class="p">)),</span>
        <span class="p">])</span>
</pre>
</div>
</div>
</div>
<p>I want to show the context menu only if we right click on a cut. We can use the rectangle map for that.</p>
<p>All tests pass, but when I try this in the application, it fails with this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>NameError: name &#39;Cut&#39; is not defined
</pre>
</div>
</div>
</div>
<p>I should have started with a test. Let’s move a little slower.</p>
<p>I add this line in a larger timeline test where we have some objects setup:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">&gt;&gt;&gt; timeline.right_mouse_down(5, 25, FakeGui(click_context_menu=&quot;over&quot;))</span>
<span class="sd">&quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<p>And here comes one benefit of the GUI abstraction: easier testing. In the test we can pass a <code>FakeGui</code> that will simulate that we click a context menu item. We implement it like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">FakeGui</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">click_context_menu</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">click_context_menu</span> <span class="o">=</span> <span class="n">click_context_menu</span>

    <span class="k">def</span> <span class="nf">show_context_menu</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">menu</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">menu_item</span> <span class="ow">in</span> <span class="n">menu</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">menu</span><span class="o">.</span><span class="n">label</span> <span class="o">==</span> <span class="bp">self</span><span class="o">.</span><span class="n">click_context_menu</span><span class="p">:</span>
                <span class="n">menu</span><span class="o">.</span><span class="n">action</span><span class="p">()</span>
                <span class="k">return</span>
</pre>
</div>
</div>
</div>
<p>Now we get the same error about <code>Cut</code> not being defined. But this time, we get it when running the test suite. Success!</p>
<p>I import <code>Cut</code> and get an error that ‘list’ object has no attribute ‘label’. Ah. I made a mistake in the fake GUI. <code>label</code> and <code>action</code> should be accessed on the item, not the menu.</p>
<p>The current context menu just prints its label, so to make the test pass, let’s assert on that:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">&gt;&gt;&gt; timeline.right_mouse_down(5, 25, FakeGui(click_context_menu=&quot;over&quot;))</span>
<span class="sd">over</span>
<span class="sd">&quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<p>And we are back to green. Let’s commit:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m <span class="s1">&#39;Test right clicking a cut.&#39;</span>
................................................
----------------------------------------------------------------------
Ran <span class="m">48</span> tests <span class="k">in</span> <span class="m">1</span>.957s

OK
<span class="o">[</span>main 7bf3e14<span class="o">]</span> Test right clicking a cut.
 <span class="m">1</span> file changed, <span class="m">33</span> insertions<span class="o">(</span>+<span class="o">)</span>, <span class="m">7</span> deletions<span class="o">(</span>-<span class="o">)</span>
</pre>
</div>
</div>
</div>
<p>But we don’t want to print the menu item label. We want to change the <code>mix_strategy</code> of the clicked cut. Let’s assert on that instead:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">&gt;&gt;&gt; timeline.right_mouse_down(5, 25, FakeGui(click_context_menu=&quot;over&quot;))</span>
<span class="sd">&gt;&gt;&gt; timeline.get_cut(cut_id).mix_strategy</span>
<span class="sd">&#39;over&#39;</span>
<span class="sd">&quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<p>This fails because <code>right_mouse_down</code> still prints its label. I remove the print and it now fails because <code>Timeline.get_cut</code> is not defined. I add it and get the correct failure:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>Failed example:
    timeline.get_cut(cut_id).mix_strategy
Differences (ndiff with -expected +actual):
    - &#39;over&#39;
    + &#39;under&#39;
</pre>
</div>
</div>
</div>
<p>The original mix strategy is <code>over</code> and this test should have changed it to <code>under</code>, but it didn’t. Let’s fix that. As I try to get this test to pass, I get many test failures. The failures guide me what to do next. This method is not defined. Define it. This name does not exist. Fix spell error. I eventually end up with this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">right_mouse_down</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">gui</span><span class="p">):</span>
    <span class="n">cut</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">rectangle_map</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
    <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">cut</span><span class="p">,</span> <span class="n">Cut</span><span class="p">):</span>
        <span class="k">def</span> <span class="nf">mix_strategy_updater</span><span class="p">(</span><span class="n">value</span><span class="p">):</span>
            <span class="k">def</span> <span class="nf">update</span><span class="p">():</span>
                <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">project</span><span class="o">.</span><span class="n">new_transaction</span><span class="p">()</span> <span class="k">as</span> <span class="n">transaction</span><span class="p">:</span>
                    <span class="n">transaction</span><span class="o">.</span><span class="n">modify</span><span class="p">(</span><span class="n">cut</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="k">lambda</span> <span class="n">cut</span><span class="p">:</span>
                        <span class="n">cut</span><span class="o">.</span><span class="n">with_mix_strategy</span><span class="p">(</span><span class="n">value</span><span class="p">))</span>
            <span class="k">return</span> <span class="n">update</span>
        <span class="n">gui</span><span class="o">.</span><span class="n">show_context_menu</span><span class="p">([</span>
            <span class="n">MenuItem</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="s2">&quot;over&quot;</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="n">mix_strategy_updater</span><span class="p">(</span><span class="s2">&quot;over&quot;</span><span class="p">)),</span>
            <span class="n">MenuItem</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="s2">&quot;under&quot;</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="n">mix_strategy_updater</span><span class="p">(</span><span class="s2">&quot;under&quot;</span><span class="p">)),</span>
        <span class="p">])</span>
</pre>
</div>
</div>
</div>
<p>This makes the test pass and also works beautifully in the application. Let’s commit:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m <span class="s1">&#39;Can change mix strategy of clip with context menu.&#39;</span>
................................................
----------------------------------------------------------------------
Ran <span class="m">48</span> tests <span class="k">in</span> <span class="m">1</span>.956s

OK
<span class="o">[</span>main 776171a<span class="o">]</span> Can change mix strategy of clip with context menu.
 <span class="m">3</span> files changed, <span class="m">26</span> insertions<span class="o">(</span>+<span class="o">)</span>, <span class="m">4</span> deletions<span class="o">(</span>-<span class="o">)</span>
</pre>
</div>
</div>
</div>
<h2 id="summary">Summary</h2>
<p>We now have a way to change the mix strategy of a cut in the GUI. The application is a little more useful now.</p>
<p>Working with third party frameworks, like GTK, I find often slows you down. You need to learn the details of it and it is often difficult to write tests. Therefore I’m quite happy with the abstraction that we created. I want to keep as many classes as possible away from messy GTK code.</p>
]]></summary>
</entry>
<entry>
    <title>Writing my own video editor</title>
    <link href="http://rickardlindberg.me/writing/writing-my-own-video-editor/" />
    <id>http://rickardlindberg.me/writing/writing-my-own-video-editor/</id>
    <published>2023-07-28T00:00:00Z</published>
    <updated>2023-07-28T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Writing my own video editor</h1>

<p><em>Published on 28 July 2023.</em></p>

<p>On May 28 I write <a href="https://hachyderm.io/@rickardlindberg/110447282439624451">this</a>:</p>
<blockquote>
<p>Got the urge to write my own video editor. Tired of kdenlive’s instability. And I don’t need something that advanced. Reading a bit about the MLT framework makes me think that it might actually be possible to do in a reasonable time.</p>
<p>Sometimes I feel bad for starting more projects than i finish. On the other hand, every project I do teach me something. And I do this (believe it or not) for my enjoyment.</p>
</blockquote>
<p>It happens to me from time to time. I get an idea for something that I want to build. Sometimes the urge goes away. This time it doesn’t.</p>
<h2 id="why-write-a-video-editor">Why write a video editor?</h2>
<p>I like to build things. In particular I like to build things that I have a use for myself.</p>
<p>Currently, I use <a href="https://kdenlive.org/en/">Kdenlive</a> as my video editor. It has served me well. However, every time I work with it, I get a little frustrated. It often crashes on me, it often feels slow, and there are certain things that I want to do that I don’t know how.</p>
<p>The normal way of solving those problems I think would include</p>
<ul>
<li>Trying the latest version of Kdenlive (would require me to upgrade Fedora version as well)</li>
<li>Buying a faster computer</li>
<li>Learning Kdenlive better</li>
</ul>
<p>But I can program, and I like to build things. So from that point of view, the obvious solution is to build my own video editor specifically for my needs.</p>
<p>Even if it ends up being unusable as my video editor, I will have had a good time working on it and most likely learned a thing or two.</p>
<h2 id="more-ideas">More ideas</h2>
<p>On June 16 I sketch the following in my notebook:</p>
<p>
<center>
<img src="sketch-initial.png" title="fig:" alt="Initial sketch of a timeline." />
</center>
</p>
<p>I think about how to represent clips on a timeline in my ideal video editor. This sketch also tells me that the urge has not gone away.</p>
<h2 id="researching-mlt">Researching MLT</h2>
<p>Writing a video editor seems like a daunting task. The only reason that I think it will be possible is with help from <a href="https://www.mltframework.org/">MLT</a>. From their website:</p>
<blockquote>
<p>MLT is an open source multimedia framework, designed and developed for television broadcasting. It provides a toolkit for broadcasters, video editors, media players, transcoders, web streamers and many more types of applications.</p>
</blockquote>
<p>So a lot of the heavy lifting of a video editor can be done by MLT. That is my guess and hope anyway. What I can focus on is writing a nice frontend for it.</p>
<p>Instead of speculating, I do some spikes to learn how to use MLT from Python.</p>
<p>Here is one example how to put two clips next to each other on a timeline and preview the result:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="kn">import</span> <span class="nn">time</span>
<span class="kn">import</span> <span class="nn">mlt</span>

<span class="n">mlt</span><span class="o">.</span><span class="n">Factory</span><span class="p">()</span><span class="o">.</span><span class="n">init</span><span class="p">()</span>
<span class="n">profile</span> <span class="o">=</span> <span class="n">mlt</span><span class="o">.</span><span class="n">Profile</span><span class="p">()</span>
<span class="n">playlist</span> <span class="o">=</span> <span class="n">mlt</span><span class="o">.</span><span class="n">Playlist</span><span class="p">()</span>
<span class="n">playlist</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">mlt</span><span class="o">.</span><span class="n">Producer</span><span class="p">(</span><span class="n">profile</span><span class="p">,</span> <span class="s2">&quot;VID_20230611_120041.mp4&quot;</span><span class="p">))</span>
<span class="n">playlist</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">mlt</span><span class="o">.</span><span class="n">Producer</span><span class="p">(</span><span class="n">profile</span><span class="p">,</span> <span class="s2">&quot;VID_20230611_115932.mp4&quot;</span><span class="p">))</span>
<span class="n">consumer</span> <span class="o">=</span> <span class="n">mlt</span><span class="o">.</span><span class="n">Consumer</span><span class="p">(</span><span class="n">profile</span><span class="p">,</span> <span class="s2">&quot;sdl&quot;</span><span class="p">)</span>
<span class="n">consumer</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;rescale&quot;</span><span class="p">,</span> <span class="s2">&quot;none&quot;</span><span class="p">)</span>
<span class="n">consumer</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">playlist</span><span class="p">)</span>
<span class="n">consumer</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
<span class="k">while</span> <span class="n">consumer</span><span class="o">.</span><span class="n">is_stopped</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>More examples from my spikes can be found <a href="https://github.com/rickardlindberg/rlvideo/blob/91dd25a0d39cbe25e8ce85157115d023b4d2c78c/spikes/mlt_hello_world.py">here</a>.</p>
<p>To help me do the spikes, I use the following resources:</p>
<ul>
<li><p><a href="https://www.mltframework.org/docs/framework/">MLT Framework Design</a>: A good introduction to how MLT works.</p></li>
<li><p><a href="https://github.com/mltframework/mlt/tree/master/src/swig/python">Python examples</a>: Examples how to use MLT from Python. They are quite limited, but give you a good starting point.</p></li>
<li><p><a href="https://www.mltframework.org/doxygen/annotated.html">MLT API documentation</a>: The C API documentation. Translating this to Python has been mostly straight forward.</p></li>
<li><p><a href="https://github.com/jliljebl/flowblade">Flowblade</a>: Another video editor that is written in Python and MLT.</p></li>
</ul>
<h2 id="design-idea">Design idea</h2>
<p>By doing the spikes, I have a basic understanding of how to use MLT and how it could be used to build a video editor.</p>
<p>The design I have in mind for the video editor looks something like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">Timeline</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">clips</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">clip</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">clips</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">clip</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">to_mlt_producer</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">...</span><span class="p">):</span>
        <span class="o">...</span>

    <span class="k">def</span> <span class="nf">draw</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">...</span><span class="p">):</span>
        <span class="o">...</span>
</pre>
</div>
</div>
</div>
<p>That is, I want to use custom data structures for representing clips on a timeline. I think that will give us a design which is clean and easy to work with. We can design those structures to be good for the kinds of operations that we want to perform.</p>
<p>However, somehow those structures must be turned into an MLT producer. That is what <code>to_mlt_producer</code> is for. Transforming from our world into the MLT world. When we have an MLT producer, we can preview the composition and render a final result. But all the edit operations will be done on our custom data structures.</p>
<h2 id="timeline-representation">Timeline representation</h2>
<p>So what representation of clips is best? It depends on how it’s going to be used. How do I want to work with clips on a timeline in my ideal video editor?</p>
<p>On June 28 I sketch this:</p>
<p>
<center>
<img src="sketch-timeline-visualization.png" title="fig:" alt="Sketch of a timeline visualization of overlap." />
</center>
</p>
<p>And on June 30 I sketch this:</p>
<p>
<center>
<img src="sketch-split-sections.png" title="fig:" alt="Sketch of a timeline splits." />
</center>
</p>
<p>I don’t think that I want to have multiple tracks in the timeline. There should only be one track. When clips overlap, multiple tracks might be created in the background, but the user should not need to create tracks manually.</p>
<p>The sketches help me figure this out.</p>
<p>I think that we can have one structure with all the clips and their positions. Then we can split those up into sections. One type of section has no overlaps, and the other do. Overlaps must be handled differently. They both render differently (stacked on top of each other) and they must produce multiple MLT tracks in the background.</p>
<p>I work on this section splitting code and end up with this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">&gt;&gt;&gt; a = Source(&quot;A&quot;).create_cut(0, 20).at(0)</span>
<span class="sd">&gt;&gt;&gt; b = Source(&quot;b&quot;).create_cut(0, 20).at(10)</span>
<span class="sd">&gt;&gt;&gt; cuts = Cuts()</span>
<span class="sd">&gt;&gt;&gt; cuts = cuts.add(a)</span>
<span class="sd">&gt;&gt;&gt; cuts = cuts.add(b)</span>
<span class="sd">&gt;&gt;&gt; cuts.split_into_sections().to_ascii_canvas()</span>
<span class="sd">|&lt;-A0------|--A10----&gt;|--b10----&gt;|</span>
<span class="sd">|          |&lt;-b0------|          |</span>
<span class="sd">&gt;&gt;&gt; cuts.modify(b, lambda cut: cut.move(1)).split_into_sections().to_ascii_canvas()</span>
<span class="sd">|&lt;-A0-------|--A11---&gt;|--b9------&gt;|</span>
<span class="sd">|           |&lt;-b0-----|           |</span>
<span class="sd">&quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<p>The <code>to_ascii_canvas</code> is only used in tests to give me faster feedback on the splitting code. It also documents quite nicely what the timeline would look like in different situations.</p>
<h2 id="putting-it-together">Putting it together</h2>
<p>I spend quite some time getting the splitting of cuts to work. Even before I know if this design will work out. (Not very smart.) We know if it will work out when we put everything together.</p>
<p>I first try to put everything together in a Pygame application, but it gives me all kinds of problems, so I decide to try GTK instead.</p>
<p>The application has two parts: one that shows the timeline, and one that shows the preview window.</p>
<p>The timeline is created something like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">timeline_draw</span><span class="p">(</span><span class="n">widget</span><span class="p">,</span> <span class="n">context</span><span class="p">):</span>
    <span class="n">sections</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="o">...</span><span class="p">)</span>
<span class="n">timeline</span> <span class="o">=</span> <span class="n">Gtk</span><span class="o">.</span><span class="n">DrawingArea</span><span class="p">()</span>
<span class="n">timeline</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s2">&quot;draw&quot;</span><span class="p">,</span> <span class="n">timeline_draw</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>It hooks up the draw event and lets the sections (created by <code>split_into_sections</code>) do all the drawing.</p>
<p>The preview window is created something like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="n">preview</span> <span class="o">=</span> <span class="n">Gtk</span><span class="o">.</span><span class="n">DrawingArea</span><span class="p">()</span>
<span class="n">os</span><span class="o">.</span><span class="n">putenv</span><span class="p">(</span><span class="s2">&quot;SDL_WINDOWID&quot;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">preview</span><span class="o">.</span><span class="n">get_window</span><span class="p">()</span><span class="o">.</span><span class="n">get_xid</span><span class="p">()))</span>
<span class="n">consumer</span> <span class="o">=</span> <span class="n">mlt</span><span class="o">.</span><span class="n">Consumer</span><span class="p">(</span><span class="n">profile</span><span class="p">,</span> <span class="s2">&quot;sdl&quot;</span><span class="p">)</span>
<span class="n">consumer</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
<span class="n">consumer</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">sections</span><span class="o">.</span><span class="n">to_mlt_producer</span><span class="p">(</span><span class="n">profile</span><span class="p">))</span>
</pre>
</div>
</div>
</div>
<p>It connects the SDL consumer to the preview window and the producer (created by <code>to_mlt_producer</code>) to the consumer. I learn how to make the SDL consumer draw its output inside a GTK window by looking at the Flowblade source code.</p>
<p>I get a basic version of <code>Sections.draw</code> and <code>Sections.to_mlt_producer</code> and end up with this on July 3:</p>
<p>
<center>
<img src="current-status.png" title="fig:" alt="Current look of application." />
</center>
</p>
<h2 id="future">Future</h2>
<p>At this point we have a sort of proof of concept of the design. We can now</p>
<ul>
<li>Programmaticlly load clips into a timeline data structure.</li>
<li>This structure can draw itself onto a Cairo context which we can use to render it inside a GTK application.</li>
<li>This structure can also generate an MLT producer which we can use to preview the composition using the SDL consumer and have the output shown in a window in our GTK application via <code>SDL_WINDOWID</code>.</li>
</ul>
<p>One thing that I worry about with this design is performance. Every time we modify the timeline, we have to generate a new sections object and from that generate a new MLT producer. That might take time. My hope and guess is that we can do smart things to get good enough performance. But it is worth looking into to quite soon to ensure that this design will hold even for larger projects.</p>
<p>There for sure are many, many more details to flesh out before we have a functioning video editor. But I’m quite pleased that we have gotten this far in this quite short amount of time.</p>
<p>You can find the source code on <a href="https://github.com/rickardlindberg/rlvideo">GitHub</a>.</p>
]]></summary>
</entry>
<entry>
    <title>How to get fast feedback on graphical code?</title>
    <link href="http://rickardlindberg.me/writing/fast-feedback-on-graphical-code/" />
    <id>http://rickardlindberg.me/writing/fast-feedback-on-graphical-code/</id>
    <published>2023-07-28T00:00:00Z</published>
    <updated>2023-07-28T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>How to get fast feedback on graphical code?</h1>

<p><em>Published on 28 July 2023.</em></p>

<p>I am working on <a href="/writing/writing-my-own-video-editor/index.html">my own video editor</a>. It currently looks like this:</p>
<p>
<center>
<img src="rlvideo.png" title="fig:" alt="Current state of video editor." />
</center>
</p>
<p>The bottom pane shows the timeline with all the clips. It is a <code>Gtk.DrawingArea</code> where all the drawing is done using Cairo.</p>
<p>When I work on the drawing code, I want fast feedback on it. Does it look good? Does it draw as intended?</p>
<p>Usually I use TDD for this kind of feedback, but graphical output it hard to test.</p>
<p>In the beginning, I used to run the application after every change. This was quite fast because the application is still small and I can start it up with a sample timeline quite quickly. However, it still takes a few seconds and a couple of keystrokes.</p>
<p>Then I came up with a much better workflow.</p>
<p>I added a (doc)test to my test suite that does something like this (some details removed):</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">&gt;&gt;&gt; surface = cairo.ImageSurface(cairo.FORMAT_ARGB32, width, height)</span>
<span class="sd">&gt;&gt;&gt; context = cairo.Context(surface)</span>
<span class="sd">&gt;&gt;&gt; project = Project.new()</span>
<span class="sd">&gt;&gt;&gt; with project.new_transaction() as transaction:</span>
<span class="sd">...     _ = transaction.add_text_clip(&quot;hello&quot;, length=30)</span>
<span class="sd">...     x = transaction.add_text_clip(&quot;world&quot;, length=35)</span>
<span class="sd">...     _ = transaction.add_text_clip(&quot;end&quot;, length=20)</span>
<span class="sd">...     _ = transaction.add_text_clip(&quot;end&quot;, length=20)</span>
<span class="sd">...     transaction.modify(x, lambda cut: cut.move(-10))</span>
<span class="sd">&gt;&gt;&gt; timeline = Timeline(project)</span>
<span class="sd">&gt;&gt;&gt; timeline.draw_cairo(</span>
<span class="sd">...     context=context,</span>
<span class="sd">...     playhead_position=40,</span>
<span class="sd">...     width=width,</span>
<span class="sd">...     height=height</span>
<span class="sd">... )</span>
<span class="sd">&gt;&gt;&gt; surface.write_to_png(&quot;timeline.png&quot;)</span>
<span class="sd">&quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<p>The <code>Timeline</code> class is what does the drawing of the timeline. Fortunately, it is separated from the GTK component onto which it is drawn. This allows us to create our own Cairo surface, let the timeline draw itself on that, and in the end, write that surface to a file.</p>
<p>Every time we run the test suite (which I like to do automatically on every save) we get a new <code>timeline.png</code> file where the example clips that we populated in the test are drawn. If we open this file in the GNOME image viewer (<code>eog timeline.png</code>) it will automatically reload the image when it changes.</p>
<p>In this workflow, this is my typical setup:</p>
<p>
<center>
<img src="workflow1.png" title="fig:" alt="Workflow setup." />
</center>
</p>
<p>I have my editor to the right, the automatic test suite runner in the top left, and the timeline image in the bottom left.</p>
<p>In this example I draw two timelines with different zoom levels so that I can quickly see how that looks.</p>
<p>Then I can make a change to some color for example, and within a second or two, my test suite has automatically run and my desktop looks like this:</p>
<p>
<center>
<img src="workflow2.png" title="fig:" alt="Workflow after a change." />
</center>
</p>
<p>I can tweak numbers until I think it looks good and I never have to leave my editor.</p>
]]></summary>
</entry>
<entry>
    <title>DevLog 001: J-cuts and L-cuts in my video editor?</title>
    <link href="http://rickardlindberg.me/writing/devlog-001-jcut-lcut/" />
    <id>http://rickardlindberg.me/writing/devlog-001-jcut-lcut/</id>
    <published>2023-07-28T00:00:00Z</published>
    <updated>2023-07-28T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>DevLog 001: J-cuts and L-cuts in my video editor?</h1>

<p><em>Published on 28 July 2023.</em></p>

<h2 id="about-devlogs">About DevLogs</h2>
<p>DevLogs is an experiment to try to document development that I do on various projects. I will try to write what is going on in my head as I do various development tasks.</p>
<h2 id="todays-problem">Today’s problem</h2>
<p>In my video editor, there is a problem with overlapping clips. How they overlap appears to be almost random.</p>
<p>In this edit, the <code>two.mp4</code> clip is rendered below:</p>
<p>
<center>
<img src="edit1.png" title="fig:" alt="Alternative text." />
</center>
</p>
<p>If we edit the <code>one.mp4</code> clip, then the two switch order.</p>
<p>
<center>
<img src="edit2.png" title="fig:" alt="Alternative text." />
</center>
</p>
<p>So the order depends on the modification times of clips.</p>
<p>That is not very good.</p>
<h2 id="plan">Plan</h2>
<p>My idea for how to solve this is that each clip can specify how it should be cut into the previous one.</p>
<p>I imagine a library of cuts such as:</p>
<ul>
<li>over</li>
<li>under</li>
<li>j-cut</li>
<li>l-cut</li>
<li>overlay (with priority)</li>
<li>background (with priority)</li>
</ul>
<p>To make progress on this, we can probably assume a default cut (maybe under) and make sure it works. Then we can extend the library of cuts.</p>
<h2 id="writing-a-test">Writing a test</h2>
<p>The relevant code for this is mostly here:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">extract_mix_section</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">region</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">    &gt;&gt;&gt; cuts = Cuts.from_list([</span>
<span class="sd">    ...     Cut.test_instance(name=&quot;A&quot;, start=0, end=8, position=1),</span>
<span class="sd">    ...     Cut.test_instance(name=&quot;B&quot;, start=0, end=8, position=5),</span>
<span class="sd">    ... ])</span>
<span class="sd">    &gt;&gt;&gt; cuts.to_ascii_canvas()</span>
<span class="sd">    | &lt;-A0---&gt;    |</span>
<span class="sd">    |     &lt;-B0---&gt;|</span>
<span class="sd">    &gt;&gt;&gt; cuts.extract_mix_section(Region(start=0, end=15)).to_ascii_canvas()</span>
<span class="sd">    %&lt;-A0---&gt;%%%%%%</span>
<span class="sd">    %%%%%&lt;-B0---&gt;%%</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="c1"># TODO: sort based on cut (j-cut, l-cut, overlay, background).</span>
    <span class="n">playlists</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">cut</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">create_cut</span><span class="p">(</span><span class="n">region</span><span class="p">)</span><span class="o">.</span><span class="n">cut_map</span><span class="o">.</span><span class="n">values</span><span class="p">():</span>
        <span class="n">playlists</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">Cuts</span><span class="o">.</span><span class="n">empty</span><span class="p">()</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">cut</span><span class="p">)</span><span class="o">.</span><span class="n">extract_playlist_section</span><span class="p">(</span><span class="n">region</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">MixSection</span><span class="p">(</span><span class="n">length</span><span class="o">=</span><span class="n">region</span><span class="o">.</span><span class="n">length</span><span class="p">,</span> <span class="n">playlists</span><span class="o">=</span><span class="n">playlists</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>Let’s write a test that shows the current behavior first:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">&gt;&gt;&gt; region = Region(start=0, end=15)</span>
<span class="sd">&gt;&gt;&gt; a_cut = Cut.test_instance(name=&quot;A&quot;, start=0, end=8, position=1)</span>
<span class="sd">&gt;&gt;&gt; b_cut = Cut.test_instance(name=&quot;B&quot;, start=0, end=8, position=5)</span>

<span class="sd">&gt;&gt;&gt; Cuts.from_list([</span>
<span class="sd">...     a_cut,</span>
<span class="sd">...     b_cut,</span>
<span class="sd">... ]).extract_mix_section(region).to_ascii_canvas()</span>
<span class="sd">%&lt;-A0---&gt;%%%%%%</span>
<span class="sd">%%%%%&lt;-B0---&gt;%%</span>

<span class="sd">&gt;&gt;&gt; Cuts.from_list([</span>
<span class="sd">...     b_cut,</span>
<span class="sd">...     a_cut,</span>
<span class="sd">... ]).extract_mix_section(region).to_ascii_canvas()</span>
<span class="sd">%%%%%&lt;-B0---&gt;%%</span>
<span class="sd">%&lt;-A0---&gt;%%%%%%</span>
<span class="sd">&quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<p>So depending on the order in which cuts are added, they mix differently. This is exactly the behavior that we want to change. We want them to mix the same no matter what order they are added in.</p>
<p>Let’s commit this as a baseline:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m <span class="s1">&#39;Pinpoint current behavior of mixing cuts.&#39;</span>
</pre>
</div>
</div>
</div>
<p>The <code>./make.py commit</code> script is a wrapper around <code>git commit</code> that also runs the tests and makes sure there are no untracked files. A real handy tool to make sure we don’t commit “bad” code.</p>
<h2 id="cut-the-same">Cut the same</h2>
<p>I modify the test above to assert that the same mix is created even when the cuts are in the reverse order.</p>
<p>I make it pass by sorting the clips by start time, making “later” clips appear below which would be the equivalent of having the cut on the second b clip set to “under”:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">sort_cuts</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">cuts</span><span class="p">):</span>
    <span class="k">return</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">cuts</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">cut</span><span class="p">:</span> <span class="n">cut</span><span class="o">.</span><span class="n">get_source_cut</span><span class="p">()</span><span class="o">.</span><span class="n">start</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>That works as intended in the application as well. Let’s commit:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m <span class="s1">&#39;Always mix cuts below previous cut.&#39;</span>
</pre>
</div>
</div>
</div>
<h2 id="clips-with-the-same-start">Clips with the same start</h2>
<p>If two cuts have the same start, the sorting will have no effect and we still have the same problem.</p>
<p>First of all, I don’t think this scenario will be that common in a real situation.</p>
<p>I’m thinking we can handle it with a warning. If such situation appears, the user has to resolve the issue by hinting how the mix should be done.</p>
<p>We can also take the end position into account. Then only cuts with the same start and end has the problem. In which case the user must explicitly tell which should be on top somehow.</p>
<h2 id="summary">Summary</h2>
<p>We made progress towards mixing cuts in a better way. Next step in this area I think is to allow the type of cut to be specified per clip and take that into account when sorting cuts. I think it should be quite easy to write tests for this and we should be able to move steady and carefully using TDD.</p>
]]></summary>
</entry>

</feed>
