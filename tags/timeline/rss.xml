<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>Rickard's personal homepage: latest posts tagged timeline</title>
        <link>http://rickardlindberg.me</link>
        <description><![CDATA[Rickard's personal homepage: latest posts tagged timeline]]></description>
        <atom:link href="http://rickardlindberg.me/tags/timeline/rss.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Sat, 28 Sep 2019 00:00:00 UT</lastBuildDate>
        <item>
    <title>Segfault with custom events in wxPython</title>
    <link>http://rickardlindberg.me/writing/timeline-segfault-wxpython/</link>
    <description><![CDATA[<h1>Segfault with custom events in wxPython</h1>

<p><em>Published on 28 September 2019.</em></p>

<p>When working on porting <a href="/projects/timeline/index.html">Timeline</a> to Python 3, I ran into a problem where a test caused a segfault. I managed to create a small example that reproduces the failure. I describe the example below and show how I solved the test failure.</p>
<p>The example consists of a test that stores an instance of a custom wx event in a <a href="https://docs.python.org/3.5/library/unittest.mock.html#the-mock-class">mock</a> object:</p>
<pre><code>1.  test\_wx.py</code></pre>
<div class="sourceCode" id="cb2"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="im">from</span> unittest.mock <span class="im">import</span> Mock</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a><span class="im">import</span> unittest</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a><span class="im">import</span> wx</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a><span class="im">import</span> wx.lib.newevent</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a>CustomEvent, EVT_CUSTOM <span class="op">=</span> wx.lib.newevent.NewEvent()</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true"></a></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true"></a><span class="kw">class</span> WxTest(unittest.TestCase):</span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true"></a></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true"></a>    <span class="kw">def</span> test_wx(<span class="va">self</span>):</span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true"></a>        mock <span class="op">=</span> Mock()</span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true"></a>        mock.PostEvent(CustomEvent())</span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true"></a></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true"></a><span class="cf">if</span> <span class="va">__name__</span> <span class="op">==</span> <span class="st">&quot;__main__&quot;</span>:</span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true"></a>    unittest.main()</span></code></pre></div>
<p>When I run this example, I get the following error:</p>
<pre class="text"><code>$ python3 test_wx.py
.
----------------------------------------------------------------------
Ran 1 test in 0.001s

OK
Segmentation fault (core dumped)</code></pre>
<p>If I instead run it through gdb, I can see the C stacktrace where the error happens:</p>
<pre class="text"><code>$ gdb python3
GNU gdb (GDB) Fedora 8.2.91.20190401-23.fc30
...
(gdb) run test_wx.py 
...
.
----------------------------------------------------------------------
Ran 1 test in 0.001s

OK

Program received signal SIGSEGV, Segmentation fault.
dict_dealloc (mp=0x7fffe712f9d8) at /usr/src/debug/python3-3.7.3-1.fc30.x86_64/Objects/dictobject.c:1901
1901  /usr/src/debug/python3-3.7.3-1.fc30.x86_64/Objects/dictobject.c: No such file or directory.
Missing separate debuginfos, use: dnf debuginfo-install fontconfig-2.13.1-6.fc30.x86_64 libXcursor-1.1.15-5.fc30.x86_64 libgcrypt-1.8.4-3.fc30.x86_64 libxkbcommon-0.8.3-1.fc30.x86_64 lz4-libs-1.8.3-2.fc30.x86_64 python3-sip-4.19.17-1.fc30.x86_64
(gdb) bt
#0  dict_dealloc (mp=0x7fffe712f9d8) at /usr/src/debug/python3-3.7.3-1.fc30.x86_64/Objects/dictobject.c:1901
#1  0x00007fffea02e1cc in wxPyEvtDict::~wxPyEvtDict (this=0x5555556f3ee8, __in_chrg=&lt;optimized out&gt;) at ../../../../src/pyevent.h:48
#2  wxPyEvent::~wxPyEvent (this=0x5555556f3e90, __in_chrg=&lt;optimized out&gt;) at ../../../../src/pyevent.h:96
#3  sipwxPyEvent::~sipwxPyEvent (this=0x5555556f3e90, __in_chrg=&lt;optimized out&gt;) at ../../../../sip/cpp/sip_corewxPyEvent.cpp:56
#4  0x00007fffea02e24d in sipwxPyEvent::~sipwxPyEvent (this=0x5555556f3e90, __in_chrg=&lt;optimized out&gt;) at ../../../../sip/cpp/sip_corewxPyEvent.cpp:56
#5  0x00007fffea02dfd2 in release_wxPyEvent (sipCppV=0x5555556f3e90, sipState=&lt;optimized out&gt;) at ../../../../sip/cpp/sip_corewxPyEvent.cpp:261
#6  0x00007fffe72ff4ce in ?? () from /usr/lib64/python3.7/site-packages/sip.so
#7  0x00007fffe72ff51d in ?? () from /usr/lib64/python3.7/site-packages/sip.so
#8  0x00007ffff7c14869 in subtype_dealloc (self=&lt;_Event at remote 0x7fffea4ddd38&gt;) at /usr/src/debug/python3-3.7.3-1.fc30.x86_64/Objects/typeobject.c:1256
#9  0x00007ffff7b8892b in tupledealloc (op=0x7fffe712cda0) at /usr/src/debug/python3-3.7.3-1.fc30.x86_64/Objects/tupleobject.c:246
#10 0x00007ffff7b8892b in tupledealloc (op=0x7fffea4d7620) at /usr/src/debug/python3-3.7.3-1.fc30.x86_64/Objects/tupleobject.c:246
#11 0x00007ffff7c14869 in subtype_dealloc (self=&lt;_Call at remote 0x7fffea4d7620&gt;) at /usr/src/debug/python3-3.7.3-1.fc30.x86_64/Objects/typeobject.c:1256
#12 0x00007ffff7b882ae in list_dealloc (op=0x7fffe70ba228) at /usr/src/debug/python3-3.7.3-1.fc30.x86_64/Objects/listobject.c:324
#13 0x00007ffff7c14869 in subtype_dealloc (self=&lt;_CallList at remote 0x7fffe70ba228&gt;) at /usr/src/debug/python3-3.7.3-1.fc30.x86_64/Objects/typeobject.c:1256
#14 0x00007ffff7b8c813 in free_keys_object (keys=0x555555855080) at /usr/src/debug/python3-3.7.3-1.fc30.x86_64/Modules/gcmodule.c:776
#15 dict_dealloc (mp=0x7fffe712f630) at /usr/src/debug/python3-3.7.3-1.fc30.x86_64/Objects/dictobject.c:1913
#16 subtype_clear (self=&lt;optimized out&gt;) at /usr/src/debug/python3-3.7.3-1.fc30.x86_64/Objects/typeobject.c:1101
#17 delete_garbage (old=&lt;optimized out&gt;, collectable=&lt;optimized out&gt;) at /usr/src/debug/python3-3.7.3-1.fc30.x86_64/Modules/gcmodule.c:769
#18 collect (generation=2, n_collected=0x7fffffffd230, n_uncollectable=0x7fffffffd228, nofail=0) at /usr/src/debug/python3-3.7.3-1.fc30.x86_64/Modules/gcmodule.c:924
#19 0x00007ffff7c4ac4e in collect_with_callback (generation=generation@entry=2) at /usr/src/debug/python3-3.7.3-1.fc30.x86_64/Modules/gcmodule.c:1036
#20 0x00007ffff7ca7331 in PyGC_Collect () at /usr/src/debug/python3-3.7.3-1.fc30.x86_64/Modules/gcmodule.c:1581
#21 0x00007ffff7caaf03 in Py_FinalizeEx () at /usr/src/debug/python3-3.7.3-1.fc30.x86_64/Python/pylifecycle.c:1185
#22 0x00007ffff7cab048 in Py_Exit (sts=sts@entry=0) at /usr/src/debug/python3-3.7.3-1.fc30.x86_64/Python/pylifecycle.c:2278
#23 0x00007ffff7cab0ff in handle_system_exit () at /usr/src/debug/python3-3.7.3-1.fc30.x86_64/Python/pythonrun.c:636
#24 0x00007ffff7cab1e6 in PyErr_PrintEx (set_sys_last_vars=1) at /usr/src/debug/python3-3.7.3-1.fc30.x86_64/Python/pythonrun.c:646
#25 0x00007ffff7cab651 in PyRun_SimpleFileExFlags (fp=&lt;optimized out&gt;, filename=&lt;optimized out&gt;, closeit=&lt;optimized out&gt;, flags=0x7fffffffd410) at /usr/src/debug/python3-3.7.3-1.fc30.x86_64/Python/pythonrun.c:435
#26 0x00007ffff7cad864 in pymain_run_file (p_cf=0x7fffffffd410, filename=&lt;optimized out&gt;, fp=0x5555555a20d0) at /usr/src/debug/python3-3.7.3-1.fc30.x86_64/Modules/main.c:427
#27 pymain_run_filename (cf=0x7fffffffd410, pymain=0x7fffffffd520) at /usr/src/debug/python3-3.7.3-1.fc30.x86_64/Modules/main.c:1627
#28 pymain_run_python (pymain=0x7fffffffd520) at /usr/src/debug/python3-3.7.3-1.fc30.x86_64/Modules/main.c:2877
#29 pymain_main (pymain=0x7fffffffd520) at /usr/src/debug/python3-3.7.3-1.fc30.x86_64/Modules/main.c:3038
#30 0x00007ffff7cadc0c in _Py_UnixMain (argc=&lt;optimized out&gt;, argv=&lt;optimized out&gt;) at /usr/src/debug/python3-3.7.3-1.fc30.x86_64/Modules/main.c:3073
#31 0x00007ffff7e12f33 in __libc_start_main (main=0x555555555050 &lt;main&gt;, argc=2, argv=0x7fffffffd678, init=&lt;optimized out&gt;, fini=&lt;optimized out&gt;, rtld_fini=&lt;optimized out&gt;, stack_end=0x7fffffffd668) at ../csu/libc-start.c:308
#32 0x000055555555508e in _start ()</code></pre>
<p>Somewhere in the middle, there is a call to <code>PyGC_Collect</code> followed, a bit higher up, by a call to <code>release_wxPyEvent</code>. This indicates that the error occurs during garbage collection of the custom wx event.</p>
<p>The machine I run the example on is running Python 3.7.3, and wxPython 4.0.4:</p>
<pre class="text"><code>$ python3
Python 3.7.3 (default, Mar 27 2019, 13:36:35)
[GCC 9.0.1 20190227 (Red Hat 9.0.1-0.8)] on linux
Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.
&gt;&gt;&gt; import wx
&gt;&gt;&gt; wx.version()
&#39;4.0.4 gtk3 (phoenix) wxWidgets 3.0.4&#39;</code></pre>
<p>To solve this problem, I replaced the mock function <code>PostEvent</code> with one that simply discards its input like this:</p>
<pre class="text"><code>mock.PostEvent = lambda x: None</code></pre>
<p>This way there is no custom wx event to garbage collect. In Timeline's case, it was not important to store the event in the mock object anyway.</p>
<p>If you have any idea why this example causes a segfault, I would be interested to know. It feels like an error in the wxPython wrapper.</p>
]]></description>
    <pubDate>Sat, 28 Sep 2019 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/timeline-segfault-wxpython/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>Doctest fails in Python 3 with wxPython</title>
    <link>http://rickardlindberg.me/writing/timeline-doctest-wxpython/</link>
    <description><![CDATA[<h1>Doctest fails in Python 3 with wxPython</h1>

<p><em>Published on 31 August 2019.</em></p>

<p>When working on porting <a href="/projects/timeline/index.html">Timeline</a> to Python 3, I ran into a problem where a <a href="https://docs.python.org/3/library/doctest.html">doctest</a> failed under certain circumstances. I managed to create a small example that reproduces the failure. I describe the example below and show how I solved the test failure.</p>
<p>The example consists of a test runner and two test cases. The test runner is a slimmed down version of the one used in Timeline:</p>
<pre><code>1.  testrunner.py</code></pre>
<div class="sourceCode" id="cb2"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="im">import</span> doctest</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a><span class="im">import</span> sys</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a><span class="im">import</span> unittest</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a><span class="kw">def</span> load_test_cases_from_module_name(suite, module_name):</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a>    <span class="bu">__import__</span>(module_name)</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a>    module <span class="op">=</span> sys.modules[module_name]</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true"></a>    module_suite <span class="op">=</span> unittest.defaultTestLoader.loadTestsFromModule(module)</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true"></a>    suite.addTest(module_suite)</span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true"></a></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true"></a><span class="kw">def</span> load_doc_tests_from_module_name(suite, module_name):</span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true"></a>    <span class="bu">__import__</span>(module_name)</span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true"></a>    module <span class="op">=</span> sys.modules[module_name]</span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true"></a>    <span class="cf">try</span>:</span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true"></a>        module_suite <span class="op">=</span> doctest.DocTestSuite(module)</span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true"></a>    <span class="cf">except</span> <span class="pp">ValueError</span>:</span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true"></a>        <span class="co"># No tests found</span></span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true"></a>        <span class="cf">pass</span></span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true"></a>    <span class="cf">else</span>:</span>
<span id="cb2-20"><a href="#cb2-20" aria-hidden="true"></a>        suite.addTest(module_suite)</span>
<span id="cb2-21"><a href="#cb2-21" aria-hidden="true"></a></span>
<span id="cb2-22"><a href="#cb2-22" aria-hidden="true"></a><span class="cf">if</span> <span class="va">__name__</span> <span class="op">==</span> <span class="st">&quot;__main__&quot;</span>:</span>
<span id="cb2-23"><a href="#cb2-23" aria-hidden="true"></a>    suite <span class="op">=</span> unittest.TestSuite()</span>
<span id="cb2-24"><a href="#cb2-24" aria-hidden="true"></a>    load_test_cases_from_module_name(suite, <span class="st">&quot;test_wx&quot;</span>)</span>
<span id="cb2-25"><a href="#cb2-25" aria-hidden="true"></a>    load_doc_tests_from_module_name(suite, <span class="st">&quot;test_doc&quot;</span>)</span>
<span id="cb2-26"><a href="#cb2-26" aria-hidden="true"></a>    <span class="bu">print</span>(unittest.TextTestRunner().run(suite))</span></code></pre></div>
<p>It creates a test suite with test cases from two modules: one with a unit test and one with a doctests. It then runs the tests.</p>
<p>The first test is a unit test that needs an instance of <code>wx.App</code>:</p>
<pre><code>1.  test\_wx.py</code></pre>
<div class="sourceCode" id="cb4"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="im">import</span> contextlib</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a><span class="im">import</span> unittest</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a><span class="im">import</span> wx</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true"></a></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true"></a><span class="kw">class</span> WxTest(unittest.TestCase):</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true"></a></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true"></a>    <span class="kw">def</span> test_wx(<span class="va">self</span>):</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true"></a>        <span class="cf">with</span> <span class="va">self</span>.wxapp() <span class="im">as</span> app:</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true"></a>            <span class="co"># Test something that requires a wx.App</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true"></a>            <span class="cf">pass</span></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true"></a></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true"></a>    <span class="at">@contextlib.contextmanager</span></span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true"></a>    <span class="kw">def</span> wxapp(<span class="va">self</span>):</span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true"></a>        app <span class="op">=</span> wx.App()</span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true"></a>        <span class="cf">try</span>:</span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true"></a>            <span class="cf">yield</span> app</span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true"></a>        <span class="cf">finally</span>:</span>
<span id="cb4-19"><a href="#cb4-19" aria-hidden="true"></a>            app.Destroy()</span></code></pre></div>
<p>This example doesn't test anything, but is enough to reproduce the failure.</p>
<p>The second test is a doctest that asserts that a function prints a string:</p>
<pre><code>1.  test\_doc.py</code></pre>
<div class="sourceCode" id="cb6"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; print_fun_stuff()</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a><span class="co">This is fun!</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true"></a></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true"></a><span class="kw">def</span> print_fun_stuff():</span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true"></a>    <span class="bu">print</span>(<span class="st">&quot;This is fun!&quot;</span>)</span></code></pre></div>
<p>When I run this example, I get the failure:</p>
<pre class="text"><code>$ python3 testrunner.py
.This is fun!
F
======================================================================
FAIL: test_doc ()
Doctest: test_doc
----------------------------------------------------------------------
Traceback (most recent call last):
  File &quot;/usr/lib64/python3.7/doctest.py&quot;, line 2196, in runTest
    raise self.failureException(self.format_failure(new.getvalue()))
AssertionError: Failed doctest test for test_doc
  File &quot;test_doc.py&quot;, line 0, in test_doc

----------------------------------------------------------------------
File &quot;test_doc.py&quot;, line 2, in test_doc
Failed example:
    print_fun_stuff()
Expected:
    This is fun!
Got nothing


----------------------------------------------------------------------
Ran 2 tests in 0.074s

FAILED (failures=1)
&lt;unittest.runner.TextTestResult run=2 errors=0 failures=1&gt;</code></pre>
<p>What appears to happen is that the expected string in the doctest is written to the console (or perhaps stderr) instead of being captured by doctest. When I run the doctest in isolation, it passes, so there is nothing wrong with the test itself. It is the sequence of these two tests that causes the problem.</p>
<p>My guess is that something in the wx test interferes with the doctest. Perhaps instantiating a <code>wx.App</code> has some effects on streams and redirection. But shouldn't the <code>app.Destroy()</code> call reset any such effects? It would seem reasonable. But what if the <code>wx.App</code> is not completely destroyed when the doctest is run? To test this, I modify the example to force a garbage collection after the <code>app.Destroy()</code> call like this:</p>
<pre class="text"><code>import gc; gc.collect()</code></pre>
<p>This gets rid of the failure and the tests pass consistently. This is also the solution that I adopted for Timeline.</p>
<p>The machine I run the example on is running Fedora 30, Python 3.7.3, and wxPython 4.0.4:</p>
<pre class="text"><code>$ uname -a
Linux localhost.localdomain 5.0.9-301.fc30.x86_64 #1 SMP Tue Apr 23 23:57:35
UTC 2019 x86_64 x86_64 x86_64 GNU/Linux
$ python3
Python 3.7.3 (default, Mar 27 2019, 13:36:35)
[GCC 9.0.1 20190227 (Red Hat 9.0.1-0.8)] on linux
Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.
&gt;&gt;&gt; import wx
&gt;&gt;&gt; wx.version()
&#39;4.0.4 gtk3 (phoenix) wxWidgets 3.0.4&#39;</code></pre>
<p>But the example doesn't always fail. On the Fedora 30 machine, it fails most of the time, but sometimes it succeeds. When I run the example on a machine that is running Fedora 26, Python 3.6.5, and wxPython 4.0.1, it always succeeds:</p>
<pre class="text"><code>$ uname -a
Linux x220 4.16.11-100.fc26.x86_64 #1 SMP Tue May 22 20:02:12 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux
rick@x220 | ~/rickardlindberg.me/writing/draft-timeline-doctest-wxpython
$ python3
Python 3.6.5 (default, Apr  4 2018, 15:09:05)
[GCC 7.3.1 20180130 (Red Hat 7.3.1-2)] on linux
Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.
&gt;&gt;&gt; import wx
&gt;&gt;&gt; wx.version()
&#39;4.0.1 gtk3 (phoenix)&#39;</code></pre>
<p>Also, if I change the test so that it doesn't use a context manager, it always succeeds:</p>
<pre class="text"><code>def test_wx(self):
    app = wx.App()
    try:
        # Test something that requires a wx.App
        pass
    finally:
        app.Destroy()</code></pre>
<p>Perhaps the context manager has some effect on when objects are garbage collected.</p>
<p>If you have any idea why this example sometimes fails, I would be interested to know. It seems illogical that a forced garbage collection should be needed to get a correct program.</p>
]]></description>
    <pubDate>Sat, 31 Aug 2019 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/timeline-doctest-wxpython/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>A new home for Timeline</title>
    <link>http://rickardlindberg.me/writing/new-home-for-timeline/</link>
    <description><![CDATA[<h1>A new home for Timeline</h1>

<p><em>Published on  6 November 2017.</em></p>

<p>In this article I present thoughts on a new home for <a href="/projects/timeline/index.html">Timeline</a>.</p>
<p>Timeline is free software, and in order to develop it, we need tools and infrastructure. For example, we need a place to host code repositories and a system to facilitate discussions. The most popular platform today providing such functionality is probably GitHub. Timeline uses another platform called SourceForge, nowadays seen as a predecessor to GitHub.</p>
<h2 id="wanted-features">Wanted features</h2>
<p>I believe that when developing free software, building a community is important. The easier it is to engage, the better. I’ve identified two features of a platform that I believe will make it easier to engage.</p>
<h3 id="registration-free-discussions">Registration free discussions</h3>
<p>Today, Timeline uses a mailing list (provided by SourceForge) for discussions. The most common usage of the mailing list is that non registered users send emails about problems they have. These emails provide valuable feedback. We don’t want to force users to register to provide this feedback. It should be super simple. This works well today.</p>
<p>A problem with mailing lists is that when discussions continue in an thread, everyone has to remember to hit “Reply all” on every email to keep everyone in the loop. This inevitably fails. We end up with discussions where registered users reply to the list only and the original (non registered) sender is not notified, or where registered users reply directly to the original sender, and no one else is notified.</p>
<p>We want a discussion system that is easy to post to (just send an email), and that always keeps everyone in the loop.</p>
<h3 id="registration-free-pull-requests">Registration free pull requests</h3>
<p>In order to contribute code to Timeline today, you need push access to the code repository. For that, you also need to be registered. This makes it harder to submit patches for newcomers. We want it to be easy for people to contribute patches. It should be as easy as to contribute feedback via email. We would like to use the pull request model (popularized by GitHub), but no registration should be needed to submit a pull request.</p>
<h2 id="proprietary-systems">Proprietary systems</h2>
<p>Another reason that prompted me to think about a new home for Timeline was that someone sent an email to the Timeline mailing list suggesting that we should move away from SourceForge and included a link to the article <a href="https://notepad-plus-plus.org/news/notepad-plus-plus-leaves-sf.html">Notepad++ leaves SourceForge</a>. The Notepad++ project thought SourceForge behaved unacceptably and decided to move somewhere else.</p>
<p>But what is a better home? GitHub seems to behave nicer today, but what about tomorrow? The article <a href="https://carlchenet.com/the-github-threat/">The Github threat</a> argues that GitHub might not be the silver bullet either. One argument against it is that everything is centralized and you might loose all your data (issues, pull request discussions) over night.</p>
<p>There is also the argument that <a href="https://mako.cc/writing/hill-free_tools.html">Free Software Needs Free Tools</a>. This article argues that if we advocate that software should be free, using proprietary tools make us less credible.</p>
<h2 id="way-forward">Way forward</h2>
<p>SourceForge has been a good home for Timeline so far, but we would also like to have registration free discussions and pull requests. There is also a worry that SourceForge will do something undesirable as described in the Notepad++ article.</p>
<p>Moving to GitHub does not add any value to us because it does not provide the additional features we want and it is also a proprietary platform. As far as I know, GitHub does not support anonymous users to send feedback via email, so if we move, we loose that feature that works well today.</p>
<p>We could install an existing free platform like GitLab on our own servers. That would get rid of the worry that the platform might do something undesirable. But I’ve not yet seen a platform that provides registration free discussions and pull requests. Perhaps those features can be added to an existing platform, but I think it might be difficult because most platforms require registered users, and these two features have to work without it.</p>
<p>My feeling is that the approach needed for these two features might justify a completely new platform. My suggested way forward is therefore to develop a new platform whose core features are registration free discussions and pull requests. In addition, it would need features common to many platforms like hosting of releases and a project web page.</p>
<p>I’ve started prototyping what such a platform might look like. I might write down what I think are the minimum set of features needed to create a platform that is better for Timeline than the current alternatives.</p>
]]></description>
    <pubDate>Mon, 06 Nov 2017 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/new-home-for-timeline/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>Timeline release statistics</title>
    <link>http://rickardlindberg.me/writing/timeline-release-stats/</link>
    <description><![CDATA[<h1>Timeline release statistics</h1>

<p><em>Published on 2015-07-01.</em></p>

<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[1]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython2"><pre><span class="kn">import</span> <span class="nn">re</span>
<span class="kn">import</span> <span class="nn">subprocess</span>
<span class="kn">import</span> <span class="nn">dateutil.parser</span>
<span class="kn">import</span> <span class="nn">datetime</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="kn">as</span> <span class="nn">plt</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="kn">as</span> <span class="nn">pd</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
<span class="o">%</span><span class="k">matplotlib</span> inline

<span class="n">PATH_TO_REPO</span> <span class="o">=</span> <span class="s">&quot;main-sf&quot;</span>
<span class="n">PATH_TO_CHANGELOG</span> <span class="o">=</span> <span class="s">&quot;</span><span class="si">%s</span><span class="s">/doc/changelog.rst&quot;</span> <span class="o">%</span> <span class="n">PATH_TO_REPO</span>
</pre></div>

</div>
</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>In this notebook I will explore data from Timeline to try to learn something.</p>
<p>In particular, I'm interested in knowing what makes a Timeline release successful. What did we do right that we can continue to do more of so that future releases of Timeline will be successful.</p>
<p>That is a quite vague direction, but I hope I can ask some more specific questions as I go along.</p>
<h2 id="When-did-releases-happen?">When did releases happen?<a class="anchor-link" href="#When-did-releases-happen?">&#182;</a></h2><p>Where do we start? Let's start somewhere.</p>
<p>Let's start by figuring out when the different releases happened. We can parse that information from the changelog:</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[2]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython2"><pre><span class="n">release_dates</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">release_versions</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">PATH_TO_CHANGELOG</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="n">line</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">line</span><span class="p">:</span>
            <span class="k">break</span>
        <span class="n">match</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s">r&quot;^Version (\d+\.\d+\.\d+)$&quot;</span><span class="p">,</span> <span class="n">line</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">match</span><span class="p">:</span>
            <span class="n">version</span> <span class="o">=</span> <span class="n">match</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
            <span class="n">f</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span>
            <span class="n">f</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span>
            <span class="n">match</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s">r&quot;^\*\*Released on (.*)\.\*\*$&quot;</span><span class="p">,</span> <span class="n">f</span><span class="o">.</span><span class="n">readline</span><span class="p">())</span>
            <span class="k">if</span> <span class="n">match</span><span class="p">:</span>
                <span class="n">release_dates</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">dateutil</span><span class="o">.</span><span class="n">parser</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">match</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span><span class="o">.</span><span class="n">date</span><span class="p">())</span>
                <span class="n">release_versions</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">version</span><span class="p">)</span>
</pre></div>

</div>
</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Let's load that into Pandas so that we can more easily work with it:</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[3]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython2"><pre><span class="n">releases</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span>
    <span class="s">&quot;date&quot;</span><span class="p">:</span> <span class="n">release_dates</span><span class="p">,</span>
    <span class="s">&quot;version&quot;</span><span class="p">:</span> <span class="n">release_versions</span><span class="p">,</span>
<span class="p">})</span>

<span class="n">releases</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt output_prompt">Out[3]:</div>

<div class="output_html rendered_html output_subarea output_execute_result">
<div style="max-height:1000px;max-width:1500px;overflow:auto;">
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>date</th>
      <th>version</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td> 2015-04-30</td>
      <td> 1.6.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td> 2015-01-31</td>
      <td> 1.5.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td> 2014-11-12</td>
      <td> 1.4.1</td>
    </tr>
    <tr>
      <th>3</th>
      <td> 2014-11-09</td>
      <td> 1.4.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td> 2014-06-30</td>
      <td> 1.3.0</td>
    </tr>
  </tbody>
</table>
<p>5 rows × 2 columns</p>
</div>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="What-does-the-frequency-look-like?">What does the frequency look like?<a class="anchor-link" href="#What-does-the-frequency-look-like?">&#182;</a></h2>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Let's plot when releases occured in time to get a feel for the distribution.</p>
<p>Let's first add a dummy column that we will use for plotting purposes.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[4]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython2"><pre><span class="n">releases</span><span class="p">[</span><span class="s">&quot;dummy&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">release_dates</span><span class="p">))</span>
<span class="n">releases</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt output_prompt">Out[4]:</div>

<div class="output_html rendered_html output_subarea output_execute_result">
<div style="max-height:1000px;max-width:1500px;overflow:auto;">
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>date</th>
      <th>version</th>
      <th>dummy</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td> 2015-04-30</td>
      <td> 1.6.0</td>
      <td> 0</td>
    </tr>
    <tr>
      <th>1</th>
      <td> 2015-01-31</td>
      <td> 1.5.0</td>
      <td> 0</td>
    </tr>
    <tr>
      <th>2</th>
      <td> 2014-11-12</td>
      <td> 1.4.1</td>
      <td> 0</td>
    </tr>
    <tr>
      <th>3</th>
      <td> 2014-11-09</td>
      <td> 1.4.0</td>
      <td> 0</td>
    </tr>
    <tr>
      <th>4</th>
      <td> 2014-06-30</td>
      <td> 1.3.0</td>
      <td> 0</td>
    </tr>
  </tbody>
</table>
<p>5 rows × 3 columns</p>
</div>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Let's also filter out the major releases as we only want to show them on the x-axis:</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[5]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython2"><pre><span class="n">major_releases</span> <span class="o">=</span> <span class="n">releases</span><span class="p">[</span><span class="n">releases</span><span class="p">[</span><span class="s">&quot;version&quot;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s">&quot;.0&quot;</span><span class="p">)]</span>
<span class="n">major_releases</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt output_prompt">Out[5]:</div>

<div class="output_html rendered_html output_subarea output_execute_result">
<div style="max-height:1000px;max-width:1500px;overflow:auto;">
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>date</th>
      <th>version</th>
      <th>dummy</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td> 2015-04-30</td>
      <td> 1.6.0</td>
      <td> 0</td>
    </tr>
    <tr>
      <th>1</th>
      <td> 2015-01-31</td>
      <td> 1.5.0</td>
      <td> 0</td>
    </tr>
    <tr>
      <th>3</th>
      <td> 2014-11-09</td>
      <td> 1.4.0</td>
      <td> 0</td>
    </tr>
    <tr>
      <th>4</th>
      <td> 2014-06-30</td>
      <td> 1.3.0</td>
      <td> 0</td>
    </tr>
    <tr>
      <th>9</th>
      <td> 2014-04-05</td>
      <td> 1.2.0</td>
      <td> 0</td>
    </tr>
  </tbody>
</table>
<p>5 rows × 3 columns</p>
</div>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Now we are ready to plot:</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[6]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython2"><pre><span class="n">releases</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s">&quot;date&quot;</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s">&quot;dummy&quot;</span><span class="p">,</span> <span class="n">style</span><span class="o">=</span><span class="s">&quot;o&quot;</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
<span class="n">plt</span><span class="o">.</span><span class="n">xticks</span><span class="p">(</span><span class="n">major_releases</span><span class="p">[</span><span class="s">&quot;date&quot;</span><span class="p">]</span><span class="o">.</span><span class="n">values</span><span class="p">,</span> <span class="n">major_releases</span><span class="p">[</span><span class="s">&quot;version&quot;</span><span class="p">]</span><span class="o">.</span><span class="n">values</span><span class="p">,</span> <span class="n">rotation</span><span class="o">=</span><span class="mi">90</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">yticks</span><span class="p">([])</span>
<span class="n">plt</span><span class="o">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt"></div>


<div class="output_png output_subarea ">
<img src="image1.png"
>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>We see that there are some blue circles to the right of the vertical lines. Those are the minor releases. For example, the circle to the right of 0.12.0 is probably release 0.12.1.</p>
<p>Now we've got an intuitive feel for the distribution. Let's see if we can plot it more precicely:</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[7]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython2"><pre><span class="n">sorted_major_releases</span> <span class="o">=</span> <span class="n">major_releases</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="s">&quot;date&quot;</span><span class="p">)</span>
<span class="n">sorted_major_releases</span><span class="p">[</span><span class="s">&quot;time_in_development&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="n">sorted_major_releases</span><span class="o">.</span><span class="n">date</span><span class="o">.</span><span class="n">diff</span><span class="p">()</span>
<span class="n">sorted_major_releases</span><span class="p">[</span><span class="s">&quot;days_in_development&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="n">sorted_major_releases</span><span class="o">.</span><span class="n">dropna</span><span class="p">()</span><span class="o">.</span><span class="n">time_in_development</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">.</span><span class="n">item</span><span class="p">()</span> <span class="o">/</span> <span class="mf">1000000000.0</span> <span class="o">/</span> <span class="mf">60.0</span> <span class="o">/</span> <span class="mf">60.0</span> <span class="o">/</span> <span class="mf">24.0</span><span class="p">)</span>
<span class="n">sorted_major_releases</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt output_prompt">Out[7]:</div>

<div class="output_html rendered_html output_subarea output_execute_result">
<div style="max-height:1000px;max-width:1500px;overflow:auto;">
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>date</th>
      <th>version</th>
      <th>dummy</th>
      <th>time_in_development</th>
      <th>days_in_development</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>38</th>
      <td> 2009-04-11</td>
      <td> 0.1.0</td>
      <td> 0</td>
      <td>    NaT</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>37</th>
      <td> 2009-07-05</td>
      <td> 0.2.0</td>
      <td> 0</td>
      <td>85 days</td>
      <td> 85</td>
    </tr>
    <tr>
      <th>36</th>
      <td> 2009-08-01</td>
      <td> 0.3.0</td>
      <td> 0</td>
      <td>27 days</td>
      <td> 27</td>
    </tr>
    <tr>
      <th>35</th>
      <td> 2009-09-01</td>
      <td> 0.4.0</td>
      <td> 0</td>
      <td>31 days</td>
      <td> 31</td>
    </tr>
    <tr>
      <th>34</th>
      <td> 2009-10-01</td>
      <td> 0.5.0</td>
      <td> 0</td>
      <td>30 days</td>
      <td> 30</td>
    </tr>
  </tbody>
</table>
<p>5 rows × 5 columns</p>
</div>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>And now we are ready to plot:</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[8]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython2"><pre><span class="n">sorted_major_releases</span><span class="o">.</span><span class="n">days_in_development</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s">&quot;bar&quot;</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">xticks</span><span class="p">(</span>
    <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="n">sorted_major_releases</span><span class="o">.</span><span class="n">days_in_development</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="c"># Not sure why +1 is needed</span>
    <span class="n">sorted_major_releases</span><span class="o">.</span><span class="n">version</span><span class="o">.</span><span class="n">values</span><span class="p">,</span>
    <span class="n">rotation</span><span class="o">=</span><span class="mi">90</span>
<span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s">&quot;Days in development for Timeline releases&quot;</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt"></div>


<div class="output_png output_subarea ">
<img src="image2.png"
>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>That was fun!</p>
<p>Looks like we released often in the beginning and then changed release period at version 0.10.0. I know that we decided some time to have a new release roughly every 3rd month. Was it around 0.10.0? Then why are releases 0.11.0, 0.17.0, and 1.4.0 significantly longer?</p>
<p>From the changelog, it looks like version 0.11.0 contained very few changes. So maybe it was "delayed" because we had nothing useful to release.</p>
<p>The same goes for version 0.17.0.</p>
<p>Version 1.4.0 contained the undo feature that I remember that we wanted to test a bit more before making the release. So that is probably the cause of 1.4.0 being a little late.</p>
<h2 id="What-about-commit-frequency?">What about commit frequency?<a class="anchor-link" href="#What-about-commit-frequency?">&#182;</a></h2><p>Now, let's extract some data about commits to see if the data there supports our guesses above.</p>
<p>Let's start by extracting the dates of all commits:</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[9]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython2"><pre><span class="n">output</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">check_output</span><span class="p">([</span>
    <span class="s">&quot;hg&quot;</span><span class="p">,</span> <span class="s">&quot;log&quot;</span><span class="p">,</span>
    <span class="s">&quot;--template&quot;</span><span class="p">,</span> <span class="s">&quot;{date|isodate}</span><span class="se">\n</span><span class="s">&quot;</span>
<span class="p">],</span> <span class="n">cwd</span><span class="o">=</span><span class="n">PATH_TO_REPO</span><span class="p">)</span>

<span class="n">commits</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span>
    <span class="s">&quot;date&quot;</span><span class="p">:</span> <span class="p">[</span><span class="n">dateutil</span><span class="o">.</span><span class="n">parser</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="o">.</span><span class="n">date</span><span class="p">()</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">output</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)]</span>
<span class="p">})</span>
<span class="n">commits</span> <span class="o">=</span> <span class="n">commits</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="s">&quot;date&quot;</span><span class="p">)</span>
</pre></div>

</div>
</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[10]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython2"><pre><span class="n">commits</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt output_prompt">Out[10]:</div>

<div class="output_html rendered_html output_subarea output_execute_result">
<div style="max-height:1000px;max-width:1500px;overflow:auto;">
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>date</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>3147</th>
      <td> 2008-10-28</td>
    </tr>
    <tr>
      <th>3146</th>
      <td> 2008-10-29</td>
    </tr>
    <tr>
      <th>3145</th>
      <td> 2008-11-01</td>
    </tr>
    <tr>
      <th>3144</th>
      <td> 2008-11-02</td>
    </tr>
    <tr>
      <th>3143</th>
      <td> 2008-11-03</td>
    </tr>
  </tbody>
</table>
<p>5 rows × 1 columns</p>
</div>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[11]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython2"><pre><span class="n">commits</span><span class="o">.</span><span class="n">tail</span><span class="p">()</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt output_prompt">Out[11]:</div>

<div class="output_html rendered_html output_subarea output_execute_result">
<div style="max-height:1000px;max-width:1500px;overflow:auto;">
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>date</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td> 2015-06-19</td>
    </tr>
    <tr>
      <th>1</th>
      <td> 2015-06-19</td>
    </tr>
    <tr>
      <th>2</th>
      <td> 2015-06-19</td>
    </tr>
    <tr>
      <th>3</th>
      <td> 2015-06-19</td>
    </tr>
    <tr>
      <th>4</th>
      <td> 2015-06-19</td>
    </tr>
  </tbody>
</table>
<p>5 rows × 1 columns</p>
</div>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[12]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython2"><pre><span class="n">commits</span><span class="o">.</span><span class="n">describe</span><span class="p">()</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt output_prompt">Out[12]:</div>

<div class="output_html rendered_html output_subarea output_execute_result">
<div style="max-height:1000px;max-width:1500px;overflow:auto;">
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>date</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>count</th>
      <td>       3148</td>
    </tr>
    <tr>
      <th>unique</th>
      <td>        718</td>
    </tr>
    <tr>
      <th>top</th>
      <td> 2014-09-09</td>
    </tr>
    <tr>
      <th>freq</th>
      <td>         32</td>
    </tr>
  </tbody>
</table>
<p>4 rows × 1 columns</p>
</div>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>From that we can create a series that has the number of commits per day:</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[13]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython2"><pre><span class="n">commit_frequency</span> <span class="o">=</span> <span class="n">commits</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="s">&quot;date&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">count</span><span class="p">()</span><span class="o">.</span><span class="n">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="s">&quot;date&quot;</span><span class="p">:</span> <span class="s">&quot;number_of_commits&quot;</span><span class="p">})</span><span class="o">.</span><span class="n">asfreq</span><span class="p">(</span><span class="s">&quot;D&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">fillna</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">commit_frequency</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt output_prompt">Out[13]:</div>

<div class="output_html rendered_html output_subarea output_execute_result">
<div style="max-height:1000px;max-width:1500px;overflow:auto;">
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>number_of_commits</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2008-10-28</th>
      <td> 1</td>
    </tr>
    <tr>
      <th>2008-10-29</th>
      <td> 1</td>
    </tr>
    <tr>
      <th>2008-10-30</th>
      <td> 0</td>
    </tr>
    <tr>
      <th>2008-10-31</th>
      <td> 0</td>
    </tr>
    <tr>
      <th>2008-11-01</th>
      <td> 1</td>
    </tr>
  </tbody>
</table>
<p>5 rows × 1 columns</p>
</div>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Let's plot it to see what it looks like:</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[14]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython2"><pre><span class="n">commit_frequency</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>
<span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s">&quot;Number of commits over time&quot;</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">xticks</span><span class="p">(</span>
    <span class="n">sorted_major_releases</span><span class="o">.</span><span class="n">date</span><span class="o">.</span><span class="n">values</span><span class="p">,</span>
    <span class="n">sorted_major_releases</span><span class="o">.</span><span class="n">version</span><span class="o">.</span><span class="n">values</span><span class="p">,</span>
    <span class="n">rotation</span><span class="o">=</span><span class="mi">90</span>
<span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt"></div>


<div class="output_png output_subarea ">
<img src="image3.png"
>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Now let's see if we can look at a particular release. Let's look at the three we found took longer: 0.11.0, 0.17.0, and 1.4.0:</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[15]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython2"><pre><span class="k">def</span> <span class="nf">plot_commit_stat</span><span class="p">(</span><span class="n">start_release</span><span class="p">,</span> <span class="n">end_release</span><span class="p">):</span>
    <span class="n">span</span> <span class="o">=</span> <span class="n">major_releases</span><span class="p">[(</span><span class="n">major_releases</span><span class="o">.</span><span class="n">version</span> <span class="o">==</span> <span class="n">start_release</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">major_releases</span><span class="o">.</span><span class="n">version</span> <span class="o">==</span> <span class="n">end_release</span><span class="p">)]</span>
    <span class="n">start_date</span> <span class="o">=</span> <span class="n">span</span><span class="o">.</span><span class="n">date</span><span class="o">.</span><span class="n">min</span><span class="p">()</span>
    <span class="n">end_date</span> <span class="o">=</span> <span class="n">span</span><span class="o">.</span><span class="n">date</span><span class="o">.</span><span class="n">max</span><span class="p">()</span>
    <span class="n">commit_frequency</span><span class="p">[</span><span class="n">start_date</span><span class="p">:</span><span class="n">end_date</span><span class="p">]</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
    <span class="n">labels</span> <span class="o">=</span> <span class="n">major_releases</span><span class="p">[(</span><span class="n">major_releases</span><span class="o">.</span><span class="n">date</span> <span class="o">&gt;=</span> <span class="n">start_date</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">major_releases</span><span class="o">.</span><span class="n">date</span> <span class="o">&lt;=</span> <span class="n">end_date</span><span class="p">)]</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s">&quot;Number of commits between </span><span class="si">%s</span><span class="s"> - </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">start_release</span><span class="p">,</span> <span class="n">end_release</span><span class="p">))</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">xticks</span><span class="p">(</span>
        <span class="n">labels</span><span class="o">.</span><span class="n">date</span><span class="o">.</span><span class="n">values</span><span class="p">,</span>
        <span class="n">labels</span><span class="o">.</span><span class="n">version</span><span class="o">.</span><span class="n">values</span><span class="p">,</span>
        <span class="n">rotation</span><span class="o">=</span><span class="mi">90</span>
    <span class="p">)</span>

<span class="n">plot_commit_stat</span><span class="p">(</span><span class="s">&quot;0.10.0&quot;</span><span class="p">,</span> <span class="s">&quot;0.11.0&quot;</span><span class="p">)</span>
<span class="n">plot_commit_stat</span><span class="p">(</span><span class="s">&quot;0.16.0&quot;</span><span class="p">,</span> <span class="s">&quot;0.17.0&quot;</span><span class="p">)</span>
<span class="n">plot_commit_stat</span><span class="p">(</span><span class="s">&quot;1.3.0&quot;</span><span class="p">,</span> <span class="s">&quot;1.4.0&quot;</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt"></div>


<div class="output_png output_subarea ">
<img src="image4.png"
>
</div>

</div>

<div class="output_area"><div class="prompt"></div>


<div class="output_png output_subarea ">
<img src="image5.png"
>
</div>

</div>

<div class="output_area"><div class="prompt"></div>


<div class="output_png output_subarea ">
<img src="image6.png"
>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>The two earlier releases seem to contain fewer commits per day. The same that we saw from the changelog. Version 1.4.0 seems to have quite steady commits from the middle of the period. Looking at the overall commit frequency graph we also see that 1.4.0 contains the peak commits per day at around 32. So it's possible that it took longer because we wanted to add some more tests.</p>
<p>I'm not sure if I can draw any conclusions from this, but looking at data graphically is quite fun, and I've learned how to use the <a href="http://pandas.pydata.org/">Pandas library</a>.</p>

</div>
</div>
</div>

]]></description>
    <pubDate>Wed, 01 Jul 2015 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/timeline-release-stats/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>Analysis of Timeline emails</title>
    <link>http://rickardlindberg.me/writing/analysis-timeline-emails/</link>
    <description><![CDATA[<h1>Analysis of Timeline emails</h1>

<p><em>Published on 2015-06-21.</em></p>

<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>This article was written using <a href="http://ipython.org/">IPython Notebook</a>.</p>
<p>First we import all modules that we will use:</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[1]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython2"><pre><span class="o">%</span><span class="k">matplotlib</span> inline
<span class="kn">import</span> <span class="nn">mailbox</span>
<span class="kn">import</span> <span class="nn">email.utils</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="kn">as</span> <span class="nn">plt</span>
<span class="kn">import</span> <span class="nn">subprocess</span>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">import</span> <span class="nn">re</span>
</pre></div>

</div>
</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Paths that you might need to change if you want to reproduce this document yourself:</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[2]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython2"><pre><span class="n">PATH_TO_MALING_LIST_EXPORT</span> <span class="o">=</span> <span class="s">&quot;thetimelineproj-user&quot;</span>
<span class="n">PATH_TO_REPO</span> <span class="o">=</span> <span class="s">&quot;main-sf&quot;</span>
</pre></div>

</div>
</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>For reference, this is the Python version:</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[3]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython2"><pre><span class="n">sys</span><span class="o">.</span><span class="n">version</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt output_prompt">Out[3]:</div>


<div class="output_text output_subarea output_execute_result">
<pre>&apos;2.7.6 (default, Mar 22 2014, 22:59:56) \n[GCC 4.8.2]&apos;</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="An-iterator-for-emails">An iterator for emails<a class="anchor-link" href="#An-iterator-for-emails">&#182;</a></h2><p>I downloaded all emails from SourceForge. (You need to be project admin to do that.) It came in mbox format. We can work with it in Python like this:</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[4]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython2"><pre><span class="k">def</span> <span class="nf">email_iterator</span><span class="p">():</span>
    <span class="k">for</span> <span class="n">message</span> <span class="ow">in</span> <span class="n">mailbox</span><span class="o">.</span><span class="n">mbox</span><span class="p">(</span><span class="n">PATH_TO_MALING_LIST_EXPORT</span><span class="p">):</span>
        <span class="k">yield</span> <span class="n">Message</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Message</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
        <span class="n">date</span> <span class="o">=</span> <span class="n">email</span><span class="o">.</span><span class="n">utils</span><span class="o">.</span><span class="n">parsedate_tz</span><span class="p">(</span><span class="n">message</span><span class="p">[</span><span class="s">&quot;date&quot;</span><span class="p">])</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">month_tuple</span> <span class="o">=</span> <span class="p">(</span><span class="n">date</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">date</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">subject</span> <span class="o">=</span> <span class="n">message</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&quot;subject&quot;</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">)</span>
</pre></div>

</div>
</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Let's see if we can get the title of the first email:</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[5]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython2"><pre><span class="n">email_iterator</span><span class="p">()</span><span class="o">.</span><span class="n">next</span><span class="p">()</span><span class="o">.</span><span class="n">subject</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt output_prompt">Out[5]:</div>


<div class="output_text output_subarea output_execute_result">
<pre>&apos;[Thetimelineproj-user] Test&apos;</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>And count them all:</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[6]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython2"><pre><span class="nb">len</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">email_iterator</span><span class="p">()))</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt output_prompt">Out[6]:</div>


<div class="output_text output_subarea output_execute_result">
<pre>2126</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Email-frequency">Email frequency<a class="anchor-link" href="#Email-frequency">&#182;</a></h2><p>The first question I would like to answer is how email frequency looks like over time. Let's extract some data:</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[7]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython2"><pre><span class="n">emails_per_month</span> <span class="o">=</span> <span class="p">{}</span>
<span class="k">for</span> <span class="n">message</span> <span class="ow">in</span> <span class="n">email_iterator</span><span class="p">():</span>
    <span class="n">emails_per_month</span><span class="p">[</span><span class="n">message</span><span class="o">.</span><span class="n">month_tuple</span><span class="p">]</span> <span class="o">=</span> <span class="n">emails_per_month</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">message</span><span class="o">.</span><span class="n">month_tuple</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>
</pre></div>

</div>
</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Let's see if we got that right. What are the first 5 keys?</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[8]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython2"><pre><span class="nb">sorted</span><span class="p">(</span><span class="n">emails_per_month</span><span class="o">.</span><span class="n">keys</span><span class="p">())[:</span><span class="mi">5</span><span class="p">]</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt output_prompt">Out[8]:</div>


<div class="output_text output_subarea output_execute_result">
<pre>[(2009, 6), (2009, 7), (2009, 8), (2009, 9), (2009, 10)]</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Looks right. What about frequencies?</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[9]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython2"><pre><span class="n">emails_per_month</span><span class="p">[(</span><span class="mi">2009</span><span class="p">,</span> <span class="mi">6</span><span class="p">)]</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt output_prompt">Out[9]:</div>


<div class="output_text output_subarea output_execute_result">
<pre>2</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[10]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython2"><pre><span class="n">emails_per_month</span><span class="p">[(</span><span class="mi">2009</span><span class="p">,</span> <span class="mi">7</span><span class="p">)]</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt output_prompt">Out[10]:</div>


<div class="output_text output_subarea output_execute_result">
<pre>12</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Looks good too. And how many emails have we got in total?</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[11]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython2"><pre><span class="nb">sum</span><span class="p">(</span><span class="n">emails_per_month</span><span class="o">.</span><span class="n">values</span><span class="p">())</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt output_prompt">Out[11]:</div>


<div class="output_text output_subarea output_execute_result">
<pre>2126</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Next we would like to plot this data. Here are some functions for that:</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[12]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython2"><pre><span class="k">def</span> <span class="nf">plot_frequencies_per_month</span><span class="p">(</span><span class="n">frequencies_per_month</span><span class="p">):</span>
    <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">xlabels</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="o">=</span> <span class="p">([],</span> <span class="p">[],</span> <span class="p">[])</span>
    
    <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">year</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2009</span><span class="p">,</span> <span class="mi">2016</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">month</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">13</span><span class="p">):</span>
            <span class="n">x</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">index</span><span class="p">)</span>
            <span class="n">xlabels</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&quot;</span><span class="si">%d</span><span class="s">-</span><span class="si">%02d</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">year</span><span class="p">,</span> <span class="n">month</span><span class="p">))</span>
            <span class="n">y</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">frequencies_per_month</span><span class="o">.</span><span class="n">get</span><span class="p">((</span><span class="n">year</span><span class="p">,</span> <span class="n">month</span><span class="p">),</span> <span class="mi">0</span><span class="p">))</span>
            <span class="n">index</span> <span class="o">+=</span> <span class="mi">1</span>

    <span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">bar</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">align</span><span class="o">=</span><span class="s">&quot;center&quot;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="p">(</span><span class="mf">0.8</span><span class="p">,</span> <span class="mf">0.8</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">xticks</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">xlabels</span><span class="p">,</span> <span class="n">rotation</span><span class="o">=</span><span class="mi">90</span><span class="p">)</span>

    <span class="n">plot_moving_average</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="s">&quot;r&quot;</span><span class="p">)</span>
    <span class="n">plot_moving_average</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="s">&quot;g&quot;</span><span class="p">)</span>
    <span class="n">plot_moving_average</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>

    <span class="n">plt</span><span class="o">.</span><span class="n">legend</span><span class="p">()</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">tight_layout</span><span class="p">()</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">axis</span><span class="p">(</span><span class="s">&quot;tight&quot;</span><span class="p">)</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">grid</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="s">&quot;y&quot;</span><span class="p">)</span>
    
<span class="k">def</span> <span class="nf">plot_moving_average</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">period_length</span><span class="p">,</span> <span class="n">color</span><span class="p">):</span>
    <span class="n">averages</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">period_length</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">averages</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">index</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">y</span><span class="p">)</span><span class="o">-</span><span class="n">period_length</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">averages</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">sum</span><span class="p">(</span><span class="n">y</span><span class="p">[</span><span class="n">index</span><span class="p">:</span><span class="n">index</span><span class="o">+</span><span class="n">period_length</span><span class="p">])</span> <span class="o">/</span> <span class="n">period_length</span><span class="p">)</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">averages</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="n">color</span><span class="p">,</span> <span class="n">linewidth</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">&quot;</span><span class="si">%d</span><span class="s"> months moving average&quot;</span> <span class="o">%</span> <span class="n">period_length</span><span class="p">)</span>
</pre></div>

</div>
</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>And the result is this:</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[13]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython2"><pre><span class="n">plot_frequencies_per_month</span><span class="p">(</span><span class="n">emails_per_month</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s">&quot;Number of emails per month&quot;</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt"></div>


<div class="output_png output_subarea ">
<img src="image1.png"
>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>The email frequency seems pretty constant until around 2013-08. What happened then? On 30 September 2013 version 1.0.0 was released. The peak at 2013-10 is right after the 1.0.0 release. Does it mean that users are afraid to use software where the version number is &lt; 1.0 because it feels unstable?</p>
<p>On the other hand, what does email frequncy mean? Let's have a look at the emails from 2013-10.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[14]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython2"><pre><span class="n">peak_emails</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">message</span> <span class="ow">in</span> <span class="n">email_iterator</span><span class="p">():</span>
    <span class="k">if</span> <span class="n">message</span><span class="o">.</span><span class="n">month_tuple</span> <span class="o">==</span> <span class="p">(</span><span class="mi">2013</span><span class="p">,</span> <span class="mi">10</span><span class="p">):</span>
        <span class="n">peak_emails</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</pre></div>

</div>
</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>From the diagram, the number of peak emails should be a little over 140. Does it match?</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[15]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython2"><pre><span class="nb">len</span><span class="p">(</span><span class="n">peak_emails</span><span class="p">)</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt output_prompt">Out[15]:</div>


<div class="output_text output_subarea output_execute_result">
<pre>150</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Let's look at the titles:</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[16]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython2"><pre><span class="k">for</span> <span class="n">subject</span> <span class="ow">in</span> <span class="nb">sorted</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">message</span><span class="o">.</span><span class="n">subject</span> <span class="k">for</span> <span class="n">message</span> <span class="ow">in</span> <span class="n">peak_emails</span><span class="p">)):</span>
    <span class="k">print</span><span class="p">(</span><span class="n">subject</span><span class="p">)</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt"></div>
<div class="output_subarea output_stream output_stdout output_text">
<pre>1 of 3 Event Hides or Disappears Upon Zoom-In
=?UTF-8?Q?SV:_Crash_report:_OverflowError:_l?=
	=?UTF-8?Q?ong_int_too_large_to_convert_to_int=E2=80=8F?=
=?windows-1256?Q?Crash_repo?= =?windows-1256?Q?rt:_Overfl?=
	=?windows-1256?Q?owError:_l?= =?windows-1256?Q?ong_int_to?=
	=?windows-1256?Q?o_large_to?= =?windows-1256?Q?_convert_t?=
	=?windows-1256?Q?o_int=FE?=
Ampersand breaks svg export
Bug report + suggestion .................and a supplicate
Can containers be nested?
Category Uncheck &quot;stickyness&quot;
Coding standards
Crash report: AttributeError: &apos;NoneType&apos; object has no attribute
	&apos;path&apos;
Crash report: AttributeError: &apos;tuple&apos; object has no attribute &apos;year&apos;
Crash report: OverflowError: long int too large to convert to int
Feedback
Feedback + an addition
Feedback on event editor dialog
File Notification from brian@genalchemy.com: TLP-1.0-Problem.zip
Installing from source in Android?
Keyboard Shortcuts
Loss of Period Events Created in 2.1 Series Timeline
New category tree 
Numeric timeline
Period Stability Bug in v 1.0
Re: 1 of 3 Event Hides or Disappears Upon Zoom-In
Re: Ampersand breaks svg export
Re: Bug report + suggestion .................and a supplicate
Re: Can containers be nested?
Re: Category Uncheck &quot;stickyness&quot;
Re: Coding standards
Re: Crash report: AttributeError: &apos;NoneType&apos; object has no
	attribute&apos;path&apos;
Re: Crash report: AttributeError: &apos;NoneType&apos; object has no attribute
	&apos;path&apos;
Re: Crash report: AttributeError: &apos;tuple&apos; object has no attribute
	&apos;year&apos;
Re: Crash report: OverflowError: long int too large to convert to int
Re: Crash report: PyAssertionError: C++ assertion
	&quot;win-&gt;GetBackgroundStyle() == wxBG_STYLE_CUSTOM&quot; failed at
	c:\BUILD\wxPython-src-2.8.11.0\include\wx/dcbuffer.h(251)
	in wxAutoBufferedPaintDC::TestWinStyle(): In constructor,
	you need to call SetBackgroundStyl
Re: Feedback
Re: Feedback + an addition
Re: Feedback on event editor dialog
Re: Installing from source in Android?
Re: Keyboard Shortcuts
Re: Loss of Period Events Created in 2.1 Series Timeline
Re: New category tree
Re: Numeric timeline
Re: Period Stability Bug in v 1.0
Re: Release annonuncer
Re: SV: Coding standards
Re: Saving a readable whole chronology image + svg export bug
Re: The announcer
Re: Updates
Re: Zooming
Re: import data for a time line from Excel??
Re: possible typo in
	timelinelib/wxgui/component.py::DummyConfig.__init__()
Re: svg image export
Re: thetimelineproj-user Digest, Vol 51, Issue 12
Re: thetimelineproj-user Digest, Vol 51, Issue 2
Re: thetimelineproj-user Digest, Vol 51, Issue 3
Release annonuncer
SV: 1 of 3 Event Hides or Disappears Upon Zoom-In
SV: Bug report + suggestion .................and a supplicate
SV: Can containers be nested?
SV: Coding standards
SV: Crash report: AttributeError: &apos;NoneType&apos; object has no
	attribute	&apos;path&apos;
SV: Crash report: AttributeError: &apos;NoneType&apos; object has no
	attribute&apos;path&apos;
SV: FW: Disappearing Period Events....
SV: Keyboard Shortcuts
SV: Loss of Period Events Created in 2.1 Series Timeline
SV: New category tree
SV: RE: SV: Crash report: OverflowError: long int too large to
	convert to int?
SV: Release annonuncer
SV: SV: Coding standards
SV: String Index Out of Range
SV: The announcer
SV: Two Questions: Cmd-line and seconds
SV: thetimelineproj-user Digest, Vol 51, Issue 2
Saving a readable whole chronology image + svg export bug
String Index Out of Range
The announcer
Two Questions: Cmd-line and seconds
Updates
Zooming
import data for a time line from Excel??
possible typo in
	timelinelib/wxgui/component.py::DummyConfig.__init__()
small suggestion
svg image export
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Not sure if this says anything.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Crash-report-frequency">Crash report frequency<a class="anchor-link" href="#Crash-report-frequency">&#182;</a></h2><p>Now let's do the same frequency analysis but only include crash report emails. They were introduced later in Timeline and therefore we should not see such reports early on.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[17]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython2"><pre><span class="n">crash_reports_per_month</span> <span class="o">=</span> <span class="p">{}</span>
<span class="k">for</span> <span class="n">message</span> <span class="ow">in</span> <span class="n">email_iterator</span><span class="p">():</span>
    <span class="k">if</span> <span class="s">&quot;Crash report&quot;</span> <span class="ow">in</span> <span class="n">message</span><span class="o">.</span><span class="n">subject</span><span class="p">:</span>
        <span class="n">crash_reports_per_month</span><span class="p">[</span><span class="n">message</span><span class="o">.</span><span class="n">month_tuple</span><span class="p">]</span> <span class="o">=</span> <span class="n">crash_reports_per_month</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">message</span><span class="o">.</span><span class="n">month_tuple</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>
        
<span class="n">plot_frequencies_per_month</span><span class="p">(</span><span class="n">crash_reports_per_month</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s">&quot;Number of crash reports per month&quot;</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt"></div>


<div class="output_png output_subarea ">
<img src="image2.png"
>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>It's a little harder to see a trend here becuase of lack of data early on. But it looks like there is a slight increase around 2015-02. What happened then? Nothing in particular from the changelog.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Commit-frequency">Commit frequency<a class="anchor-link" href="#Commit-frequency">&#182;</a></h2><p>It would be interesting to look at the repo history. What are the number of commits each month? Does that affect the number of emails or crash reports each month?</p>
<p>We can extract the frequencies of commits per month like this:</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[18]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython2"><pre><span class="n">output</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">check_output</span><span class="p">([</span>
    <span class="s">&quot;hg&quot;</span><span class="p">,</span> <span class="s">&quot;log&quot;</span><span class="p">,</span>
    <span class="s">&quot;--template&quot;</span><span class="p">,</span> <span class="s">&quot;{date|isodate}</span><span class="se">\n</span><span class="s">&quot;</span>
<span class="p">],</span> <span class="n">cwd</span><span class="o">=</span><span class="n">PATH_TO_REPO</span><span class="p">)</span>

<span class="n">commits_per_month</span> <span class="o">=</span> <span class="p">{}</span>

<span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">output</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">):</span>
    <span class="n">match</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s">r&quot;(\d{4})-(\d{2})&quot;</span><span class="p">,</span> <span class="n">line</span><span class="p">)</span>
    <span class="n">month_tuple</span> <span class="o">=</span> <span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">match</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">)),</span> <span class="nb">int</span><span class="p">(</span><span class="n">match</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">2</span><span class="p">)))</span>
    <span class="n">commits_per_month</span><span class="p">[</span><span class="n">month_tuple</span><span class="p">]</span> <span class="o">=</span> <span class="n">commits_per_month</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">month_tuple</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>
</pre></div>

</div>
</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>The plot:</p>

</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[19]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython2"><pre><span class="n">plot_frequencies_per_month</span><span class="p">(</span><span class="n">commits_per_month</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s">&quot;Number of commits per month&quot;</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt"></div>


<div class="output_png output_subarea ">
<img src="image3.png"
>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>There is a peak of commits around 2014-09.</p>
<p>To see how data correlates it would be better to have the time period be releases instead of months. That way we can more easily see how the frequencies of emails and commits varies between releases of Timeline. Maybe the next analysis article?</p>

</div>
</div>
</div>

]]></description>
    <pubDate>Sun, 21 Jun 2015 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/analysis-timeline-emails/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>

    </channel>
</rss>
