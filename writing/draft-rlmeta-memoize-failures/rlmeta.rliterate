{
"root_page":{
"children":[
{
"children":[],
"id":"a9a4166e943a4d2c974c443cef1da5a9",
"paragraphs":[
{
"chunkpath":[
"match rule"
],
"filepath":[
"optimized",
"support.py"
],
"fragments":[
{
"text":"def _match_rule(self, rule_name):\n    key = (rule_name, self._stream.position())\n    if key in self._memo:\n        if self._memo[key][0] is None:\n            self._stream.fail(\"\")\n        else:\n            result, _, self._stream = self._memo[key]\n    else:\n        try:\n            start = self._stream\n            result = getattr(self, \"_rule_{}\".format(rule_name))()\n            end = self._stream\n            self._memo[key] = (result, start, end)\n        except _MatchError as e:\n            self._memo[key] = (None, None, None)\n            raise\n    return result\n",
"type":"code"
}
],
"id":"49bd6fdc3d8a40a9ae62454cafe2e330",
"type":"code"
}
],
"title":"Optimized"
},
{
"children":[],
"id":"fe17638693e344ad9e521e55bf0676f3",
"paragraphs":[
{
"chunkpath":[
"RETURN"
],
"filepath":[
"vm",
"support.py"
],
"fragments":[
{
"text":"if len(call_backtrack_stack) == 0:\n    return last_action.eval()\npc, key = call_backtrack_stack.pop()\nmemo[key] = (last_action, stream_pos_stack+[(stream, pos)])\ncontinue\n",
"type":"code"
}
],
"id":"20ace23911b1446ab7c8e6cba4a4527a",
"type":"code"
},
{
"chunkpath":[
"pop backtrack entries"
],
"filepath":[
"vm",
"support.py"
],
"fragments":[
{
"text":"call_backtrack_entry = tuple()\nwhile call_backtrack_stack:\n    call_backtrack_entry = call_backtrack_stack.pop()\n    if len(call_backtrack_entry) == 4:\n        break\n    else:\n        _, key = call_backtrack_entry\n        memo[key] = (None, fail_message)\n",
"type":"code"
}
],
"id":"09bb7d528d084ca7a31b98ea7659a8a0",
"type":"code"
},
{
"chunkpath":[
"CALL"
],
"filepath":[
"vm",
"support.py"
],
"fragments":[
{
"text":"key = (arg1, tuple([x[1] for x in stream_pos_stack]+[pos]))\nif key in memo:\n    if memo[key][0] is None:\n        fail_message = memo[key][1]\n    else:\n        last_action, stream_pos_stack = memo[key]\n        stream_pos_stack = stream_pos_stack[:]\n        stream, pos = stream_pos_stack.pop()\n        pc += 1\n        continue\nelse:\n    call_backtrack_stack.append((pc+1, key))\n    pc = labels[arg1]\n    continue\n",
"type":"code"
}
],
"id":"7f7bb394b7b9434eb91e19118aa52a0a",
"type":"code"
},
{
"chunkpath":[
"MATCH_CALL_RULE"
],
"filepath":[
"vm",
"support.py"
],
"fragments":[
{
"text":"if pos >= len(stream):\n    fail_message = (\"expected any\",)\nelse:\n    fn_name = str(stream[pos])\n    key = (fn_name, tuple([x[1] for x in stream_pos_stack]+[pos]))\n    if key in memo:\n        if memo[key][0] is None:\n            fail_message = memo[key][1]\n        else:\n            last_action, stream_pos_stack = memo[key]\n            stream_pos_stack = stream_pos_stack[:]\n            stream, pos = stream_pos_stack.pop()\n            pc += 1\n            continue\n    else:\n        call_backtrack_stack.append((pc+1, key))\n        pc = labels[fn_name]\n        pos += 1\n        continue\n",
"type":"code"
}
],
"id":"6ff1e38b876b4f32b4a004a4611c1639",
"type":"code"
}
],
"title":"VM"
},
{
"children":[],
"id":"42ae6babf74d427880f831bd14109002",
"paragraphs":[
{
"fragments":[
{
"text":"Enter image text here...",
"type":"text"
}
],
"id":"866972443e7644629d53b53db0607fb5",
"image_base64":"",
"type":"image"
}
],
"title":"Results"
},
{
"children":[
{
"children":[],
"id":"9818dacb067848a48d8d593215719064",
"paragraphs":[
{
"chunkpath":[],
"filepath":[
"optimized",
"parser.rlmeta"
],
"fragments":[
{
"text":"Parser {\n  grammar =\n    | name:x space '{' rule*:ys space '}'      -> [\"Grammar\" x ~ys]\n  rule =\n    | name:x space '=' choice:y                -> [\"Rule\" x y]\n  choice =\n    | (space '|')?\n      sequence:x (space '|' sequence)*:xs      -> [\"Or\" x ~xs]\n  sequence =\n    | expr:x expr*:xs                          -> [\"Scope\" [\"And\" x ~xs]]\n  expr =\n    | expr1:x space ':' name:y                 -> [\"Bind\" y x]\n    | expr1\n  expr1 =\n    | expr2:x space '*'                        -> [\"Star\" x]\n    | expr2:x space '?'                        -> [\"Or\" x [\"And\"]]\n    | space '!' expr2:x                        -> [\"Not\" x]\n    | space '%'                                -> [\"MatchCallRule\"]\n    | expr2\n  expr2 =\n    | space '->' hostExpr:x                    -> [\"SemanticAction\" x]\n    | name:x !(space '=')                      -> [\"MatchRule\" x]\n    | space char:x '-' char:y                  -> [\"MatchRange\" x y]\n    | space string:x                           -> [\"MatchString\" x]\n    | space charseq:x                          -> [\"MatchCharseq\" x]\n    | space '.'                                -> [\"MatchAny\"]\n    | space '(' choice:x space ')'             -> x\n    | space '[' expr*:xs space ']'             -> [\"MatchList\" [\"And\" ~xs]]\n  hostExpr =\n    | space string:x                           -> [\"String\" x]\n    | space '[' hostExprListItem*:xs space ']' -> [\"List\" ~xs]\n    | space '{' buildExpr*:xs space '}'        -> [\"Builder\" ~xs]\n    | name:x space '(' hostExpr*:ys space ')'  -> [\"FnCall\" x ~ys]\n    | name:x                                   -> [\"VarLookup\" x]\n  hostExprListItem =\n    | space '~' hostExpr:x                     -> [\"ListItemSplice\" x]\n    | hostExpr\n  buildExpr =\n    | space '>'                                -> [\"IndentBuilder\"]\n    | space '<'                                -> [\"DedentBuilder\"]\n    | hostExpr\n  string    = '\"'  (!'\"'  innerChar)*:xs '\"'   -> join(xs)\n  charseq   = '\\'' (!'\\'' innerChar)*:xs '\\''  -> join(xs)\n  char      = '\\''  !'\\'' innerChar  :x  '\\''  -> x\n  innerChar = '\\\\' escape | .\n  escape    = '\\\\' -> \"\\\\\" | '\\'' -> \"'\"\n            | '\"'  -> \"\\\"\" | 'n'  -> \"\\n\"\n  name      = space nameStart:x nameChar*:xs   -> join([x ~xs])\n  nameStart = 'a'-'z' | 'A'-'Z'\n  nameChar  = 'a'-'z' | 'A'-'Z' | '0'-'9'\n  space     = (' ' | '\\n')*\n}\n",
"type":"code"
}
],
"id":"30e8da90e5fa4b988d5938381e91cd26",
"type":"code"
}
],
"title":"parser.rlmeta"
},
{
"children":[],
"id":"f7faa2ba27d644feb0d879b808214232",
"paragraphs":[
{
"chunkpath":[],
"filepath":[
"optimized",
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"CodeGenerator {\n  Grammar        = .:x ast*:ys     -> { \"class \" x \"(_Grammar):\\n\" > ys <                       }\n  Rule           = .:x ast:y       -> { \"\\ndef _rule_\" x \"(self):\\n\" > \"return \" y \"()\\n\" <     }\n  MatchAny       =                 -> { \"self._match_any\"                                       }\n  MatchCallRule  =                 -> { \"self._match_call_rule\"                                 }\n  String         = .:x             -> { repr(x)                                                 }\n  List           = astList:x       -> { x                                                       }\n  Builder        = astItems:x      -> { \"_Builder.create([\" x \"])\"                              }\n  IndentBuilder  =                 -> { \"_IndentBuilder()\"                                      }\n  DedentBuilder  =                 -> { \"_DedentBuilder()\"                                      }\n  FnCall         = .:x astItems:y  -> { x \"(\" y \")\"                                             }\n  VarLookup      = .:x             -> { \"_vars.lookup(\" repr(x) \").eval()\"                      }\n  Or             =\n    | ast:x !.                     -> x\n    | astItems:x                   -> { \"(lambda: self._or([\" x \"]))\"                           }\n  Scope          = ast:x           -> { \"(lambda: (lambda _vars:\\n\" > x < \"()\\n)(_Vars()))\"     }\n  And            =\n    | ast:x !.                     -> x\n    | astItems:x                   -> { \"(lambda: self._and([\" x \"]))\"                          }\n  Bind           = .:x ast:y       -> { \"(lambda: _vars.bind(\" repr(x) \", \" y \"()))\"            }\n  Star           = ast:x           -> { \"(lambda: self._star(\" x \"))\"                           }\n  Not            = ast:x           -> { \"(lambda: self._not(\" x \"))\"                            }\n  SemanticAction = ast:x           -> { \"(lambda: _SemanticAction(lambda: \" x \"))\"              }\n  MatchRule      = .:x             -> { \"(lambda: self._match_rule(\" repr(x) \"))\"               }\n  MatchRange     = .:x .:y         -> { \"(lambda: self._match_range(\" repr(x) \", \" repr(y) \"))\" }\n  MatchString    = .:x             -> { \"(lambda: self._match_string(\" repr(x) \"))\"             }\n  MatchCharseq   = .:x             -> { \"(lambda: self._match_charseq(\" repr(x) \"))\"            }\n  MatchList      = ast:x           -> { \"(lambda: self._match_list(\" x \"))\"                     }\n  ast            = [%:x]           -> x\n  astItems       = astItem*:xs     -> { \"\\n\" > xs <                                             }\n  astItem        = ast:x           -> { x \",\\n\"                                                 }\n  astList        = astListItem*:xs -> { \"(\" xs \"[])\"                                            }\n  astListItem    =\n    | [\"ListItemSplice\" ast:x]     -> {     x  \"+\"                                              }\n    | ast:x                        -> { \"[\" x \"]+\"                                              }\n}\n",
"type":"code"
}
],
"id":"2924a3b3a22b43e4808a867ab3bb2e9f",
"type":"code"
}
],
"title":"codegenerator.rlmeta"
},
{
"children":[],
"id":"a7c587100e7b471398ab18d4ac876d81",
"paragraphs":[
{
"chunkpath":[],
"filepath":[
"optimized",
"support.py"
],
"fragments":[
{
"text":"try:\n    from cStringIO import StringIO\nexcept:\n    from StringIO import StringIO\n\nclass _Grammar(object):\n\n    def _or(self, matchers):\n        original_stream = self._stream\n        for matcher in matchers[:-1]:\n            try:\n                return matcher()\n            except _MatchError:\n                self._stream = original_stream\n        return matchers[-1]()\n\n    def _and(self, matchers):\n        result = None\n        for matcher in matchers:\n            result = matcher()\n        return result\n\n    def _star(self, matcher):\n        result = []\n        while True:\n            original_stream = self._stream\n            try:\n                result.append(matcher())\n            except _MatchError:\n                self._stream = original_stream\n                return _SemanticAction(lambda: [x.eval() for x in result])\n\n    def _not(self, matcher):\n        original_stream = self._stream\n        try:\n            matcher()\n        except _MatchError:\n            return _SemanticAction(lambda: None)\n        else:\n            original_stream.fail(lambda: \"match found\")\n        finally:\n            self._stream = original_stream\n\n",
"type":"code"
},
{
"blank_lines_before":0,
"path":[
"match rule"
],
"prefix":"    ",
"type":"chunk"
},
{
"text":"\n    def _match_range(self, start, end):\n        next_objext = self._stream.peek()\n        if next_objext >= start and next_objext <= end:\n            self._stream = self._stream.advance()\n            return _SemanticAction(lambda: next_objext)\n        else:\n            self._stream.fail(\n                lambda: \"expected range {!r}-{!r} but found {!r}\".format(start, end, next_objext)\n            )\n\n    def _match_string(self, string):\n        next_object = self._stream.peek()\n        if next_object == string:\n            self._stream = self._stream.advance()\n            return _SemanticAction(lambda: string)\n        else:\n            self._stream.fail(\n                lambda: \"expected {!r} but found {!r}\".format(string, next_object)\n            )\n\n    def _match_charseq(self, charseq):\n        for char in charseq:\n            next_object = self._stream.peek()\n            if next_object != char:\n                self._stream.fail(\n                    lambda: \"expected {!r} but found {!r}\".format(char, next_object)\n                )\n            self._stream = self._stream.advance()\n        return _SemanticAction(lambda: charseq)\n\n    def _match_any(self):\n        next_object = self._stream.peek()\n        self._stream = self._stream.advance()\n        return _SemanticAction(lambda: next_object)\n\n    def _match_call_rule(self):\n        next_object = self._stream.peek()\n        self._stream = self._stream.advance()\n        return self._match_rule(str(next_object))\n\n    def _match_list(self, matcher):\n        original_stream = self._stream\n        next_object = self._stream.peek()\n        if isinstance(next_object, list):\n            self._stream = self._stream.nested(next_object)\n            matcher()\n            if self._stream.is_at_end():\n                self._stream = original_stream.advance()\n                return _SemanticAction(lambda: next_object)\n        original_stream.fail(lambda: \"list match failed\")\n\n    def run(self, rule_name, input_object):\n        self._memo = _Memo()\n        self._stream = _Stream.from_object(self._memo, input_object)\n        result = self._match_rule(rule_name).eval()\n        if isinstance(result, _Builder):\n            return result.build_string()\n        else:\n            return result\n\nclass _Vars(dict):\n\n    def bind(self, name, value):\n        self[name] = value\n        return value\n\n    def lookup(self, name):\n        return self[name]\n\nclass _SemanticAction(object):\n\n    def __init__(self, fn):\n        self.fn = fn\n\n    def eval(self):\n        return self.fn()\n\nclass _Builder(object):\n\n    def build_string(self):\n        output = _Output()\n        self.write(output)\n        return output.value\n\n    @classmethod\n    def create(self, item):\n        if isinstance(item, _Builder):\n            return item\n        elif isinstance(item, list):\n            return _ListBuilder([_Builder.create(x) for x in item])\n        else:\n            return _AtomBuilder(item)\n\nclass _Output(object):\n\n    def __init__(self):\n        self.buffer = StringIO()\n        self.indentation = 0\n        self.on_newline = True\n\n    @property\n    def value(self):\n        return self.buffer.getvalue()\n\n    def write(self, value):\n        for ch in value:\n            is_linebreak = ch == \"\\n\"\n            if self.indentation and self.on_newline and not is_linebreak:\n                self.buffer.write(\"    \"*self.indentation)\n            self.buffer.write(ch)\n            self.on_newline = is_linebreak\n\nclass _ListBuilder(_Builder):\n\n    def __init__(self, builders):\n        self.builders = builders\n\n    def write(self, output):\n        for builder in self.builders:\n            builder.write(output)\n\nclass _AtomBuilder(_Builder):\n\n    def __init__(self, atom):\n        self.atom = atom\n\n    def write(self, output):\n        output.write(str(self.atom))\n\nclass _IndentBuilder(_Builder):\n\n    def write(self, output):\n        output.indentation += 1\n\nclass _DedentBuilder(_Builder):\n\n    def write(self, output):\n        output.indentation -= 1\n\nclass _Memo(dict):\n\n    def __init__(self):\n        dict.__init__(self)\n        self._latest_stream = _ObjectStream(self, [], -1)\n        self._latest_lazy_message = lambda: \"\"\n\n    def describe(self):\n        items = []\n        for (rule_name, _), (_, start, end) in self.items():\n            if end > start:\n                items.append((rule_name, start, end))\n        items.sort(key=lambda item: (item[2].position(), item[1].position()))\n        message = []\n        for item in items:\n            message.append(\"matched {: <20} {} -> {}\\n\".format(*item))\n        message.append(\"\\n\")\n        message.append(\"ERROR: {}: {}\\n\".format(\n            self._latest_stream,\n            self._latest_lazy_message()\n        ))\n        return \"\".join(message)\n\n    def fail(self, stream, lazy_message):\n        if stream.position() >= self._latest_stream.position():\n            self._latest_stream = stream\n            self._latest_lazy_message = lazy_message\n        raise _MatchError(self)\n\nclass _MatchError(Exception):\n\n    def __init__(self, memo):\n        Exception.__init__(self)\n        self._memo = memo\n\n    def describe(self):\n        return self._memo.describe()\n\nclass _Stream(object):\n\n    @classmethod\n    def from_object(cls, memo, input_object):\n        if isinstance(input_object, basestring):\n            return _CharStream(memo, input_object, 0)\n        else:\n            return _ObjectStream(memo, [input_object], 0)\n\n    def __init__(self, memo, objects, index):\n        self._memo = memo\n        self._objects = objects\n        self._index = index\n\n    def fail(self, lazy_message):\n        self._memo.fail(self, lazy_message)\n\n    def peek(self):\n        if self.is_at_end():\n            self.fail(lambda: \"not eof\")\n        return self._objects[self._index]\n\n    def is_at_end(self):\n        return self._index >= len(self._objects)\n\nclass _CharStream(_Stream):\n\n    def __init__(self, memo, objects, index, line=1, column=1):\n        _Stream.__init__(self, memo, objects, index)\n        self._line = line\n        self._column = column\n\n    def position(self):\n        return self._index\n\n    def advance(self):\n        if self._objects[self._index] == \"\\n\":\n            line = self._line + 1\n            column = 1\n        else:\n            line = self._line\n            column = self._column + 1\n        return _CharStream(self._memo, self._objects, self._index+1, line, column)\n\n    def __str__(self):\n        return \"L{:03d}:C{:03d}\".format(self._line, self._column)\n\nclass _ObjectStream(_Stream):\n\n    def __init__(self, memo, objects, index, parent=()):\n        _Stream.__init__(self, memo, objects, index)\n        self._parent_position = parent\n        self._position = self._parent_position + (self._index,)\n\n    def position(self):\n        return self._position\n\n    def nested(self, input_object):\n        return _ObjectStream(self._memo, input_object, 0, self._position)\n\n    def advance(self):\n        return _ObjectStream(self._memo, self._objects, self._index+1, self._parent_position)\n\n    def __str__(self):\n        return \"[{}]\".format(\", \".join(str(x) for x in self.position()))\n",
"type":"code"
}
],
"id":"aca14d0f6ac5466b86977fb1f64dbfe7",
"type":"code"
}
],
"title":"support.py"
},
{
"children":[],
"id":"712c4e18d59b4c8ba02c7fa9cf06a8e3",
"paragraphs":[
{
"chunkpath":[],
"filepath":[
"optimized",
"compile.sh"
],
"fragments":[
{
"text":"#!/bin/bash\n\nset -e\n\nrlmeta_compiler=\"$(pwd)/$1\"\n\ncd \"$(dirname \"$0\")\"\n\nto_python_string() {\n    python -c 'import sys; sys.stdout.write(repr(sys.stdin.read()))'\n}\n\nsupport_py_string=$(to_python_string < support.py)\nsupport_py=$(python \"$rlmeta_compiler\" --support)\nparser_py=$(python \"$rlmeta_compiler\" < parser.rlmeta)\ncodegenerator_py=$(python \"$rlmeta_compiler\" < codegenerator.rlmeta)\n\ncat <<EOF\nimport sys\n\nSUPPORT = $support_py_string\n\n$support_py\n\n$parser_py\n\n$codegenerator_py\n\njoin = \"\".join\n\ndef compile_grammar(grammar):\n    parser = Parser()\n    code_generator = CodeGenerator()\n    return code_generator.run(\"ast\", parser.run(\"grammar\", grammar))\n\nif __name__ == \"__main__\":\n    if \"--support\" in sys.argv:\n        sys.stdout.write(SUPPORT)\n    else:\n        try:\n            sys.stdout.write(compile_grammar(sys.stdin.read()))\n        except _MatchError as e:\n            sys.stderr.write(e.describe())\n            sys.exit(1)\nEOF\n",
"type":"code"
}
],
"id":"69b9bb22e193400eb1f59ab0e2f697c5",
"type":"code"
}
],
"title":"compile.sh"
},
{
"children":[],
"id":"c2cfcdaf112241f3b5910c886ad5124e",
"paragraphs":[
{
"chunkpath":[],
"filepath":[
"optimized",
"meta_compile.sh"
],
"fragments":[
{
"text":"#!/bin/bash\n\nset -e\n\ncd \"$(dirname \"$0\")\"\n\n./compile.sh rlmeta.py > rlmeta1.py\n\n./compile.sh rlmeta1.py > rlmeta2.py\n\n./compile.sh rlmeta2.py > rlmeta3.py\n\ndiff rlmeta2.py rlmeta3.py\n\ndiff support.py <(python rlmeta3.py --support)\n\nmv rlmeta3.py rlmeta2.py\n\nmv rlmeta2.py rlmeta1.py\n\nmv rlmeta1.py rlmeta.py\n\necho OK\n",
"type":"code"
}
],
"id":"59ed29030d134c959df5522496629b85",
"type":"code"
}
],
"title":"meta_compile.sh"
}
],
"id":"fa899c41ee3d43a88b659ad9b0486c2c",
"paragraphs":[],
"title":"Code listings for RLMeta (optimized)"
},
{
"children":[
{
"children":[],
"id":"1b68587ebbb24fde927b6f6f897e07ef",
"paragraphs":[
{
"chunkpath":[],
"filepath":[
"vm",
"parser.rlmeta"
],
"fragments":[
{
"text":"Parser {\n  grammar =\n    | name:x space '{' rule*:ys space '}'      -> [\"Grammar\" x ~ys]\n  rule =\n    | name:x space '=' choice:y                -> [\"Rule\" x y]\n  choice =\n    | (space '|')?\n      sequence:x (space '|' sequence)*:xs      -> [\"Or\" x ~xs]\n  sequence =\n    | expr:x expr*:xs                          -> [\"Scope\" [\"And\" x ~xs]]\n  expr =\n    | expr1:x space ':' name:y                 -> [\"Bind\" y x]\n    | expr1\n  expr1 =\n    | expr2:x space '*'                        -> [\"Star\" x]\n    | expr2:x space '?'                        -> [\"Or\" x [\"And\"]]\n    | space '!' expr2:x                        -> [\"Not\" x]\n    | space '%'                                -> [\"MatchCallRule\"]\n    | space '#'                                -> [\"Label\"]\n    | expr2\n  expr2 =\n    | space '->' hostExpr:x                    -> [\"SemanticAction\" x]\n    | name:x !(space '=')                      -> [\"MatchRule\" x]\n    | space char:x '-' char:y                  -> [\"MatchRange\" x y]\n    | space string:x                           -> [\"MatchString\" x]\n    | space charseq:x                          -> [\"MatchCharseq\" x]\n    | space '.'                                -> [\"MatchAny\"]\n    | space '(' choice:x space ')'             -> x\n    | space '[' expr*:xs space ']'             -> [\"MatchList\" [\"And\" ~xs]]\n  hostExpr =\n    | space string:x                           -> [\"String\" x]\n    | space '[' hostExprListItem*:xs space ']' -> [\"List\" ~xs]\n    | space '{' buildExpr*:xs space '}'        -> [\"Builder\" ~xs]\n    | name:x space '(' hostExpr*:ys space ')'  -> [\"FnCall\" x ~ys]\n    | name:x                                   -> [\"VarLookup\" x]\n  hostExprListItem =\n    | space '~' hostExpr:x                     -> [\"ListItemSplice\" x]\n    | hostExpr\n  buildExpr =\n    | space '>'                                -> [\"IndentBuilder\"]\n    | space '<'                                -> [\"DedentBuilder\"]\n    | hostExpr\n  string    = '\"'  (!'\"'  innerChar)*:xs '\"'   -> join(xs)\n  charseq   = '\\'' (!'\\'' innerChar)*:xs '\\''  -> join(xs)\n  char      = '\\''  !'\\'' innerChar  :x  '\\''  -> x\n  innerChar = '\\\\' escape | .\n  escape    = '\\\\' -> \"\\\\\" | '\\'' -> \"'\"\n            | '\"'  -> \"\\\"\" | 'n'  -> \"\\n\"\n  name      = space nameStart:x nameChar*:xs   -> join([x ~xs])\n  nameStart = 'a'-'z' | 'A'-'Z'\n  nameChar  = 'a'-'z' | 'A'-'Z' | '0'-'9'\n  space     = (' ' | '\\n')*\n}\n",
"type":"code"
}
],
"id":"c71fce8e74cb440980a3ae2b5533eea0",
"type":"code"
}
],
"title":"parser.rlmeta"
},
{
"children":[],
"id":"1b486a301405470c833411bb9016fefc",
"paragraphs":[
{
"chunkpath":[],
"filepath":[
"vm",
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"CodeGenerator {\n  ast            = [%:x]           -> x\n  py             = .:x             -> repr(x)\n  Grammar        = .:x ast*:ys     -> { \"class \" x \"(_Grammar):\\n\\n\" >\n                                          \"def __init__(self):\\n\" >\n                                            \"self._instructions = i = []\\n\"\n                                            \"self._labels = l = {}\\n\"\n                                            \"def I(name, x=None, y=None):\\n\" >\n                                              \"i.append((name, x, y))\\n\"\n                                            <\n                                            \"def LABEL(name):\\n\" >\n                                              \"l[name] = len(i)\\n\"\n                                            <\n                                            ys\n                                          <\n                                        <                                    }\n  Rule           = py:x ast:y      -> { \"LABEL(\" x \")\\n\"\n                                        y\n                                        \"I('RETURN')\\n\"                      }\n  Or             =\n    | ast:x Or:y #:a #:b           -> { \"I('BACKTRACK', \" a \")\\n\"\n                                        x\n                                        \"I('COMMIT', \" b \")\\n\"\n                                        \"LABEL(\" a \")\\n\"\n                                        y\n                                        \"LABEL(\" b \")\\n\"                     }\n    | ast\n  Scope          = ast:x           -> { \"I('PUSH_SCOPE')\\n\"\n                                        x\n                                        \"I('POP_SCOPE')\\n\"                   }\n  And            = ast*\n  Bind           = py:x ast:y      -> { y\n                                        \"I('BIND', \" x \")\\n\"                 }\n  Star           = ast:x #:a #:b   -> { \"I('LIST_START')\\n\"\n                                        \"LABEL(\" a \")\\n\"\n                                        \"I('BACKTRACK', \" b \")\\n\"\n                                        x\n                                        \"I('LIST_APPEND')\\n\"\n                                        \"I('COMMIT', \" a \")\\n\"\n                                        \"LABEL(\" b \")\\n\"\n                                        \"I('LIST_END')\\n\"                    }\n  Not            = ast:x #:a #:b   -> { \"I('BACKTRACK', \" b \")\\n\"\n                                        x\n                                        \"I('COMMIT', \" a \")\\n\"\n                                        \"LABEL(\" a \")\\n\"\n                                        \"I('FAIL', 'no match expected')\\n\"\n                                        \"LABEL(\" b \")\\n\"                     }\n  MatchCallRule  =                 -> { \"I('MATCH_CALL_RULE')\\n\"             }\n  Label          =                 -> { \"I('LABEL')\\n\"                       }\n  SemanticAction = ast:x           -> { \"I('ACTION', lambda scope: \" x \")\\n\" }\n  String         = py\n  List           = astList\n  Builder        = astItems:x      -> { \"_Builder.create([\" x \"])\"           }\n  IndentBuilder  =                 -> { \"_IndentBuilder()\"                   }\n  DedentBuilder  =                 -> { \"_DedentBuilder()\"                   }\n  FnCall         = .:x astItems:y  -> { x \"(\" y \")\"                          }\n  VarLookup      = py:x            -> { \"scope[\" x \"].eval()\"                }\n  astItems       =\n    | ast:x astItem*:xs            -> { x xs                                 }\n    |                              -> {                                      }\n  astItem        = ast:x           -> { \", \" x                               }\n  astList        = astListItem*:xs -> { \"(\" xs \"[])\"                         }\n  astListItem    =\n    | [\"ListItemSplice\" ast:x]     -> {     x  \"+\"                           }\n    | ast:x                        -> { \"[\" x \"]+\"                           }\n  MatchRule      = py:x            -> { \"I('CALL', \" x \")\\n\"                 }\n  MatchRange     = py:x py:y       -> { \"I('MATCH_RANGE', \" x \", \" y \")\\n\"   }\n  MatchString    = py:x            -> { \"I('MATCH_STRING', \" x \")\\n\"         }\n  MatchCharseq   = py:x            -> { \"I('MATCH_CHARSEQ', \" x \")\\n\"        }\n  MatchAny       =                 -> { \"I('MATCH_ANY')\\n\"                   }\n  MatchList      = ast:x           -> { \"I('PUSH_STREAM')\\n\"\n                                        x\n                                        \"I('POP_STREAM')\\n\"                  }\n}\n",
"type":"code"
}
],
"id":"ba1fc285f5874989987cc7bb52ec1a6e",
"type":"code"
}
],
"title":"codegenerator.rlmeta"
},
{
"children":[],
"id":"2d78cf2770f24b818ffcefa6216cb81c",
"paragraphs":[
{
"chunkpath":[],
"filepath":[
"vm",
"support.py"
],
"fragments":[
{
"text":"try:\n    from cStringIO import StringIO\nexcept:\n    from StringIO import StringIO\n\ndef rlmeta_vm(instructions, labels, start_rule, stream):\n    label_counter = 0\n    last_action = _ConstantSemanticAction(None)\n    pc = labels[start_rule]\n    call_backtrack_stack = []\n    stream, pos, stream_pos_stack = (stream, 0, [])\n    scope, scope_stack = (None, [])\n    fail_message = None\n    latest_fail_message, latest_fail_pos = (None, tuple())\n    memo = {}\n    while True:\n        name, arg1, arg2 = instructions[pc]\n        if name == \"PUSH_SCOPE\":\n            scope_stack.append(scope)\n            scope = {}\n            pc += 1\n            continue\n        elif name == \"BACKTRACK\":\n            call_backtrack_stack.append((labels[arg1], pos, len(stream_pos_stack), len(scope_stack)))\n            pc += 1\n            continue\n        elif name == \"CALL\":\n",
"type":"code"
},
{
"blank_lines_before":0,
"path":[
"CALL"
],
"prefix":"            ",
"type":"chunk"
},
{
"text":"        elif name == \"MATCH_CHARSEQ\":\n            for char in arg1:\n                if pos >= len(stream) or stream[pos] != char:\n                    fail_message = (\"expected {!r}\", char)\n                    break\n                pos += 1\n            else:\n                last_action = _ConstantSemanticAction(arg1)\n                pc += 1\n                continue\n        elif name == \"COMMIT\":\n            call_backtrack_stack.pop()\n            pc = labels[arg1]\n            continue\n        elif name == \"POP_SCOPE\":\n            scope = scope_stack.pop()\n            pc += 1\n            continue\n        elif name == \"RETURN\":\n",
"type":"code"
},
{
"blank_lines_before":0,
"path":[
"RETURN"
],
"prefix":"            ",
"type":"chunk"
},
{
"text":"        elif name == \"LIST_APPEND\":\n            scope.append(last_action)\n            pc += 1\n            continue\n        elif name == \"BIND\":\n            scope[arg1] = last_action\n            pc += 1\n            continue\n        elif name == \"ACTION\":\n            last_action = _UserSemanticAction(arg1, scope)\n            pc += 1\n            continue\n        elif name == \"MATCH_RANGE\":\n            if pos >= len(stream) or not (arg1 <= stream[pos] <= arg2):\n                fail_message = (\"expected range {!r}-{!r}\", arg1, arg2)\n            else:\n                last_action = _ConstantSemanticAction(stream[pos])\n                pos += 1\n                pc += 1\n                continue\n        elif name == \"LIST_START\":\n            scope_stack.append(scope)\n            scope = []\n            pc += 1\n            continue\n        elif name == \"LIST_END\":\n            last_action = _UserSemanticAction(lambda xs: [x.eval() for x in xs], scope)\n            scope = scope_stack.pop()\n            pc += 1\n            continue\n        elif name == \"MATCH_ANY\":\n            if pos >= len(stream):\n                fail_message = (\"expected any\",)\n            else:\n                last_action = _ConstantSemanticAction(stream[pos])\n                pos += 1\n                pc += 1\n                continue\n        elif name == \"PUSH_STREAM\":\n            if pos >= len(stream) or not isinstance(stream[pos], list):\n                fail_message = (\"expected list\",)\n            else:\n                stream_pos_stack.append((stream, pos))\n                stream = stream[pos]\n                pos = 0\n                pc += 1\n                continue\n        elif name == \"POP_STREAM\":\n            if pos < len(stream):\n                fail_message = (\"expected end of list\",)\n            else:\n                stream, pos = stream_pos_stack.pop()\n                pos += 1\n                pc += 1\n                continue\n        elif name == \"MATCH_CALL_RULE\":\n",
"type":"code"
},
{
"blank_lines_before":0,
"path":[
"MATCH_CALL_RULE"
],
"prefix":"            ",
"type":"chunk"
},
{
"text":"        elif name == \"FAIL\":\n            fail_message = (arg1,)\n        elif name == \"LABEL\":\n            last_action = _ConstantSemanticAction(label_counter)\n            label_counter += 1\n            pc += 1\n            continue\n        elif name == \"MATCH_STRING\":\n            if pos >= len(stream) or stream[pos] != arg1:\n                fail_message = (\"expected {!r}\", arg1)\n            else:\n                last_action = _ConstantSemanticAction(arg1)\n                pos += 1\n                pc += 1\n                continue\n        else:\n            raise Exception(\"unknown instruction {}\".format(name))\n        fail_pos = tuple([x[1] for x in stream_pos_stack]+[pos])\n        if fail_pos >= latest_fail_pos:\n            latest_fail_message = fail_message\n            latest_fail_pos = fail_pos\n",
"type":"code"
},
{
"blank_lines_before":0,
"path":[
"pop backtrack entries"
],
"prefix":"        ",
"type":"chunk"
},
{
"text":"        if len(call_backtrack_entry) != 4:\n            fail_pos = list(latest_fail_pos)\n            fail_stream = stream_pos_stack[0][0] if stream_pos_stack else stream\n            while len(fail_pos) > 1:\n                fail_stream = fail_stream[fail_pos.pop(0)]\n            raise _MatchError(latest_fail_message, fail_pos[0], fail_stream)\n        (pc, pos, stream_stack_len, scope_stack_len) = call_backtrack_entry\n        if len(stream_pos_stack) > stream_stack_len:\n            stream = stream_pos_stack[stream_stack_len][0]\n        stream_pos_stack = stream_pos_stack[:stream_stack_len]\n        if len(scope_stack) > scope_stack_len:\n            scope = scope_stack[scope_stack_len]\n        scope_stack = scope_stack[:scope_stack_len]\n\nclass _Grammar(object):\n\n    def run(self, rule_name, input_object):\n        if isinstance(input_object, basestring):\n            stream = input_object\n        else:\n            stream = [input_object]\n        result = rlmeta_vm(self._instructions, self._labels, rule_name, stream)\n        if isinstance(result, _Builder):\n            return result.build_string()\n        else:\n            return result\n\nclass _Builder(object):\n\n    def build_string(self):\n        output = _Output()\n        self.write(output)\n        return output.value\n\n    @classmethod\n    def create(self, item):\n        if isinstance(item, _Builder):\n            return item\n        elif isinstance(item, list):\n            return _ListBuilder([_Builder.create(x) for x in item])\n        else:\n            return _AtomBuilder(item)\n\nclass _Output(object):\n\n    def __init__(self):\n        self.buffer = StringIO()\n        self.indentation = 0\n        self.on_newline = True\n\n    @property\n    def value(self):\n        return self.buffer.getvalue()\n\n    def write(self, value):\n        for ch in value:\n            is_linebreak = ch == \"\\n\"\n            if self.indentation and self.on_newline and not is_linebreak:\n                self.buffer.write(\"    \"*self.indentation)\n            self.buffer.write(ch)\n            self.on_newline = is_linebreak\n\nclass _ListBuilder(_Builder):\n\n    def __init__(self, builders):\n        self.builders = builders\n\n    def write(self, output):\n        for builder in self.builders:\n            builder.write(output)\n\nclass _AtomBuilder(_Builder):\n\n    def __init__(self, atom):\n        self.atom = atom\n\n    def write(self, output):\n        output.write(str(self.atom))\n\nclass _IndentBuilder(_Builder):\n\n    def write(self, output):\n        output.indentation += 1\n\nclass _DedentBuilder(_Builder):\n\n    def write(self, output):\n        output.indentation -= 1\n\nclass _ConstantSemanticAction(object):\n\n    def __init__(self, value):\n        self.value = value\n\n    def eval(self):\n        return self.value\n\nclass _UserSemanticAction(object):\n\n    def __init__(self, fn, scope):\n        self.fn = fn\n        self.scope = scope\n\n    def eval(self):\n        return self.fn(self.scope)\n\nclass _MatchError(Exception):\n\n    def __init__(self, message, pos, stream):\n        Exception.__init__(self)\n        self.message = message\n        self.pos = pos\n        self.stream = stream\n\n    def describe(self):\n        message = \"\"\n        if isinstance(self.stream, basestring):\n            before = self.stream[:self.pos].splitlines()\n            after = self.stream[self.pos:].splitlines()\n            for context_before in before[-4:-1]:\n                message += self._context(context_before)\n            message += self._context(before[-1], after[0])\n            message += self._arrow(len(before[-1]))\n            for context_after in after[1:4]:\n                message += self._context(context_after)\n        else:\n            message += self._context(\"[\")\n            for context_before in self.stream[:self.pos]:\n                message += self._context(\"  \", repr(context_before), \",\")\n            message += self._context(\"  \", repr(self.stream[self.pos]), \",\")\n            message += self._arrow(2)\n            for context_after in self.stream[self.pos+1:]:\n                message += self._context(\"  \", repr(context_after), \",\")\n            message += self._context(\"]\")\n        message += \"Error: \"\n        message += self.message[0].format(*self.message[1:])\n        message += \"\\n\"\n        return message\n\n    def _context(self, *args):\n        return \"> {}\\n\".format(\"\".join(args))\n\n    def _arrow(self, lenght):\n        return \"--{}^\\n\".format(\"-\"*lenght)\n",
"type":"code"
}
],
"id":"3233095b41404567872d7e190fb1ad66",
"type":"code"
}
],
"title":"support.py"
},
{
"children":[],
"id":"c1f72e8df1ce4b619eeb30edf609e126",
"paragraphs":[
{
"chunkpath":[],
"filepath":[
"vm",
"compile.sh"
],
"fragments":[
{
"text":"#!/bin/bash\n\nset -e\n\nrlmeta_compiler=\"$(pwd)/$1\"\n\ncd \"$(dirname \"$0\")\"\n\nto_python_string() {\n    python -c 'import sys; sys.stdout.write(repr(sys.stdin.read()))'\n}\n\nsupport_py_string=$(to_python_string < support.py)\nsupport_py=$(python \"$rlmeta_compiler\" --support)\nparser_py=$(python \"$rlmeta_compiler\" < parser.rlmeta)\ncodegenerator_py=$(python \"$rlmeta_compiler\" < codegenerator.rlmeta)\n\ncat <<EOF\nimport sys\n\nSUPPORT = $support_py_string\n\n$support_py\n\n$parser_py\n\n$codegenerator_py\n\njoin = \"\".join\n\ndef compile_grammar(grammar):\n    parser = Parser()\n    code_generator = CodeGenerator()\n    return code_generator.run(\"ast\", parser.run(\"grammar\", grammar))\n\nif __name__ == \"__main__\":\n    if \"--support\" in sys.argv:\n        sys.stdout.write(SUPPORT)\n    else:\n        try:\n            sys.stdout.write(compile_grammar(sys.stdin.read()))\n        except _MatchError as e:\n            sys.stderr.write(e.describe())\n            sys.exit(1)\nEOF\n",
"type":"code"
}
],
"id":"3ad80b7cb047456a89a9991cec9aa894",
"type":"code"
}
],
"title":"compile.sh"
},
{
"children":[],
"id":"09b8983ad4194ac6a781880bd70117db",
"paragraphs":[
{
"chunkpath":[],
"filepath":[
"vm",
"meta_compile.sh"
],
"fragments":[
{
"text":"#!/bin/bash\n\nset -e\n\ncd \"$(dirname \"$0\")\"\n\n./compile.sh rlmeta.py > rlmeta1.py\n\n./compile.sh rlmeta1.py > rlmeta2.py\n\n./compile.sh rlmeta2.py > rlmeta3.py\n\ndiff rlmeta2.py rlmeta3.py\n\ndiff support.py <(python rlmeta3.py --support)\n\nmv rlmeta3.py rlmeta2.py\n\nmv rlmeta2.py rlmeta1.py\n\nmv rlmeta1.py rlmeta.py\n\necho OK\n",
"type":"code"
}
],
"id":"8fe0efd92f1b4fe4a24eca91003c68ed",
"type":"code"
}
],
"title":"meta_compile.sh"
}
],
"id":"5e20b8a3bc1348808c087c091612d9e0",
"paragraphs":[],
"title":"Code listings for RLMeta (VM)"
}
],
"id":"f4591956cea04b03be2859df337f261a",
"paragraphs":[
{
"fragments":[
{
"text":"RLMeta has a flaw in its memoization logic: It only memoizes successful matches. I realized it after reading ",
"type":"text"
},
{
"text":"Generating a PEG Parser",
"type":"link",
"url":"https://medium.com/@gvanrossum_83706/generating-a-peg-parser-520057d642a9"
},
{
"text":" in which Guido writes this:",
"type":"text"
}
],
"id":"3a35c5393d0047a4b172fcce7438ef97",
"type":"text"
},
{
"fragments":[
{
"text":"It is important to cache negative results too - in fact most calls to parsing methods will be negative results.",
"type":"text"
}
],
"id":"8ed0d48428924afe8fa356860cdf59b6",
"type":"quote"
}
],
"title":"Memoizing failiures in RLMeta"
},
"variables":{}
}