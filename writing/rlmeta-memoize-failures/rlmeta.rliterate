{
"root_page":{
"children":[
{
"children":[],
"id":"a9a4166e943a4d2c974c443cef1da5a9",
"paragraphs":[
{
"fragments":[
{
"text":"In the optimized version, the memoization table stores tuples with result, start position, and end position. If a rule fails, a new kind of value that indicates a failure must be stored. We reuse the same tuple, but have the result be ",
"type":"text"
},
{
"text":"None",
"type":"code"
},
{
"text":" in case of a failure and have the start position be the lazy fail message.",
"type":"text"
}
],
"id":"ad62ef2e2f4341a09001b937f4fec507",
"type":"text"
},
{
"fragments":[
{
"text":"The memoization table is both queried and populated in the support library method ",
"type":"text"
},
{
"text":"_match_rule",
"type":"code"
},
{
"text":". The fixed version looks like this:",
"type":"text"
}
],
"id":"a3456947282b4b8c81e5f3bd41e12371",
"type":"text"
},
{
"chunkpath":[
"match rule"
],
"filepath":[
"optimized",
"support.py"
],
"fragments":[
{
"text":"def _match_rule(self, rule_name):\n    key = (rule_name, self._stream.position())\n    if key in self._memo:\n        if self._memo[key][0] is None:\n            self._stream.fail(self._memo[key][1])\n        else:\n            result, _, self._stream = self._memo[key]\n    else:\n        try:\n            start = self._stream\n            result = getattr(self, \"_rule_{}\".format(rule_name))()\n            end = self._stream\n            self._memo[key] = (result, start, end)\n        except _MatchError as e:\n            self._memo[key] = (None, e.lazy_message, None)\n            raise\n    return result\n",
"type":"code"
}
],
"id":"49bd6fdc3d8a40a9ae62454cafe2e330",
"type":"code"
},
{
"fragments":[
{
"text":"If a memoization entry exists and the result part is ",
"type":"text"
},
{
"text":"None",
"type":"code"
},
{
"text":", the match fails immediately with the fail message stored in the entry. If the result part is not ",
"type":"text"
},
{
"text":"None",
"type":"code"
},
{
"text":" the result is used as before.",
"type":"text"
}
],
"id":"ff60c761ff454d47887254469463e226",
"type":"text"
},
{
"fragments":[
{
"text":"If a memoization entry does not exist and the match fails, the failure is recorded in the memoization table before propagating the exception. If the match succeeds the result is recorded as before.",
"type":"text"
}
],
"id":"cdac85b2dab54385921a4e7a02d14c96",
"type":"text"
},
{
"fragments":[
{
"text":"The ",
"type":"text"
},
{
"text":"_MatchError",
"type":"code"
},
{
"text":" class is also modified to save the lazy message so that it can be accessed for storage in the memoization table:",
"type":"text"
}
],
"id":"a717601e63bf43539cddcfd009cafbba",
"type":"text"
},
{
"chunkpath":[
"memo fail"
],
"filepath":[
"optimized",
"support.py"
],
"fragments":[
{
"text":"def fail(self, stream, lazy_message):\n    if stream.position() >= self._latest_stream.position():\n        self._latest_stream = stream\n        self._latest_lazy_message = lazy_message\n    raise _MatchError(self, lazy_message)\n",
"type":"code"
}
],
"id":"9a08cc0615d1433b8da4c5cd550a5892",
"type":"code"
},
{
"chunkpath":[
"match error"
],
"filepath":[
"optimized",
"support.py"
],
"fragments":[
{
"text":"class _MatchError(Exception):\n\n    def __init__(self, memo, lazy_message):\n        Exception.__init__(self)\n        self._memo = memo\n        self.lazy_message = lazy_message\n\n    def describe(self):\n        return self._memo.describe()\n",
"type":"code"
}
],
"id":"666a02fdacd2475488156dfb764a70e1",
"type":"code"
}
],
"title":"Optimized version"
},
{
"children":[],
"id":"fe17638693e344ad9e521e55bf0676f3",
"paragraphs":[
{
"fragments":[
{
"text":"In the VM based version, the memoization table stores tuples with last action, and stream position stack. If a rule fails, a new kind of value that indicates a failure must be stored. We reuse the same tuple, but have the last action be ",
"type":"text"
},
{
"text":"None",
"type":"code"
},
{
"text":" in case of a failure and have the stream position stack be the failure message.",
"type":"text"
}
],
"id":"dd1699bbf01245788615d6a9ca30b7b7",
"type":"text"
},
{
"fragments":[
{
"text":"The memoization table is queried and populated in different places. The first place it's populated is in the ",
"type":"text"
},
{
"text":"RETURN",
"type":"code"
},
{
"text":" instruction:",
"type":"text"
}
],
"id":"c8ea8426236643b2a30aeb675e9a666f",
"type":"text"
},
{
"chunkpath":[
"RETURN"
],
"filepath":[
"vm",
"support.py"
],
"fragments":[
{
"text":"if len(call_backtrack_stack) == 0:\n    return last_action.eval()\npc, key = call_backtrack_stack.pop()\nmemo[key] = (last_action, stream_pos_stack+[(stream, pos)])\ncontinue\n",
"type":"code"
}
],
"id":"20ace23911b1446ab7c8e6cba4a4527a",
"type":"code"
},
{
"fragments":[
{
"text":"This code is unchanged and I include it here only for context. It populates the memoization table when a rule has matched. To populate the memoization table with a failure, the code that pops a backtrack entry must be modified like this:",
"type":"text"
}
],
"id":"a452d66363dd4541832da39c36b13cc5",
"type":"text"
},
{
"chunkpath":[
"pop backtrack entry"
],
"filepath":[
"vm",
"support.py"
],
"fragments":[
{
"text":"call_backtrack_entry = tuple()\nwhile call_backtrack_stack:\n    call_backtrack_entry = call_backtrack_stack.pop()\n    if len(call_backtrack_entry) == 4:\n        break\n    else:\n        _, key = call_backtrack_entry\n        memo[key] = (None, fail_message)\n",
"type":"code"
}
],
"id":"09bb7d528d084ca7a31b98ea7659a8a0",
"type":"code"
},
{
"fragments":[
{
"text":"If the popped item is not a backtrack entry (length of tuple is 4), it must be a call entry. It means that the given rule has been called, and it has failed. In that case, ",
"type":"text"
},
{
"text":"None",
"type":"code"
},
{
"text":" is stored in the memoization table to indicate a failure, along with the fail message as second element.",
"type":"text"
}
],
"id":"69862c2f6c474a7cb3323400e77399b2",
"type":"text"
},
{
"fragments":[
{
"text":"Next code that queries the memoization table need to be updated. It happens in the two call instructions ",
"type":"text"
},
{
"text":"CALL",
"type":"code"
},
{
"text":" and ",
"type":"text"
},
{
"text":"MATCH_CALL_RULE",
"type":"code"
},
{
"text":":",
"type":"text"
}
],
"id":"5cb1fcd1ceca47298a591a34dd960a48",
"type":"text"
},
{
"chunkpath":[
"CALL"
],
"filepath":[
"vm",
"support.py"
],
"fragments":[
{
"text":"key = (arg1, tuple([x[1] for x in stream_pos_stack]+[pos]))\nif key in memo:\n    if memo[key][0] is None:\n        fail_message = memo[key][1]\n    else:\n        last_action, stream_pos_stack = memo[key]\n        stream_pos_stack = stream_pos_stack[:]\n        stream, pos = stream_pos_stack.pop()\n        pc += 1\n        continue\nelse:\n    call_backtrack_stack.append((pc+1, key))\n    pc = labels[arg1]\n    continue\n",
"type":"code"
}
],
"id":"7f7bb394b7b9434eb91e19118aa52a0a",
"type":"code"
},
{
"chunkpath":[
"MATCH_CALL_RULE"
],
"filepath":[
"vm",
"support.py"
],
"fragments":[
{
"text":"if pos >= len(stream):\n    fail_message = (\"expected any\",)\nelse:\n    fn_name = str(stream[pos])\n    key = (fn_name, tuple([x[1] for x in stream_pos_stack]+[pos]))\n    if key in memo:\n        if memo[key][0] is None:\n            fail_message = memo[key][1]\n        else:\n            last_action, stream_pos_stack = memo[key]\n            stream_pos_stack = stream_pos_stack[:]\n            stream, pos = stream_pos_stack.pop()\n            pc += 1\n            continue\n    else:\n        call_backtrack_stack.append((pc+1, key))\n        pc = labels[fn_name]\n        pos += 1\n        continue\n",
"type":"code"
}
],
"id":"6ff1e38b876b4f32b4a004a4611c1639",
"type":"code"
},
{
"fragments":[
{
"text":"They are changed to look at the first argument in the memoized entry. If it is ",
"type":"text"
},
{
"text":"None",
"type":"code"
},
{
"text":", it indicates a failure. The ",
"type":"text"
},
{
"text":"fail_message",
"type":"code"
},
{
"text":" is then set and the ",
"type":"text"
},
{
"text":"continue",
"type":"code"
},
{
"text":" statement is skipped:",
"type":"text"
}
],
"id":"c84e68688df6401391511bf4508c0f78",
"type":"text"
}
],
"title":"VM based version"
},
{
"children":[],
"id":"42ae6babf74d427880f831bd14109002",
"paragraphs":[
{
"fragments":[
{
"text":"Are the versions that also memoize failures faster? Here are the performance measurements:",
"type":"text"
}
],
"id":"b4c7dc1608e343cc9cbefb2acd3e6844",
"type":"text"
},
{
"fragments":[
{
"text":"Performance measurements.",
"type":"text"
}
],
"id":"866972443e7644629d53b53db0607fb5",
"image_base64":"",
"type":"image"
},
{
"fragments":[
{
"text":"To measure the performance without memoization I commented out the code that populates the memoization table.",
"type":"text"
}
],
"id":"fd07d441d08d4920a7d4ef0dd5c890f5",
"type":"text"
},
{
"fragments":[
{
"text":"Memoizing failures seems to be much less important than memoizing matches. But it still improves performance.",
"type":"text"
}
],
"id":"c6b15c91fe72429898a7835f4f0f7f8d",
"type":"text"
}
],
"title":"Performance measurements"
},
{
"children":[
{
"children":[],
"id":"ea9e60e51c034b99b32520af593fa2c0",
"paragraphs":[
{
"fragments":[
{
"text":"The rest of the support library for the optimized version:",
"type":"text"
}
],
"id":"8ae1d7735cc3406f82742fdba335cda6",
"type":"text"
},
{
"chunkpath":[],
"filepath":[
"optimized",
"support.py"
],
"fragments":[
{
"text":"try:\n    from cStringIO import StringIO\nexcept:\n    from StringIO import StringIO\n\nclass _Grammar(object):\n\n    def _or(self, matchers):\n        original_stream = self._stream\n        for matcher in matchers[:-1]:\n            try:\n                return matcher()\n            except _MatchError:\n                self._stream = original_stream\n        return matchers[-1]()\n\n    def _and(self, matchers):\n        result = None\n        for matcher in matchers:\n            result = matcher()\n        return result\n\n    def _star(self, matcher):\n        result = []\n        while True:\n            original_stream = self._stream\n            try:\n                result.append(matcher())\n            except _MatchError:\n                self._stream = original_stream\n                return _SemanticAction(lambda: [x.eval() for x in result])\n\n    def _not(self, matcher):\n        original_stream = self._stream\n        try:\n            matcher()\n        except _MatchError:\n            return _SemanticAction(lambda: None)\n        else:\n            original_stream.fail(lambda: \"match found\")\n        finally:\n            self._stream = original_stream\n\n",
"type":"code"
},
{
"blank_lines_before":0,
"path":[
"match rule"
],
"prefix":"    ",
"type":"chunk"
},
{
"text":"\n    def _match_range(self, start, end):\n        next_objext = self._stream.peek()\n        if next_objext >= start and next_objext <= end:\n            self._stream = self._stream.advance()\n            return _SemanticAction(lambda: next_objext)\n        else:\n            self._stream.fail(\n                lambda: \"expected range {!r}-{!r} but found {!r}\".format(start, end, next_objext)\n            )\n\n    def _match_string(self, string):\n        next_object = self._stream.peek()\n        if next_object == string:\n            self._stream = self._stream.advance()\n            return _SemanticAction(lambda: string)\n        else:\n            self._stream.fail(\n                lambda: \"expected {!r} but found {!r}\".format(string, next_object)\n            )\n\n    def _match_charseq(self, charseq):\n        for char in charseq:\n            next_object = self._stream.peek()\n            if next_object != char:\n                self._stream.fail(\n                    lambda: \"expected {!r} but found {!r}\".format(char, next_object)\n                )\n            self._stream = self._stream.advance()\n        return _SemanticAction(lambda: charseq)\n\n    def _match_any(self):\n        next_object = self._stream.peek()\n        self._stream = self._stream.advance()\n        return _SemanticAction(lambda: next_object)\n\n    def _match_call_rule(self):\n        next_object = self._stream.peek()\n        self._stream = self._stream.advance()\n        return self._match_rule(str(next_object))\n\n    def _match_list(self, matcher):\n        original_stream = self._stream\n        next_object = self._stream.peek()\n        if isinstance(next_object, list):\n            self._stream = self._stream.nested(next_object)\n            matcher()\n            if self._stream.is_at_end():\n                self._stream = original_stream.advance()\n                return _SemanticAction(lambda: next_object)\n        original_stream.fail(lambda: \"list match failed\")\n\n    def run(self, rule_name, input_object):\n        self._memo = _Memo()\n        self._stream = _Stream.from_object(self._memo, input_object)\n        result = self._match_rule(rule_name).eval()\n        if isinstance(result, _Builder):\n            return result.build_string()\n        else:\n            return result\n\nclass _Vars(dict):\n\n    def bind(self, name, value):\n        self[name] = value\n        return value\n\n    def lookup(self, name):\n        return self[name]\n\nclass _SemanticAction(object):\n\n    def __init__(self, fn):\n        self.fn = fn\n\n    def eval(self):\n        return self.fn()\n\nclass _Builder(object):\n\n    def build_string(self):\n        output = _Output()\n        self.write(output)\n        return output.value\n\n    @classmethod\n    def create(self, item):\n        if isinstance(item, _Builder):\n            return item\n        elif isinstance(item, list):\n            return _ListBuilder([_Builder.create(x) for x in item])\n        else:\n            return _AtomBuilder(item)\n\nclass _Output(object):\n\n    def __init__(self):\n        self.buffer = StringIO()\n        self.indentation = 0\n        self.on_newline = True\n\n    @property\n    def value(self):\n        return self.buffer.getvalue()\n\n    def write(self, value):\n        for ch in value:\n            is_linebreak = ch == \"\\n\"\n            if self.indentation and self.on_newline and not is_linebreak:\n                self.buffer.write(\"    \"*self.indentation)\n            self.buffer.write(ch)\n            self.on_newline = is_linebreak\n\nclass _ListBuilder(_Builder):\n\n    def __init__(self, builders):\n        self.builders = builders\n\n    def write(self, output):\n        for builder in self.builders:\n            builder.write(output)\n\nclass _AtomBuilder(_Builder):\n\n    def __init__(self, atom):\n        self.atom = atom\n\n    def write(self, output):\n        output.write(str(self.atom))\n\nclass _IndentBuilder(_Builder):\n\n    def write(self, output):\n        output.indentation += 1\n\nclass _DedentBuilder(_Builder):\n\n    def write(self, output):\n        output.indentation -= 1\n\nclass _Memo(dict):\n\n    def __init__(self):\n        dict.__init__(self)\n        self._latest_stream = _ObjectStream(self, [], -1)\n        self._latest_lazy_message = lambda: \"\"\n\n    def describe(self):\n        items = []\n        for (rule_name, _), (_, start, end) in self.items():\n            if end > start:\n                items.append((rule_name, start, end))\n        items.sort(key=lambda item: (item[2].position(), item[1].position()))\n        message = []\n        for item in items:\n            message.append(\"matched {: <20} {} -> {}\\n\".format(*item))\n        message.append(\"\\n\")\n        message.append(\"ERROR: {}: {}\\n\".format(\n            self._latest_stream,\n            self._latest_lazy_message()\n        ))\n        return \"\".join(message)\n\n",
"type":"code"
},
{
"blank_lines_before":0,
"path":[
"memo fail"
],
"prefix":"    ",
"type":"chunk"
},
{
"text":"\n",
"type":"code"
},
{
"blank_lines_before":0,
"path":[
"match error"
],
"prefix":"",
"type":"chunk"
},
{
"text":"\nclass _Stream(object):\n\n    @classmethod\n    def from_object(cls, memo, input_object):\n        if isinstance(input_object, basestring):\n            return _CharStream(memo, input_object, 0)\n        else:\n            return _ObjectStream(memo, [input_object], 0)\n\n    def __init__(self, memo, objects, index):\n        self._memo = memo\n        self._objects = objects\n        self._index = index\n\n    def fail(self, lazy_message):\n        self._memo.fail(self, lazy_message)\n\n    def peek(self):\n        if self.is_at_end():\n            self.fail(lambda: \"not eof\")\n        return self._objects[self._index]\n\n    def is_at_end(self):\n        return self._index >= len(self._objects)\n\nclass _CharStream(_Stream):\n\n    def __init__(self, memo, objects, index, line=1, column=1):\n        _Stream.__init__(self, memo, objects, index)\n        self._line = line\n        self._column = column\n\n    def position(self):\n        return self._index\n\n    def advance(self):\n        if self._objects[self._index] == \"\\n\":\n            line = self._line + 1\n            column = 1\n        else:\n            line = self._line\n            column = self._column + 1\n        return _CharStream(self._memo, self._objects, self._index+1, line, column)\n\n    def __str__(self):\n        return \"L{:03d}:C{:03d}\".format(self._line, self._column)\n\nclass _ObjectStream(_Stream):\n\n    def __init__(self, memo, objects, index, parent=()):\n        _Stream.__init__(self, memo, objects, index)\n        self._parent_position = parent\n        self._position = self._parent_position + (self._index,)\n\n    def position(self):\n        return self._position\n\n    def nested(self, input_object):\n        return _ObjectStream(self._memo, input_object, 0, self._position)\n\n    def advance(self):\n        return _ObjectStream(self._memo, self._objects, self._index+1, self._parent_position)\n\n    def __str__(self):\n        return \"[{}]\".format(\", \".join(str(x) for x in self.position()))\n",
"type":"code"
}
],
"id":"aca14d0f6ac5466b86977fb1f64dbfe7",
"type":"code"
}
],
"title":"Support library (optimzied)"
},
{
"children":[],
"id":"46ac5a5f243c4bd69cec58758e92eadd",
"paragraphs":[
{
"fragments":[
{
"text":"The rest of the support library for the VM based version:",
"type":"text"
}
],
"id":"849f4e79807e468f972e2611ad0f9788",
"type":"text"
},
{
"chunkpath":[],
"filepath":[
"vm",
"support.py"
],
"fragments":[
{
"text":"try:\n    from cStringIO import StringIO\nexcept:\n    from StringIO import StringIO\n\ndef rlmeta_vm(instructions, labels, start_rule, stream):\n    label_counter = 0\n    last_action = _ConstantSemanticAction(None)\n    pc = labels[start_rule]\n    call_backtrack_stack = []\n    stream, pos, stream_pos_stack = (stream, 0, [])\n    scope, scope_stack = (None, [])\n    fail_message = None\n    latest_fail_message, latest_fail_pos = (None, tuple())\n    memo = {}\n    while True:\n        name, arg1, arg2 = instructions[pc]\n        if name == \"PUSH_SCOPE\":\n            scope_stack.append(scope)\n            scope = {}\n            pc += 1\n            continue\n        elif name == \"BACKTRACK\":\n            call_backtrack_stack.append((labels[arg1], pos, len(stream_pos_stack), len(scope_stack)))\n            pc += 1\n            continue\n        elif name == \"CALL\":\n",
"type":"code"
},
{
"blank_lines_before":0,
"path":[
"CALL"
],
"prefix":"            ",
"type":"chunk"
},
{
"text":"        elif name == \"MATCH_CHARSEQ\":\n            for char in arg1:\n                if pos >= len(stream) or stream[pos] != char:\n                    fail_message = (\"expected {!r}\", char)\n                    break\n                pos += 1\n            else:\n                last_action = _ConstantSemanticAction(arg1)\n                pc += 1\n                continue\n        elif name == \"COMMIT\":\n            call_backtrack_stack.pop()\n            pc = labels[arg1]\n            continue\n        elif name == \"POP_SCOPE\":\n            scope = scope_stack.pop()\n            pc += 1\n            continue\n        elif name == \"RETURN\":\n",
"type":"code"
},
{
"blank_lines_before":0,
"path":[
"RETURN"
],
"prefix":"            ",
"type":"chunk"
},
{
"text":"        elif name == \"LIST_APPEND\":\n            scope.append(last_action)\n            pc += 1\n            continue\n        elif name == \"BIND\":\n            scope[arg1] = last_action\n            pc += 1\n            continue\n        elif name == \"ACTION\":\n            last_action = _UserSemanticAction(arg1, scope)\n            pc += 1\n            continue\n        elif name == \"MATCH_RANGE\":\n            if pos >= len(stream) or not (arg1 <= stream[pos] <= arg2):\n                fail_message = (\"expected range {!r}-{!r}\", arg1, arg2)\n            else:\n                last_action = _ConstantSemanticAction(stream[pos])\n                pos += 1\n                pc += 1\n                continue\n        elif name == \"LIST_START\":\n            scope_stack.append(scope)\n            scope = []\n            pc += 1\n            continue\n        elif name == \"LIST_END\":\n            last_action = _UserSemanticAction(lambda xs: [x.eval() for x in xs], scope)\n            scope = scope_stack.pop()\n            pc += 1\n            continue\n        elif name == \"MATCH_ANY\":\n            if pos >= len(stream):\n                fail_message = (\"expected any\",)\n            else:\n                last_action = _ConstantSemanticAction(stream[pos])\n                pos += 1\n                pc += 1\n                continue\n        elif name == \"PUSH_STREAM\":\n            if pos >= len(stream) or not isinstance(stream[pos], list):\n                fail_message = (\"expected list\",)\n            else:\n                stream_pos_stack.append((stream, pos))\n                stream = stream[pos]\n                pos = 0\n                pc += 1\n                continue\n        elif name == \"POP_STREAM\":\n            if pos < len(stream):\n                fail_message = (\"expected end of list\",)\n            else:\n                stream, pos = stream_pos_stack.pop()\n                pos += 1\n                pc += 1\n                continue\n        elif name == \"MATCH_CALL_RULE\":\n",
"type":"code"
},
{
"blank_lines_before":0,
"path":[
"MATCH_CALL_RULE"
],
"prefix":"            ",
"type":"chunk"
},
{
"text":"        elif name == \"FAIL\":\n            fail_message = (arg1,)\n        elif name == \"LABEL\":\n            last_action = _ConstantSemanticAction(label_counter)\n            label_counter += 1\n            pc += 1\n            continue\n        elif name == \"MATCH_STRING\":\n            if pos >= len(stream) or stream[pos] != arg1:\n                fail_message = (\"expected {!r}\", arg1)\n            else:\n                last_action = _ConstantSemanticAction(arg1)\n                pos += 1\n                pc += 1\n                continue\n        else:\n            raise Exception(\"unknown instruction {}\".format(name))\n        fail_pos = tuple([x[1] for x in stream_pos_stack]+[pos])\n        if fail_pos >= latest_fail_pos:\n            latest_fail_message = fail_message\n            latest_fail_pos = fail_pos\n",
"type":"code"
},
{
"blank_lines_before":0,
"path":[
"pop backtrack entry"
],
"prefix":"        ",
"type":"chunk"
},
{
"text":"        if len(call_backtrack_entry) != 4:\n            fail_pos = list(latest_fail_pos)\n            fail_stream = stream_pos_stack[0][0] if stream_pos_stack else stream\n            while len(fail_pos) > 1:\n                fail_stream = fail_stream[fail_pos.pop(0)]\n            raise _MatchError(latest_fail_message, fail_pos[0], fail_stream)\n        (pc, pos, stream_stack_len, scope_stack_len) = call_backtrack_entry\n        if len(stream_pos_stack) > stream_stack_len:\n            stream = stream_pos_stack[stream_stack_len][0]\n        stream_pos_stack = stream_pos_stack[:stream_stack_len]\n        if len(scope_stack) > scope_stack_len:\n            scope = scope_stack[scope_stack_len]\n        scope_stack = scope_stack[:scope_stack_len]\n\nclass _Grammar(object):\n\n    def run(self, rule_name, input_object):\n        if isinstance(input_object, basestring):\n            stream = input_object\n        else:\n            stream = [input_object]\n        result = rlmeta_vm(self._instructions, self._labels, rule_name, stream)\n        if isinstance(result, _Builder):\n            return result.build_string()\n        else:\n            return result\n\nclass _Builder(object):\n\n    def build_string(self):\n        output = _Output()\n        self.write(output)\n        return output.value\n\n    @classmethod\n    def create(self, item):\n        if isinstance(item, _Builder):\n            return item\n        elif isinstance(item, list):\n            return _ListBuilder([_Builder.create(x) for x in item])\n        else:\n            return _AtomBuilder(item)\n\nclass _Output(object):\n\n    def __init__(self):\n        self.buffer = StringIO()\n        self.indentation = 0\n        self.on_newline = True\n\n    @property\n    def value(self):\n        return self.buffer.getvalue()\n\n    def write(self, value):\n        for ch in value:\n            is_linebreak = ch == \"\\n\"\n            if self.indentation and self.on_newline and not is_linebreak:\n                self.buffer.write(\"    \"*self.indentation)\n            self.buffer.write(ch)\n            self.on_newline = is_linebreak\n\nclass _ListBuilder(_Builder):\n\n    def __init__(self, builders):\n        self.builders = builders\n\n    def write(self, output):\n        for builder in self.builders:\n            builder.write(output)\n\nclass _AtomBuilder(_Builder):\n\n    def __init__(self, atom):\n        self.atom = atom\n\n    def write(self, output):\n        output.write(str(self.atom))\n\nclass _IndentBuilder(_Builder):\n\n    def write(self, output):\n        output.indentation += 1\n\nclass _DedentBuilder(_Builder):\n\n    def write(self, output):\n        output.indentation -= 1\n\nclass _ConstantSemanticAction(object):\n\n    def __init__(self, value):\n        self.value = value\n\n    def eval(self):\n        return self.value\n\nclass _UserSemanticAction(object):\n\n    def __init__(self, fn, scope):\n        self.fn = fn\n        self.scope = scope\n\n    def eval(self):\n        return self.fn(self.scope)\n\nclass _MatchError(Exception):\n\n    def __init__(self, message, pos, stream):\n        Exception.__init__(self)\n        self.message = message\n        self.pos = pos\n        self.stream = stream\n\n    def describe(self):\n        message = \"\"\n        if isinstance(self.stream, basestring):\n            before = self.stream[:self.pos].splitlines()\n            after = self.stream[self.pos:].splitlines()\n            for context_before in before[-4:-1]:\n                message += self._context(context_before)\n            message += self._context(before[-1], after[0])\n            message += self._arrow(len(before[-1]))\n            for context_after in after[1:4]:\n                message += self._context(context_after)\n        else:\n            message += self._context(\"[\")\n            for context_before in self.stream[:self.pos]:\n                message += self._context(\"  \", repr(context_before), \",\")\n            message += self._context(\"  \", repr(self.stream[self.pos]), \",\")\n            message += self._arrow(2)\n            for context_after in self.stream[self.pos+1:]:\n                message += self._context(\"  \", repr(context_after), \",\")\n            message += self._context(\"]\")\n        message += \"Error: \"\n        message += self.message[0].format(*self.message[1:])\n        message += \"\\n\"\n        return message\n\n    def _context(self, *args):\n        return \"> {}\\n\".format(\"\".join(args))\n\n    def _arrow(self, lenght):\n        return \"--{}^\\n\".format(\"-\"*lenght)\n",
"type":"code"
}
],
"id":"3233095b41404567872d7e190fb1ad66",
"type":"code"
}
],
"title":"Support library (VM)"
}
],
"id":"042d4832e92c48349da9e4fe0a73f955",
"paragraphs":[],
"title":"Appendix"
}
],
"id":"f4591956cea04b03be2859df337f261a",
"paragraphs":[
{
"fragments":[
{
"text":"After reading ",
"type":"text"
},
{
"text":"Generating a PEG Parser",
"type":"link",
"url":"https://medium.com/@gvanrossum_83706/generating-a-peg-parser-520057d642a9"
},
{
"text":" I realized that RLMeta has a flaw in its its memoization logic: It only memoizes results when a rule matches. If a rule fails, it is not recorded in the memoization table. Therefore, if that rule is tried again at the same position, matching has to be tried again, even though it will fail. In the article, Guido writes",
"type":"text"
}
],
"id":"3a35c5393d0047a4b172fcce7438ef97",
"type":"text"
},
{
"fragments":[
{
"text":"It is important to cache negative results too - in fact most calls to parsing methods will be negative results.",
"type":"text"
}
],
"id":"8ed0d48428924afe8fa356860cdf59b6",
"type":"quote"
},
{
"fragments":[
{
"text":"Besides fixing the flaw in the memoization logic, I am also interested in seeing how it affects performance.",
"type":"text"
}
],
"id":"b5a617dbf9dc4745a60e8a7e5fc6ec01",
"type":"text"
},
{
"fragments":[
{
"text":"In this article I show how to fix the memoization logic in both the ",
"type":"text"
},
{
"text":"optimized version",
"type":"link",
"url":"/writing/optimizing-rlmeta/index.html"
},
{
"text":" and the ",
"type":"text"
},
{
"text":"vm based version",
"type":"link",
"url":"/writing/rlmeta-vm/index.html"
},
{
"text":" and show how performance is affected.",
"type":"text"
}
],
"id":"eb08d8940b994db29d7af67aa6eb3323",
"type":"text"
}
],
"title":"Memoizing failures in RLMeta"
},
"variables":{}
}