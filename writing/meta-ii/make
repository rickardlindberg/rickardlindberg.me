#!/usr/bin/env python

import subprocess
import sys

def make(version):
    if version > 0:
        make(version - 1)
        compile_meta(version, version - 1)
        compile_meta(version, version)

def compile_meta(compiler_for, written_in):
    source_file = "meta{}.meta{}".format(compiler_for, written_in)
    target_file = "meta{}.py".format(compiler_for)
    compiler_file = "meta{}.py".format(written_in)
    print("Compiling {} -> {}".format(source_file, target_file))
    outs = []
    for _ in range(3):
        out = compile_single(source_file, compiler_file)
        write(target_file, out)
        compiler_file = target_file
        outs.append(out)
    assert outs[-1] == outs[-2]

def compile_single(source_file, compiler_file):
    process = subprocess.Popen(
        ["python", compiler_file],
        stdin=subprocess.PIPE,
        stdout=subprocess.PIPE
    )
    (stdout, stderr) = process.communicate(read(source_file))
    if process.returncode != 0:
        sys.exit(stderr)
    return stdout

def read(path):
    with open(path) as f:
        return f.read()

def write(path, content):
    with open(path, "w") as f:
        f.write(content)

if __name__ == "__main__":
    make(int(sys.argv[1]))
