<<<
import re
import sys

class MaybeParseError(Exception):
    pass

class Compiler(object):

    def compile(self, program):
        self._input = program
        self._pos = 0
        self._output = ''
        self._level = 0
        self.program()
        return self._output

    def _re(self, pattern):
        self._pos += len(re.match(r'\s*', self._input[self._pos:]).group(0))
        match = re.match(pattern, self._input[self._pos:])
        if match:
            self._pos += len(match.group(0))
            if match.groups():
                return match.group(1)
            else:
                return match.group(0)
        raise MaybeParseError('re not found')

    def _backup(self):
        return (self._pos, self._output, self._level)

    def _restore(self, backup):
        self._pos, self._output, self._level = backup

    def _write(self, text):
        for ch in text:
            if self._output and self._output[-1] == '\n' and ch != '\n':
                self._output += '    ' * self._level
            self._output += ch

    def _indent(self):
        self._level += 1

    def _dedent(self):
        self._level -= 1
>>>

compiler Meta3 {
  program      = verbatim grammar verbatim;
  grammar      = "compiler" "[a-zA-Z0-9]+"
                 { . "class " % "(Compiler):" .  > }
                 "{" rules "}"
                 { < . }
               ;
  verbatim     = "<<<\n((.|\n)*?\n)>>>\n" { % }
               | empty
               ;
  rules        = rule rules | empty;
  rule         = "[a-zA-Z]+"
                 { . "def " % "(self):" . > }
                 "="
                 choices
                 { "raise MaybeParseError('no choice found')" . < }
                 ";"
               ;
  choices      = choice moreChoices;
  moreChoices  = "\\|" choices | empty;
  choice       = {
                   "try:" . >
                     "backup = self._backup()" .
                 }
                 parts
                 {
                     "return" . <
                   "except MaybeParseError:" . >
                     "self._restore(backup)" . <
                 }
               ;
  parts        = part parts | empty;
  part         = "{" outputs "}"
               | "\x22.*?\x22" { "match = self._re(" % ")" . }
               | "[a-zA-Z]+"   { "self." % "()" . }
               ;
  outputs      = output outputs | empty;
  output       = "\x22.*?\x22" { "self._write(" % ")" . }
               | "%"           { "self._write(match)" . }
               | "[.]"         { "self._write('\\n')" . }
               | ">"           { "self._indent()" . }
               | "<"           { "self._dedent()" . }
               ;
  empty        = "";
}

<<<
if __name__ == '__main__':
    sys.stdout.write(Meta3().compile(sys.stdin.read()))
>>>
