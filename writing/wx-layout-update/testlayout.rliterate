{
"root_page":{
"children":[
{
"children":[],
"id":"d72b284e97a449ed9a66e227cd8c3a57",
"paragraphs":[
{
"fragments":[
{
"text":"The test program lays out a few widgets vertically. First a button that triggers a change in layout, then a text widget surrounded by two panels to more clearly indicate the size of the text widget. It looks like this:",
"type":"text"
}
],
"id":"7ddda6ec759a46b093c8683ceb7b4391",
"type":"text"
},
{
"fragments":[
{
"text":"Tests program.",
"type":"text"
}
],
"id":"8d52d54f4b6840a9be7fe8d2ca827153",
"image_base64":"",
"type":"image"
},
{
"fragments":[
{
"text":"When the button is clicked, the size of the text widget is increased followed by a call to ",
"type":"text"
},
{
"text":"Layout",
"type":"code"
},
{
"text":" and ",
"type":"text"
},
{
"text":"Update",
"type":"code"
},
{
"text":" on the frame. I would expect the frame to redraw immediately at this point, but it doesn't. At least not correctly.",
"type":"text"
}
],
"id":"d382feb3b9e74da9bbc2aba779d0d80b",
"type":"text"
}
],
"title":"Overview"
},
{
"children":[],
"id":"a4dfb24232ad4cbba0231c02ee01ac05",
"paragraphs":[
{
"fragments":[
{
"text":"The structure of the test program looks like this:",
"type":"text"
}
],
"id":"06389ed6fead4541967e33feb2d6a21d",
"type":"text"
},
{
"chunkpath":[],
"filepath":[
"testlayout.py"
],
"fragments":[
{
"text":"import wx\nimport time\n\nclass TestFrame(wx.Frame):\n\n",
"type":"code"
},
{
"blank_lines_before":1,
"path":[
"TestFrame"
],
"prefix":"    ",
"type":"chunk"
},
{
"text":"\nclass Text(wx.Panel):\n\n",
"type":"code"
},
{
"blank_lines_before":1,
"path":[
"Text"
],
"prefix":"    ",
"type":"chunk"
},
{
"text":"\nif __name__ == \"__main__\":\n    app = wx.App()\n    frame = TestFrame()\n    frame.Show()\n    app.MainLoop()\n",
"type":"code"
}
],
"id":"740916a5ac674d0089ef395f98222703",
"type":"code"
},
{
"fragments":[
{
"text":"If you prefer the read the complete test program, go to ",
"type":"text"
},
{
"page_id":"3e79fd9904854dc2bd273d633931b05d",
"text":null,
"type":"reference"
},
{
"text":".",
"type":"text"
}
],
"id":"a0765789b0734c78b6995ec4e50d00c2",
"type":"text"
},
{
"fragments":[
{
"text":"The ",
"type":"text"
},
{
"text":"__init__",
"type":"code"
},
{
"text":" method of the test frame lays out the widgets using a vertical sizer and hooks up the click event.",
"type":"text"
}
],
"id":"3dd6e0aa2bbc40a492b4fadd5a8e3ec2",
"type":"text"
},
{
"chunkpath":[
"TestFrame"
],
"filepath":[
"testlayout.py"
],
"fragments":[
{
"text":"def __init__(self):\n    wx.Frame.__init__(self, None)\n    self.button = wx.Button(self, label=\"increase text size\")\n    self.button.Bind(wx.EVT_BUTTON, self._on_increase_size_click)\n    self.top = wx.Panel(self, size=(-1, 20))\n    self.top.SetBackgroundColour(\"yellow\")\n    self.text = Text(self)\n    self.bottom = wx.Panel(self, size=(-1, 20))\n    self.bottom.SetBackgroundColour(\"pink\")\n    self.Sizer = wx.BoxSizer(wx.VERTICAL)\n    self.Sizer.Add(\n        self.button,\n        border=5, proportion=0, flag=wx.EXPAND|wx.ALL\n    )\n    self.Sizer.Add(\n        self.top,\n        border=5, proportion=0, flag=wx.EXPAND|wx.ALL\n    )\n    self.Sizer.Add(\n        self.text,\n        border=5, proportion=0, flag=wx.EXPAND|wx.ALL\n    )\n    self.Sizer.Add(\n        self.bottom,\n        border=5, proportion=0, flag=wx.EXPAND|wx.ALL\n    )\n",
"type":"code"
}
],
"id":"1b04be115b2f4c81be1fb6e28dfd9a78",
"type":"code"
},
{
"fragments":[
{
"text":"The click event handler increases the size of the text widget and tries to do an immediate update. The sleep is there to see if the update is delayed or not.",
"type":"text"
}
],
"id":"d7ec7d83c5a24ba89491a027ea52fdcc",
"type":"text"
},
{
"chunkpath":[
"TestFrame"
],
"filepath":[
"testlayout.py"
],
"fragments":[
{
"text":"def _on_increase_size_click(self, event):\n    print(\"\")\n    print(\"Click\")\n    self.text.increase_size()\n    self.Layout()\n    print(\"Update\")\n    self.Update()\n    time.sleep(2)\n    print(\"Update done\")\n",
"type":"code"
}
],
"id":"42b6d7f34c83455fb4d82d32c090bcba",
"type":"code"
},
{
"fragments":[
{
"text":"The ",
"type":"text"
},
{
"text":"__init__",
"type":"code"
},
{
"text":" method of the text widget sets an initial size and hooks up paint and size events.",
"type":"text"
}
],
"id":"4dfd18a60d57400299e70e4cf2ae91ad",
"type":"text"
},
{
"chunkpath":[
"Text"
],
"filepath":[
"testlayout.py"
],
"fragments":[
{
"text":"def __init__(self, parent):\n    wx.Panel.__init__(self, parent)\n    self.min_h = 0\n    self.increase_size()\n    self.Bind(wx.EVT_PAINT, self._on_paint)\n    self.Bind(wx.EVT_SIZE, self._on_size)\n",
"type":"code"
}
],
"id":"63e98706ca1742f5bf49bab8bc5ebc78",
"type":"code"
},
{
"fragments":[
{
"text":"The ",
"type":"text"
},
{
"text":"increase_size",
"type":"code"
},
{
"text":" method increases the height and sets a new min size.",
"type":"text"
}
],
"id":"ac22899703d943e4b1a7f76ad9a18cb7",
"type":"text"
},
{
"chunkpath":[
"Text"
],
"filepath":[
"testlayout.py"
],
"fragments":[
{
"text":"def increase_size(self):\n    self.min_h += 10\n    self.SetMinSize((-1, self.min_h))\n",
"type":"code"
}
],
"id":"b33127815038454c99a9a50097c49f2f",
"type":"code"
},
{
"fragments":[
{
"text":"The paint event handler draws a bunch of lines of text and also prints the rectangles that were invalidated.",
"type":"text"
}
],
"id":"e07fc406c23d45f4b4e8d131d45626a4",
"type":"text"
},
{
"chunkpath":[
"Text"
],
"filepath":[
"testlayout.py"
],
"fragments":[
{
"text":"def _on_paint(self, event):\n    print(\"repaint text\")\n    upd = wx.RegionIterator(self.GetUpdateRegion())\n    while upd.HaveRects():\n        print(\"  {}\".format(upd.GetRect()))\n        upd.Next()\n    dc = wx.PaintDC(self)\n    y = 0\n    for x in range(20):\n        line = \"line {}\".format(x)\n        dc.DrawText(line, 5, y)\n        y += dc.GetTextExtent(line)[1]\n    event.Skip()\n",
"type":"code"
}
],
"id":"6116932bc3a54a95bd3d9dc6631b7bf0",
"type":"code"
},
{
"fragments":[
{
"text":"The size event just prints the new size.",
"type":"text"
}
],
"id":"3a5f80bec2a549f0bccfb9c5a792cae5",
"type":"text"
},
{
"chunkpath":[
"Text"
],
"filepath":[
"testlayout.py"
],
"fragments":[
{
"text":"def _on_size(self, event):\n    print(\"resize text {}\".format(event.GetSize()))\n    event.Skip()\n",
"type":"code"
}
],
"id":"983d05fb688f45d0a2c3022b8d0ad85b",
"type":"code"
}
],
"title":"Test program"
},
{
"children":[],
"id":"7bc0a753f4b74abca1ce3667a620d138",
"paragraphs":[
{
"fragments":[
{
"text":"Here is the output of a button click:",
"type":"text"
}
],
"id":"1540e2bbdb3f45a8b9e771ff650fa4e6",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"Click\nresize text (396, 20)\nUpdate\nrepaint text\n  (0, 0, 396, 10)\nUpdate done\nrepaint text\n  (0, 0, 396, 20)\n",
"type":"code"
}
],
"id":"35341423d29d402ea13b23a4ca72d371",
"type":"code"
},
{
"child_type":"unordered",
"children":[
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"First, the click event hander is entered.",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"The text widget properly gets a resize event. (My guess is as a result of the ",
"type":"text"
},
{
"text":"Layout",
"type":"code"
},
{
"text":" call.)",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Then ",
"type":"text"
},
{
"text":"Update",
"type":"code"
},
{
"text":" is called.",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"A repaint of the text widget is then done, but the invalidated rectangle is only 10px high. The new height is 20.",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"After the ",
"type":"text"
},
{
"text":"sleep",
"type":"code"
},
{
"text":" call, a repaint of the text widget is done again, now with the correct rectangle.",
"type":"text"
}
]
}
],
"id":"724842e1ec0041689b55dfc6b44f2eff",
"type":"list"
},
{
"fragments":[
{
"text":"So in practice, nothing is shown on the screen until after the sleep call.",
"type":"text"
}
],
"id":"266be967bea64a7590cefcd0159eee10",
"type":"text"
},
{
"fragments":[
{
"text":"It seems to me that the ",
"type":"text"
},
{
"text":"Layout",
"type":"code"
},
{
"text":" call depends on something happening by following events. Adding a ",
"type":"text"
},
{
"text":"Refresh",
"type":"code"
},
{
"text":" call immediately after ",
"type":"text"
},
{
"text":"Layout",
"type":"code"
},
{
"text":" does not seem to have any effect.",
"type":"text"
}
],
"id":"487dd1d0fe4d413da83f0df4295a7d70",
"type":"text"
},
{
"fragments":[
{
"text":"Why does the immediate repaint don't get the correct size?",
"type":"strong"
}
],
"id":"50fe8b40d7b64423a15e82428403c881",
"type":"text"
}
],
"title":"Results"
},
{
"children":[],
"id":"3e79fd9904854dc2bd273d633931b05d",
"paragraphs":[
{
"code_id":"740916a5ac674d0089ef395f98222703",
"id":"e1bb28960f914f07be40967db5a6c123",
"type":"expanded_code"
}
],
"title":"Complete test program"
}
],
"id":"0d90248100b54adaa01fc73d5620f942",
"paragraphs":[
{
"fragments":[
{
"text":"I have a problem updating a widget immediately with ",
"type":"text"
},
{
"text":"Layout",
"type":"code"
},
{
"text":" and ",
"type":"text"
},
{
"text":"Update",
"type":"code"
},
{
"text":". I present a test program that demonstrates the problem.",
"type":"text"
}
],
"id":"9e24fdd9e58e41e384dd7875b2713b8a",
"type":"text"
},
{
"fragments":[
{
"text":"https://discuss.wxpython.org/t/problem-updating-widget-immediately-with-layout-and-update",
"type":"link",
"url":"https://discuss.wxpython.org/t/problem-updating-widget-immediately-with-layout-and-update"
}
],
"id":"49b6e4cfe1f54c5880915cbcd6cc25f1",
"type":"text"
},
{
"fragments":[
{
"text":"https://wiki.wxpython.org/WhenAndHowToCallLayout",
"type":"link",
"url":"https://wiki.wxpython.org/WhenAndHowToCallLayout"
},
{
"text":".",
"type":"text"
}
],
"id":"c0455e35831447d2a595f5286ecb8b65",
"type":"text"
}
],
"title":"Test Layout"
},
"variables":{}
}