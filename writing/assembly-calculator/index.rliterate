{
"root_page":{
"children":[
{
"children":[],
"id":"a83adf407dbd43929bfbb4ab7f7311e5",
"paragraphs":[
{
"chunkpath":[],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"text":"Parser {\n  expr  = digit:x (op:y digit:z -> [y z])*:xs -> parseOps(x xs)\n  digit = '0'-'9':x                           -> int(x)\n  op    =\n    | '+' -> Op(makeNode(\"ADD\") \"1\" \"left\")\n    | '-' -> Op(makeNode(\"SUB\") \"1\" \"left\")\n    | '*' -> Op(makeNode(\"MUL\") \"2\" \"left\")\n    | '/' -> Op(makeNode(\"DIV\") \"2\" \"left\")\n    | '^' -> Op(makeNode(\"POW\") \"3\" \"right\")\n}\n",
"type":"code"
}
],
"id":"d3a45ae9dc0345bebfbf390d7247c39b",
"language":"",
"post_process":[],
"type":"code"
},
{
"chunkpath":[],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"def makeNode(name):\n    def op(left, right):\n        return [name, left, right]\n    return op\n",
"type":"code"
}
],
"id":"d447ef7f73c3449a86562dc994bd14aa",
"type":"code"
},
{
"chunkpath":[],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"class Op(object):\n\n    def __init__(self, fn, prec, assoc):\n        self.fn = fn\n        self.prec = int(prec)\n        self.assoc = assoc\n",
"type":"code"
}
],
"id":"26892d627896439aa7b3080a02ad7ffa",
"type":"code"
},
{
"chunkpath":[],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"def parseOps(expr, items, min_level=0):\n    while items and items[0][0].prec >= min_level:\n        op, rhs = items.pop(0)\n        if op.assoc == \"left\":\n            next_level = op.prec + 1\n        else:\n            next_level = op.prec\n        expr = op.fn(expr, parseOps(rhs, items, next_level))\n    return expr\n",
"type":"code"
}
],
"id":"0e3c33cbca0f4cb296429066f8a80146",
"type":"code"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"1+2*3\n9^5\n",
"type":"code"
}
],
"id":"a28c516d70f34a0395bb9904c5c379d1",
"post_process":[
"bash",
"compile.sh",
"parser"
],
"type":"code"
},
{
"code_id":"a28c516d70f34a0395bb9904c5c379d1",
"id":"137ce8857b5c4a8d8c38b74917c41504",
"type":"expanded_code"
}
],
"title":"Parser"
},
{
"children":[],
"id":"0488143f851349bf876169b04770e6bf",
"paragraphs":[
{
"chunkpath":[],
"filepath":[
"stackmachine.rlmeta"
],
"fragments":[
{
"text":"StackMachine {\n  expr =\n    | [.:name expr:left expr:right] -> [~left ~right [name]]\n    | .:leaf                        -> [[\"CONST\" leaf]]\n}\n",
"type":"code"
}
],
"id":"0fa99ac78bf24f558aecc3a4760c95bd",
"language":"",
"post_process":[],
"type":"code"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"1+2*3\n",
"type":"code"
}
],
"id":"4598cfbceed64836b4c4ee934a90eed6",
"post_process":[
"bash",
"compile.sh",
"parser",
"stackmachine"
],
"type":"code"
},
{
"code_id":"4598cfbceed64836b4c4ee934a90eed6",
"id":"c17173be18e643c5889acd3b28796ca7",
"type":"expanded_code"
}
],
"title":"Stack machine"
},
{
"children":[],
"id":"bb76bbbba48d4c23b982e5c90af36d86",
"paragraphs":[
{
"child_type":"unordered",
"children":[
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"rsp",
"type":"code"
},
{
"text":" is the stack pointer",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"rbx",
"type":"code"
},
{
"text":" is a temporary register",
"type":"text"
}
]
}
],
"id":"b92e18b1c525415e9dc01876f3051269",
"type":"list"
},
{
"chunkpath":[],
"filepath":[
"assembly.rlmeta"
],
"fragments":[
{
"text":"Assembly {\n  expr = [pre:x instr*:ys post:z] -> [~x ~flatten(ys) ~z]\n  pre = -> [\n    [\"section\" \"text\"]\n    [\"directive\" \"global _start\"]\n    [\"label\" \"_start\"]\n  ]\n  instr = [%:op] -> op\n  post = -> [\n    [\"mov\"      [\"addr\"  \"rsp\"]     [\"reg\" \"rdi\"]]\n    [\"mov\"      [\"const\" int(\"60\")] [\"reg\" \"rax\"]]\n    [\"syscall\"]\n  ]\n  ADD   =     -> [[\"pop\"   [\"reg\"  \"rax\"]]\n                  [\"add\"   [\"reg\"  \"rax\"] [\"addr\" \"rsp\"]]]\n  SUB   =     -> [[\"pop\"   [\"reg\"  \"rax\"]]\n                  [\"sub\"   [\"reg\"  \"rax\"] [\"addr\" \"rsp\"]]]\n  MUL   =     -> [[\"pop\"   [\"reg\"  \"rax\"]]\n                  [\"imul\"  [\"addr\" \"rsp\"] [\"reg\"  \"rax\"]]\n                  [\"mov\"   [\"reg\"  \"rax\"] [\"addr\" \"rsp\"]]]\n  DIV   =     -> [[\"pop\"   [\"reg\"  \"rbx\"]]\n                  [\"pop\"   [\"reg\"  \"rax\"]]\n                  [\"mov\"   [\"const\" int(\"0\")][\"reg\"  \"rdx\"]]\n                  [\"idiv\"  [\"reg\"  \"rbx\"]]\n                  [\"push\"  [\"reg\"  \"rax\"]]]\n  POW   =     -> [[\"f2xm1\" [\"reg\"  \"rax\"] [\"addr\" \"rsp\"]]]\n  CONST = .:x -> [[\"push\"  [\"const\" x]]]\n}\n",
"type":"code"
}
],
"id":"82c7f0b301fe414daed3ccf01f1a3004",
"language":"",
"post_process":[],
"type":"code"
},
{
"chunkpath":[],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"def flatten(xs):\n    result = []\n    for x in xs:\n        result.extend(x)\n    return result\n",
"type":"code"
}
],
"id":"15080ee0ed014eb28fae84aa9fc38edc",
"type":"code"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"1+2*3\n",
"type":"code"
}
],
"id":"6cf60873293d4f8a815f29443ddd954c",
"post_process":[
"bash",
"compile.sh",
"parser",
"stackmachine",
"assembly"
],
"type":"code"
},
{
"code_id":"6cf60873293d4f8a815f29443ddd954c",
"id":"8852d3b4a5464870a71e4fabff92fb75",
"type":"expanded_code"
}
],
"title":"Assembly"
},
{
"children":[],
"id":"12e4e39c6b494b30a425f4570e8b8d53",
"paragraphs":[
{
"chunkpath":[],
"filepath":[
"gnu.rlmeta"
],
"fragments":[
{
"text":"GNU {\n  expr = [instr*:xs] -> { xs }\n  instr =\n    | [\"section\" .:x]              -> { \".\" x \"\\n\" }\n    | [\"directive\" .:x]            -> { \".\" x \"\\n\" }\n    | [\"label\" .:x]                -> { x \":\\n\" }\n    | [name:x op:source op:target] -> { x \"  \" source \",\" target \"\\n\" }\n    | [name:x op:arg]              -> { x \"  \" arg \"\\n\" }\n    | [name:x]                     -> { x \"\\n\" }\n  op =\n    | [\"reg\" .:name]    -> { \"%\" name     }\n    | [\"addr\" .:name]   -> { \"(%\" name \")\" }\n    | [\"const\" .:value] -> { \"$\" value    }\n  name = .:x -> pad(x)\n}\n",
"type":"code"
}
],
"id":"a3c752a8e4fc42cfbd6cfdf5bb8c2674",
"language":"",
"post_process":[],
"type":"code"
},
{
"chunkpath":[],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"def pad(text):\n    return text.ljust(7)\n",
"type":"code"
}
],
"id":"42da3457d2a9450bbb21aaccdf8398aa",
"type":"code"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"1\n1+2*3\n",
"type":"code"
}
],
"id":"04e14524f1b34b6f940d0922a6bfc6f4",
"post_process":[
"bash",
"compile.sh",
"parser",
"stackmachine",
"assembly",
"gnu"
],
"type":"code"
},
{
"code_id":"04e14524f1b34b6f940d0922a6bfc6f4",
"id":"7857b19690284563bbdaff9437c5c454",
"type":"expanded_code"
},
{
"fragments":[
{
"text":"Compile with ",
"type":"text"
},
{
"text":"gcc -nostdlib file.s",
"type":"code"
},
{
"text":".",
"type":"text"
}
],
"id":"679dddb6aac04f20bdd82e14bab671ec",
"type":"text"
}
],
"title":"GNU"
},
{
"children":[],
"id":"7790eca23f484ea7b7430ef607b491c2",
"paragraphs":[
{
"chunkpath":[],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"def main():\n    grammars = {\n        \"parser\": Parser(),\n        \"stackmachine\": StackMachine(),\n        \"assembly\": Assembly(),\n        \"gnu\": GNU(),\n    }\n    try:\n        for index, expr in enumerate(sys.stdin.read().splitlines()):\n            if index > 0:\n                print(\"\")\n                print(\"-\"*30)\n                print(\"\")\n            for grammar_name in sys.argv[1:]:\n                if grammar_name.startswith(\"@\"):\n                    with open(grammar_name[1:], \"w\") as f:\n                        f.write(str(expr))\n                    continue\n                grammar = grammars[grammar_name]\n                print_expr(expr)\n                print_box(grammar.__class__.__name__)\n                expr = grammar.run(\"expr\", expr)\n            print_expr(expr)\n    except _MatchError as e:\n        sys.stderr.write(e.describe())\n\ndef print_expr(expr):\n    if isinstance(expr, str):\n        print(expr.strip())\n    else:\n        pprint.pprint(expr, width=20)\n\ndef print_box(name):\n    HALF = 10\n    WIDTH = HALF*2+1\n    print(\"\")\n    print(\"{}V{}\".format(\"=\"*HALF, \"=\"*HALF))\n    print(name.center(WIDTH))\n    print(\"{}V{}\".format(\"=\"*HALF, \"=\"*HALF))\n    print(\"\")\n",
"type":"code"
}
],
"id":"f1d6ba61587e43a5878aff3bbdbf8cac",
"type":"code"
},
{
"chunkpath":[],
"filepath":[
"compile.sh"
],
"fragments":[
{
"text":"set -e\n\ncompile() {\n    echo \"import sys\"\n    echo \"import pprint\"\n    python rlmeta/rlmeta.py --support\n    cat \"support.py\"\n    python rlmeta/rlmeta.py < parser.rlmeta\n    python rlmeta/rlmeta.py < stackmachine.rlmeta\n    python rlmeta/rlmeta.py < assembly.rlmeta\n    python rlmeta/rlmeta.py < gnu.rlmeta\n    echo \"main()\"\n}\n\npython <(compile) \"$@\"\n",
"type":"code"
}
],
"id":"3d82622d2bab436ebb7f6d53eefb985f",
"type":"code"
}
],
"title":"Appendix: Test script"
}
],
"id":"3dffd837b9ec4ad88b4e7f4c4b3b5aae",
"paragraphs":[],
"title":"Calculator to assembly"
},
"variables":{}
}