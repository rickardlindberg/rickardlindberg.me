{
"root_page":{
"children":[
{
"children":[],
"id":"a83adf407dbd43929bfbb4ab7f7311e5",
"paragraphs":[
{
"chunkpath":[],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"text":"Parser {\n  expr  = digit:x (op:y digit:z -> [y z])*:xs -> parseOps(x xs)\n  digit = '0'-'9':x                           -> int(x)\n  op    =\n    | '+' -> Op(makeNode(\"ADD\") \"1\" \"left\")\n    | '-' -> Op(makeNode(\"SUB\") \"1\" \"left\")\n    | '*' -> Op(makeNode(\"MUL\") \"2\" \"left\")\n    | '/' -> Op(makeNode(\"DIV\") \"2\" \"left\")\n    | '^' -> Op(makeNode(\"POW\") \"3\" \"right\")\n}\n",
"type":"code"
}
],
"id":"d3a45ae9dc0345bebfbf390d7247c39b",
"language":"",
"post_process":[],
"type":"code"
},
{
"chunkpath":[],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"def makeNode(name):\n    def op(left, right):\n        return [name, left, right]\n    return op\n",
"type":"code"
}
],
"id":"d447ef7f73c3449a86562dc994bd14aa",
"type":"code"
},
{
"chunkpath":[],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"class Op(object):\n\n    def __init__(self, fn, prec, assoc):\n        self.fn = fn\n        self.prec = int(prec)\n        self.assoc = assoc\n",
"type":"code"
}
],
"id":"26892d627896439aa7b3080a02ad7ffa",
"type":"code"
},
{
"chunkpath":[],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"def parseOps(expr, items, min_level=0):\n    while items and items[0][0].prec >= min_level:\n        op, rhs = items.pop(0)\n        if op.assoc == \"left\":\n            next_level = op.prec + 1\n        else:\n            next_level = op.prec\n        expr = op.fn(expr, parseOps(rhs, items, next_level))\n    return expr\n",
"type":"code"
}
],
"id":"0e3c33cbca0f4cb296429066f8a80146",
"type":"code"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"1+2*3\n9^5\n",
"type":"code"
}
],
"id":"a28c516d70f34a0395bb9904c5c379d1",
"post_process":[
"bash",
"compile.sh",
"1"
],
"type":"code"
},
{
"code_id":"a28c516d70f34a0395bb9904c5c379d1",
"id":"137ce8857b5c4a8d8c38b74917c41504",
"type":"expanded_code"
}
],
"title":"Parser"
},
{
"children":[],
"id":"0488143f851349bf876169b04770e6bf",
"paragraphs":[
{
"chunkpath":[],
"filepath":[
"stackmachine.rlmeta"
],
"fragments":[
{
"text":"StackMachine {\n  expr =\n    | [.:name expr:left expr:right] -> [~left ~right name]\n    | .:leaf                        -> [leaf]\n}\n",
"type":"code"
}
],
"id":"0fa99ac78bf24f558aecc3a4760c95bd",
"language":"",
"post_process":[],
"type":"code"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"1+2*3\n",
"type":"code"
}
],
"id":"4598cfbceed64836b4c4ee934a90eed6",
"post_process":[
"bash",
"compile.sh",
"2"
],
"type":"code"
},
{
"code_id":"4598cfbceed64836b4c4ee934a90eed6",
"id":"c17173be18e643c5889acd3b28796ca7",
"type":"expanded_code"
}
],
"title":"Stack machine"
},
{
"children":[],
"id":"7790eca23f484ea7b7430ef607b491c2",
"paragraphs":[
{
"chunkpath":[],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"def main():\n    grammars = [\n        Parser(),\n        StackMachine(),\n    ]\n    if len(sys.argv) > 1:\n        grammars = grammars[:int(sys.argv[1])]\n    try:\n        for expr in sys.stdin.read().splitlines():\n            for grammar in grammars:\n                pprint.pprint(expr, width=20)\n                box(grammar.__class__.__name__)\n                expr = grammar.run(\"expr\", expr)\n            pprint.pprint(expr, width=20)\n            print(\"\")\n            print(\"\")\n    except _MatchError as e:\n        sys.stderr.write(e.describe())\n\ndef box(name):\n    print(\"  {}|\".format(\" \"*(len(name)/2)))\n    print(\"=={}==\".format(\"=\"*len(name)))\n    print(\"  {}\".format(name))\n    print(\"=={}==\".format(\"=\"*len(name)))\n    print(\"  {}|\".format(\" \"*(len(name)/2)))\n",
"type":"code"
}
],
"id":"f1d6ba61587e43a5878aff3bbdbf8cac",
"type":"code"
},
{
"chunkpath":[],
"filepath":[
"compile.sh"
],
"fragments":[
{
"text":"set -e\n\ncompile() {\n    echo \"import sys\"\n    echo \"import pprint\"\n    rlmeta --support\n    cat \"support.py\"\n    rlmeta < parser.rlmeta\n    rlmeta < stackmachine.rlmeta\n    echo \"main()\"\n}\n\npython <(compile) \"$@\"\n",
"type":"code"
}
],
"id":"3d82622d2bab436ebb7f6d53eefb985f",
"type":"code"
}
],
"title":"Glue"
}
],
"id":"3dffd837b9ec4ad88b4e7f4c4b3b5aae",
"paragraphs":[],
"title":"Calculator to assembly"
},
"variables":{}
}