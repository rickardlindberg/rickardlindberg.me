Assembler {
  Grammar       = .:x ast*:ys     -> #List():I -> #Dict():LABEL -> ys
                                  -> { "class " x "(Grammar):\n\n" >
                                         "labels = " #repr(LABEL) "\n"
                                         "instructions = [\n" >
                                           #join(I ",\n")
                                         < "\n]\n"
                                       < }
  Rule          = .:x             -> LABEL(x #len(I))
  Target        = .:x             -> I(#repr(x))
  Label         = .:x             -> LABEL(x #len(I))
  I             = .:x             -> I(x)
  Expr          = py:x            -> I(x)
  Action        = [actionExpr:x]  -> I({"lambda self: " x})
  actionExpr    =
    | py:x ast:y actionExpr:z     -> { "self.bind("
                                       x ", " y ", lambda: " z ")" }
    | .    ast
  String        = py
  List          = astList:x       -> { "concat([" x "])" }
  ListItem      = py:x ast:y      -> { "splice(" x ", " y ")" }
  Format        = astList:x       -> { "join([" x "])" }
  Indent        = ast:x           -> { "indent(" x ", "
                                       "self.lookup('indentprefix'))" }
  Call          = ast:x astList:y -> { x "(" y ")" }
  Native        = .
  Lookup        = py:x            -> { "self.lookup(" x ")" }
  asts          = ast*:xs !.      -> { xs }
  astList       = ast*:xs         -> #join(xs ", ")
  ast           = [%:x]           -> x
  py            = .:x             -> #repr(x)
}
