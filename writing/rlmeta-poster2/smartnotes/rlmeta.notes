{
    "links": {
        "00b36e6d59db4566b4a4e20f156aa6da": {
            "from": "c071ea8391344278bedcc1a3b7334e4f",
            "timestamp_created": "2021-08-05T20:15:49.754179",
            "to": "47f957ea55fc446c89619e12ac164d9e"
        },
        "06250eddc66d4c2d8ff8393115a05838": {
            "from": "552a9e8d95604f69a0b87acdb4750c19",
            "timestamp_created": "2021-08-05T20:19:20.452461",
            "to": "e7c43863c275461196e5507bc450fcf5"
        },
        "075c1a2796f94809824ecdb8b0cf9f79": {
            "from": "2e560fe94ea44983a4773a795423f282",
            "timestamp_created": "2021-08-05T20:27:44.526550",
            "to": "d4e2bfd1c8484c0f9241272174f3c943"
        },
        "0bc55ee1538f40e38b3733c7fc7cffa2": {
            "from": "7529a877ec74448087809e78a0bbe7d0",
            "timestamp_created": "2021-08-04T19:57:09.292348",
            "to": "a995a8d1ff224c76b2da7ec26b60edcb"
        },
        "0e42ab1dd5fc4566a0c207a8d9441e48": {
            "from": "64737c1073214d69987203a50ece5028",
            "timestamp_created": "2021-08-05T20:19:40.219855",
            "to": "93f0e4d0a0d94104b2da730249ab1240"
        },
        "154aacdc89be48febd730da237612979": {
            "from": "cc974a69207048fa951e0ae5c96c7871",
            "timestamp_created": "2021-08-05T20:17:19.532710",
            "to": "7f29b45d8e414050936fe3783ea55554"
        },
        "1ac6a96ce32e490287ea1bed04efdc4b": {
            "from": "5a38b128fe5c43b998ed161f8a116b19",
            "timestamp_created": "2021-08-05T20:19:30.071575",
            "to": "f461c8ca67ba452e9751188553b7d16d"
        },
        "305f8a5b452c49fdafb9b5aef9fd3b30": {
            "from": "cc974a69207048fa951e0ae5c96c7871",
            "timestamp_created": "2021-08-05T20:17:14.695916",
            "to": "36eae10cf57944438a30e16ff45479ff"
        },
        "315b9eefa93344d6858f4e3b04d2231e": {
            "from": "47f957ea55fc446c89619e12ac164d9e",
            "timestamp_created": "2021-08-05T20:26:49.529712",
            "to": "3e73e40f62a14ba49bafea3dcb4b4485"
        },
        "341647554dd7481b8310fdc09f904340": {
            "from": "cc974a69207048fa951e0ae5c96c7871",
            "timestamp_created": "2021-08-05T20:16:40.309743",
            "to": "7f0c205da5ec4e008ebcf0878c79964e"
        },
        "34911c1146004415aaf6e02422cd36f9": {
            "from": "7d223d63a5e349a8982d150ce829c286",
            "timestamp_created": "2021-08-05T20:27:33.909356",
            "to": "9e444e38fad14206ae015ecef5ef7cbc"
        },
        "351ab4c870774706966d2a93e863d6a1": {
            "from": "f4df26119ce548e18610a766ca7d5377",
            "timestamp_created": "2021-08-04T19:55:16.832033",
            "to": "0d8fde7cd4f340e1a3e08298784f4c95"
        },
        "355406ffd31442fe952b45c11d8b6966": {
            "from": "c071ea8391344278bedcc1a3b7334e4f",
            "timestamp_created": "2021-08-05T20:16:24.024762",
            "to": "2e560fe94ea44983a4773a795423f282"
        },
        "37b03a3903714a2d8ae60d25301adbb4": {
            "from": "cc974a69207048fa951e0ae5c96c7871",
            "timestamp_created": "2021-08-05T20:16:34.638958",
            "to": "d98b50be6a234c3f89499d104988e9ac"
        },
        "3d7f1d1c4fd846a29c1902d6bbd10c8e": {
            "from": "47f957ea55fc446c89619e12ac164d9e",
            "timestamp_created": "2021-08-05T20:27:02.633930",
            "to": "28f6e9643e994bb18ed9dd9259ad5347"
        },
        "4045304a3b4e42bab4ed31be358c7134": {
            "from": "dd22c831739b4c258bc39a7b4561c084",
            "timestamp_created": "2021-08-04T19:56:50.551990",
            "to": "5115d00f69274fd5a30170d163f8272b"
        },
        "40b8b91b175744ea9f8723197a238fdd": {
            "from": "47f957ea55fc446c89619e12ac164d9e",
            "timestamp_created": "2021-08-05T20:26:56.949332",
            "to": "5c9f2facb8d448bf9dad3f350d9b45fa"
        },
        "4ac6120d6ef148a7be49b48bb64ab1ac": {
            "from": "552a9e8d95604f69a0b87acdb4750c19",
            "timestamp_created": "2021-08-05T20:19:12.670738",
            "to": "1a707a09df5542c2a5e55a7bcef2f964"
        },
        "4edf2081e0cc45ef822c0354497daf66": {
            "from": "c85ab473d02747daaedd341be0152837",
            "timestamp_created": "2021-08-05T20:17:46.943879",
            "to": "cfda856fcf904b639489b6e9736092e6"
        },
        "57773a92717b4882b2bd404df7eb0d98": {
            "from": "7d223d63a5e349a8982d150ce829c286",
            "timestamp_created": "2021-08-05T20:27:26.249262",
            "to": "28f6e9643e994bb18ed9dd9259ad5347"
        },
        "68c0231b04df44daa598408131ecf158": {
            "from": "e51c506026164790b6b54151a3e051e2",
            "timestamp_created": "2021-08-05T20:24:55.983473",
            "to": "644093b3e4364e9f819eaca97e4ed696"
        },
        "784f6b3b64da4070bf65848103609daf": {
            "from": "64737c1073214d69987203a50ece5028",
            "timestamp_created": "2021-08-05T20:19:44.845951",
            "to": "1a707a09df5542c2a5e55a7bcef2f964"
        },
        "79b58e6786374fc8ba21345eeb14e7f1": {
            "from": "50df1aabcac845dfb8c50c5cb1af959a",
            "timestamp_created": "2021-08-05T20:25:51.984664",
            "to": "5e78bb76faf94c6997abf4743de63281"
        },
        "801efb9fc7404d9f91701aa21b4c1f0c": {
            "from": "552a9e8d95604f69a0b87acdb4750c19",
            "timestamp_created": "2021-08-05T20:18:56.271672",
            "to": "829f754e2e414856bbaf79e95b3e33e3"
        },
        "820ea5eeb5c54b59b1102992835e40f9": {
            "from": "7529a877ec74448087809e78a0bbe7d0",
            "timestamp_created": "2021-08-04T19:57:04.928899",
            "to": "50df1aabcac845dfb8c50c5cb1af959a"
        },
        "8305b805fefa458f8ba89c3a0d5608d9": {
            "from": "5115d00f69274fd5a30170d163f8272b",
            "timestamp_created": "2021-08-05T20:25:17.195578",
            "to": "3e73e40f62a14ba49bafea3dcb4b4485"
        },
        "8a242354c6174f0f91649a85899b6693": {
            "from": "cc974a69207048fa951e0ae5c96c7871",
            "timestamp_created": "2021-08-05T20:16:44.666196",
            "to": "a995a8d1ff224c76b2da7ec26b60edcb"
        },
        "905d998dd4e74b1e977c44d20a3cf8e0": {
            "from": "cfda856fcf904b639489b6e9736092e6",
            "timestamp_created": "2021-08-05T20:29:02.683741",
            "to": "256798139ecc4f8b9850437902a7a6df"
        },
        "91dff4c0acce480daeb086d6ac3f3ff9": {
            "from": "c071ea8391344278bedcc1a3b7334e4f",
            "timestamp_created": "2021-08-05T20:16:17.199298",
            "to": "7d223d63a5e349a8982d150ce829c286"
        },
        "97159a15f5c248ad80cf7ca30dcbe9c6": {
            "from": "50df1aabcac845dfb8c50c5cb1af959a",
            "timestamp_created": "2021-08-05T20:25:44.697728",
            "to": "1975dda94c1945e0aed919667ccb1a93"
        },
        "a00344f38fee4296abd14e279ffa274f": {
            "from": "e7bd365f346a4115be36d79af1031e3d",
            "timestamp_created": "2021-08-05T20:29:16.125637",
            "to": "330ee418cfc74e67ad67294f34710e0e"
        },
        "a2a46bc366e84176851f8cf17692cea4": {
            "from": "955e0c2a0a264d62a8a0972c912871e4",
            "timestamp_created": "2021-08-05T20:18:01.176317",
            "to": "e7bd365f346a4115be36d79af1031e3d"
        },
        "ab220e0b4c04413f938b9325263f37b2": {
            "from": "d98b50be6a234c3f89499d104988e9ac",
            "timestamp_created": "2021-08-05T20:27:54.857752",
            "to": "e9e5146b94dd4aff96a83352c948d1e5"
        },
        "b55621f940ed4e59aeba9bf497b94429": {
            "from": "c071ea8391344278bedcc1a3b7334e4f",
            "timestamp_created": "2021-08-05T20:16:00.832812",
            "to": "5115d00f69274fd5a30170d163f8272b"
        },
        "b768eda63c8a4d799e47c67846f85ea6": {
            "from": "36eae10cf57944438a30e16ff45479ff",
            "timestamp_created": "2021-08-05T20:28:28.549864",
            "to": "00c3ef1faf10470ea42d2d2ae38198cc"
        },
        "b905032459834969998c6fe8552721b1": {
            "from": "5115d00f69274fd5a30170d163f8272b",
            "timestamp_created": "2021-08-05T20:25:23.892008",
            "to": "28f6e9643e994bb18ed9dd9259ad5347"
        },
        "b9edfd7bbf51441cb22a364c7e66f390": {
            "from": "250ea88fbff246f7be412e9ae1d668f8",
            "timestamp_created": "2021-08-05T20:26:10.396795",
            "to": "8828dca5db634d668e36a5e9fe151537"
        },
        "c1cfff0b21f445279739a2e97890b12d": {
            "from": "c071ea8391344278bedcc1a3b7334e4f",
            "timestamp_created": "2021-08-05T20:16:11.587642",
            "to": "a995a8d1ff224c76b2da7ec26b60edcb"
        },
        "c35e421a7d9c4d86a4a23d2d9238a96e": {
            "from": "7d223d63a5e349a8982d150ce829c286",
            "timestamp_created": "2021-08-05T20:27:19.362102",
            "to": "3e73e40f62a14ba49bafea3dcb4b4485"
        },
        "c97e1183b9bd4859b47e1914c223b921": {
            "from": "b21fc9ce9352445486dd0908b2930a83",
            "timestamp_created": "2021-08-05T20:19:54.005109",
            "to": "816becb1635240d29b3677c3e1686a17"
        },
        "d1e113d385b04024b1b80cd1bbe6a513": {
            "from": "7f0c205da5ec4e008ebcf0878c79964e",
            "timestamp_created": "2021-08-05T20:28:10.032266",
            "to": "6472e6fd094e46db9f07a6cea2649a54"
        },
        "d8f3a08f6efc49e28f2d0257ecb64e4a": {
            "from": "7f29b45d8e414050936fe3783ea55554",
            "timestamp_created": "2021-08-05T20:28:52.284740",
            "to": "7debb89a8795440bb6dbd8b8aae9bfdc"
        },
        "daff6b12e41c4c30a4db9cd524efd545": {
            "from": "b21fc9ce9352445486dd0908b2930a83",
            "timestamp_created": "2021-08-05T20:19:59.820140",
            "to": "7fa33b3874564187837dd1f1a79838eb"
        },
        "dddd7e92a89c488aa45c973a405414b6": {
            "from": "47f957ea55fc446c89619e12ac164d9e",
            "timestamp_created": "2021-08-05T20:26:44.407977",
            "to": "0535b39f05cc4cf9b40235e60913d807"
        },
        "e486a1f825e94412a7a25e1767484675": {
            "from": "19e67629beb3402eb2e86bc479ec0caa",
            "timestamp_created": "2021-08-04T19:56:23.127396",
            "to": "e51c506026164790b6b54151a3e051e2"
        },
        "e7f6aa934aa3411a8b4ae23617afe3c4": {
            "from": "21da25b1bd4c4c55a576e0c802da4711",
            "timestamp_created": "2021-08-05T20:15:32.270140",
            "to": "250ea88fbff246f7be412e9ae1d668f8"
        },
        "f3a20d2f4d334d46b58ca1293006e45c": {
            "from": "7f29b45d8e414050936fe3783ea55554",
            "timestamp_created": "2021-08-05T20:28:45.271810",
            "to": "4840c6dff44543d3859ea40a0f3bdcfb"
        },
        "f49858ca8821425ea436ffb13d55e456": {
            "from": "47f957ea55fc446c89619e12ac164d9e",
            "timestamp_created": "2021-08-05T20:27:07.721201",
            "to": "4d109c4f26184840b19ec740f9ed664b"
        },
        "fec44671bd8c493fae7de45c201f4e01": {
            "from": "552a9e8d95604f69a0b87acdb4750c19",
            "timestamp_created": "2021-08-05T20:18:49.705264",
            "to": "516dd3969b2145639f2bac3913d04858"
        }
    },
    "notes": {
        "00c3ef1faf10470ea42d2d2ae38198cc": {
            "chunkpath": [
                "vm",
                "instructions"
            ],
            "filepath": [
                "support.py"
            ],
            "fragments": [
                {
                    "text": "elif name == \"MATCH_ANY\":",
                    "type": "line"
                },
                {
                    "text": "    if pos >= len(stream):",
                    "type": "line"
                },
                {
                    "text": "        fail_message = (\"expected any\",)",
                    "type": "line"
                },
                {
                    "text": "    else:",
                    "type": "line"
                },
                {
                    "text": "        action = SemanticAction(stream[pos])",
                    "type": "line"
                },
                {
                    "text": "        pos += 1",
                    "type": "line"
                },
                {
                    "text": "        pc += 1",
                    "type": "line"
                },
                {
                    "text": "        continue",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-08-05T20:23:55.497229",
            "type": "code"
        },
        "0342a8de8f9c49a7b1ad9b886e14c525": {
            "chunkpath": [
                "vm",
                "instructions"
            ],
            "filepath": [
                "support.py"
            ],
            "fragments": [
                {
                    "text": "else:",
                    "type": "line"
                },
                {
                    "text": "    raise Exception(\"unknown instruction {}\".format(name))",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-08-05T20:23:55.497326",
            "type": "code"
        },
        "0535b39f05cc4cf9b40235e60913d807": {
            "chunkpath": [
                "vm",
                "instructions"
            ],
            "filepath": [
                "support.py"
            ],
            "fragments": [
                {
                    "text": "elif name == \"LIST_START\":",
                    "type": "line"
                },
                {
                    "text": "    scope_stack.append(scope)",
                    "type": "line"
                },
                {
                    "text": "    scope = []",
                    "type": "line"
                },
                {
                    "text": "    pc += 1",
                    "type": "line"
                },
                {
                    "text": "    continue",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-08-05T20:23:55.497173",
            "type": "code"
        },
        "0d8fde7cd4f340e1a3e08298784f4c95": {
            "chunkpath": [
                "rules"
            ],
            "filepath": [
                "codegenerator.rlmeta"
            ],
            "fragments": [
                {
                    "text": "Grammar       = .:x ast*:ys  -> { \"class \" x \"(Grammar):\\n\\n\" >",
                    "type": "line"
                },
                {
                    "text": "                                    \"def assemble(self, I, LABEL):\\n\" >",
                    "type": "line"
                },
                {
                    "text": "                                      ys",
                    "type": "line"
                },
                {
                    "text": "                                    <",
                    "type": "line"
                },
                {
                    "text": "                                  <                                    }",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-08-04T18:45:06.139346",
            "type": "code"
        },
        "1975dda94c1945e0aed919667ccb1a93": {
            "chunkpath": [
                "vm",
                "instructions"
            ],
            "filepath": [
                "support.py"
            ],
            "fragments": [
                {
                    "text": "if name == \"PUSH_SCOPE\":",
                    "type": "line"
                },
                {
                    "text": "    scope_stack.append(scope)",
                    "type": "line"
                },
                {
                    "text": "    scope = {}",
                    "type": "line"
                },
                {
                    "text": "    pc += 1",
                    "type": "line"
                },
                {
                    "text": "    continue",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-08-05T20:22:18.492379",
            "type": "code"
        },
        "19e67629beb3402eb2e86bc479ec0caa": {
            "chunkpath": [
                "rules"
            ],
            "filepath": [
                "parser.rlmeta"
            ],
            "fragments": [
                {
                    "text": "rule =",
                    "type": "line"
                },
                {
                    "text": "  | name:x space '=' choice:y               -> [\"Rule\" x y]",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-08-04T19:54:53.688029",
            "type": "code"
        },
        "1a707a09df5542c2a5e55a7bcef2f964": {
            "chunkpath": [
                "rules"
            ],
            "filepath": [
                "codegenerator.rlmeta"
            ],
            "fragments": [
                {
                    "text": "Format        = asts:x       -> { \"join([\" x \"])\"                      }",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-08-04T18:45:06.139697",
            "type": "code"
        },
        "1d4185d42f6f47b4aced0d831251c2db": {
            "chunkpath": [],
            "filepath": [
                "codegenerator.rlmeta"
            ],
            "fragments": [
                {
                    "text": "CodeGenerator {",
                    "type": "line"
                },
                {
                    "blank_lines_before": 0,
                    "path": [
                        "rules"
                    ],
                    "prefix": "  ",
                    "type": "chunk"
                },
                {
                    "text": "}",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "Enter note text...\n",
            "timestamp_created": "2021-08-04T18:29:21.046867",
            "type": "code"
        },
        "21da25b1bd4c4c55a576e0c802da4711": {
            "chunkpath": [
                "rules"
            ],
            "filepath": [
                "parser.rlmeta"
            ],
            "fragments": [
                {
                    "text": "expr =",
                    "type": "line"
                },
                {
                    "text": "  | expr1:x space ':' name:y                -> [\"Bind\" y x]",
                    "type": "line"
                },
                {
                    "text": "  | expr1",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-08-04T19:54:53.688149",
            "type": "code"
        },
        "250ea88fbff246f7be412e9ae1d668f8": {
            "chunkpath": [
                "rules"
            ],
            "filepath": [
                "codegenerator.rlmeta"
            ],
            "fragments": [
                {
                    "text": "Bind          = py:x ast:y   -> { y",
                    "type": "line"
                },
                {
                    "text": "                                  \"I('BIND', \" x \")\\n\"                 }",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-08-04T18:45:06.139455",
            "type": "code"
        },
        "256798139ecc4f8b9850437902a7a6df": {
            "chunkpath": [
                "vm",
                "instructions"
            ],
            "filepath": [
                "support.py"
            ],
            "fragments": [
                {
                    "text": "elif name == \"MATCH_OBJECT\":",
                    "type": "line"
                },
                {
                    "text": "    if pos >= len(stream) or stream[pos] != arg1:",
                    "type": "line"
                },
                {
                    "text": "        fail_message = (\"expected {!r}\", arg1)",
                    "type": "line"
                },
                {
                    "text": "    else:",
                    "type": "line"
                },
                {
                    "text": "        action = SemanticAction(arg1)",
                    "type": "line"
                },
                {
                    "text": "        pos += 1",
                    "type": "line"
                },
                {
                    "text": "        pc += 1",
                    "type": "line"
                },
                {
                    "text": "        continue",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-08-05T20:23:55.497038",
            "type": "code"
        },
        "280602da686b4e4aa7770b89efcfd66c": {
            "chunkpath": [
                "rules"
            ],
            "filepath": [
                "parser.rlmeta"
            ],
            "fragments": [
                {
                    "text": "string    = '\"'  (!'\"'  innerChar)*:xs '\"'  -> { xs }",
                    "type": "line"
                },
                {
                    "text": "char      = '\\''  !'\\'' innerChar  :x  '\\'' -> x",
                    "type": "line"
                },
                {
                    "text": "innerChar = '\\\\' escape | .",
                    "type": "line"
                },
                {
                    "text": "escape    = '\\\\' -> \"\\\\\" | '\\'' -> \"'\"",
                    "type": "line"
                },
                {
                    "text": "          | '\"'  -> \"\\\"\" | 'n'  -> \"\\n\"",
                    "type": "line"
                },
                {
                    "text": "name      = space nameStart:x nameChar*:xs  -> { x xs }",
                    "type": "line"
                },
                {
                    "text": "nameStart = 'a'-'z' | 'A'-'Z'",
                    "type": "line"
                },
                {
                    "text": "nameChar  = 'a'-'z' | 'A'-'Z' | '0'-'9'",
                    "type": "line"
                },
                {
                    "text": "space     = (' ' | '\\n')*",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-08-04T19:54:53.688440",
            "type": "code"
        },
        "28f6e9643e994bb18ed9dd9259ad5347": {
            "chunkpath": [
                "vm",
                "instructions"
            ],
            "filepath": [
                "support.py"
            ],
            "fragments": [
                {
                    "text": "elif name == \"COMMIT\":",
                    "type": "line"
                },
                {
                    "text": "    call_backtrack_stack.pop()",
                    "type": "line"
                },
                {
                    "text": "    pc = labels[arg1]",
                    "type": "line"
                },
                {
                    "text": "    continue",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-08-05T20:23:55.497056",
            "type": "code"
        },
        "2e560fe94ea44983a4773a795423f282": {
            "chunkpath": [
                "rules"
            ],
            "filepath": [
                "codegenerator.rlmeta"
            ],
            "fragments": [
                {
                    "text": "MatchCallRule =              -> { \"I('MATCH_CALL_RULE')\\n\"             }",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-08-04T18:45:06.139505",
            "type": "code"
        },
        "330ee418cfc74e67ad67294f34710e0e": {
            "chunkpath": [
                "vm",
                "instructions"
            ],
            "filepath": [
                "support.py"
            ],
            "fragments": [
                {
                    "text": "elif name == \"ACTION\":",
                    "type": "line"
                },
                {
                    "text": "    action = SemanticAction(Scope(scope, runtime), arg1)",
                    "type": "line"
                },
                {
                    "text": "    pc += 1",
                    "type": "line"
                },
                {
                    "text": "    continue",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-08-05T20:23:55.497134",
            "type": "code"
        },
        "36eae10cf57944438a30e16ff45479ff": {
            "chunkpath": [
                "rules"
            ],
            "filepath": [
                "codegenerator.rlmeta"
            ],
            "fragments": [
                {
                    "text": "MatchAny      =              -> { \"I('MATCH_ANY')\\n\"                   }",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-08-04T18:45:06.139573",
            "type": "code"
        },
        "3e73e40f62a14ba49bafea3dcb4b4485": {
            "chunkpath": [
                "vm",
                "instructions"
            ],
            "filepath": [
                "support.py"
            ],
            "fragments": [
                {
                    "text": "elif name == \"BACKTRACK\":",
                    "type": "line"
                },
                {
                    "text": "    call_backtrack_stack.append((",
                    "type": "line"
                },
                {
                    "text": "        labels[arg1], pos, len(stream_pos_stack), len(scope_stack)",
                    "type": "line"
                },
                {
                    "text": "    ))",
                    "type": "line"
                },
                {
                    "text": "    pc += 1",
                    "type": "line"
                },
                {
                    "text": "    continue",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-08-05T20:23:55.496944",
            "type": "code"
        },
        "47f957ea55fc446c89619e12ac164d9e": {
            "chunkpath": [
                "rules"
            ],
            "filepath": [
                "codegenerator.rlmeta"
            ],
            "fragments": [
                {
                    "text": "Star          = ast:x        -> label():a -> label():b",
                    "type": "line"
                },
                {
                    "text": "                             -> { \"I('LIST_START')\\n\"",
                    "type": "line"
                },
                {
                    "text": "                                  \"LABEL(\" a \")\\n\"",
                    "type": "line"
                },
                {
                    "text": "                                  \"I('BACKTRACK', \" b \")\\n\"",
                    "type": "line"
                },
                {
                    "text": "                                  x",
                    "type": "line"
                },
                {
                    "text": "                                  \"I('LIST_APPEND')\\n\"",
                    "type": "line"
                },
                {
                    "text": "                                  \"I('COMMIT', \" a \")\\n\"",
                    "type": "line"
                },
                {
                    "text": "                                  \"LABEL(\" b \")\\n\"",
                    "type": "line"
                },
                {
                    "text": "                                  \"I('LIST_END')\\n\"                    }",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-08-04T18:45:06.139473",
            "type": "code"
        },
        "4840c6dff44543d3859ea40a0f3bdcfb": {
            "chunkpath": [
                "vm",
                "instructions"
            ],
            "filepath": [
                "support.py"
            ],
            "fragments": [
                {
                    "text": "elif name == \"PUSH_STREAM\":",
                    "type": "line"
                },
                {
                    "text": "    if pos >= len(stream) or not isinstance(stream[pos], list):",
                    "type": "line"
                },
                {
                    "text": "        fail_message = (\"expected list\",)",
                    "type": "line"
                },
                {
                    "text": "    else:",
                    "type": "line"
                },
                {
                    "text": "        stream_pos_stack.append((stream, pos))",
                    "type": "line"
                },
                {
                    "text": "        stream = stream[pos]",
                    "type": "line"
                },
                {
                    "text": "        pos = 0",
                    "type": "line"
                },
                {
                    "text": "        pc += 1",
                    "type": "line"
                },
                {
                    "text": "        continue",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-08-05T20:23:55.497248",
            "type": "code"
        },
        "4d109c4f26184840b19ec740f9ed664b": {
            "chunkpath": [
                "vm",
                "instructions"
            ],
            "filepath": [
                "support.py"
            ],
            "fragments": [
                {
                    "text": "elif name == \"LIST_END\":",
                    "type": "line"
                },
                {
                    "text": "    action = SemanticAction(scope, lambda xs: [x.eval() for x in xs])",
                    "type": "line"
                },
                {
                    "text": "    scope = scope_stack.pop()",
                    "type": "line"
                },
                {
                    "text": "    pc += 1",
                    "type": "line"
                },
                {
                    "text": "    continue",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-08-05T20:23:55.497203",
            "type": "code"
        },
        "50735ef2cfa441f5822cfba1ac97f94a": {
            "chunkpath": [
                "vm"
            ],
            "filepath": [
                "support.py"
            ],
            "fragments": [
                {
                    "text": "def vm(instructions, labels, start_rule, stream, runtime):",
                    "type": "line"
                },
                {
                    "text": "    action = SemanticAction(None)",
                    "type": "line"
                },
                {
                    "text": "    pc = labels[start_rule]",
                    "type": "line"
                },
                {
                    "text": "    call_backtrack_stack = []",
                    "type": "line"
                },
                {
                    "text": "    stream, pos, stream_pos_stack = (stream, 0, [])",
                    "type": "line"
                },
                {
                    "text": "    scope, scope_stack = (None, [])",
                    "type": "line"
                },
                {
                    "text": "    fail_message = None",
                    "type": "line"
                },
                {
                    "text": "    latest_fail_message, latest_fail_pos = (None, tuple())",
                    "type": "line"
                },
                {
                    "text": "    memo = {}",
                    "type": "line"
                },
                {
                    "text": "    while True:",
                    "type": "line"
                },
                {
                    "text": "        name, arg1, arg2 = instructions[pc]",
                    "type": "line"
                },
                {
                    "blank_lines_before": 0,
                    "path": [
                        "instructions"
                    ],
                    "prefix": "        ",
                    "type": "chunk"
                }
            ],
            "links": [],
            "tags": [],
            "text": "Enter note text...\n",
            "timestamp_created": "2021-08-04T18:31:01.032776",
            "type": "code"
        },
        "50df1aabcac845dfb8c50c5cb1af959a": {
            "chunkpath": [
                "rules"
            ],
            "filepath": [
                "codegenerator.rlmeta"
            ],
            "fragments": [
                {
                    "text": "Scope         = ast:x        -> { \"I('PUSH_SCOPE')\\n\"",
                    "type": "line"
                },
                {
                    "text": "                                  x",
                    "type": "line"
                },
                {
                    "text": "                                  \"I('POP_SCOPE')\\n\"                   }",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-08-04T18:45:06.139421",
            "type": "code"
        },
        "5115d00f69274fd5a30170d163f8272b": {
            "chunkpath": [
                "rules"
            ],
            "filepath": [
                "codegenerator.rlmeta"
            ],
            "fragments": [
                {
                    "text": "Or            =",
                    "type": "line"
                },
                {
                    "text": "  | ast:x Or:y               -> label():a -> label():b",
                    "type": "line"
                },
                {
                    "text": "                             -> { \"I('BACKTRACK', \" a \")\\n\"",
                    "type": "line"
                },
                {
                    "text": "                                  x",
                    "type": "line"
                },
                {
                    "text": "                                  \"I('COMMIT', \" b \")\\n\"",
                    "type": "line"
                },
                {
                    "text": "                                  \"LABEL(\" a \")\\n\"",
                    "type": "line"
                },
                {
                    "text": "                                  y",
                    "type": "line"
                },
                {
                    "text": "                                  \"LABEL(\" b \")\\n\"                     }",
                    "type": "line"
                },
                {
                    "text": "  | ast",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-08-04T18:45:06.139403",
            "type": "code"
        },
        "516dd3969b2145639f2bac3913d04858": {
            "chunkpath": [
                "rules"
            ],
            "filepath": [
                "codegenerator.rlmeta"
            ],
            "fragments": [
                {
                    "text": "String        = py",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-08-04T18:45:06.139647",
            "type": "code"
        },
        "552a9e8d95604f69a0b87acdb4750c19": {
            "chunkpath": [
                "rules"
            ],
            "filepath": [
                "parser.rlmeta"
            ],
            "fragments": [
                {
                    "text": "hostExpr =",
                    "type": "line"
                },
                {
                    "text": "  | space string:x                          -> [\"String\" x]",
                    "type": "line"
                },
                {
                    "text": "  | space '[' hostListItem*:xs space ']'    -> [\"List\" ~xs]",
                    "type": "line"
                },
                {
                    "text": "  | space '{' formatExpr*:xs space '}'      -> [\"Format\" ~xs]",
                    "type": "line"
                },
                {
                    "text": "  | var:x space '(' hostExpr*:ys space ')'  -> [\"Call\" x ~ys]",
                    "type": "line"
                },
                {
                    "text": "  | var:x",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-08-04T19:54:53.688333",
            "type": "code"
        },
        "5a38b128fe5c43b998ed161f8a116b19": {
            "chunkpath": [
                "rules"
            ],
            "filepath": [
                "parser.rlmeta"
            ],
            "fragments": [
                {
                    "text": "hostListItem =",
                    "type": "line"
                },
                {
                    "text": "  | space '~'*:ys hostExpr:x                -> [\"ListItem\" #len(ys) x]",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-08-04T19:54:53.688374",
            "type": "code"
        },
        "5c9f2facb8d448bf9dad3f350d9b45fa": {
            "chunkpath": [
                "vm",
                "instructions"
            ],
            "filepath": [
                "support.py"
            ],
            "fragments": [
                {
                    "text": "elif name == \"LIST_APPEND\":",
                    "type": "line"
                },
                {
                    "text": "    scope.append(action)",
                    "type": "line"
                },
                {
                    "text": "    pc += 1",
                    "type": "line"
                },
                {
                    "text": "    continue",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-08-05T20:23:55.497094",
            "type": "code"
        },
        "5e78bb76faf94c6997abf4743de63281": {
            "chunkpath": [
                "vm",
                "instructions"
            ],
            "filepath": [
                "support.py"
            ],
            "fragments": [
                {
                    "text": "elif name == \"POP_SCOPE\":",
                    "type": "line"
                },
                {
                    "text": "    scope = scope_stack.pop()",
                    "type": "line"
                },
                {
                    "text": "    pc += 1",
                    "type": "line"
                },
                {
                    "text": "    continue",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-08-05T20:23:55.497015",
            "type": "code"
        },
        "644093b3e4364e9f819eaca97e4ed696": {
            "chunkpath": [
                "vm",
                "instructions"
            ],
            "filepath": [
                "support.py"
            ],
            "fragments": [
                {
                    "text": "elif name == \"RETURN\":",
                    "type": "line"
                },
                {
                    "text": "    if len(call_backtrack_stack) == 0:",
                    "type": "line"
                },
                {
                    "text": "        return action.eval()",
                    "type": "line"
                },
                {
                    "text": "    pc, key = call_backtrack_stack.pop()",
                    "type": "line"
                },
                {
                    "text": "    memo[key] = (action, stream_pos_stack+[(stream, pos)])",
                    "type": "line"
                },
                {
                    "text": "    continue",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-08-05T20:23:55.497075",
            "type": "code"
        },
        "6472e6fd094e46db9f07a6cea2649a54": {
            "chunkpath": [
                "vm",
                "instructions"
            ],
            "filepath": [
                "support.py"
            ],
            "fragments": [
                {
                    "text": "elif name == \"MATCH_RANGE\":",
                    "type": "line"
                },
                {
                    "text": "    if pos >= len(stream) or not (arg1 <= stream[pos] <= arg2):",
                    "type": "line"
                },
                {
                    "text": "        fail_message = (\"expected range {!r}-{!r}\", arg1, arg2)",
                    "type": "line"
                },
                {
                    "text": "    else:",
                    "type": "line"
                },
                {
                    "text": "        action = SemanticAction(stream[pos])",
                    "type": "line"
                },
                {
                    "text": "        pos += 1",
                    "type": "line"
                },
                {
                    "text": "        pc += 1",
                    "type": "line"
                },
                {
                    "text": "        continue",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-08-05T20:23:55.497152",
            "type": "code"
        },
        "64737c1073214d69987203a50ece5028": {
            "chunkpath": [
                "rules"
            ],
            "filepath": [
                "parser.rlmeta"
            ],
            "fragments": [
                {
                    "text": "formatExpr =",
                    "type": "line"
                },
                {
                    "text": "  | space '>' formatExpr*:xs space '<'      -> [\"Indent\" [\"Format\" ~xs]]",
                    "type": "line"
                },
                {
                    "text": "  | hostExpr",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-08-04T19:54:53.688403",
            "type": "code"
        },
        "7529a877ec74448087809e78a0bbe7d0": {
            "chunkpath": [
                "rules"
            ],
            "filepath": [
                "parser.rlmeta"
            ],
            "fragments": [
                {
                    "text": "sequence =",
                    "type": "line"
                },
                {
                    "text": "  | expr*:xs maybeAction:ys                 -> [\"Scope\" [\"And\" ~xs ~ys]]",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-08-04T19:54:53.688119",
            "type": "code"
        },
        "7d223d63a5e349a8982d150ce829c286": {
            "chunkpath": [
                "rules"
            ],
            "filepath": [
                "codegenerator.rlmeta"
            ],
            "fragments": [
                {
                    "text": "Not           = ast:x        -> label():a -> label():b",
                    "type": "line"
                },
                {
                    "text": "                             -> { \"I('BACKTRACK', \" b \")\\n\"",
                    "type": "line"
                },
                {
                    "text": "                                  x",
                    "type": "line"
                },
                {
                    "text": "                                  \"I('COMMIT', \" a \")\\n\"",
                    "type": "line"
                },
                {
                    "text": "                                  \"LABEL(\" a \")\\n\"",
                    "type": "line"
                },
                {
                    "text": "                                  \"I('FAIL', 'no match expected')\\n\"",
                    "type": "line"
                },
                {
                    "text": "                                  \"LABEL(\" b \")\\n\"                     }",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-08-04T18:45:06.139489",
            "type": "code"
        },
        "7debb89a8795440bb6dbd8b8aae9bfdc": {
            "chunkpath": [
                "vm",
                "instructions"
            ],
            "filepath": [
                "support.py"
            ],
            "fragments": [
                {
                    "text": "elif name == \"POP_STREAM\":",
                    "type": "line"
                },
                {
                    "text": "    if pos < len(stream):",
                    "type": "line"
                },
                {
                    "text": "        fail_message = (\"expected end of list\",)",
                    "type": "line"
                },
                {
                    "text": "    else:",
                    "type": "line"
                },
                {
                    "text": "        stream, pos = stream_pos_stack.pop()",
                    "type": "line"
                },
                {
                    "text": "        pos += 1",
                    "type": "line"
                },
                {
                    "text": "        pc += 1",
                    "type": "line"
                },
                {
                    "text": "        continue",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-08-05T20:23:55.497267",
            "type": "code"
        },
        "7f0c205da5ec4e008ebcf0878c79964e": {
            "chunkpath": [
                "rules"
            ],
            "filepath": [
                "codegenerator.rlmeta"
            ],
            "fragments": [
                {
                    "text": "MatchRange    = py:x py:y    -> { \"I('MATCH_RANGE', \" x \", \" y \")\\n\"   }",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-08-04T18:45:06.139537",
            "type": "code"
        },
        "7f29b45d8e414050936fe3783ea55554": {
            "chunkpath": [
                "rules"
            ],
            "filepath": [
                "codegenerator.rlmeta"
            ],
            "fragments": [
                {
                    "text": "MatchList     = ast:x        -> { \"I('PUSH_STREAM')\\n\"",
                    "type": "line"
                },
                {
                    "text": "                                  x",
                    "type": "line"
                },
                {
                    "text": "                                  \"I('POP_STREAM')\\n\"                  }",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-08-04T18:45:06.139596",
            "type": "code"
        },
        "7fa33b3874564187837dd1f1a79838eb": {
            "chunkpath": [
                "rules"
            ],
            "filepath": [
                "codegenerator.rlmeta"
            ],
            "fragments": [
                {
                    "text": "Lookup        = py:x         -> { \"scope.lookup(\" x \")\"                }",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-08-04T18:45:06.139770",
            "type": "code"
        },
        "816becb1635240d29b3677c3e1686a17": {
            "chunkpath": [
                "rules"
            ],
            "filepath": [
                "codegenerator.rlmeta"
            ],
            "fragments": [
                {
                    "text": "Native        = .",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-08-04T18:45:06.139750",
            "type": "code"
        },
        "829f754e2e414856bbaf79e95b3e33e3": {
            "chunkpath": [
                "rules"
            ],
            "filepath": [
                "codegenerator.rlmeta"
            ],
            "fragments": [
                {
                    "text": "List          = asts:x       -> { \"concat([\" x \"])\"                    }",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-08-04T18:45:06.139664",
            "type": "code"
        },
        "8828dca5db634d668e36a5e9fe151537": {
            "chunkpath": [
                "vm",
                "instructions"
            ],
            "filepath": [
                "support.py"
            ],
            "fragments": [
                {
                    "text": "elif name == \"BIND\":",
                    "type": "line"
                },
                {
                    "text": "    scope[arg1] = action",
                    "type": "line"
                },
                {
                    "text": "    pc += 1",
                    "type": "line"
                },
                {
                    "text": "    continue",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-08-05T20:23:55.497116",
            "type": "code"
        },
        "93f0e4d0a0d94104b2da730249ab1240": {
            "chunkpath": [
                "rules"
            ],
            "filepath": [
                "codegenerator.rlmeta"
            ],
            "fragments": [
                {
                    "text": "Indent        = ast:x        -> { \"indent(\" x \", \"",
                    "type": "line"
                },
                {
                    "text": "                                  \"scope.lookup('indentprefix'))\"      }",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-08-04T18:45:06.139714",
            "type": "code"
        },
        "955e0c2a0a264d62a8a0972c912871e4": {
            "chunkpath": [
                "rules"
            ],
            "filepath": [
                "parser.rlmeta"
            ],
            "fragments": [
                {
                    "text": "maybeAction =",
                    "type": "line"
                },
                {
                    "text": "  | actionExpr:x actionExpr*:xs             -> [[\"Action\" ~x ~~xs]]",
                    "type": "line"
                },
                {
                    "text": "  |                                         -> []",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-08-04T19:54:53.688277",
            "type": "code"
        },
        "9a1d3575d6264b51b63c60b741df8d2e": {
            "chunkpath": [],
            "filepath": [
                "make.py"
            ],
            "fragments": [
                {
                    "text": "#!/usr/bin/env python",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "import os",
                    "type": "line"
                },
                {
                    "text": "import subprocess",
                    "type": "line"
                },
                {
                    "text": "import sys",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "def make_next_version():",
                    "type": "line"
                },
                {
                    "text": "    intermediate_compilers = meta_compile_rlmeta()",
                    "type": "line"
                },
                {
                    "text": "    final_compiler = intermediate_compilers.pop(-1)",
                    "type": "line"
                },
                {
                    "text": "    test(final_compiler)",
                    "type": "line"
                },
                {
                    "text": "    mv(final_compiler, \"rlmeta.py\")",
                    "type": "line"
                },
                {
                    "text": "    for compiler in intermediate_compilers:",
                    "type": "line"
                },
                {
                    "text": "        rm(compiler)",
                    "type": "line"
                },
                {
                    "text": "    log(\"OK!\")",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "def meta_compile_rlmeta():",
                    "type": "line"
                },
                {
                    "text": "    compiler = \"rlmeta.py\"",
                    "type": "line"
                },
                {
                    "text": "    content = read(compiler)",
                    "type": "line"
                },
                {
                    "text": "    intermediate_compilers = []",
                    "type": "line"
                },
                {
                    "text": "    for i in range(4):",
                    "type": "line"
                },
                {
                    "text": "        next_compiler = \"rlmeta{}.py\".format(i+1)",
                    "type": "line"
                },
                {
                    "text": "        log(\"Compiling {} -> {}\".format(compiler, next_compiler))",
                    "type": "line"
                },
                {
                    "text": "        next_content = compile_rlmeta(compiler)",
                    "type": "line"
                },
                {
                    "text": "        write(next_compiler, next_content)",
                    "type": "line"
                },
                {
                    "text": "        intermediate_compilers.append(next_compiler)",
                    "type": "line"
                },
                {
                    "text": "        if next_content == content:",
                    "type": "line"
                },
                {
                    "text": "            return intermediate_compilers",
                    "type": "line"
                },
                {
                    "text": "        compiler = next_compiler",
                    "type": "line"
                },
                {
                    "text": "        content = next_content",
                    "type": "line"
                },
                {
                    "text": "    fail(\"Unable to produce metacompiler.\")",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "def compile_rlmeta(rlmeta):",
                    "type": "line"
                },
                {
                    "text": "    return run_rlmeta(rlmeta, [",
                    "type": "line"
                },
                {
                    "text": "        \"--embed\", \"SUPPORT\", \"support.py\",",
                    "type": "line"
                },
                {
                    "text": "        \"--support\",",
                    "type": "line"
                },
                {
                    "text": "        \"--compile\", \"parser.rlmeta\",",
                    "type": "line"
                },
                {
                    "text": "        \"--compile\", \"codegenerator.rlmeta\",",
                    "type": "line"
                },
                {
                    "text": "        \"--copy\", \"main.py\",",
                    "type": "line"
                },
                {
                    "text": "    ])",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "def test(rlmeta):",
                    "type": "line"
                },
                {
                    "text": "    log(\"Test: Has its own support library\")",
                    "type": "line"
                },
                {
                    "text": "    assert run_rlmeta(rlmeta, [\"--support\"]) == read(\"support.py\")",
                    "type": "line"
                },
                {
                    "text": "    log(\"Test: Disallow semantic action in the middle\")",
                    "type": "line"
                },
                {
                    "text": "    run_rlmeta(rlmeta, [], \"Grammar { x = . -> [] . }\", expect_failure=True)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "def run_rlmeta(rlmeta, args, stdin=\"\", expect_failure=False):",
                    "type": "line"
                },
                {
                    "text": "    process = subprocess.Popen(",
                    "type": "line"
                },
                {
                    "text": "        [\"python\", rlmeta]+args,",
                    "type": "line"
                },
                {
                    "text": "        stdin=subprocess.PIPE,",
                    "type": "line"
                },
                {
                    "text": "        stdout=subprocess.PIPE",
                    "type": "line"
                },
                {
                    "text": "    )",
                    "type": "line"
                },
                {
                    "text": "    stdout, _ = process.communicate(stdin)",
                    "type": "line"
                },
                {
                    "text": "    if expect_failure:",
                    "type": "line"
                },
                {
                    "text": "        if process.returncode == 0:",
                    "type": "line"
                },
                {
                    "text": "            fail(\"Expected failure\")",
                    "type": "line"
                },
                {
                    "text": "    else:",
                    "type": "line"
                },
                {
                    "text": "        if process.returncode != 0:",
                    "type": "line"
                },
                {
                    "text": "            fail(\"Expected success\")",
                    "type": "line"
                },
                {
                    "text": "    return stdout.decode(\"utf-8\")",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "def mv(src, dest):",
                    "type": "line"
                },
                {
                    "text": "    log(\"Move {} -> {}\".format(src, dest))",
                    "type": "line"
                },
                {
                    "text": "    os.remove(dest)",
                    "type": "line"
                },
                {
                    "text": "    os.rename(src, dest)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "def rm(path):",
                    "type": "line"
                },
                {
                    "text": "    log(\"Delete {}\".format(path))",
                    "type": "line"
                },
                {
                    "text": "    os.remove(path)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "def read(path):",
                    "type": "line"
                },
                {
                    "text": "    with open(path) as f:",
                    "type": "line"
                },
                {
                    "text": "        return f.read()",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "def write(path, content):",
                    "type": "line"
                },
                {
                    "text": "    with open(path, \"w\") as f:",
                    "type": "line"
                },
                {
                    "text": "        return f.write(content)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "def log(message):",
                    "type": "line"
                },
                {
                    "text": "    sys.stdout.write(\"\\033[0;33m{}\\033[0m\\n\".format(message))",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "def fail(message):",
                    "type": "line"
                },
                {
                    "text": "    sys.exit(\"\\033[0;31mERROR: {}\\033[0m\".format(message))",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "if __name__ == \"__main__\":",
                    "type": "line"
                },
                {
                    "text": "    if sys.argv[1:] == [\"compile\"]:",
                    "type": "line"
                },
                {
                    "text": "        sys.stdout.write(compile_rlmeta(\"rlmeta.py\"))",
                    "type": "line"
                },
                {
                    "text": "    else:",
                    "type": "line"
                },
                {
                    "text": "        make_next_version()",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "Enter note text...\n",
            "timestamp_created": "2021-08-04T18:30:28.916920",
            "type": "code"
        },
        "9e444e38fad14206ae015ecef5ef7cbc": {
            "chunkpath": [
                "vm",
                "instructions"
            ],
            "filepath": [
                "support.py"
            ],
            "fragments": [
                {
                    "text": "elif name == \"FAIL\":",
                    "type": "line"
                },
                {
                    "text": "    fail_message = (arg1,)",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-08-05T20:23:55.497304",
            "type": "code"
        },
        "9f8d4a04f39a441881a398895b391232": {
            "chunkpath": [],
            "filepath": [
                "parser.rlmeta"
            ],
            "fragments": [
                {
                    "text": "Parser {",
                    "type": "line"
                },
                {
                    "blank_lines_before": 0,
                    "path": [
                        "rules"
                    ],
                    "prefix": "  ",
                    "type": "chunk"
                },
                {
                    "text": "}",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "Enter note text...\n",
            "timestamp_created": "2021-08-04T18:30:44.307259",
            "type": "code"
        },
        "a70bbc2ee72a4c47acc276c02f6978c9": {
            "chunkpath": [],
            "filepath": [
                "support.py"
            ],
            "fragments": [
                {
                    "blank_lines_before": 0,
                    "path": [
                        "vm"
                    ],
                    "prefix": "",
                    "type": "chunk"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "class Scope(object):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, match, runtime):",
                    "type": "line"
                },
                {
                    "text": "        self.match = match",
                    "type": "line"
                },
                {
                    "text": "        self.runtime = runtime",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def bind(self, name, value, continuation):",
                    "type": "line"
                },
                {
                    "text": "        old = self.runtime.get(name, None)",
                    "type": "line"
                },
                {
                    "text": "        self.runtime[name] = value",
                    "type": "line"
                },
                {
                    "text": "        try:",
                    "type": "line"
                },
                {
                    "text": "            return continuation()",
                    "type": "line"
                },
                {
                    "text": "        finally:",
                    "type": "line"
                },
                {
                    "text": "            self.runtime[name] = old",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def lookup(self, name):",
                    "type": "line"
                },
                {
                    "text": "        if name in self.match:",
                    "type": "line"
                },
                {
                    "text": "            return self.match[name].eval()",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            return self.runtime.get(name, None)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "class SemanticAction(object):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, value, fn=lambda value: value):",
                    "type": "line"
                },
                {
                    "text": "        self.value = value",
                    "type": "line"
                },
                {
                    "text": "        self.fn = fn",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def eval(self):",
                    "type": "line"
                },
                {
                    "text": "        return self.fn(self.value)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "class MatchError(Exception):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self, message, pos, stream):",
                    "type": "line"
                },
                {
                    "text": "        Exception.__init__(self)",
                    "type": "line"
                },
                {
                    "text": "        self.message = message",
                    "type": "line"
                },
                {
                    "text": "        self.pos = pos",
                    "type": "line"
                },
                {
                    "text": "        self.stream = stream",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "class Grammar(object):",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def __init__(self):",
                    "type": "line"
                },
                {
                    "text": "        self.instructions = instructions = []",
                    "type": "line"
                },
                {
                    "text": "        self.labels = labels = {}",
                    "type": "line"
                },
                {
                    "text": "        def I(name, arg1=None, arg2=None):",
                    "type": "line"
                },
                {
                    "text": "            instructions.append((name, arg1, arg2))",
                    "type": "line"
                },
                {
                    "text": "        def LABEL(name):",
                    "type": "line"
                },
                {
                    "text": "            labels[name] = len(instructions)",
                    "type": "line"
                },
                {
                    "text": "        self.assemble(I, LABEL)",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def run(self, rule_name, stream):",
                    "type": "line"
                },
                {
                    "text": "        self.label_counter = 0",
                    "type": "line"
                },
                {
                    "text": "        return vm(self.instructions, self.labels, rule_name, stream, {",
                    "type": "line"
                },
                {
                    "text": "            \"label\": self.next_label,",
                    "type": "line"
                },
                {
                    "text": "            \"indentprefix\": \"    \",",
                    "type": "line"
                },
                {
                    "text": "        })",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "    def next_label(self):",
                    "type": "line"
                },
                {
                    "text": "        result = self.label_counter",
                    "type": "line"
                },
                {
                    "text": "        self.label_counter += 1",
                    "type": "line"
                },
                {
                    "text": "        return result",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "def splice(depth, item):",
                    "type": "line"
                },
                {
                    "text": "    if depth == 0:",
                    "type": "line"
                },
                {
                    "text": "        return [item]",
                    "type": "line"
                },
                {
                    "text": "    else:",
                    "type": "line"
                },
                {
                    "text": "        return concat([splice(depth-1, subitem) for subitem in item])",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "def concat(lists):",
                    "type": "line"
                },
                {
                    "text": "    return [x for xs in lists for x in xs]",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "def join(items, delimiter=\"\"):",
                    "type": "line"
                },
                {
                    "text": "    return delimiter.join(",
                    "type": "line"
                },
                {
                    "text": "        join(item, delimiter) if isinstance(item, list) else str(item)",
                    "type": "line"
                },
                {
                    "text": "        for item in items",
                    "type": "line"
                },
                {
                    "text": "    )",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "def indent(text, prefix=\"    \"):",
                    "type": "line"
                },
                {
                    "text": "    return \"\".join(prefix+line for line in text.splitlines(True))",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-08-05T20:20:57.481170",
            "type": "code"
        },
        "a995a8d1ff224c76b2da7ec26b60edcb": {
            "chunkpath": [
                "rules"
            ],
            "filepath": [
                "codegenerator.rlmeta"
            ],
            "fragments": [
                {
                    "text": "And           = ast*",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-08-04T18:45:06.139438",
            "type": "code"
        },
        "b21fc9ce9352445486dd0908b2930a83": {
            "chunkpath": [
                "rules"
            ],
            "filepath": [
                "parser.rlmeta"
            ],
            "fragments": [
                {
                    "text": "var =",
                    "type": "line"
                },
                {
                    "text": "  | space '#' name:x                        -> [\"Native\" x]",
                    "type": "line"
                },
                {
                    "text": "  | name:x !(space '=')                     -> [\"Lookup\" x]",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-08-04T19:54:53.688424",
            "type": "code"
        },
        "c071ea8391344278bedcc1a3b7334e4f": {
            "chunkpath": [
                "rules"
            ],
            "filepath": [
                "parser.rlmeta"
            ],
            "fragments": [
                {
                    "text": "expr1 =",
                    "type": "line"
                },
                {
                    "text": "  | expr2:x space '*'                       -> [\"Star\" x]",
                    "type": "line"
                },
                {
                    "text": "  | expr2:x space '?'                       -> [\"Or\" x [\"And\"]]",
                    "type": "line"
                },
                {
                    "text": "  | space '!' expr2:x                       -> [\"Not\" x]",
                    "type": "line"
                },
                {
                    "text": "  | space '%'                               -> [\"MatchCallRule\"]",
                    "type": "line"
                },
                {
                    "text": "  | expr2",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-08-04T19:54:53.688182",
            "type": "code"
        },
        "c47160875a1f47b29e91c9adcb66094a": {
            "chunkpath": [
                "rules"
            ],
            "filepath": [
                "codegenerator.rlmeta"
            ],
            "fragments": [
                {
                    "text": "asts          = ast*:xs      -> #join(xs \", \")",
                    "type": "line"
                },
                {
                    "text": "py            = .:x          -> #repr(x)",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-08-04T18:45:06.139788",
            "type": "code"
        },
        "c4a45512074e4675a162dc14b618a196": {
            "chunkpath": [
                "rules"
            ],
            "filepath": [
                "parser.rlmeta"
            ],
            "fragments": [
                {
                    "text": "actionExpr =",
                    "type": "line"
                },
                {
                    "text": "  | space '->' hostExpr:x",
                    "type": "line"
                },
                {
                    "text": "    (space ':' name | -> \"\"):y              -> [y  x]",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-08-04T19:54:53.688305",
            "type": "code"
        },
        "c85ab473d02747daaedd341be0152837": {
            "chunkpath": [
                "rules"
            ],
            "filepath": [
                "parser.rlmeta"
            ],
            "fragments": [
                {
                    "text": "matchChar =",
                    "type": "line"
                },
                {
                    "text": "  | innerChar:x                             -> [\"MatchObject\" x]",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-08-04T19:54:53.688248",
            "type": "code"
        },
        "cc974a69207048fa951e0ae5c96c7871": {
            "chunkpath": [
                "rules"
            ],
            "filepath": [
                "parser.rlmeta"
            ],
            "fragments": [
                {
                    "text": "expr2 =",
                    "type": "line"
                },
                {
                    "text": "  | name:x !(space '=')                     -> [\"MatchRule\" x]",
                    "type": "line"
                },
                {
                    "text": "  | space char:x '-' char:y                 -> [\"MatchRange\" x y]",
                    "type": "line"
                },
                {
                    "text": "  | space '\\'' (!'\\'' matchChar)*:xs '\\''   -> [\"And\" ~xs]",
                    "type": "line"
                },
                {
                    "text": "  | space '.'                               -> [\"MatchAny\"]",
                    "type": "line"
                },
                {
                    "text": "  | space '(' choice:x space ')'            -> x",
                    "type": "line"
                },
                {
                    "text": "  | space '[' expr*:xs space ']'            -> [\"MatchList\" [\"And\" ~xs]]",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-08-04T19:54:53.688221",
            "type": "code"
        },
        "cfda856fcf904b639489b6e9736092e6": {
            "chunkpath": [
                "rules"
            ],
            "filepath": [
                "codegenerator.rlmeta"
            ],
            "fragments": [
                {
                    "text": "MatchObject   = py:x         -> { \"I('MATCH_OBJECT', \" x \")\\n\"         }",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-08-04T18:45:06.139614",
            "type": "code"
        },
        "d11155ef5f2b422bb8201bb16e24a5a2": {
            "chunkpath": [
                "rules"
            ],
            "filepath": [
                "codegenerator.rlmeta"
            ],
            "fragments": [
                {
                    "text": "ast           = [%:x]        -> x",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-08-04T18:40:54.097779",
            "type": "code"
        },
        "d4e2bfd1c8484c0f9241272174f3c943": {
            "chunkpath": [
                "vm",
                "instructions"
            ],
            "filepath": [
                "support.py"
            ],
            "fragments": [
                {
                    "text": "elif name == \"MATCH_CALL_RULE\":",
                    "type": "line"
                },
                {
                    "text": "    if pos >= len(stream):",
                    "type": "line"
                },
                {
                    "text": "        fail_message = (\"expected any\",)",
                    "type": "line"
                },
                {
                    "text": "    else:",
                    "type": "line"
                },
                {
                    "text": "        fn_name = str(stream[pos])",
                    "type": "line"
                },
                {
                    "text": "        key = (fn_name, tuple([x[1] for x in stream_pos_stack]+[pos]))",
                    "type": "line"
                },
                {
                    "text": "        if key in memo:",
                    "type": "line"
                },
                {
                    "text": "            if memo[key][0] is None:",
                    "type": "line"
                },
                {
                    "text": "                fail_message = memo[key][1]",
                    "type": "line"
                },
                {
                    "text": "            else:",
                    "type": "line"
                },
                {
                    "text": "                action, stream_pos_stack = memo[key]",
                    "type": "line"
                },
                {
                    "text": "                stream_pos_stack = stream_pos_stack[:]",
                    "type": "line"
                },
                {
                    "text": "                stream, pos = stream_pos_stack.pop()",
                    "type": "line"
                },
                {
                    "text": "                pc += 1",
                    "type": "line"
                },
                {
                    "text": "                continue",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            call_backtrack_stack.append((pc+1, key))",
                    "type": "line"
                },
                {
                    "text": "            pc = labels[fn_name]",
                    "type": "line"
                },
                {
                    "text": "            pos += 1",
                    "type": "line"
                },
                {
                    "text": "            continue",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-08-05T20:23:55.497286",
            "type": "code"
        },
        "d98b50be6a234c3f89499d104988e9ac": {
            "chunkpath": [
                "rules"
            ],
            "filepath": [
                "codegenerator.rlmeta"
            ],
            "fragments": [
                {
                    "text": "MatchRule     = py:x         -> { \"I('CALL', \" x \")\\n\"                 }",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-08-04T18:45:06.139521",
            "type": "code"
        },
        "dd22c831739b4c258bc39a7b4561c084": {
            "chunkpath": [
                "rules"
            ],
            "filepath": [
                "parser.rlmeta"
            ],
            "fragments": [
                {
                    "text": "choice =",
                    "type": "line"
                },
                {
                    "text": "  | (space '|')?",
                    "type": "line"
                },
                {
                    "text": "    sequence:x (space '|' sequence)*:xs     -> [\"Or\" x ~xs]",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-08-04T19:54:53.688081",
            "type": "code"
        },
        "e51c506026164790b6b54151a3e051e2": {
            "chunkpath": [
                "rules"
            ],
            "filepath": [
                "codegenerator.rlmeta"
            ],
            "fragments": [
                {
                    "text": "Rule          = py:x ast:y   -> { \"LABEL(\" x \")\\n\"",
                    "type": "line"
                },
                {
                    "text": "                                  y",
                    "type": "line"
                },
                {
                    "text": "                                  \"I('RETURN')\\n\"                      }",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-08-04T18:45:06.139384",
            "type": "code"
        },
        "e7bd365f346a4115be36d79af1031e3d": {
            "chunkpath": [
                "rules"
            ],
            "filepath": [
                "codegenerator.rlmeta"
            ],
            "fragments": [
                {
                    "text": "Action        = actionExpr:x -> { \"I('ACTION', lambda scope: \" x \")\\n\" }",
                    "type": "line"
                },
                {
                    "text": "actionExpr    =",
                    "type": "line"
                },
                {
                    "text": "  | py:x ast:y actionExpr:z  -> { \"scope.bind(\"",
                    "type": "line"
                },
                {
                    "text": "                                  x \", \" y \", lambda: \" z \")\"          }",
                    "type": "line"
                },
                {
                    "text": "  | .    ast",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-08-04T18:45:06.139631",
            "type": "code"
        },
        "e7c43863c275461196e5507bc450fcf5": {
            "chunkpath": [
                "rules"
            ],
            "filepath": [
                "codegenerator.rlmeta"
            ],
            "fragments": [
                {
                    "text": "Call          = ast:x asts:y -> { x \"(\" y \")\"                          }",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-08-04T18:45:06.139733",
            "type": "code"
        },
        "e9e5146b94dd4aff96a83352c948d1e5": {
            "chunkpath": [
                "vm",
                "instructions"
            ],
            "filepath": [
                "support.py"
            ],
            "fragments": [
                {
                    "text": "elif name == \"CALL\":",
                    "type": "line"
                },
                {
                    "text": "    key = (arg1, tuple([x[1] for x in stream_pos_stack]+[pos]))",
                    "type": "line"
                },
                {
                    "text": "    if key in memo:",
                    "type": "line"
                },
                {
                    "text": "        if memo[key][0] is None:",
                    "type": "line"
                },
                {
                    "text": "            fail_message = memo[key][1]",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            action, stream_pos_stack = memo[key]",
                    "type": "line"
                },
                {
                    "text": "            stream_pos_stack = stream_pos_stack[:]",
                    "type": "line"
                },
                {
                    "text": "            stream, pos = stream_pos_stack.pop()",
                    "type": "line"
                },
                {
                    "text": "            pc += 1",
                    "type": "line"
                },
                {
                    "text": "            continue",
                    "type": "line"
                },
                {
                    "text": "    else:",
                    "type": "line"
                },
                {
                    "text": "        call_backtrack_stack.append((pc+1, key))",
                    "type": "line"
                },
                {
                    "text": "        pc = labels[arg1]",
                    "type": "line"
                },
                {
                    "text": "        continue",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-08-05T20:23:55.496992",
            "type": "code"
        },
        "f1cab9dc109a47f596ad78b79b931d3f": {
            "chunkpath": [
                "vm",
                "instructions"
            ],
            "filepath": [
                "support.py"
            ],
            "fragments": [
                {
                    "text": "fail_pos = tuple([x[1] for x in stream_pos_stack]+[pos])",
                    "type": "line"
                },
                {
                    "text": "if fail_pos >= latest_fail_pos:",
                    "type": "line"
                },
                {
                    "text": "    latest_fail_message = fail_message",
                    "type": "line"
                },
                {
                    "text": "    latest_fail_pos = fail_pos",
                    "type": "line"
                },
                {
                    "text": "call_backtrack_entry = tuple()",
                    "type": "line"
                },
                {
                    "text": "while call_backtrack_stack:",
                    "type": "line"
                },
                {
                    "text": "    call_backtrack_entry = call_backtrack_stack.pop()",
                    "type": "line"
                },
                {
                    "text": "    if len(call_backtrack_entry) == 4:",
                    "type": "line"
                },
                {
                    "text": "        break",
                    "type": "line"
                },
                {
                    "text": "    else:",
                    "type": "line"
                },
                {
                    "text": "        _, key = call_backtrack_entry",
                    "type": "line"
                },
                {
                    "text": "        memo[key] = (None, fail_message)",
                    "type": "line"
                },
                {
                    "text": "if len(call_backtrack_entry) != 4:",
                    "type": "line"
                },
                {
                    "text": "    raise MatchError(",
                    "type": "line"
                },
                {
                    "text": "        latest_fail_message[0].format(*latest_fail_message[1:]),",
                    "type": "line"
                },
                {
                    "text": "        latest_fail_pos,",
                    "type": "line"
                },
                {
                    "text": "        stream_pos_stack[0][0] if stream_pos_stack else stream",
                    "type": "line"
                },
                {
                    "text": "    )",
                    "type": "line"
                },
                {
                    "text": "(pc, pos, stream_stack_len, scope_stack_len) = call_backtrack_entry",
                    "type": "line"
                },
                {
                    "text": "if len(stream_pos_stack) > stream_stack_len:",
                    "type": "line"
                },
                {
                    "text": "    stream = stream_pos_stack[stream_stack_len][0]",
                    "type": "line"
                },
                {
                    "text": "stream_pos_stack = stream_pos_stack[:stream_stack_len]",
                    "type": "line"
                },
                {
                    "text": "if len(scope_stack) > scope_stack_len:",
                    "type": "line"
                },
                {
                    "text": "    scope = scope_stack[scope_stack_len]",
                    "type": "line"
                },
                {
                    "text": "scope_stack = scope_stack[:scope_stack_len]",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-08-05T20:23:55.497345",
            "type": "code"
        },
        "f461c8ca67ba452e9751188553b7d16d": {
            "chunkpath": [
                "rules"
            ],
            "filepath": [
                "codegenerator.rlmeta"
            ],
            "fragments": [
                {
                    "text": "ListItem      = py:x ast:y   -> { \"splice(\" x \", \" y \")\"               }",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-08-04T18:45:06.139681",
            "type": "code"
        },
        "f4df26119ce548e18610a766ca7d5377": {
            "chunkpath": [
                "rules"
            ],
            "filepath": [
                "parser.rlmeta"
            ],
            "fragments": [
                {
                    "text": "grammar =",
                    "type": "line"
                },
                {
                    "text": "  | name:x space '{' rule*:ys space '}'     -> [\"Grammar\" x ~ys]",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "<code>",
            "timestamp_created": "2021-08-04T19:53:25.681808",
            "type": "code"
        },
        "f6b2a3ed97194c46bfd7e28f38abcd54": {
            "chunkpath": [],
            "filepath": [
                "main.py"
            ],
            "fragments": [
                {
                    "text": "def compile_grammar(grammar):",
                    "type": "line"
                },
                {
                    "text": "    return CodeGenerator().run(",
                    "type": "line"
                },
                {
                    "text": "        \"ast\",",
                    "type": "line"
                },
                {
                    "text": "        [Parser().run(\"grammar\", grammar)]",
                    "type": "line"
                },
                {
                    "text": "    )",
                    "type": "line"
                },
                {
                    "text": "",
                    "type": "line"
                },
                {
                    "text": "if __name__ == \"__main__\":",
                    "type": "line"
                },
                {
                    "text": "    import sys",
                    "type": "line"
                },
                {
                    "text": "    import pprint",
                    "type": "line"
                },
                {
                    "text": "    def read(path):",
                    "type": "line"
                },
                {
                    "text": "        if path == \"-\":",
                    "type": "line"
                },
                {
                    "text": "            return sys.stdin.read()",
                    "type": "line"
                },
                {
                    "text": "        with open(path) as f:",
                    "type": "line"
                },
                {
                    "text": "            return f.read()",
                    "type": "line"
                },
                {
                    "text": "    args = sys.argv[1:] or [\"--compile\", \"-\"]",
                    "type": "line"
                },
                {
                    "text": "    while args:",
                    "type": "line"
                },
                {
                    "text": "        command = args.pop(0)",
                    "type": "line"
                },
                {
                    "text": "        if command == \"--support\":",
                    "type": "line"
                },
                {
                    "text": "            sys.stdout.write(SUPPORT)",
                    "type": "line"
                },
                {
                    "text": "        elif command == \"--copy\":",
                    "type": "line"
                },
                {
                    "text": "            sys.stdout.write(read(args.pop(0)))",
                    "type": "line"
                },
                {
                    "text": "        elif command == \"--embed\":",
                    "type": "line"
                },
                {
                    "text": "            sys.stdout.write(\"{} = {}\\n\".format(",
                    "type": "line"
                },
                {
                    "text": "                args.pop(0),",
                    "type": "line"
                },
                {
                    "text": "                repr(read(args.pop(0)))",
                    "type": "line"
                },
                {
                    "text": "            ))",
                    "type": "line"
                },
                {
                    "text": "        elif command == \"--compile\":",
                    "type": "line"
                },
                {
                    "text": "            try:",
                    "type": "line"
                },
                {
                    "text": "                sys.stdout.write(compile_grammar(read(args.pop(0))))",
                    "type": "line"
                },
                {
                    "text": "            except MatchError as e:",
                    "type": "line"
                },
                {
                    "text": "                stream = e.stream",
                    "type": "line"
                },
                {
                    "text": "                for pos in e.pos[:-1]:",
                    "type": "line"
                },
                {
                    "text": "                    stream = stream[pos]",
                    "type": "line"
                },
                {
                    "text": "                pos = e.pos[-1]",
                    "type": "line"
                },
                {
                    "text": "                MARKER = \"\\033[0;31m<ERROR POSITION>\\033[0m\"",
                    "type": "line"
                },
                {
                    "text": "                if isinstance(stream, str):",
                    "type": "line"
                },
                {
                    "text": "                    stream_string = stream[:pos] + MARKER + stream[pos:]",
                    "type": "line"
                },
                {
                    "text": "                else:",
                    "type": "line"
                },
                {
                    "text": "                    stream_string = pprint.pformat(stream)",
                    "type": "line"
                },
                {
                    "text": "                sys.exit(\"ERROR: {}\\nPOSITION: {}\\nSTREAM:\\n{}\".format(",
                    "type": "line"
                },
                {
                    "text": "                    e.message,",
                    "type": "line"
                },
                {
                    "text": "                    pos,",
                    "type": "line"
                },
                {
                    "text": "                    indent(stream_string)",
                    "type": "line"
                },
                {
                    "text": "                ))",
                    "type": "line"
                },
                {
                    "text": "        else:",
                    "type": "line"
                },
                {
                    "text": "            sys.exit(\"ERROR: Unknown command '{}'\".format(command))",
                    "type": "line"
                }
            ],
            "links": [],
            "tags": [],
            "text": "Enter note text...\n",
            "timestamp_created": "2021-08-04T18:29:59.535310",
            "type": "code"
        }
    },
    "version": 1
}