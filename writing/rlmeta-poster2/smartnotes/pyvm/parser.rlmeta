Parser {
  file        = def*:xs !.                -> list():defs
                                          -> list():instructions
                                          -> dict():macros
                                          -> xs
                                          -> [["VM" defs instructions macros]]
  def         = instruction | blankline | macro | vm
  vm          = 'def ' name:x
                restline:y block:z        -> append(defs ["Def" x y ~z])
  instruction = 'definstruction ' name:x
                args:y ':\n' block:z      -> append(instructions ["Instruction" x ~y ~z])
  macro       = 'defmacro ' name:x
                ':\n' block:y             -> set(macros x y)
  args        = '(' arg*:xs ')'           -> xs
  arg         = name:x (',' | -> "") ' '* -> ["Arg" x]
  block       = blockline*
  blockline   =
    | '    ' ' '*:xs '#' name:y '\n'      -> ["Macro" y { xs }]
    | '    ' restline:x                   -> ["Line" x]
  restline    = (!'\n'.)*:xs '\n'         -> { xs "\n" }
  name        = char:x char*:xs           -> { x xs }
  char        = 'a'-'z' | 'A'-'Z' | '_'
  blankline   = '\n'
}
