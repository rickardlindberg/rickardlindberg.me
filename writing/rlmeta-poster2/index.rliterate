{
"root_page":{
"children":[
{
"children":[],
"id":"dbdb20709943445caebb218ff640fc22",
"paragraphs":[
{
"fragments":[
{
"text":"From the first poster article:",
"type":"text"
}
],
"id":"50ef8bafcf824ad7898532f80e3a9e89",
"type":"text"
},
{
"fragments":[
{
"text":"The smaller it is, the easier it is to understand and therefore extend. The more flexible it is to extend the better. If I make another poster version it would therefore focus on being smaller and more flexible. Since all successive version of RLMeta have been faster than the ones before, performance is also important. But small size, clarity, and flexibility come first.",
"type":"text"
}
],
"id":"2b04a39cbcf94c4b80e2c8ce209df301",
"type":"quote"
},
{
"child_type":"unordered",
"children":[
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Clarity",
"type":"strong"
},
{
"text":": How does it affect understandability/learnability/readability?",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Size",
"type":"strong"
},
{
"text":": Lines of code.",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Flexibility",
"type":"strong"
},
{
"text":": How easy is it to modify RLMeta to be what you need?",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Performance",
"type":"strong"
},
{
"text":": How fast does it compile?",
"type":"text"
}
]
}
],
"id":"61cc91c4bd6749eda12e967bda9a2a87",
"type":"list"
}
],
"title":"Evaluation guidelines"
},
{
"children":[
{
"children":[],
"id":"2b1f7b345d3c41368212b3918c49bfbe",
"paragraphs":[
{
"fragments":[
{
"text":"One thing that I left in the first version of the poster that still annoyed me was that labels are generated at match time, not at semantic action evaluation time. It will not produce incorrect results. At worst, some labels end up not being used because the counter value captured was in a rule that later failed. But dealing with labels at match time does not make sense. It should really happen at semantic action evaluation time.",
"type":"text"
}
],
"id":"33566e91dda1452a9913d3b1ccddd2b3",
"type":"text"
},
{
"fragments":[
{
"text":"Here is what the ",
"type":"text"
},
{
"text":"Not",
"type":"code"
},
{
"text":" rule looks like in the first version of the poster:",
"type":"text"
}
],
"id":"3aaa43da2f054f5bb7505eac58322a5c",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"Not = ast:x #:a #:b -> { \"I('BACKTRACK', \" b \")\\n\"\n                         x\n                         \"I('COMMIT', \" a \")\\n\"\n                         \"LABEL(\" a \")\\n\"\n                         \"I('FAIL', 'no match expected')\\n\"\n                         \"LABEL(\" b \")\\n\"                   }\n",
"type":"code"
}
],
"id":"3a741bdf1f674ebea93e8674d8bd6c47",
"language":"rlmeta",
"type":"code"
},
{
"fragments":[
{
"text":"Here is what the ",
"type":"text"
},
{
"text":"Not",
"type":"code"
},
{
"text":" rule looks like now:",
"type":"text"
}
],
"id":"d3d253ab64b7460fb295d4cd385b31bd",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"Not = ast:x -> label():a -> label():b\n            -> { \"I('BACKTRACK', \" b \")\\n\"\n                 x\n                 \"I('COMMIT', \" a \")\\n\"\n                 \"LABEL(\" a \")\\n\"\n                 \"I('FAIL', 'no match expected')\\n\"\n                 \"LABEL(\" b \")\\n\"                   }\n\n",
"type":"code"
}
],
"id":"d4f02a910a804da4a75be9a46f5cbd4e",
"language":"rlmeta",
"type":"code"
},
{
"fragments":[
{
"text":"This change puts label generation where it belongs, in semantic actions, and thus makes the implementation ",
"type":"text"
},
{
"text":"more clear",
"type":"strong"
},
{
"text":". The VM is no longer concerned with labels. It is only concerned with matching. It does make semantic actions a bit more complicated, but the bind syntax is familiar from match expressions and an action being a sequence of things should be familiar as well.",
"type":"text"
}
],
"id":"535aafde7f214cb1a59745dc1da32995",
"type":"text"
},
{
"fragments":[
{
"text":"This change required a bit of rework how semantic actions work. Previously only one expression was allowed. Now multiple expressions are allowed. The result of expressions can also be bound to names which subsequent expressions can refer to. Furthermore, there are now also runtime variables that are set with bindings. ",
"type":"text"
},
{
"text":"label",
"type":"code"
},
{
"text":" is a built in runtime function that generates increasing integers starting at 0.",
"type":"text"
}
],
"id":"2c34074b02584b69ba93ab3ffe71b12e",
"type":"text"
},
{
"fragments":[
{
"text":"The implementation of this change also ",
"type":"text"
},
{
"text":"increases the flexibility",
"type":"strong"
},
{
"text":" of RLMeta. For example, it is now possible to write a semantic action that generates code in different sections like this:",
"type":"text"
}
],
"id":"f99504f98814492fb76bb60828441d60",
"type":"text"
},
{
"chunkpath":[],
"filepath":[
"example_buffers.rlmeta"
],
"fragments":[
{
"text":"ExampleBuffers {\n  program  = ast:x  -> #Buffer():header\n                    -> { \"# HEADER\\n\"\n                         header\n                         \"# BODY\\n\"\n                         x            }\n  ast      = [%:x]  -> x\n  Program  = ast*\n  Function = .:name -> header({ \"def \" name \"\\n\" })\n                    -> { name \"()\\n\" }\n}\n",
"type":"code"
}
],
"id":"bf62f2634a714b0e9ae377f087615a8e",
"language":"",
"type":"code"
},
{
"fragments":[
{
"text":"Buffer",
"type":"code"
},
{
"text":" is a specialised list that appends an element when called as a function:",
"type":"text"
}
],
"id":"0a5210b5b26b4657af4e247220fe0c86",
"type":"text"
},
{
"chunkpath":[],
"filepath":[
"example_buffers.py"
],
"fragments":[
{
"text":"class Buffer(list):\n\n    def __call__(self, arg):\n        self.append(arg)\n",
"type":"code"
}
],
"id":"bbfa82ed83104ce1bf3d29e68f94de1d",
"language":"",
"type":"code"
},
{
"fragments":[
{
"text":"Here is an example AST representing a program:",
"type":"text"
}
],
"id":"9efa0471e14241819207f632ae3903b6",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"[\n    ['Program',\n        ['Function', 'foo'],\n        ['Function', 'bar']\n    ]\n]\n",
"type":"code"
}
],
"id":"4220b051de0f404fa8638cf1c5929ea7",
"language":"",
"post_process":[
"bash",
"example_buffers.sh"
],
"type":"code"
},
{
"fragments":[
{
"text":"When the ",
"type":"text"
},
{
"text":"program",
"type":"code"
},
{
"text":" rule is run on the example input, the following is output:",
"type":"text"
}
],
"id":"b412a2fedb5f470fbd00b775d6fce562",
"type":"text"
},
{
"code_id":"4220b051de0f404fa8638cf1c5929ea7",
"id":"b718216a622b4b4794bd4ff22d84d4c2",
"type":"expanded_code"
},
{
"fragments":[
{
"text":"This type of thing is useful for example when generating C functions where definitions need to go in \"header\" and declarations in \"body\".",
"type":"text"
}
],
"id":"bd097b74c22448bdb1fc484a827f7f9d",
"type":"text"
},
{
"fragments":[
{
"text":"In summary, this change is as follows:",
"type":"text"
}
],
"id":"23eb12aea362435a9ce20c59c66dd59b",
"type":"text"
},
{
"child_type":"unordered",
"children":[
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Label syntax (",
"type":"text"
},
{
"text":"#",
"type":"code"
},
{
"text":") in parser is removed",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Actions can have multiple expressions",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Expressions can be bound to names",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"A default ",
"type":"text"
},
{
"text":"label",
"type":"code"
},
{
"text":" function to generate labels",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Names in semantic actions refer to matches or results bound in semantic actions",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"New syntax ",
"type":"text"
},
{
"text":"#name",
"type":"code"
},
{
"text":" is used in semantic actions to refer to \"native\" names",
"type":"text"
}
]
}
],
"id":"9f01d66afcdd4a5eb133756dc1400f5b",
"type":"list"
},
{
"fragments":[
{
"text":"The complete diff for this change can be found on ",
"type":"text"
},
{
"text":"GitHub",
"type":"link",
"url":"https://github.com/rickardlindberg/rickardlindberg.me/commit/5154583e9d98c123630fb41664aa6906d4801d05"
},
{
"text":".",
"type":"text"
}
],
"id":"7cac8d24af78470daac3721d37e179a7",
"type":"text"
},
{
"fragments":[
{
"text":"The increased clarity and flexibility come with a price. The size increases and the performance dropped.",
"type":"text"
}
],
"id":"9f19c5935330493c83d55fd735d80930",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"$ wc -l parser.rlmeta codegenerator.rlmeta support.py compile.sh\n   56 parser.rlmeta        (+5)\n   68 codegenerator.rlmeta (+7)\n  243 support.py           (+27)\n   54 compile.sh           (0)\n  421 total                (+39)\n",
"type":"code"
}
],
"id":"b41f12a214de4566bedcd6abbc5fa597",
"type":"code"
},
{
"fragments":[
{
"text":"Performance measurements.",
"type":"text"
}
],
"id":"f1681534dd7e43a78eca80237aec0699",
"image_base64":"",
"type":"image"
},
{
"fragments":[
{
"text":"The parser and the code generator is mostly the same. The greatest addition is in the support library. Which is expected when semantic action evaluation becomes more complex. The drop in performance is likely due to more function calls when evaluating semantic actions. Even though size and performance got worse, I believe the clarity and flexibility gain is worth it.",
"type":"text"
}
],
"id":"9e1614d320704847a76d1c7ac5622759",
"type":"text"
}
],
"title":"Label generation in actions"
},
{
"children":[],
"id":"e839bb52bc5a4103a3fe8d9d1c8ed9e3",
"paragraphs":[
{
"fragments":[
{
"text":"Diff:",
"type":"text"
}
],
"id":"bea2fc3981b8444f9beae002ad8a59e5",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"diff --git a/writing/rlmeta-poster2/codegenerator.rlmeta b/writing/rlmeta-poster2/codegenerator.rlmeta\nindex 205b89e..174e336 100644\n--- a/writing/rlmeta-poster2/codegenerator.rlmeta\n+++ b/writing/rlmeta-poster2/codegenerator.rlmeta\n@@ -40,9 +40,9 @@ CodeGenerator {\n   Label          =                 -> { \"I('LABEL')\\n\"                       }\n   SemanticAction = ast:x           -> { \"I('ACTION', lambda scope: \" x \")\\n\" }\n   MatchRule      = py:x            -> { \"I('CALL', \" x \")\\n\"                 }\n-  MatchRange     = py:x py:y       -> { \"I('MATCH_RANGE', \" x \", \" y \")\\n\"   }\n-  MatchObject    = py:x            -> { \"I('MATCH_OBJECT', \" x \")\\n\"         }\n-  MatchAny       =                 -> { \"I('MATCH_ANY')\\n\"                   }\n+  MatchRange     = py:x py:y       -> { \"I('MATCH', *range(\" x \", \" y \"))\\n\" }\n+  MatchObject    = py:x            -> { \"I('MATCH', *exact(\" x \"))\\n\"        }\n+  MatchAny       =                 -> { \"I('MATCH', 'any', any)\\n\"           }\n   MatchList      = ast:x           -> { \"I('PUSH_STREAM')\\n\"\n                                         x\n                                         \"I('POP_STREAM')\\n\"                  }\ndiff --git a/writing/rlmeta-poster2/support.py b/writing/rlmeta-poster2/support.py\nindex 97100ff..3b5d69e 100644\n--- a/writing/rlmeta-poster2/support.py\n+++ b/writing/rlmeta-poster2/support.py\n@@ -21,6 +21,18 @@ def vm(instructions, labels, start_rule, stream):\n             ))\n             pc += 1\n             continue\n+        elif name == \"MATCH\":\n+            if pos >= len(stream):\n+                fail_message = (\"expected {}, found EOF\", arg1)\n+            else:\n+                value = stream[pos]\n+                if arg2(value):\n+                    action = SemanticAction(value)\n+                    pos += 1\n+                    pc += 1\n+                    continue\n+                else:\n+                    fail_message = (\"expected {}, found {!r}\", arg1, value)\n         elif name == \"CALL\":\n             key = (arg1, tuple([x[1] for x in stream_pos_stack]+[pos]))\n             if key in memo:\n@@ -40,14 +52,6 @@ def vm(instructions, labels, start_rule, stream):\n             scope = scope_stack.pop()\n             pc += 1\n             continue\n-        elif name == \"MATCH_OBJECT\":\n-            if pos >= len(stream) or stream[pos] != arg1:\n-                fail_message = (\"expected {!r}\", arg1)\n-            else:\n-                action = SemanticAction(arg1)\n-                pos += 1\n-                pc += 1\n-                continue\n         elif name == \"COMMIT\":\n             call_backtrack_stack.pop()\n             pc = labels[arg1]\n@@ -70,14 +74,6 @@ def vm(instructions, labels, start_rule, stream):\n             action = SemanticAction(scope, arg1)\n             pc += 1\n             continue\n-        elif name == \"MATCH_RANGE\":\n-            if pos >= len(stream) or not (arg1 <= stream[pos] <= arg2):\n-                fail_message = (\"expected range {!r}-{!r}\", arg1, arg2)\n-            else:\n-                action = SemanticAction(stream[pos])\n-                pos += 1\n-                pc += 1\n-                continue\n         elif name == \"LIST_START\":\n             scope_stack.append(scope)\n             scope = []\n@@ -88,14 +84,6 @@ def vm(instructions, labels, start_rule, stream):\n             scope = scope_stack.pop()\n             pc += 1\n             continue\n-        elif name == \"MATCH_ANY\":\n-            if pos >= len(stream):\n-                fail_message = (\"expected any\",)\n-            else:\n-                action = SemanticAction(stream[pos])\n-                pos += 1\n-                pc += 1\n-                continue\n         elif name == \"PUSH_STREAM\":\n             if pos >= len(stream) or not isinstance(stream[pos], list):\n                 fail_message = (\"expected list\",)\n@@ -214,3 +202,12 @@ def join(items):\n \n def indent(text):\n     return join(join([\"    \", line]) for line in text.splitlines(True))\n+\n+def any(x):\n+    return True\n+\n+def exact(value):\n+    return \"object {!r}\".format(value), lambda x: x == value\n+\n+def range(a, b):\n+    return \"range {!r}-{!r}\".format(a, b), lambda x: a <= x <= b\n",
"type":"code"
}
],
"id":"ed6ff0fa57d0455592f182b3a8d72666",
"language":"diff",
"type":"code"
},
{
"fragments":[
{
"text":"The implementation is a bit more flexible and reduces the number of VM instructions.",
"type":"emphasis"
}
],
"id":"36ce8060a7ca4679b3c6a93455a47436",
"type":"text"
},
{
"fragments":[
{
"text":"Line count:",
"type":"text"
}
],
"id":"b9135d10fe014f3289e4ad95b609ad54",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"$ wc -l parser.rlmeta codegenerator.rlmeta support.py compile.sh\n   51 parser.rlmeta\n   61 codegenerator.rlmeta\n  213 support.py\n   54 compile.sh\n  379 total\n",
"type":"code"
}
],
"id":"fbe03c20ebc34096aefbaac8f9b41971",
"type":"code"
},
{
"fragments":[
{
"text":"Only 3 lines shorter. The helper functions could be inlined in code generator. But that would make it harder to read.",
"type":"emphasis"
}
],
"id":"9a5b2355a33e4a05a597e3ceffb8c64b",
"type":"text"
},
{
"fragments":[
{
"text":"Performance:",
"type":"text"
}
],
"id":"332666e132524a31b8e69bf66d31910c",
"type":"text"
},
{
"fragments":[
{
"text":"Performance measurements.",
"type":"text"
}
],
"id":"506bdb14451c490c8c2f8aa56bbeab7c",
"image_base64":"",
"type":"image"
},
{
"fragments":[
{
"text":"A little slower.",
"type":"emphasis"
}
],
"id":"4275854fb1414af190e52d04a61a7b9c",
"type":"text"
},
{
"fragments":[
{
"text":"Summary:",
"type":"text"
}
],
"id":"57a9323c4d09428b8810ff8510d4964f",
"type":"text"
},
{
"fragments":[
{
"text":"I will hold off on this change. It became slower and not much smaller. If the flexibility is needed, it might be worth it.",
"type":"strong"
}
],
"id":"350a1c034e574c9889250443b4d95c90",
"type":"text"
}
],
"title":"Only one match instruction"
}
],
"id":"88bfcf61e33445908695a0314be51a17",
"paragraphs":[
{
"fragments":[
{
"text":"Possible changes to try:",
"type":"text"
}
],
"id":"ce26e3686cfb4be28aab430256be1f91",
"type":"text"
},
{
"child_type":"unordered",
"children":[
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Substream matching should return substream as action",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Macro language for creating VMs in Python",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"run",
"type":"code"
},
{
"text":" -> ",
"type":"text"
},
{
"text":"match",
"type":"code"
},
{
"text":" rename of grammar method",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Fix indentation in ",
"type":"text"
},
{
"text":"sys.exit",
"type":"code"
}
]
}
],
"id":"bc5e11e7884b4b5185703d0aeba08b6d",
"type":"list"
}
],
"title":"Changes"
},
{
"children":[
{
"children":[],
"id":"9ce22f137e4a4bf3b4080f4803f3205d",
"paragraphs":[
{
"chunkpath":[],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"text":"Parser {\n  grammar =\n    | name:x space '{' rule*:ys space '}'      -> [\"Grammar\" x ~ys]\n  rule =\n    | name:x space '=' choice:y                -> [\"Rule\" x y]\n  choice =\n    | (space '|')?\n      sequence:x (space '|' sequence)*:xs      -> [\"Or\" x ~xs]\n  sequence =\n    | expr:x expr*:xs                          -> [\"Scope\" [\"And\" x ~xs]]\n  expr =\n    | expr1:x space ':' name:y                 -> [\"Bind\" y x]\n    | expr1\n  expr1 =\n    | expr2:x space '*'                        -> [\"Star\" x]\n    | expr2:x space '?'                        -> [\"Or\" x [\"And\"]]\n    | space '!' expr2:x                        -> [\"Not\" x]\n    | space '%'                                -> [\"MatchCallRule\"]\n    | expr2\n  expr2 =\n    | action:x action*:xs                      -> [\"Actions\" ~x ~~xs]\n    | name:x !(space '=')                      -> [\"MatchRule\" x]\n    | space char:x '-' char:y                  -> [\"MatchRange\" x y]\n    | space charseq\n    | space '.'                                -> [\"MatchAny\"]\n    | space '(' choice:x space ')'             -> x\n    | space '[' expr*:xs space ']'             -> [\"MatchList\" [\"And\" ~xs]]\n  action =\n    | space '->' hostExpr:x\n      (space ':' name | -> \"\"):y               -> [y  x]\n  hostExpr =\n    | space string:x                           -> [\"String\" x]\n    | space '[' hostExprListItem*:xs space ']' -> [\"List\" ~xs]\n    | space '{' formatExpr*:xs space '}'       -> [\"Format\" ~xs]\n    | var:x space '(' hostExpr*:ys space ')'   -> [\"FnCall\" x ~ys]\n    | var:x\n  var =\n    | space '#' name:x                         -> [\"Native\" x]\n    | name:x !(space '=')                      -> [\"Lookup\" x]\n  hostExprListItem =\n    | space '~'*:ys hostExpr:x                 -> [\"ListItem\" #len(ys) x]\n  formatExpr =\n    | space '>' formatExpr*:xs space '<'       -> [\"Indent\" [\"Format\" ~xs]]\n    | hostExpr\n  charseq   = '\\'' (!'\\'' matchChar)*:xs '\\''  -> [\"And\" ~xs]\n  matchChar = innerChar:x                      -> [\"MatchObject\" x]\n  string    = '\"'  (!'\"'  innerChar)*:xs '\"'   -> { xs }\n  char      = '\\''  !'\\'' innerChar  :x  '\\''  -> x\n  innerChar = '\\\\' escape | .\n  escape    = '\\\\' -> \"\\\\\" | '\\'' -> \"'\"\n            | '\"'  -> \"\\\"\" | 'n'  -> \"\\n\"\n  name      = space nameStart:x nameChar*:xs   -> { x xs }\n  nameStart = 'a'-'z' | 'A'-'Z'\n  nameChar  = 'a'-'z' | 'A'-'Z' | '0'-'9'\n  space     = (' ' | '\\n')*\n}\n",
"type":"code"
}
],
"id":"5ad42c6a022f445daba3287b53c22701",
"language":"",
"type":"code"
}
],
"title":"parser.rlmeta"
},
{
"children":[],
"id":"af73e151e4a847e98832b2460fd43cc1",
"paragraphs":[
{
"chunkpath":[],
"filepath":[
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"CodeGenerator {\n  ast            = [%:x]          -> x\n  Grammar        = .:x ast*:ys    -> { \"class \" x \"(Grammar):\\n\\n\" >\n                                         \"def assemble(self, I, LABEL):\\n\" >\n                                           ys\n                                         <\n                                       <                                    }\n  Rule           = py:x ast:y     -> { \"LABEL(\" x \")\\n\"\n                                       y\n                                       \"I('RETURN')\\n\"                      }\n  Or             =\n    | ast:x Or:y                  -> label():a -> label():b\n                                  -> { \"I('BACKTRACK', \" a \")\\n\"\n                                       x\n                                       \"I('COMMIT', \" b \")\\n\"\n                                       \"LABEL(\" a \")\\n\"\n                                       y\n                                       \"LABEL(\" b \")\\n\"                     }\n    | ast\n  Scope          = ast:x          -> { \"I('PUSH_SCOPE')\\n\"\n                                       x\n                                       \"I('POP_SCOPE')\\n\"                   }\n  And            = ast*\n  Bind           = py:x ast:y     -> { y\n                                       \"I('BIND', \" x \")\\n\"                 }\n  Star           = ast:x          -> label():a -> label():b\n                                  -> { \"I('LIST_START')\\n\"\n                                       \"LABEL(\" a \")\\n\"\n                                       \"I('BACKTRACK', \" b \")\\n\"\n                                       x\n                                       \"I('LIST_APPEND')\\n\"\n                                       \"I('COMMIT', \" a \")\\n\"\n                                       \"LABEL(\" b \")\\n\"\n                                       \"I('LIST_END')\\n\"                    }\n  Not            = ast:x          -> label():a -> label():b\n                                  -> { \"I('BACKTRACK', \" b \")\\n\"\n                                       x\n                                       \"I('COMMIT', \" a \")\\n\"\n                                       \"LABEL(\" a \")\\n\"\n                                       \"I('FAIL', 'no match expected')\\n\"\n                                       \"LABEL(\" b \")\\n\"                     }\n  MatchCallRule  =                -> { \"I('MATCH_CALL_RULE')\\n\"             }\n  Actions        = actions:x      -> { \"I('ACTION', lambda scope: \" x \")\\n\" }\n  actions        =\n    | py:x ast:y actions:z        -> { \"scope.bind(\"\n                                        x \", \" y \", lambda: \" z \")\"         }\n    | py   ast\n  MatchRule      = py:x           -> { \"I('CALL', \" x \")\\n\"                 }\n  MatchRange     = py:x py:y      -> { \"I('MATCH_RANGE', \" x \", \" y \")\\n\"   }\n  MatchObject    = py:x           -> { \"I('MATCH_OBJECT', \" x \")\\n\"         }\n  MatchAny       =                -> { \"I('MATCH_ANY')\\n\"                   }\n  MatchList      = ast:x          -> { \"I('PUSH_STREAM')\\n\"\n                                       x\n                                       \"I('POP_STREAM')\\n\"                  }\n  String         = py\n  List           = astItems:x     -> { \"concat([\" x \"])\"                    }\n  ListItem       = py:x ast:y     -> { \"splice(\" x \", \" y \")\"               }\n  Format         = astItems:x     -> { \"join([\" x \"])\"                      }\n  Indent         = ast:x          -> { \"indent(\" x \")\"                      }\n  FnCall         = ast:x astItems:y -> { x \"(\" y \")\"                        }\n  Native         = .\n  Lookup         = py:x           -> { \"scope.lookup(\" x \")\"                }\n  astItems       =\n    | ast:x astItem*:xs           -> { x xs                                 }\n    |                             -> {                                      }\n  astItem        = ast:x          -> { \", \" x                               }\n  py             = .:x            -> #repr(x)\n}\n",
"type":"code"
}
],
"id":"98018c8fb01845719724306201926c0a",
"language":"",
"type":"code"
}
],
"title":"codegenerator.rlmeta"
},
{
"children":[],
"id":"79d15a72ff31485ea0204c8f79d3a641",
"paragraphs":[
{
"chunkpath":[],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"def vm(instructions, labels, start_rule, stream):\n    action = SemanticAction(None)\n    pc = labels[start_rule]\n    call_backtrack_stack = []\n    stream, pos, stream_pos_stack = (stream, 0, [])\n    scope, scope_stack = (None, [])\n    fail_message = None\n    latest_fail_message, latest_fail_pos = (None, tuple())\n    memo = {}\n    runtime = {\n        \"label\": Counter().next,\n    }\n    while True:\n        name, arg1, arg2 = instructions[pc]\n        if name == \"PUSH_SCOPE\":\n            scope_stack.append(scope)\n            scope = {}\n            pc += 1\n            continue\n        elif name == \"BACKTRACK\":\n            call_backtrack_stack.append((\n                labels[arg1], pos, len(stream_pos_stack), len(scope_stack)\n            ))\n            pc += 1\n            continue\n        elif name == \"CALL\":\n            key = (arg1, tuple([x[1] for x in stream_pos_stack]+[pos]))\n            if key in memo:\n                if memo[key][0] is None:\n                    fail_message = memo[key][1]\n                else:\n                    action, stream_pos_stack = memo[key]\n                    stream_pos_stack = stream_pos_stack[:]\n                    stream, pos = stream_pos_stack.pop()\n                    pc += 1\n                    continue\n            else:\n                call_backtrack_stack.append((pc+1, key))\n                pc = labels[arg1]\n                continue\n        elif name == \"POP_SCOPE\":\n            scope = scope_stack.pop()\n            pc += 1\n            continue\n        elif name == \"MATCH_OBJECT\":\n            if pos >= len(stream) or stream[pos] != arg1:\n                fail_message = (\"expected {!r}\", arg1)\n            else:\n                action = SemanticAction(arg1)\n                pos += 1\n                pc += 1\n                continue\n        elif name == \"COMMIT\":\n            call_backtrack_stack.pop()\n            pc = labels[arg1]\n            continue\n        elif name == \"RETURN\":\n            if len(call_backtrack_stack) == 0:\n                return action.eval()\n            pc, key = call_backtrack_stack.pop()\n            memo[key] = (action, stream_pos_stack+[(stream, pos)])\n            continue\n        elif name == \"LIST_APPEND\":\n            scope.append(action)\n            pc += 1\n            continue\n        elif name == \"BIND\":\n            scope[arg1] = action\n            pc += 1\n            continue\n        elif name == \"ACTION\":\n            action = SemanticAction(Scope(scope, runtime), arg1)\n            pc += 1\n            continue\n        elif name == \"MATCH_RANGE\":\n            if pos >= len(stream) or not (arg1 <= stream[pos] <= arg2):\n                fail_message = (\"expected range {!r}-{!r}\", arg1, arg2)\n            else:\n                action = SemanticAction(stream[pos])\n                pos += 1\n                pc += 1\n                continue\n        elif name == \"LIST_START\":\n            scope_stack.append(scope)\n            scope = []\n            pc += 1\n            continue\n        elif name == \"LIST_END\":\n            action = SemanticAction(scope, lambda xs: [x.eval() for x in xs])\n            scope = scope_stack.pop()\n            pc += 1\n            continue\n        elif name == \"MATCH_ANY\":\n            if pos >= len(stream):\n                fail_message = (\"expected any\",)\n            else:\n                action = SemanticAction(stream[pos])\n                pos += 1\n                pc += 1\n                continue\n        elif name == \"PUSH_STREAM\":\n            if pos >= len(stream) or not isinstance(stream[pos], list):\n                fail_message = (\"expected list\",)\n            else:\n                stream_pos_stack.append((stream, pos))\n                stream = stream[pos]\n                pos = 0\n                pc += 1\n                continue\n        elif name == \"POP_STREAM\":\n            if pos < len(stream):\n                fail_message = (\"expected end of list\",)\n            else:\n                stream, pos = stream_pos_stack.pop()\n                pos += 1\n                pc += 1\n                continue\n        elif name == \"MATCH_CALL_RULE\":\n            if pos >= len(stream):\n                fail_message = (\"expected any\",)\n            else:\n                fn_name = str(stream[pos])\n                key = (fn_name, tuple([x[1] for x in stream_pos_stack]+[pos]))\n                if key in memo:\n                    if memo[key][0] is None:\n                        fail_message = memo[key][1]\n                    else:\n                        action, stream_pos_stack = memo[key]\n                        stream_pos_stack = stream_pos_stack[:]\n                        stream, pos = stream_pos_stack.pop()\n                        pc += 1\n                        continue\n                else:\n                    call_backtrack_stack.append((pc+1, key))\n                    pc = labels[fn_name]\n                    pos += 1\n                    continue\n        elif name == \"FAIL\":\n            fail_message = (arg1,)\n        else:\n            raise Exception(\"unknown instruction {}\".format(name))\n        fail_pos = tuple([x[1] for x in stream_pos_stack]+[pos])\n        if fail_pos >= latest_fail_pos:\n            latest_fail_message = fail_message\n            latest_fail_pos = fail_pos\n        call_backtrack_entry = tuple()\n        while call_backtrack_stack:\n            call_backtrack_entry = call_backtrack_stack.pop()\n            if len(call_backtrack_entry) == 4:\n                break\n            else:\n                _, key = call_backtrack_entry\n                memo[key] = (None, fail_message)\n        if len(call_backtrack_entry) != 4:\n            raise MatchError(\n                latest_fail_message[0].format(*latest_fail_message[1:]),\n                latest_fail_pos,\n                stream_pos_stack[0][0] if stream_pos_stack else stream\n            )\n        (pc, pos, stream_stack_len, scope_stack_len) = call_backtrack_entry\n        if len(stream_pos_stack) > stream_stack_len:\n            stream = stream_pos_stack[stream_stack_len][0]\n        stream_pos_stack = stream_pos_stack[:stream_stack_len]\n        if len(scope_stack) > scope_stack_len:\n            scope = scope_stack[scope_stack_len]\n        scope_stack = scope_stack[:scope_stack_len]\n\nclass Counter(object):\n\n    def __init__(self):\n        self.count = 0\n\n    def next(self):\n        result = self.count\n        self.count += 1\n        return result\n\nclass Scope(object):\n\n    def __init__(self, match, runtime):\n        self.match = match\n        self.runtime = runtime\n\n    def bind(self, name, value, continuation):\n        old = self.runtime.get(name, None)\n        self.runtime[name] = value\n        try:\n            return continuation()\n        finally:\n            self.runtime[name] = old\n\n    def lookup(self, name):\n        if name in self.match:\n            return self.match[name].eval()\n        else:\n            return self.runtime.get(name, None)\n\nclass SemanticAction(object):\n\n    def __init__(self, value, fn=lambda value: value):\n        self.value = value\n        self.fn = fn\n\n    def eval(self):\n        return self.fn(self.value)\n\nclass MatchError(Exception):\n\n    def __init__(self, message, pos, stream):\n        Exception.__init__(self)\n        self.message = message\n        self.pos = pos\n        self.stream = stream\n\nclass Grammar(object):\n\n    def run(self, rule_name, stream):\n        instructions = []\n        labels = {}\n        def I(name, arg1=None, arg2=None):\n            instructions.append((name, arg1, arg2))\n        def LABEL(name):\n            labels[name] = len(instructions)\n        self.assemble(I, LABEL)\n        return vm(instructions, labels, rule_name, stream)\n\ndef splice(depth, item):\n    if depth == 0:\n        return [item]\n    else:\n        return concat([splice(depth-1, subitem) for subitem in item])\n\ndef concat(lists):\n    return [x for xs in lists for x in xs]\n\ndef join(items):\n    return \"\".join(\n        join(item) if isinstance(item, list) else str(item)\n        for item in items\n    )\n\ndef indent(text):\n    return join(join([\"    \", line]) for line in text.splitlines(True))\n",
"type":"code"
}
],
"id":"d2549d686eb344199b32987ab1f45eff",
"language":"",
"type":"code"
}
],
"title":"support.py"
},
{
"children":[],
"id":"7142a9c9c93e4aa2aaf35c7962eb3c88",
"paragraphs":[
{
"chunkpath":[],
"filepath":[
"compile.sh"
],
"fragments":[
{
"text":"#!/bin/bash\n\nset -e\n\nrlmeta_compiler=\"$1\"\n\nto_python_string() {\n    python -c 'import sys; sys.stdout.write(repr(sys.stdin.read()))'\n}\n\nsupport_py_string=$(to_python_string < support.py)\nsupport_py=$(python \"$rlmeta_compiler\" --support)\nparser_py=$(python \"$rlmeta_compiler\" < parser.rlmeta)\ncodegenerator_py=$(python \"$rlmeta_compiler\" < codegenerator.rlmeta)\n\ncat <<EOF\nimport sys\nimport pprint\n\nSUPPORT = $support_py_string\n\n$support_py\n\n$parser_py\n\n$codegenerator_py\n\nif __name__ == \"__main__\":\n    if \"--support\" in sys.argv:\n        sys.stdout.write(SUPPORT)\n    else:\n        try:\n            sys.stdout.write(\n                CodeGenerator().run(\n                    \"ast\",\n                    [Parser().run(\"grammar\", sys.stdin.read())]\n                )\n            )\n        except MatchError as e:\n            stream = e.stream\n            for pos in e.pos[:-1]:\n                stream = stream[pos]\n            pos = e.pos[-1]\n            MARKER = \"\\\\033[0;31m<ERROR POSITION>\\\\033[0m\"\n            if isinstance(stream, basestring):\n                stream_string = stream[:pos] + MARKER + stream[pos:]\n            else:\n                stream_string = pprint.pformat(stream)\n            sys.exit(\"ERROR: {}\\\\nPOSITION: {}\\\\nSTREAM:\\\\n{}\".format(\n              e.message,\n              pos,\n              indent(stream_string)\n            ))\nEOF\n",
"type":"code"
}
],
"id":"76749a4bf2c446069218a8573568dc2b",
"language":"",
"type":"code"
}
],
"title":"compile.sh"
},
{
"children":[],
"id":"8c47ff964a3f43a29a4413bbf5b0132d",
"paragraphs":[
{
"chunkpath":[],
"filepath":[
"meta_compile.sh"
],
"fragments":[
{
"text":"#!/bin/bash\n\nset -e\n\n./compile.sh rlmeta.py > rlmeta1.py\n\n./compile.sh rlmeta1.py > rlmeta2.py\n\n./compile.sh rlmeta2.py > rlmeta3.py\n\n./compile.sh rlmeta3.py > rlmeta4.py\n\necho \"Test: Reproduces itself\"\ndiff rlmeta3.py rlmeta4.py\n\necho \"Test: Has its own support library embedded\"\ndiff support.py <(python rlmeta4.py --support)\n\necho \"Test: Error reporting string input\"\necho \"Grammar { foo = . \" | python rlmeta4.py && false\n\nmv rlmeta4.py rlmeta3.py\n\nmv rlmeta3.py rlmeta2.py\n\nmv rlmeta2.py rlmeta1.py\n\nmv rlmeta1.py rlmeta.py\n\necho \"OK\"\n",
"type":"code"
}
],
"id":"93ea6d553d104afdb03637cee08213f9",
"language":"",
"type":"code"
}
],
"title":"meta_compile.sh"
}
],
"id":"730eea3f33b24e07b3714ef4c1981fd1",
"paragraphs":[
{
"fragments":[
{
"text":"The code here is exactly the same as on the poster. The ",
"type":"text"
},
{
"text":"meta_compile.sh",
"type":"code"
},
{
"text":" script is not shown on the poster since it is not strictly part of the implementation. It is more of a developer tool.",
"type":"text"
}
],
"id":"de3f4b2b8eec4e45a64ac2d13bde7f4a",
"type":"text"
}
],
"title":"Code listings for RLMeta"
}
],
"id":"41705a9531784b16b88f363b083897d9",
"paragraphs":[
{
"fragments":[
{
"text":"This is a work in progress for a possible second version of the RLMeta poster.",
"type":"text"
}
],
"id":"2c9aef343ccb47319da689f21864db10",
"type":"text"
}
],
"title":"RLMeta poster 2"
},
"variables":{}
}