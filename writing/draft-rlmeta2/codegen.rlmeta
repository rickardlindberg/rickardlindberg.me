CodeGenerator {
  ast =
    | ["Grammar" .:x ast*:xs]       -> { 'class ' x '(_RLMeta):\n' > xs < }
    | ["Rule" .:x ast:x]            -> { 'def ' x '(self):\n' > 'return ' x '()\n' < }
    | ["Or" asListItem*:xs]         -> { '(lambda: self._or([\n' > xs < ']))' }
    | ["And" asListItem*:xs]        -> { '(lambda: self._and([\n' > xs < '])' }
    | ["Scope" ast:x]               -> { '(lambda: (lambda _vars:\n' > x < ')(_Vars()))' }
    | ["Binding" .:x ast:y]         -> { '(lambda: _vars.bind(' x ', ' y '()'))' }
    | ["Star" ast:x]                -> { '(lambda: self._star(' x '))' }
    | ["Not" ast:x]                 -> { '(lambda: self._negative_lookahead(' x '))' }
    | ["Application" .:x]           -> { 'self.' x }
    | ["MatchString" .:x]           -> { '(lambda: self._match_string(' repr(x) '))' }
    | ["MatchCharsec" .:x]          -> { '(lambda: self._match_charsec(' repr(x) '))' }
    | ["Any"]                       -> { 'self._any' }
    | ["Action" ast:x]              -> { '(lambda: ' x '())' }
    ;
  asListItem = ast:x                -> { x ',\n' };
}
