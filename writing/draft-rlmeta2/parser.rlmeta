Parser {
  grammar =
    | name:x space '{' rule*:ys space '}'      -> ["Grammar" x ~ys]
    ;
  rule =
    | name:x space '=' choices:y space ';'     -> ["Rule" x y]
    ;
  choices =
    | (space '|' | nothing) sequence:x
      (space '|' sequence)*:xs                 -> ["Or" x ~xs]
    ;
  sequence =
    | expr:x expr*:xs                          -> ["And" x ~xs]
    ;
  expr =
    | expr1:x ':' name:y                       -> ["Binding" y x]
    | expr1:x
    ;
  expr1 =
    | expr2:x space '*'                        -> ["Star" x]
    | space '!' expr2:x                        -> ["Not" x]
    | expr2
    ;
  expr2 =
    | space '->' return:x                      -> ["Action" x]
    | name:x                                   -> ["Application" x]
    | string:x                                 -> ["MatchString" x]
    | charseq:x                                -> ["MatchCharsec" x]
    | space 'nothing' ![A-Za-z0-9]             -> ["Nothing"]
    | space '.'                                -> ["Any"]
    | space '(' choices:x space ')'            -> ["Anonymous" x]
    | space '[' charClass*:xs space ']'        -> ["Or" ~xs]
    ;
  charClass =
    | char:x '-' char:y                        -> ["Range" x y]
    | char:x                                   -> ["MatchCharsec" x]
    ;
  return =
    | string:x                                 -> ["RetString" x]
    | charseq:x                                -> ["RetString" x]
    | space '[' returnListItem*:xs space ']'   -> ["RetList" ~xs]
    | space '{' stringBuild*:xs space '}'      -> ["RetBuilder" ~xs]
    | name:x '(' return*:xs ')'                -> ["RetCall" x ~xs]
    | name:x                                   -> ["RetVar" x]
    ;
  returnListItem =
    | space '~' name:x                         -> ["RetListItem" x]
    | return
    ;
  stringBuild =
    | space '>'                                -> ["RetIndent"]
    | space '<'                                -> ["RetDedent"]
    | return
    ;
  string   = space '"' (!'"' char)*:xs '"'     -> join(xs);
  charseq  = space '\'' (!'\'' char)*:xs '\''  -> join(xs);
  char     = '\\' escape | .;
  escape   = '\\' -> "\\" | '\'' -> "'"
           | '"'  -> "\"" | 'n'  -> "\n";
  name     = [a-zA-Z]:x [a-zA-Z0-9]*:xs        -> join([x ~xs]);
  space    = [ \t\n]*;
}
