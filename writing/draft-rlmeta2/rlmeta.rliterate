{
"root_page":{
"children":[
{
"children":[],
"id":"b4f6655bfb5e499997a0b1be8aa83d22",
"paragraphs":[
{
"fragments":[
{
"text":"The first example of RLMeta is a calculator. It recognizes basic arithmetic expressions and evaluates them. It is an interpreter for arithmetic expressions.",
"type":"text"
}
],
"id":"42f1925ded884308b12da0798d94b61e",
"type":"text"
},
{
"fragments":[
{
"text":"Overview of calculator interpreter.",
"type":"text"
}
],
"id":"a87979cf689944828bf1cc0b51214466",
"image_base64":"",
"type":"image"
},
{
"fragments":[
{
"text":"The grammar (written in RLMeta) looks like this:",
"type":"text"
}
],
"id":"dce094fd38c74606ae9b947632c01a81",
"type":"text"
},
{
"chunkpath":[],
"filepath":[
"calculator.rlmeta"
],
"fragments":[
{
"text":"Calculator {\n  expression =\n    | additive\n  additive =\n    | multitive:x '+' additive:y ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> add(x y)\n    | multitive\n  multitive =\n    | digit:x '*' multitive:y ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> mul(x y)\n    | digit\n  digit =\n    | '0'-'9':x ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> int(x)\n}\n",
"type":"code"
}
],
"id":"b54646c61b3f4216929bc173be5f6430",
"type":"code"
},
{
"fragments":[
{
"text":"TODO: Explain grammar.",
"type":"strong"
}
],
"id":"05e6285771874bfea5734ba3ff65aed3",
"type":"text"
},
{
"fragments":[
{
"text":"When you feed the calculator grammar to the RLMeta compiler, you get a program that is an interpreter for arithmetic expressions.",
"type":"text"
}
],
"id":"63a18e34ac1c4a7fba249b421fd031df",
"type":"text"
},
{
"fragments":[
{
"text":"Overview of calculator compilation.",
"type":"text"
}
],
"id":"b87e6570816a4e75a51c9dcb035fc2fb",
"image_base64":"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",
"type":"image"
},
{
"fragments":[
{
"text":"More specifically, the program is a Python class. The class depends on a support library and also on the host functions that you called in the grammar (",
"type":"text"
},
{
"text":"add",
"type":"code"
},
{
"text":", ",
"type":"text"
},
{
"text":"mul",
"type":"code"
},
{
"text":", and ",
"type":"text"
},
{
"text":"int",
"type":"code"
},
{
"text":"). Here is a script that compiles the calculator grammar to a Python program that gives you a REPL for arithmetic expressions:",
"type":"text"
}
],
"id":"186ed1d9c38546ef9ba79650ac0fc56c",
"type":"text"
},
{
"chunkpath":[],
"filepath":[
"compile_calculator.sh"
],
"fragments":[
{
"text":"#!/bin/sh\n\nset -e\n\n",
"type":"code"
},
{
"id":"5b90ab050b7547de847cab210d087685",
"type":"variable"
},
{
"text":"=$(python rlmeta.py --support)\n",
"type":"code"
},
{
"id":"3f3db8526d034826bb4d672abcc6029c",
"type":"variable"
},
{
"text":"=$(cat calculator.rlmeta | python rlmeta.py)\n\ncat <<EOF\n",
"type":"code"
},
{
"path":[
"calculator python file"
],
"prefix":"",
"type":"chunk"
},
{
"text":"EOF\n",
"type":"code"
}
],
"id":"1c648bdb39f54ee7ad86680530851375",
"type":"code"
},
{
"chunkpath":[
"calculator python file"
],
"filepath":[
"compile_calculator.sh"
],
"fragments":[
{
"text":"import sys\nfrom operator import add, mul\n\n$",
"type":"code"
},
{
"id":"5b90ab050b7547de847cab210d087685",
"type":"variable"
},
{
"text":"\n\n$",
"type":"code"
},
{
"id":"3f3db8526d034826bb4d672abcc6029c",
"type":"variable"
},
{
"text":"\n\nif __name__ == \"__main__\":\n    calculator = Calculator(logger=sys.stderr.write)\n    while True:\n        line = raw_input(\"> \")\n        print(calculator.run(\"expression\", line))\n",
"type":"code"
}
],
"id":"06fd6fc7c27940cda1755a1aec2fa358",
"type":"code"
},
{
"fragments":[
{
"text":"Example usage on the command line:",
"type":"text"
}
],
"id":"ec28001fbeda4bcca184b932f518b619",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"$ python <(./compile_calculator.sh)\n> 1+2*3\n7\n",
"type":"code"
}
],
"id":"46d623c62dc74aa981d97d3abc9b8848",
"type":"code"
},
{
"fragments":[
{
"text":"TODO: Include live demo that readers can play with.",
"type":"strong"
}
],
"id":"476723b2b7e046a4a2c0b809b1ce4bfc",
"type":"text"
}
],
"title":"Calculator"
},
{
"children":[],
"id":"25d640e9b62e4609b81d5b50b20a4433",
"paragraphs":[
{
"fragments":[
{
"text":"The second example of RLMeta is a tree to html list conversion.",
"type":"text"
}
],
"id":"dfa7b345cb3d438fb3a3a5b0dcb2c4de",
"type":"text"
},
{
"chunkpath":[],
"filepath":[
"treeprinter.rlmeta"
],
"fragments":[
{
"text":"TreePrinter {\n  toHtmlList =\n    | toHtmlListItem*:xs ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { \"<ul>\" xs \"</ul>\" ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n  toHtmlListItem =\n    | node:x ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { \"<li>\" x \"</li>\" ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n  node =\n    | [atom:x toHtmlList:ys] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { x ys ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n    | atom\n  atom =\n    | .:x ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { escape(str(x)) ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n}\n",
"type":"code"
}
],
"id":"d165ef81494a41418ee8f45c8713747e",
"type":"code"
},
{
"fragments":[
{
"text":"TODO: Explain grammar.",
"type":"strong"
}
],
"id":"1860e1a66a5247a2b706215a08e2584a",
"type":"text"
},
{
"chunkpath":[],
"filepath":[
"compile_treeprinter.sh"
],
"fragments":[
{
"text":"#!/bin/sh\n\nset -e\n\n",
"type":"code"
},
{
"id":"5b90ab050b7547de847cab210d087685",
"type":"variable"
},
{
"text":"=$(python rlmeta.py --support)\n",
"type":"code"
},
{
"id":"092fb427436241669092a2244dc64c33",
"type":"variable"
},
{
"text":"=$(cat treeprinter.rlmeta | python rlmeta.py)\n\ncat <<EOF\n",
"type":"code"
},
{
"blank_lines_before":0,
"path":[
"tree printer python file"
],
"prefix":"",
"type":"chunk"
},
{
"text":"EOF\n",
"type":"code"
}
],
"id":"5692e34d66f94e2dbe414b94f733367d",
"type":"code"
},
{
"chunkpath":[
"tree printer python file"
],
"filepath":[
"compile_treeprinter.sh"
],
"fragments":[
{
"text":"import sys\nimport xml.sax.saxutils\n\n$",
"type":"code"
},
{
"id":"5b90ab050b7547de847cab210d087685",
"type":"variable"
},
{
"text":"\n\n$",
"type":"code"
},
{
"id":"092fb427436241669092a2244dc64c33",
"type":"variable"
},
{
"text":"\n\nescape = xml.sax.saxutils.escape\n\nif __name__ == \"__main__\":\n    calculator = TreePrinter(logger=sys.stderr.write)\n    while True:\n        object = input(\"> \")\n        print(calculator.run(\"toHtmlList\", object))\n",
"type":"code"
}
],
"id":"13c77f287eb44d35acfad89688519b81",
"type":"code"
},
{
"fragments":[
{
"text":"TODO: Include live demo that readers can play with.",
"type":"strong"
}
],
"id":"b7746a4fed574eee9c8934472a5a81f5",
"type":"text"
}
],
"title":"Tree printer"
},
{
"children":[
{
"children":[
{
"children":[],
"id":"a757df1ad1764cc996d9d3e0a0ce4d25",
"paragraphs":[
{
"fragments":[
{
"text":"The top level syntactic elements are grammars. Grammars have a ",
"type":"text"
},
{
"page_id":"19acecc9fbc44023a69cea9eadbe734d",
"text":null,
"type":"reference"
},
{
"text":" and a set of ",
"type":"text"
},
{
"page_id":"e1799ddc14ce4a7f83c8f390f9bf8720",
"text":null,
"type":"reference"
},
{
"text":" enclosed in curly braces. ",
"type":"text"
},
{
"page_id":"d729731e037a4a5aafa6da77d2b8bdb1",
"text":null,
"type":"reference"
},
{
"text":" is ignored. When such a sequence is matched a ",
"type":"text"
},
{
"id":"2aa377816ed3486da72cff7bd46190ad",
"type":"variable"
},
{
"text":" AST node is created containing the name of the grammar and the list of ",
"type":"text"
},
{
"page_id":"e1799ddc14ce4a7f83c8f390f9bf8720",
"text":null,
"type":"reference"
},
{
"text":" AST nodes:",
"type":"text"
}
],
"id":"8de82ec3c0f34c94af9bfc418229357e",
"type":"text"
},
{
"chunkpath":[
"rules"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"id":"42f0b42533be4f7eb54c04f22a137669",
"type":"variable"
},
{
"text":" =\n  | ",
"type":"code"
},
{
"id":"8a8e32dcfa5545f7aa292dd7e696030a",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '{' ",
"type":"code"
},
{
"id":"c8edc6f14d27480e9f737a7697f07f07",
"type":"variable"
},
{
"text":"*:ys ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '}' ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"2aa377816ed3486da72cff7bd46190ad",
"type":"variable"
},
{
"text":"\" x ~ys]\n",
"type":"code"
}
],
"id":"41afd1b3bc8749a2bdefb2a09eb54f62",
"type":"code"
}
],
"title":"Grammar"
},
{
"children":[],
"id":"e1799ddc14ce4a7f83c8f390f9bf8720",
"paragraphs":[
{
"fragments":[
{
"text":"Inside grammars are rules. Rules have a ",
"type":"text"
},
{
"page_id":"19acecc9fbc44023a69cea9eadbe734d",
"text":null,
"type":"reference"
},
{
"text":" followed by the equal sign followed by ",
"type":"text"
},
{
"page_id":"c2a43ebb9a7d477f8dd7126f94bd33de",
"text":null,
"type":"reference"
},
{
"text":". ",
"type":"text"
},
{
"page_id":"d729731e037a4a5aafa6da77d2b8bdb1",
"text":null,
"type":"reference"
},
{
"text":" is ignored. When such a sequence is found a ",
"type":"text"
},
{
"id":"e22fa3c5d4144197906cbb74af6cc83e",
"type":"variable"
},
{
"text":" AST node is created:",
"type":"text"
}
],
"id":"5e9600e66ce74fa18b69b96917889a6f",
"type":"text"
},
{
"chunkpath":[
"rules"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"id":"c8edc6f14d27480e9f737a7697f07f07",
"type":"variable"
},
{
"text":" =\n  | ",
"type":"code"
},
{
"id":"8a8e32dcfa5545f7aa292dd7e696030a",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '=' ",
"type":"code"
},
{
"id":"7d667137ca2f4350969bcf2044d677de",
"type":"variable"
},
{
"text":":y ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"e22fa3c5d4144197906cbb74af6cc83e",
"type":"variable"
},
{
"text":"\" x y]\n",
"type":"code"
}
],
"id":"f24d0daa1d1c4ddeb6b111c45aa31102",
"type":"code"
}
],
"title":"Rule"
},
{
"children":[],
"id":"c2a43ebb9a7d477f8dd7126f94bd33de",
"paragraphs":[
{
"fragments":[
{
"text":"Inside rules are choices. Choices has a set of ",
"type":"text"
},
{
"page_id":"08818eb200d0482f8feb9104e1ae2ea7",
"text":null,
"type":"reference"
},
{
"text":" separated by a pipe character. Optionally the first choice can start with a pipe character to allow all choice lines to look the same. ",
"type":"text"
},
{
"page_id":"d729731e037a4a5aafa6da77d2b8bdb1",
"text":null,
"type":"reference"
},
{
"text":" is ignored. When such a sequence is found an ",
"type":"text"
},
{
"id":"efa7dd37aa9e46908ed34f8d31cd476d",
"type":"variable"
},
{
"text":" AST node is created:",
"type":"text"
}
],
"id":"77e39db8bc6944b8afb793e3fcf28e88",
"type":"text"
},
{
"chunkpath":[
"rules"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"id":"7d667137ca2f4350969bcf2044d677de",
"type":"variable"
},
{
"text":" =\n  | (",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '|')?\n    ",
"type":"code"
},
{
"id":"7f941dd526284ccc8143dbbc8ae8df3b",
"type":"variable"
},
{
"text":":x (",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '|' ",
"type":"code"
},
{
"id":"7f941dd526284ccc8143dbbc8ae8df3b",
"type":"variable"
},
{
"text":")*:xs ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"efa7dd37aa9e46908ed34f8d31cd476d",
"type":"variable"
},
{
"text":"\" x ~xs]\n",
"type":"code"
}
],
"id":"5548c68fed5947a891639cab8086cba5",
"type":"code"
}
],
"title":"Choices"
},
{
"children":[],
"id":"08818eb200d0482f8feb9104e1ae2ea7",
"paragraphs":[
{
"fragments":[
{
"text":"A sequence has one or more ",
"type":"text"
},
{
"page_id":"5fca8ddb3f88457bbe5217fa1ebf4383",
"text":null,
"type":"reference"
},
{
"text":". When such a sequence is found an ",
"type":"text"
},
{
"id":"8d17eff4871e411793cf0daf3a2ab204",
"type":"variable"
},
{
"text":" AST node is created wrapped in a ",
"type":"text"
},
{
"id":"b845c4cee1734619991d56de83dce37d",
"type":"variable"
},
{
"text":" AST node:",
"type":"text"
}
],
"id":"a9761a1483114aebbdab2d94006de2cf",
"type":"text"
},
{
"chunkpath":[
"rules"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"id":"7f941dd526284ccc8143dbbc8ae8df3b",
"type":"variable"
},
{
"text":" =\n  | ",
"type":"code"
},
{
"id":"dfcaa421bd764cce9d99219c61883a45",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"id":"dfcaa421bd764cce9d99219c61883a45",
"type":"variable"
},
{
"text":"*:xs ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"b845c4cee1734619991d56de83dce37d",
"type":"variable"
},
{
"text":"\" [\"",
"type":"code"
},
{
"id":"8d17eff4871e411793cf0daf3a2ab204",
"type":"variable"
},
{
"text":"\" x ~xs]]\n",
"type":"code"
}
],
"id":"a00b4131f7794b6cb496a4e8249dc9d2",
"type":"code"
}
],
"title":"Sequence"
},
{
"children":[],
"id":"5fca8ddb3f88457bbe5217fa1ebf4383",
"paragraphs":[
{
"chunkpath":[
"rules"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"id":"dfcaa421bd764cce9d99219c61883a45",
"type":"variable"
},
{
"text":" =\n",
"type":"code"
},
{
"path":[
"expr"
],
"prefix":"  ",
"type":"chunk"
},
{
"text":"  | ",
"type":"code"
},
{
"id":"0449532c17204462b4b4681b07ac12b5",
"type":"variable"
},
{
"text":"\n",
"type":"code"
}
],
"id":"f1365e28cce74941892cdaa24ba6d2ad",
"type":"code"
},
{
"chunkpath":[
"rules",
"expr"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"text":"| ",
"type":"code"
},
{
"id":"0449532c17204462b4b4681b07ac12b5",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" ':' ",
"type":"code"
},
{
"id":"8a8e32dcfa5545f7aa292dd7e696030a",
"type":"variable"
},
{
"text":":y ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"6a519019bfac49598dc36620b5b58811",
"type":"variable"
},
{
"text":"\" y x]\n",
"type":"code"
}
],
"id":"e2bbebd2652749d69135a786b213433c",
"type":"code"
}
],
"title":"Expression"
},
{
"children":[],
"id":"cdeac4c7bcb84261a3d194c1183c9dd7",
"paragraphs":[
{
"chunkpath":[
"rules"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"id":"0449532c17204462b4b4681b07ac12b5",
"type":"variable"
},
{
"text":" =\n",
"type":"code"
},
{
"path":[
"expr1"
],
"prefix":"  ",
"type":"chunk"
},
{
"text":"  | ",
"type":"code"
},
{
"id":"bd6daaaf4f8a47a1991da45be10921c3",
"type":"variable"
},
{
"text":"\n",
"type":"code"
}
],
"id":"101abf29d86c4c4a82e5d95c13318ec9",
"type":"code"
},
{
"chunkpath":[
"rules",
"expr1"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"text":"| ",
"type":"code"
},
{
"id":"bd6daaaf4f8a47a1991da45be10921c3",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '*' ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"60d7dacf2a2b4336b0329665c2026cc0",
"type":"variable"
},
{
"text":"\" x]\n",
"type":"code"
}
],
"id":"0cb52720d8524ebaa24d9853d0fbfa78",
"type":"code"
},
{
"chunkpath":[
"rules",
"expr1"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"text":"| ",
"type":"code"
},
{
"id":"bd6daaaf4f8a47a1991da45be10921c3",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '?' ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"630b364d3e7345c098bc8cff819f4d99",
"type":"variable"
},
{
"text":"\" x [\"",
"type":"code"
},
{
"id":"736cd2768dcd4843b43aca56bea200d3",
"type":"variable"
},
{
"text":"\"]]\n",
"type":"code"
}
],
"id":"11d2b95572e24714ba973c1e7a225282",
"type":"code"
},
{
"chunkpath":[
"rules",
"expr1"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"text":"| ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '!' ",
"type":"code"
},
{
"id":"bd6daaaf4f8a47a1991da45be10921c3",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"bc27a67cb10b4650a32bfe7af84c5060",
"type":"variable"
},
{
"text":"\" x]\n",
"type":"code"
}
],
"id":"e56a131ffdbe4a649a3e11d1e589a76d",
"type":"code"
}
],
"title":"Expression level 1"
},
{
"children":[],
"id":"4e76262e4c9841db8c0b79401ac7a8ff",
"paragraphs":[
{
"chunkpath":[
"rules"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"id":"bd6daaaf4f8a47a1991da45be10921c3",
"type":"variable"
},
{
"text":" =\n",
"type":"code"
},
{
"path":[
"expr2"
],
"prefix":"  ",
"type":"chunk"
}
],
"id":"f05c9406eceb4daab6c376ababdb1679",
"type":"code"
},
{
"chunkpath":[
"rules",
"expr2"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"text":"| ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '->' ",
"type":"code"
},
{
"id":"dd463f369f79475da606b1cfc2d96076",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"373f023f0f5f4744a7b309cf9a76d138",
"type":"variable"
},
{
"text":"\" x]\n",
"type":"code"
}
],
"id":"abbc1c45efe94a719d1fe1ab62ca8a49",
"type":"code"
},
{
"chunkpath":[
"rules",
"expr2"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"text":"| ",
"type":"code"
},
{
"id":"8a8e32dcfa5545f7aa292dd7e696030a",
"type":"variable"
},
{
"text":":x !(",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '=') ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"4852ced8038c4074a5a8104b8596e0e0",
"type":"variable"
},
{
"text":"\" x]\n",
"type":"code"
}
],
"id":"ec59067ab11540bfa013d3856c713db8",
"type":"code"
},
{
"chunkpath":[
"rules",
"expr2"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"text":"| ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"id":"793e09d183c5498fa2587841cd94c126",
"type":"variable"
},
{
"text":":x '-' ",
"type":"code"
},
{
"id":"793e09d183c5498fa2587841cd94c126",
"type":"variable"
},
{
"text":":y ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"6860db9e40994ebfbe04834b4f12f721",
"type":"variable"
},
{
"text":"\" x y]\n",
"type":"code"
}
],
"id":"c450a47241a448689d950257aa817da7",
"type":"code"
},
{
"chunkpath":[
"rules",
"expr2"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"text":"| ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"id":"7d82aaa0f3d34c059532d7a090654ab7",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"10d9c2de82a14d12bd545133bd4e15f8",
"type":"variable"
},
{
"text":"\" x]\n",
"type":"code"
}
],
"id":"2e68adc773b945baa4039acf18cb9408",
"type":"code"
},
{
"chunkpath":[
"rules",
"expr2"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"text":"| ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"id":"a864d6cb43244a1ca536085dd92431af",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"8ff0b4980efa4e349ec5ef14815be6ec",
"type":"variable"
},
{
"text":"\" x]\n",
"type":"code"
}
],
"id":"bda22384f17e40ea8edd13f87f8b9f8c",
"type":"code"
},
{
"chunkpath":[
"rules",
"expr2"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"text":"| ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '.' ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"25ec6fc64b8b4a39a9df41daa690386f",
"type":"variable"
},
{
"text":"\"]\n",
"type":"code"
}
],
"id":"cefd75a91eac4a14bda7f8123c41dd8f",
"type":"code"
},
{
"chunkpath":[
"rules",
"expr2"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"text":"| ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '(' ",
"type":"code"
},
{
"id":"7d667137ca2f4350969bcf2044d677de",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" ')' ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> x\n",
"type":"code"
}
],
"id":"c013d1870d9d4a42bf491400b4d40ef9",
"type":"code"
},
{
"chunkpath":[
"rules",
"expr2"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"text":"| ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '[' ",
"type":"code"
},
{
"id":"dfcaa421bd764cce9d99219c61883a45",
"type":"variable"
},
{
"text":"*:xs ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" ']' ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"0c1a9537d33148388015163fc90329b3",
"type":"variable"
},
{
"text":"\" [\"",
"type":"code"
},
{
"id":"8d17eff4871e411793cf0daf3a2ab204",
"type":"variable"
},
{
"text":"\" ~xs]]\n",
"type":"code"
}
],
"id":"90062785865d4c69bf5b887ef2dc3977",
"type":"code"
}
],
"title":"Expression level 2"
},
{
"children":[],
"id":"768d143c206146ca8efba292c6e9169b",
"paragraphs":[
{
"chunkpath":[
"rules"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"id":"dd463f369f79475da606b1cfc2d96076",
"type":"variable"
},
{
"text":" =\n",
"type":"code"
},
{
"path":[
"hostExpr"
],
"prefix":"  ",
"type":"chunk"
}
],
"id":"f0b031c3724e42c5a0fb9704ef64976d",
"type":"code"
},
{
"chunkpath":[
"rules",
"hostExpr"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"text":"| ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"id":"7d82aaa0f3d34c059532d7a090654ab7",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"301f08856bf54373bc5975f75a315105",
"type":"variable"
},
{
"text":"\" x]\n",
"type":"code"
}
],
"id":"4e8a93fe7e314817be5d38733f388eb0",
"type":"code"
},
{
"fragments":[
{
"text":"Character sequence is just another way to say a string:",
"type":"text"
}
],
"id":"0044d259ce224f5eb078f8b0ac349194",
"type":"text"
},
{
"chunkpath":[
"rules",
"hostExpr"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"text":"| ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"id":"a864d6cb43244a1ca536085dd92431af",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"301f08856bf54373bc5975f75a315105",
"type":"variable"
},
{
"text":"\" x]\n",
"type":"code"
}
],
"id":"2160b0ae8ebd40b48f737d38078bfc4c",
"type":"code"
},
{
"chunkpath":[
"rules",
"hostExpr"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"text":"| ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '[' ",
"type":"code"
},
{
"id":"fe84c1eea3fc4476bbcb1c717c92d43b",
"type":"variable"
},
{
"text":"*:xs ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" ']' ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"49ba1aa1e24e408ba2b32bff68a72840",
"type":"variable"
},
{
"text":"\" ~xs]\n",
"type":"code"
}
],
"id":"cd1e8eee75404c96b632dc01c89fa462",
"type":"code"
},
{
"chunkpath":[
"rules"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"id":"fe84c1eea3fc4476bbcb1c717c92d43b",
"type":"variable"
},
{
"text":" =\n  | ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '~' ",
"type":"code"
},
{
"id":"dd463f369f79475da606b1cfc2d96076",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"cf8770da147840679077788180e10778",
"type":"variable"
},
{
"text":"\" x]\n  | ",
"type":"code"
},
{
"id":"dd463f369f79475da606b1cfc2d96076",
"type":"variable"
},
{
"text":"\n",
"type":"code"
}
],
"id":"f768cf3997814c6285c98edc162e886f",
"type":"code"
},
{
"chunkpath":[
"rules",
"hostExpr"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"text":"| ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '{' ",
"type":"code"
},
{
"id":"ae2f859206d741eca9f5e10495cb8095",
"type":"variable"
},
{
"text":"*:xs ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '}' ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"c9ecfed5791644a3b7ea2122d4ed87c9",
"type":"variable"
},
{
"text":"\" ~xs]\n",
"type":"code"
}
],
"id":"f2c2d41020ba4ad096e1c27393549301",
"type":"code"
},
{
"chunkpath":[
"rules"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"id":"ae2f859206d741eca9f5e10495cb8095",
"type":"variable"
},
{
"text":" =\n  | ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '>' ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"d34e449a8ca740d0a4b84921fc05b25f",
"type":"variable"
},
{
"text":"\"]\n  | ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '<' ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"7b75cb86cab34645b43d69d790e6e206",
"type":"variable"
},
{
"text":"\"]\n  | ",
"type":"code"
},
{
"id":"dd463f369f79475da606b1cfc2d96076",
"type":"variable"
},
{
"text":"\n",
"type":"code"
}
],
"id":"a3c04d0cc65d41c8af8017af890e7ea4",
"type":"code"
},
{
"chunkpath":[
"rules",
"hostExpr"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"text":"| ",
"type":"code"
},
{
"id":"8a8e32dcfa5545f7aa292dd7e696030a",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '(' ",
"type":"code"
},
{
"id":"dd463f369f79475da606b1cfc2d96076",
"type":"variable"
},
{
"text":"*:ys ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" ')' ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"0a8e6be4bec3466bb658d7d4ff5bc5fd",
"type":"variable"
},
{
"text":"\" x ~ys]\n",
"type":"code"
}
],
"id":"009c0123d4f84ea7bc5b644789e03d58",
"type":"code"
},
{
"chunkpath":[
"rules",
"hostExpr"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"text":"| ",
"type":"code"
},
{
"id":"8a8e32dcfa5545f7aa292dd7e696030a",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"ae823ab23224415f9a539b0354f311b8",
"type":"variable"
},
{
"text":"\" x]\n",
"type":"code"
}
],
"id":"e4954a411cdc4eee98faa1985f1de417",
"type":"code"
}
],
"title":"Host expression"
},
{
"children":[],
"id":"2057abb618bf4209950acd87fa49da5d",
"paragraphs":[
{
"chunkpath":[
"rules"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"id":"7d82aaa0f3d34c059532d7a090654ab7",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"index":5,
"type":"tabstop"
},
{
"text":"= '\"'  (!'\"'  ",
"type":"code"
},
{
"id":"e1248cbd01c54a1680793b61e7a048e1",
"type":"variable"
},
{
"text":")*:xs '\"' ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> join(xs)\n",
"type":"code"
}
],
"id":"6b45edfd3ac04273aa9498dfcaa199fa",
"type":"code"
},
{
"chunkpath":[
"rules"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"id":"a864d6cb43244a1ca536085dd92431af",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"index":5,
"type":"tabstop"
},
{
"text":"= '\\'' (!'\\'' ",
"type":"code"
},
{
"id":"e1248cbd01c54a1680793b61e7a048e1",
"type":"variable"
},
{
"text":")*:xs '\\'' ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> join(xs)\n",
"type":"code"
}
],
"id":"b3ea44957e4148ab9ded5e09fbe0fcab",
"type":"code"
},
{
"chunkpath":[
"rules"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"id":"793e09d183c5498fa2587841cd94c126",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"index":5,
"type":"tabstop"
},
{
"text":"= '\\''  !'\\'' ",
"type":"code"
},
{
"id":"e1248cbd01c54a1680793b61e7a048e1",
"type":"variable"
},
{
"text":"  :x  '\\'' ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> join(x)\n",
"type":"code"
}
],
"id":"f33996b91f214a82b9bc2e4a0c75ffff",
"type":"code"
},
{
"chunkpath":[
"rules"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"id":"e1248cbd01c54a1680793b61e7a048e1",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"index":5,
"type":"tabstop"
},
{
"text":"= '\\\\' ",
"type":"code"
},
{
"id":"4e5409ddd4a34450b3c8b4cb8bc5dd60",
"type":"variable"
},
{
"text":" | .\n",
"type":"code"
}
],
"id":"65a3e78796854dcea2b7634d2a67bc4c",
"type":"code"
},
{
"chunkpath":[
"rules"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"id":"4e5409ddd4a34450b3c8b4cb8bc5dd60",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"index":5,
"type":"tabstop"
},
{
"text":"= '\\\\' -> \"\\\\\" | '\\'' -> \"'\"\n",
"type":"code"
},
{
"index":5,
"type":"tabstop"
},
{
"text":"| '\"'  -> \"\\\"\" | 'n'  -> \"\\n\"\n",
"type":"code"
},
{
"index":5,
"type":"tabstop"
},
{
"text":"| 't'  -> \"\\t\"\n",
"type":"code"
}
],
"id":"ec0bcd3b02bf4077aa889dabf912dbb0",
"type":"code"
}
],
"title":"Character related"
},
{
"children":[],
"id":"19acecc9fbc44023a69cea9eadbe734d",
"paragraphs":[
{
"chunkpath":[
"rules"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"id":"8a8e32dcfa5545f7aa292dd7e696030a",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"index":5,
"type":"tabstop"
},
{
"text":"= ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"id":"7befab3d0c5747d687b20830147a70fa",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"id":"6b1fe389a7254359b3fbe4cb26ea084e",
"type":"variable"
},
{
"text":"*:xs ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> join([x ~xs])\n",
"type":"code"
},
{
"id":"7befab3d0c5747d687b20830147a70fa",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"index":5,
"type":"tabstop"
},
{
"text":"= 'a'-'z' | 'A'-'Z'\n",
"type":"code"
},
{
"id":"6b1fe389a7254359b3fbe4cb26ea084e",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"index":5,
"type":"tabstop"
},
{
"text":"= 'a'-'z' | 'A'-'Z' | '0'-'9'\n",
"type":"code"
}
],
"id":"1c6666fb0163411abc814856a4265683",
"type":"code"
}
],
"title":"Name"
},
{
"children":[],
"id":"d729731e037a4a5aafa6da77d2b8bdb1",
"paragraphs":[
{
"chunkpath":[
"rules"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"index":5,
"type":"tabstop"
},
{
"text":"= (' ' | '\\t' | '\\n')*\n",
"type":"code"
}
],
"id":"d62875593bb44d2087124443aded53e5",
"type":"code"
}
],
"title":"Space"
},
{
"children":[],
"id":"a56c54f42c00473091d7c8295ff4e0f1",
"paragraphs":[
{
"fragments":[
{
"text":"The complete parser:",
"type":"text"
}
],
"id":"cbbb7c4cccc8418f9b22de8fe6b91c48",
"type":"text"
},
{
"code_id":"c94ba005404c45f78e7511793da8d554",
"id":"104b3c249d084df2b43eebd29698f0f9",
"type":"expanded_code"
}
],
"title":"Summary"
}
],
"id":"1e01a8bdd22d48f2a7e8533d552bc264",
"paragraphs":[
{
"fragments":[
{
"text":"The parser's job is to convert a stream of characters to an AST. Here is the template for the ",
"type":"text"
},
{
"id":"a304a36f0ab541209c9e8aa78f4edc46",
"type":"variable"
},
{
"text":" grammar:",
"type":"text"
}
],
"id":"d62cec37c77c4f7b961ad53765449159",
"type":"text"
},
{
"chunkpath":[],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"id":"a304a36f0ab541209c9e8aa78f4edc46",
"type":"variable"
},
{
"text":" {\n",
"type":"code"
},
{
"path":[
"rules"
],
"prefix":"  ",
"type":"chunk"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"c94ba005404c45f78e7511793da8d554",
"type":"code"
},
{
"fragments":[
{
"text":"The remainder of this section will fill in all the rules.",
"type":"text"
}
],
"id":"bc1ada63d87b459fbdffcd4e0b52d602",
"type":"text"
}
],
"title":"Parser"
},
{
"children":[
{
"children":[],
"id":"ed6931f4eeca4d43aaee1e9f5485a295",
"paragraphs":[
{
"fragments":[
{
"text":"When a ",
"type":"text"
},
{
"id":"2aa377816ed3486da72cff7bd46190ad",
"type":"variable"
},
{
"text":" AST node is matched a Python class with the same name is generated that inherits from ",
"type":"text"
},
{
"id":"6544a37a96ce4294ab4553709d89f398",
"type":"variable"
},
{
"text":":",
"type":"text"
}
],
"id":"e3e98686c73d4c7e8211846c6bb629bb",
"type":"text"
},
{
"chunkpath":[
"rules",
"ast"
],
"filepath":[
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"2aa377816ed3486da72cff7bd46190ad",
"type":"variable"
},
{
"text":"\" .:x ",
"type":"code"
},
{
"id":"8b98e38b093140fc956b35f6cbf5018e",
"type":"variable"
},
{
"text":"*:ys] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { 'class ' x '(",
"type":"code"
},
{
"id":"6544a37a96ce4294ab4553709d89f398",
"type":"variable"
},
{
"text":"):\\n' > ys < ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"d3c4ef9bebd64746ab898a18575fd4ac",
"type":"code"
},
{
"fragments":[
{
"text":"The base class is defined in the support library:",
"type":"text"
}
],
"id":"4e3a4349f676432aa6ab703e6cd04414",
"type":"text"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"class ",
"type":"code"
},
{
"id":"6544a37a96ce4294ab4553709d89f398",
"type":"variable"
},
{
"text":"(object):\n\n    def __init__(self, logger=None):\n        self.",
"type":"code"
},
{
"id":"938897d17c5542788155a92d7eddb73c",
"type":"variable"
},
{
"text":" = (lambda message: None) if logger is None else logger\n\n",
"type":"code"
},
{
"blank_lines_before":1,
"path":[
"_RLMeta"
],
"prefix":"    ",
"type":"chunk"
}
],
"id":"5df5c3d0f1ae47b7821a5df66bbb63dc",
"type":"code"
},
{
"fragments":[
{
"text":"Names of support classes start with an underscore to not collide with generated grammar names (which can not contain underscores).",
"type":"text"
}
],
"id":"9d189abc5e624388a08c34b923aa8f01",
"type":"text"
},
{
"fragments":[
{
"text":"Grammars in Python have a single entry point: ",
"type":"text"
},
{
"id":"2a00f6add9e9443ab98af74a6da8b379",
"type":"variable"
},
{
"text":".",
"type":"text"
}
],
"id":"955dfe1bc67f4b7ca1b109a36f56cb49",
"type":"text"
},
{
"chunkpath":[
"classes",
"_RLMeta"
],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"def ",
"type":"code"
},
{
"id":"2a00f6add9e9443ab98af74a6da8b379",
"type":"variable"
},
{
"text":"(self, rule_name, input_object):\n    self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":" = ",
"type":"code"
},
{
"id":"b4b8cb5f4cdd4dc68ecc9ca100d1da5a",
"type":"variable"
},
{
"text":".",
"type":"code"
},
{
"id":"6de4b0de9db3465b89ec2278c5c557a8",
"type":"variable"
},
{
"text":"(input_object)\n    self.",
"type":"code"
},
{
"id":"07c126c0f9094e189f37cc4ab940b0b4",
"type":"variable"
},
{
"text":" = {}\n    try:\n        result = self.",
"type":"code"
},
{
"id":"826871508bad4fecb6e575779218874d",
"type":"variable"
},
{
"text":"(rule_name).",
"type":"code"
},
{
"id":"85139f1436944deab62958b8a713d8aa",
"type":"variable"
},
{
"text":"()\n        if hasattr(result, \"",
"type":"code"
},
{
"id":"56d10f7bfcfd43bb996c3f76423b067b",
"type":"variable"
},
{
"text":"\"):\n            return result.",
"type":"code"
},
{
"id":"56d10f7bfcfd43bb996c3f76423b067b",
"type":"variable"
},
{
"text":"()\n        else:\n            return result\n    except ",
"type":"code"
},
{
"id":"df25061bb4004aa693b603f0a8ec2af2",
"type":"variable"
},
{
"text":":\n        self.",
"type":"code"
},
{
"id":"596495d8d3c041d190a3330d1707203c",
"type":"variable"
},
{
"text":"()\n        raise\n",
"type":"code"
}
],
"id":"c0bac19d60434ad2bf44cd6b70cf63ca",
"type":"code"
},
{
"chunkpath":[
"classes",
"_RLMeta"
],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"def ",
"type":"code"
},
{
"id":"596495d8d3c041d190a3330d1707203c",
"type":"variable"
},
{
"text":"(self):\n    items = []\n    for (rule_name, _), (_, start, end) in self.",
"type":"code"
},
{
"id":"07c126c0f9094e189f37cc4ab940b0b4",
"type":"variable"
},
{
"text":".items():\n        items.append((rule_name, start, end))\n    items.sort(key=lambda item: (item[2].as_key(), item[1].as_key()))\n    for item in items:\n        self.",
"type":"code"
},
{
"id":"938897d17c5542788155a92d7eddb73c",
"type":"variable"
},
{
"text":"(\"matched {: <20} {} -> {}\\n\".format(*item))\n",
"type":"code"
}
],
"id":"df47d99c26a64f7197d8d5dcfacd8838",
"type":"code"
},
{
"chunkpath":[
"classes",
"_RLMeta"
],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"def ",
"type":"code"
},
{
"id":"826871508bad4fecb6e575779218874d",
"type":"variable"
},
{
"text":"(self, rule_name):\n    key = (rule_name, self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":".",
"type":"code"
},
{
"id":"b062e0322e284160bf26034e9de32446",
"type":"variable"
},
{
"text":"())\n    if key in self.",
"type":"code"
},
{
"id":"07c126c0f9094e189f37cc4ab940b0b4",
"type":"variable"
},
{
"text":":\n        result, _, self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":" = self.",
"type":"code"
},
{
"id":"07c126c0f9094e189f37cc4ab940b0b4",
"type":"variable"
},
{
"text":"[key]\n    else:\n        start = self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":"\n        result = getattr(self, \"_rule_{}\".format(rule_name))()\n        end = self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":"\n        self.",
"type":"code"
},
{
"id":"07c126c0f9094e189f37cc4ab940b0b4",
"type":"variable"
},
{
"text":"[key] = (result, start, end)\n    return result\n",
"type":"code"
}
],
"id":"26f47b044a2d4e599f7363169fb6a0aa",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"class ",
"type":"code"
},
{
"id":"b4b8cb5f4cdd4dc68ecc9ca100d1da5a",
"type":"variable"
},
{
"text":"(object):\n\n    @classmethod\n    def ",
"type":"code"
},
{
"id":"6de4b0de9db3465b89ec2278c5c557a8",
"type":"variable"
},
{
"text":"(cls, input_object):\n        if isinstance(input_object, basestring):\n            return ",
"type":"code"
},
{
"id":"d6ed0f3ac9e84f60bae25485ddb2f97e",
"type":"variable"
},
{
"text":"(list(input_object))\n        else:\n            return ",
"type":"code"
},
{
"id":"b058347d19484740b7e2dec4816c0978",
"type":"variable"
},
{
"text":"([input_object])\n\n    def __init__(self, objects):\n        self._objects = objects\n\n    def ",
"type":"code"
},
{
"id":"b2115b3eeaa143068958949787f5d104",
"type":"variable"
},
{
"text":"(self):\n        if self.",
"type":"code"
},
{
"id":"4ad80c8d1d814fefa2656595f1d841c6",
"type":"variable"
},
{
"text":"():\n            raise ",
"type":"code"
},
{
"id":"df25061bb4004aa693b603f0a8ec2af2",
"type":"variable"
},
{
"text":"()\n        ",
"type":"code"
},
{
"id":"1f94d55a48c14180b2992433d29ace85",
"type":"variable"
},
{
"text":" = self._objects[0]\n        return (\n            ",
"type":"code"
},
{
"id":"1f94d55a48c14180b2992433d29ace85",
"type":"variable"
},
{
"text":",\n            self.",
"type":"code"
},
{
"id":"2f6729bf45e84649b3187f8016c3fec9",
"type":"variable"
},
{
"text":"(",
"type":"code"
},
{
"id":"1f94d55a48c14180b2992433d29ace85",
"type":"variable"
},
{
"text":", self._objects[1:]),\n        )\n\n    def ",
"type":"code"
},
{
"id":"4ad80c8d1d814fefa2656595f1d841c6",
"type":"variable"
},
{
"text":"(self):\n        return len(self._objects) == 0\n",
"type":"code"
}
],
"id":"b11d191c565f44ac8f6ec57f2decacfe",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"class ",
"type":"code"
},
{
"id":"d6ed0f3ac9e84f60bae25485ddb2f97e",
"type":"variable"
},
{
"text":"(",
"type":"code"
},
{
"id":"b4b8cb5f4cdd4dc68ecc9ca100d1da5a",
"type":"variable"
},
{
"text":"):\n\n    def __init__(self, objects, line=1, column=1):\n        ",
"type":"code"
},
{
"id":"b4b8cb5f4cdd4dc68ecc9ca100d1da5a",
"type":"variable"
},
{
"text":".__init__(self, objects)\n        self._line = line\n        self._column = column\n\n    def ",
"type":"code"
},
{
"id":"b062e0322e284160bf26034e9de32446",
"type":"variable"
},
{
"text":"(self):\n        return (self._line, self._column)\n\n    def ",
"type":"code"
},
{
"id":"2f6729bf45e84649b3187f8016c3fec9",
"type":"variable"
},
{
"text":"(self, ",
"type":"code"
},
{
"id":"1f94d55a48c14180b2992433d29ace85",
"type":"variable"
},
{
"text":", objects):\n        if ",
"type":"code"
},
{
"id":"1f94d55a48c14180b2992433d29ace85",
"type":"variable"
},
{
"text":" == \"\\n\":\n            return ",
"type":"code"
},
{
"id":"d6ed0f3ac9e84f60bae25485ddb2f97e",
"type":"variable"
},
{
"text":"(objects, self._line+1, 1)\n        else:\n            return ",
"type":"code"
},
{
"id":"d6ed0f3ac9e84f60bae25485ddb2f97e",
"type":"variable"
},
{
"text":"(objects, self._line, self._column+1)\n\n    def __str__(self):\n        return \"L{:03d}:C{:03d}\".format(self._line, self._column)\n",
"type":"code"
}
],
"id":"e637234d5baa4d669a60c90ce1688693",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"class ",
"type":"code"
},
{
"id":"b058347d19484740b7e2dec4816c0978",
"type":"variable"
},
{
"text":"(",
"type":"code"
},
{
"id":"b4b8cb5f4cdd4dc68ecc9ca100d1da5a",
"type":"variable"
},
{
"text":"):\n\n    def __init__(self, objects, parent=(), pos=0):\n        ",
"type":"code"
},
{
"id":"b4b8cb5f4cdd4dc68ecc9ca100d1da5a",
"type":"variable"
},
{
"text":".__init__(self, objects)\n        self._parent = parent\n        self._pos = pos\n\n    def ",
"type":"code"
},
{
"id":"b062e0322e284160bf26034e9de32446",
"type":"variable"
},
{
"text":"(self):\n        return self._parent + (self._pos,)\n\n    def ",
"type":"code"
},
{
"id":"653fc20558a64badb437b07f3d1c8490",
"type":"variable"
},
{
"text":"(self, input_object):\n        return ",
"type":"code"
},
{
"id":"b058347d19484740b7e2dec4816c0978",
"type":"variable"
},
{
"text":"(input_object, self._parent+(self._pos,))\n\n    def ",
"type":"code"
},
{
"id":"2f6729bf45e84649b3187f8016c3fec9",
"type":"variable"
},
{
"text":"(self, ",
"type":"code"
},
{
"id":"1f94d55a48c14180b2992433d29ace85",
"type":"variable"
},
{
"text":", objects):\n        return ",
"type":"code"
},
{
"id":"b058347d19484740b7e2dec4816c0978",
"type":"variable"
},
{
"text":"(objects, self._parent, self._pos+1)\n\n    def __str__(self):\n        return \"[{}]\".format(\", \".join(str(x) for x in self.",
"type":"code"
},
{
"id":"b062e0322e284160bf26034e9de32446",
"type":"variable"
},
{
"text":"()))\n",
"type":"code"
}
],
"id":"af185bd3045941ab9c96c68a83ec4741",
"type":"code"
}
],
"title":"Grammar"
},
{
"children":[],
"id":"3c542ba5b0104273805b227aeab84c04",
"paragraphs":[
{
"fragments":[
{
"text":"When a ",
"type":"text"
},
{
"id":"e22fa3c5d4144197906cbb74af6cc83e",
"type":"variable"
},
{
"text":" AST node is matched a Python method with the same name is generated:",
"type":"text"
}
],
"id":"6018299ffc344a46978cb303eb4bdb16",
"type":"text"
},
{
"chunkpath":[
"rules",
"ast"
],
"filepath":[
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"e22fa3c5d4144197906cbb74af6cc83e",
"type":"variable"
},
{
"text":"\" .:x ",
"type":"code"
},
{
"id":"8b98e38b093140fc956b35f6cbf5018e",
"type":"variable"
},
{
"text":":y] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { '\\ndef _rule_' x '(self):\\n' > 'return ' y '()\\n' < ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"4bbfe03c503f409f9ac3233cbbd31340",
"type":"code"
},
{
"fragments":[
{
"text":"The body of the rule is assumed to be a matcher. A matcher is a function that, when called, tries to match objecst from the input stream and return a semantic action if successful or raises an exception if it fails.",
"type":"text"
}
],
"id":"fc46f60ad6a7467bb245c720a9d6e8e9",
"type":"text"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"class ",
"type":"code"
},
{
"id":"cbbcd925bc2c42b9add24aaa736f4d35",
"type":"variable"
},
{
"text":"(object):\n\n    def __init__(self, fn):\n        self.fn = fn\n\n    def ",
"type":"code"
},
{
"id":"85139f1436944deab62958b8a713d8aa",
"type":"variable"
},
{
"text":"(self):\n        return self.fn()\n",
"type":"code"
}
],
"id":"a2fa6b36dba04bcfad978306c9223c55",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"class ",
"type":"code"
},
{
"id":"df25061bb4004aa693b603f0a8ec2af2",
"type":"variable"
},
{
"text":"(Exception):\n    pass\n",
"type":"code"
}
],
"id":"00ace1a1616649898f3ca6095c7884e1",
"type":"code"
},
{
"fragments":[
{
"text":"To simplify the code generator, the following rules are present. The ",
"type":"text"
},
{
"id":"ff0229c63d8a4b4897faed8c38201de3",
"type":"variable"
},
{
"text":" rule is not strictly needed, but without it, many rules would have to wrap its body in a lambda to create the matcher function.",
"type":"text"
}
],
"id":"1b8ad3a855444c598a016788f32237ab",
"type":"text"
},
{
"chunkpath":[
"rules"
],
"filepath":[
"codegenerator.rlmeta"
],
"fragments":[
{
"id":"8b98e38b093140fc956b35f6cbf5018e",
"type":"variable"
},
{
"text":" =\n",
"type":"code"
},
{
"path":[
"ast"
],
"prefix":"  ",
"type":"chunk"
},
{
"text":"  | ",
"type":"code"
},
{
"id":"ff0229c63d8a4b4897faed8c38201de3",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { '(lambda:\\n' > x < '\\n)' }\n",
"type":"code"
},
{
"id":"ff0229c63d8a4b4897faed8c38201de3",
"type":"variable"
},
{
"text":" =\n",
"type":"code"
},
{
"path":[
"astFnBody"
],
"prefix":"  ",
"type":"chunk"
}
],
"id":"bc8464b515df4cf9a0be11f8757cfa24",
"type":"code"
}
],
"title":"Rule"
},
{
"children":[],
"id":"696631bc029c47949b2ad97ce78ea32c",
"paragraphs":[
{
"fragments":[
{
"text":"When a ",
"type":"text"
},
{
"id":"efa7dd37aa9e46908ed34f8d31cd476d",
"type":"variable"
},
{
"text":" AST node is matched a matcher is generated that calls the built-in ",
"type":"text"
},
{
"id":"2c430882d5af40168a69e1b4b9eb7e0d",
"type":"variable"
},
{
"text":" method with a list of matchers:",
"type":"text"
}
],
"id":"218e357da3f04861bdee4b175e32cc54",
"type":"text"
},
{
"chunkpath":[
"rules",
"astFnBody"
],
"filepath":[
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"efa7dd37aa9e46908ed34f8d31cd476d",
"type":"variable"
},
{
"text":"\" ",
"type":"code"
},
{
"id":"85ee4a0a694641c3aa683a15e6a0ba5d",
"type":"variable"
},
{
"text":":x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { 'self.",
"type":"code"
},
{
"id":"2c430882d5af40168a69e1b4b9eb7e0d",
"type":"variable"
},
{
"text":"([' x '])' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"f85612ab9e0d444f8104eb83d1548800",
"type":"code"
},
{
"fragments":[
{
"text":"Helpers to generate a list of items.",
"type":"text"
}
],
"id":"ce9066bd5c3f4a9eb07f8b7d9368f118",
"type":"text"
},
{
"chunkpath":[
"rules"
],
"filepath":[
"codegenerator.rlmeta"
],
"fragments":[
{
"id":"85ee4a0a694641c3aa683a15e6a0ba5d",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"index":5,
"type":"tabstop"
},
{
"text":"= ",
"type":"code"
},
{
"id":"ccb3f676f6314d788147dc603933cd28",
"type":"variable"
},
{
"text":"*:xs ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { '\\n' > xs < ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
},
{
"id":"ccb3f676f6314d788147dc603933cd28",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"index":5,
"type":"tabstop"
},
{
"text":"= ",
"type":"code"
},
{
"id":"8b98e38b093140fc956b35f6cbf5018e",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { x ',\\n' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"8f190300db404d17a2a8f5e36e95ddcd",
"type":"code"
},
{
"fragments":[
{
"text":"The ",
"type":"text"
},
{
"id":"2c430882d5af40168a69e1b4b9eb7e0d",
"type":"variable"
},
{
"text":" method expects a list of matchers. It tries the matchers in sequence and returns the result of the first matching one.",
"type":"text"
}
],
"id":"6611f3677d0f47888d213f4467d3279f",
"type":"text"
},
{
"chunkpath":[
"classes",
"_RLMeta"
],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"def ",
"type":"code"
},
{
"id":"2c430882d5af40168a69e1b4b9eb7e0d",
"type":"variable"
},
{
"text":"(self, matchers):\n    ",
"type":"code"
},
{
"id":"e45d3bc7fadf4cc1bd02843c87f0d034",
"type":"variable"
},
{
"text":" = self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":"\n    for matcher in matchers:\n        try:\n            return matcher()\n        except ",
"type":"code"
},
{
"id":"df25061bb4004aa693b603f0a8ec2af2",
"type":"variable"
},
{
"text":":\n            self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":" = ",
"type":"code"
},
{
"id":"e45d3bc7fadf4cc1bd02843c87f0d034",
"type":"variable"
},
{
"text":"\n    raise ",
"type":"code"
},
{
"id":"df25061bb4004aa693b603f0a8ec2af2",
"type":"variable"
},
{
"text":"()\n",
"type":"code"
}
],
"id":"d208a58f49fb42199d2483713b67641e",
"type":"code"
}
],
"title":"Or"
},
{
"children":[],
"id":"86438bda56d342bc9d1f2c62e632a72d",
"paragraphs":[
{
"fragments":[
{
"text":"When a ",
"type":"text"
},
{
"id":"b845c4cee1734619991d56de83dce37d",
"type":"variable"
},
{
"text":" AST node is found a function is generated that creates a new scope:",
"type":"text"
}
],
"id":"99fc5181461b4b658129de1e5a9024db",
"type":"text"
},
{
"chunkpath":[
"rules",
"astFnBody"
],
"filepath":[
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"b845c4cee1734619991d56de83dce37d",
"type":"variable"
},
{
"text":"\" ",
"type":"code"
},
{
"id":"8b98e38b093140fc956b35f6cbf5018e",
"type":"variable"
},
{
"text":":x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { '(lambda ",
"type":"code"
},
{
"id":"289a3db9c53e420da4dbdbc94a32aadf",
"type":"variable"
},
{
"text":":\\n' > x < '()\\n)(",
"type":"code"
},
{
"id":"ec2b7e954fe24f329250bd22c70538e4",
"type":"variable"
},
{
"text":"())' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"89d707f19bd84e5982dcc3f043a68111",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"class ",
"type":"code"
},
{
"id":"ec2b7e954fe24f329250bd22c70538e4",
"type":"variable"
},
{
"text":"(dict):\n\n    def ",
"type":"code"
},
{
"id":"1659fb73179a4fd8abfc99b95d9f5560",
"type":"variable"
},
{
"text":"(self, name, value):\n        self[name] = value\n        return value\n\n    def ",
"type":"code"
},
{
"id":"ea57b40b324c4c03b030c78e924ed860",
"type":"variable"
},
{
"text":"(self, name):\n        return self[name]\n",
"type":"code"
}
],
"id":"6a0b126c11d4408794c26291e417257d",
"type":"code"
}
],
"title":"Scope"
},
{
"children":[],
"id":"487e675a013c45e3aee8b6c068e226df",
"paragraphs":[
{
"fragments":[
{
"text":"When a ",
"type":"text"
},
{
"id":"8d17eff4871e411793cf0daf3a2ab204",
"type":"variable"
},
{
"text":" AST node is found a call to the build-in ",
"type":"text"
},
{
"id":"c590c92167d34fe4bfdbb084c03834c1",
"type":"variable"
},
{
"text":" method is generated:",
"type":"text"
}
],
"id":"bdbe901c77da4a2ab026d978279b4e09",
"type":"text"
},
{
"chunkpath":[
"rules",
"astFnBody"
],
"filepath":[
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"8d17eff4871e411793cf0daf3a2ab204",
"type":"variable"
},
{
"text":"\" ",
"type":"code"
},
{
"id":"85ee4a0a694641c3aa683a15e6a0ba5d",
"type":"variable"
},
{
"text":":x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { 'self.",
"type":"code"
},
{
"id":"c590c92167d34fe4bfdbb084c03834c1",
"type":"variable"
},
{
"text":"([' x '])' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"3fe2404188684b7485049b6298e4ba3e",
"type":"code"
},
{
"fragments":[
{
"text":"The ",
"type":"text"
},
{
"id":"c590c92167d34fe4bfdbb084c03834c1",
"type":"variable"
},
{
"text":" method expects a list of matchers. It applies them in sequence and returns the result of the last one.",
"type":"text"
}
],
"id":"2e113e56a2bd474a8361b07e62faddd1",
"type":"text"
},
{
"chunkpath":[
"classes",
"_RLMeta"
],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"def ",
"type":"code"
},
{
"id":"c590c92167d34fe4bfdbb084c03834c1",
"type":"variable"
},
{
"text":"(self, matchers):\n    result = None\n    for matcher in matchers:\n        result = matcher()\n    return result\n",
"type":"code"
}
],
"id":"4f4a619375d4416ba28f522d8b4cbf06",
"type":"code"
}
],
"title":"And"
},
{
"children":[],
"id":"4309ca572367401bb6c4561f273b8c85",
"paragraphs":[
{
"chunkpath":[
"rules",
"astFnBody"
],
"filepath":[
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"6a519019bfac49598dc36620b5b58811",
"type":"variable"
},
{
"text":"\" .:x ",
"type":"code"
},
{
"id":"8b98e38b093140fc956b35f6cbf5018e",
"type":"variable"
},
{
"text":":y] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { '",
"type":"code"
},
{
"id":"289a3db9c53e420da4dbdbc94a32aadf",
"type":"variable"
},
{
"text":".",
"type":"code"
},
{
"id":"1659fb73179a4fd8abfc99b95d9f5560",
"type":"variable"
},
{
"text":"(' repr(x) ', ' y '())' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"06c9e9a4f10648e090321c427cccb9b3",
"type":"code"
}
],
"title":"Bind"
},
{
"children":[],
"id":"244f0754be514ae88e0f581f3ab58c59",
"paragraphs":[
{
"chunkpath":[
"rules",
"astFnBody"
],
"filepath":[
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"60d7dacf2a2b4336b0329665c2026cc0",
"type":"variable"
},
{
"text":"\" ",
"type":"code"
},
{
"id":"8b98e38b093140fc956b35f6cbf5018e",
"type":"variable"
},
{
"text":":x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { 'self.",
"type":"code"
},
{
"id":"70c457e3514948bcb6c00b67e5a180a2",
"type":"variable"
},
{
"text":"(' x ')' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"36a128587cdd48539a5aef85b434be5b",
"type":"code"
},
{
"chunkpath":[
"classes",
"_RLMeta"
],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"def ",
"type":"code"
},
{
"id":"70c457e3514948bcb6c00b67e5a180a2",
"type":"variable"
},
{
"text":"(self, matcher):\n    result = []\n    while True:\n        ",
"type":"code"
},
{
"id":"e45d3bc7fadf4cc1bd02843c87f0d034",
"type":"variable"
},
{
"text":" = self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":"\n        try:\n            result.append(matcher())\n        except ",
"type":"code"
},
{
"id":"df25061bb4004aa693b603f0a8ec2af2",
"type":"variable"
},
{
"text":":\n            self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":" = ",
"type":"code"
},
{
"id":"e45d3bc7fadf4cc1bd02843c87f0d034",
"type":"variable"
},
{
"text":"\n            return ",
"type":"code"
},
{
"id":"cbbcd925bc2c42b9add24aaa736f4d35",
"type":"variable"
},
{
"text":"(lambda: [x.",
"type":"code"
},
{
"id":"85139f1436944deab62958b8a713d8aa",
"type":"variable"
},
{
"text":"() for x in result])\n",
"type":"code"
}
],
"id":"6d7dbee1acd04445a3fa837210e6a42d",
"type":"code"
}
],
"title":"Star"
},
{
"children":[],
"id":"b0f001d2e6484c55a4aa8fec6d62129e",
"paragraphs":[
{
"chunkpath":[
"rules",
"astFnBody"
],
"filepath":[
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"736cd2768dcd4843b43aca56bea200d3",
"type":"variable"
},
{
"text":"\"] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { 'None' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"f89b8db315ca4734a535d6ffbbf464bb",
"type":"code"
}
],
"title":"MatchNothing"
},
{
"children":[],
"id":"44d3b166c62d43e38d2a781fb9f06b6d",
"paragraphs":[
{
"chunkpath":[
"rules",
"astFnBody"
],
"filepath":[
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"bc27a67cb10b4650a32bfe7af84c5060",
"type":"variable"
},
{
"text":"\" ",
"type":"code"
},
{
"id":"8b98e38b093140fc956b35f6cbf5018e",
"type":"variable"
},
{
"text":":x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { 'self.",
"type":"code"
},
{
"id":"7ea6f6977ca24c218e28cd96b1cf8267",
"type":"variable"
},
{
"text":"(' x ')' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"e895e3759e684d7c9022da5bcfd693bb",
"type":"code"
},
{
"chunkpath":[
"classes",
"_RLMeta"
],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"def ",
"type":"code"
},
{
"id":"7ea6f6977ca24c218e28cd96b1cf8267",
"type":"variable"
},
{
"text":"(self, matcher):\n    ",
"type":"code"
},
{
"id":"e45d3bc7fadf4cc1bd02843c87f0d034",
"type":"variable"
},
{
"text":" = self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":"\n    try:\n        matcher()\n    except ",
"type":"code"
},
{
"id":"df25061bb4004aa693b603f0a8ec2af2",
"type":"variable"
},
{
"text":":\n        return ",
"type":"code"
},
{
"id":"cbbcd925bc2c42b9add24aaa736f4d35",
"type":"variable"
},
{
"text":"(lambda: None)\n    else:\n        raise ",
"type":"code"
},
{
"id":"df25061bb4004aa693b603f0a8ec2af2",
"type":"variable"
},
{
"text":"()\n    finally:\n        self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":" = ",
"type":"code"
},
{
"id":"e45d3bc7fadf4cc1bd02843c87f0d034",
"type":"variable"
},
{
"text":"\n",
"type":"code"
}
],
"id":"77eb5bfff95948a08d1d3856984cfc9f",
"type":"code"
}
],
"title":"Not"
},
{
"children":[],
"id":"07530ffd21784561bd8594c98fcd050a",
"paragraphs":[
{
"chunkpath":[
"rules",
"astFnBody"
],
"filepath":[
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"373f023f0f5f4744a7b309cf9a76d138",
"type":"variable"
},
{
"text":"\" ",
"type":"code"
},
{
"id":"8b98e38b093140fc956b35f6cbf5018e",
"type":"variable"
},
{
"text":":x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { '",
"type":"code"
},
{
"id":"cbbcd925bc2c42b9add24aaa736f4d35",
"type":"variable"
},
{
"text":"(lambda: ' x ')' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"48288d82d6984e2088ee6ce8a5a5253e",
"type":"code"
}
],
"title":"SemanticAction"
},
{
"children":[],
"id":"c10aabed8057404e97ef8cd6ac1b113d",
"paragraphs":[
{
"chunkpath":[
"rules",
"astFnBody"
],
"filepath":[
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"4852ced8038c4074a5a8104b8596e0e0",
"type":"variable"
},
{
"text":"\" .:x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { 'self.",
"type":"code"
},
{
"id":"826871508bad4fecb6e575779218874d",
"type":"variable"
},
{
"text":"(' repr(x) ')'",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"412bfecbb7244810ba46e206486092c8",
"type":"code"
}
],
"title":"Apply"
},
{
"children":[],
"id":"3ba5893bb7094ece96e853f869df9456",
"paragraphs":[
{
"chunkpath":[
"rules",
"astFnBody"
],
"filepath":[
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"6860db9e40994ebfbe04834b4f12f721",
"type":"variable"
},
{
"text":"\" .:x .:y] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { 'self.",
"type":"code"
},
{
"id":"53acf505e0ee41de85c674e211ecd39c",
"type":"variable"
},
{
"text":"(' repr(x) ', ' repr(y) ')' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"7ce8d15eb0a349e9a26f7c4b65cf23d8",
"type":"code"
},
{
"chunkpath":[
"classes",
"_RLMeta"
],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"def ",
"type":"code"
},
{
"id":"53acf505e0ee41de85c674e211ecd39c",
"type":"variable"
},
{
"text":"(self, start, end):\n    next_objext, self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":" = self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":".",
"type":"code"
},
{
"id":"b2115b3eeaa143068958949787f5d104",
"type":"variable"
},
{
"text":"()\n    if next_objext >= start and next_objext <= end:\n        return ",
"type":"code"
},
{
"id":"cbbcd925bc2c42b9add24aaa736f4d35",
"type":"variable"
},
{
"text":"(lambda: next_objext)\n    else:\n        raise ",
"type":"code"
},
{
"id":"df25061bb4004aa693b603f0a8ec2af2",
"type":"variable"
},
{
"text":"()\n",
"type":"code"
}
],
"id":"fdb81b14b5c54348b151b5b2f379ae78",
"type":"code"
}
],
"title":"MatchRange"
},
{
"children":[],
"id":"82022cc15d944579825b52559b1ee469",
"paragraphs":[
{
"chunkpath":[
"rules",
"astFnBody"
],
"filepath":[
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"10d9c2de82a14d12bd545133bd4e15f8",
"type":"variable"
},
{
"text":"\" .:x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { 'self.",
"type":"code"
},
{
"id":"ab9490a5e7ba4561b96b04f481a9e57e",
"type":"variable"
},
{
"text":"(' repr(x) ')' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"2d406fc305b34136a1280841c2098a7a",
"type":"code"
},
{
"chunkpath":[
"classes",
"_RLMeta"
],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"def ",
"type":"code"
},
{
"id":"ab9490a5e7ba4561b96b04f481a9e57e",
"type":"variable"
},
{
"text":"(self, string):\n    ",
"type":"code"
},
{
"id":"1f94d55a48c14180b2992433d29ace85",
"type":"variable"
},
{
"text":", self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":" = self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":".",
"type":"code"
},
{
"id":"b2115b3eeaa143068958949787f5d104",
"type":"variable"
},
{
"text":"()\n    if ",
"type":"code"
},
{
"id":"1f94d55a48c14180b2992433d29ace85",
"type":"variable"
},
{
"text":" == string:\n        return ",
"type":"code"
},
{
"id":"cbbcd925bc2c42b9add24aaa736f4d35",
"type":"variable"
},
{
"text":"(lambda: string)\n    else:\n        raise ",
"type":"code"
},
{
"id":"df25061bb4004aa693b603f0a8ec2af2",
"type":"variable"
},
{
"text":"()\n",
"type":"code"
}
],
"id":"971fcb5050aa45348f80f3fe228af352",
"type":"code"
}
],
"title":"MatchString"
},
{
"children":[],
"id":"3eff70b8911e4b4e9bd520a7d25624e7",
"paragraphs":[
{
"chunkpath":[
"rules",
"astFnBody"
],
"filepath":[
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"8ff0b4980efa4e349ec5ef14815be6ec",
"type":"variable"
},
{
"text":"\" .:x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { 'self.",
"type":"code"
},
{
"id":"5440b88cecfb4dafad63f0f7887b82ce",
"type":"variable"
},
{
"text":"(' repr(x) ')' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"b04618e300a746c6930f0c3c5ac338dc",
"type":"code"
},
{
"chunkpath":[
"classes",
"_RLMeta"
],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"def ",
"type":"code"
},
{
"id":"5440b88cecfb4dafad63f0f7887b82ce",
"type":"variable"
},
{
"text":"(self, charseq):\n    for char in charseq:\n        ",
"type":"code"
},
{
"id":"1f94d55a48c14180b2992433d29ace85",
"type":"variable"
},
{
"text":", self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":" = self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":".",
"type":"code"
},
{
"id":"b2115b3eeaa143068958949787f5d104",
"type":"variable"
},
{
"text":"()\n        if ",
"type":"code"
},
{
"id":"1f94d55a48c14180b2992433d29ace85",
"type":"variable"
},
{
"text":" != char:\n            raise ",
"type":"code"
},
{
"id":"df25061bb4004aa693b603f0a8ec2af2",
"type":"variable"
},
{
"text":"()\n    return ",
"type":"code"
},
{
"id":"cbbcd925bc2c42b9add24aaa736f4d35",
"type":"variable"
},
{
"text":"(lambda: charseq)\n",
"type":"code"
}
],
"id":"0af5a39ebe764c1097b3a0478104a6fe",
"type":"code"
}
],
"title":"MatchCharseq"
},
{
"children":[],
"id":"5edd25f746a94b8392834343dce57370",
"paragraphs":[
{
"chunkpath":[
"rules",
"ast"
],
"filepath":[
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"25ec6fc64b8b4a39a9df41daa690386f",
"type":"variable"
},
{
"text":"\"] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { 'self.",
"type":"code"
},
{
"id":"c76075de5ae9496f9ef5b3c800111ead",
"type":"variable"
},
{
"text":"' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"982a4ec2696d466ab86d17115f366f87",
"type":"code"
},
{
"chunkpath":[
"classes",
"_RLMeta"
],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"def ",
"type":"code"
},
{
"id":"c76075de5ae9496f9ef5b3c800111ead",
"type":"variable"
},
{
"text":"(self):\n    ",
"type":"code"
},
{
"id":"1f94d55a48c14180b2992433d29ace85",
"type":"variable"
},
{
"text":", self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":" = self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":".",
"type":"code"
},
{
"id":"b2115b3eeaa143068958949787f5d104",
"type":"variable"
},
{
"text":"()\n    return ",
"type":"code"
},
{
"id":"cbbcd925bc2c42b9add24aaa736f4d35",
"type":"variable"
},
{
"text":"(lambda: ",
"type":"code"
},
{
"id":"1f94d55a48c14180b2992433d29ace85",
"type":"variable"
},
{
"text":")\n",
"type":"code"
}
],
"id":"af17e8b2e71143e890440310861281ca",
"type":"code"
}
],
"title":"Any"
},
{
"children":[],
"id":"c3b58d2d7b024fa4a0e5ff0bcf06d154",
"paragraphs":[
{
"chunkpath":[
"rules",
"astFnBody"
],
"filepath":[
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"0c1a9537d33148388015163fc90329b3",
"type":"variable"
},
{
"text":"\" ",
"type":"code"
},
{
"id":"8b98e38b093140fc956b35f6cbf5018e",
"type":"variable"
},
{
"text":":x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { 'self.",
"type":"code"
},
{
"id":"9b21a7a4087848ba8f2ada071a294d73",
"type":"variable"
},
{
"text":"(' x ')' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"258fb08008994945961815115488a6d4",
"type":"code"
},
{
"chunkpath":[
"classes",
"_RLMeta"
],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"def ",
"type":"code"
},
{
"id":"9b21a7a4087848ba8f2ada071a294d73",
"type":"variable"
},
{
"text":"(self, matcher):\n    ",
"type":"code"
},
{
"id":"1f94d55a48c14180b2992433d29ace85",
"type":"variable"
},
{
"text":", ",
"type":"code"
},
{
"id":"5c352d6f3e54444cad73e2891e76e29a",
"type":"variable"
},
{
"text":" = self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":".",
"type":"code"
},
{
"id":"b2115b3eeaa143068958949787f5d104",
"type":"variable"
},
{
"text":"()\n    if isinstance(",
"type":"code"
},
{
"id":"1f94d55a48c14180b2992433d29ace85",
"type":"variable"
},
{
"text":", list):\n        self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":" = self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":".",
"type":"code"
},
{
"id":"653fc20558a64badb437b07f3d1c8490",
"type":"variable"
},
{
"text":"(",
"type":"code"
},
{
"id":"1f94d55a48c14180b2992433d29ace85",
"type":"variable"
},
{
"text":")\n        matcher()\n        if self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":".",
"type":"code"
},
{
"id":"4ad80c8d1d814fefa2656595f1d841c6",
"type":"variable"
},
{
"text":"():\n            self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":" = ",
"type":"code"
},
{
"id":"5c352d6f3e54444cad73e2891e76e29a",
"type":"variable"
},
{
"text":"\n            return ",
"type":"code"
},
{
"id":"cbbcd925bc2c42b9add24aaa736f4d35",
"type":"variable"
},
{
"text":"(lambda: ",
"type":"code"
},
{
"id":"1f94d55a48c14180b2992433d29ace85",
"type":"variable"
},
{
"text":")\n    raise ",
"type":"code"
},
{
"id":"df25061bb4004aa693b603f0a8ec2af2",
"type":"variable"
},
{
"text":"()\n",
"type":"code"
}
],
"id":"05a21fd5bf134f7c9208572470e212e1",
"type":"code"
}
],
"title":"MatchList"
},
{
"children":[],
"id":"74804e4e0ee643ac95210d7aa17ae7c6",
"paragraphs":[
{
"chunkpath":[
"rules",
"ast"
],
"filepath":[
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"301f08856bf54373bc5975f75a315105",
"type":"variable"
},
{
"text":"\" .:x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { repr(x) ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"0fdb7fda246f4e99becb87637359df79",
"type":"code"
}
],
"title":"String"
},
{
"children":[],
"id":"03d7a70d44fe4470967acd15d51ad56a",
"paragraphs":[
{
"chunkpath":[
"rules",
"ast"
],
"filepath":[
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"49ba1aa1e24e408ba2b32bff68a72840",
"type":"variable"
},
{
"text":"\" ",
"type":"code"
},
{
"id":"2420b6bcf2374252a533688aa0b33b5f",
"type":"variable"
},
{
"text":":x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { x ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"47a643f9317f47afa2e6d5001b87a1ff",
"type":"code"
},
{
"chunkpath":[
"rules"
],
"filepath":[
"codegenerator.rlmeta"
],
"fragments":[
{
"id":"2420b6bcf2374252a533688aa0b33b5f",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"index":5,
"type":"tabstop"
},
{
"text":"= ",
"type":"code"
},
{
"id":"19791660815a43e1b775ea6a29349648",
"type":"variable"
},
{
"text":"*:xs ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { '(' xs '[])' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"eae26130c7a047daa3ae8fd86ea4a9b6",
"type":"code"
},
{
"chunkpath":[
"rules"
],
"filepath":[
"codegenerator.rlmeta"
],
"fragments":[
{
"id":"19791660815a43e1b775ea6a29349648",
"type":"variable"
},
{
"text":" =\n  | [\"",
"type":"code"
},
{
"id":"cf8770da147840679077788180e10778",
"type":"variable"
},
{
"text":"\" ast:x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> {     x  '+' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n  | ",
"type":"code"
},
{
"id":"8b98e38b093140fc956b35f6cbf5018e",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { '[' x ']+' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"a9726003d9ff409aab302f66b5756a5b",
"type":"code"
}
],
"title":"List/ListItemSplice"
},
{
"children":[],
"id":"166dffacb2ca4911908584d77f30b21f",
"paragraphs":[
{
"chunkpath":[
"rules",
"ast"
],
"filepath":[
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"c9ecfed5791644a3b7ea2122d4ed87c9",
"type":"variable"
},
{
"text":"\" ",
"type":"code"
},
{
"id":"85ee4a0a694641c3aa683a15e6a0ba5d",
"type":"variable"
},
{
"text":":x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { '",
"type":"code"
},
{
"id":"49dc22ba19624755a18a13a9e76734b1",
"type":"variable"
},
{
"text":".",
"type":"code"
},
{
"id":"2e8a56ad01dc4a289fbd584bc4874e7e",
"type":"variable"
},
{
"text":"([' x '])' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"74eb55bab93644eca5a621d9469c86dc",
"type":"code"
},
{
"chunkpath":[
"rules",
"ast"
],
"filepath":[
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"d34e449a8ca740d0a4b84921fc05b25f",
"type":"variable"
},
{
"text":"\"] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { '",
"type":"code"
},
{
"id":"7d8a78dfe90743759bdd25cf45506815",
"type":"variable"
},
{
"text":"()' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"1f9c2f35e18d4eac90c9b8e8a7db8b32",
"type":"code"
},
{
"chunkpath":[
"rules",
"ast"
],
"filepath":[
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"7b75cb86cab34645b43d69d790e6e206",
"type":"variable"
},
{
"text":"\"] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { '",
"type":"code"
},
{
"id":"bfaedafcea7445e7b7ed19c9abb47736",
"type":"variable"
},
{
"text":"()' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"c4aaf6182aa34e73924627f6961161d4",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"class ",
"type":"code"
},
{
"id":"49dc22ba19624755a18a13a9e76734b1",
"type":"variable"
},
{
"text":"(object):\n\n    @classmethod\n    def ",
"type":"code"
},
{
"id":"2e8a56ad01dc4a289fbd584bc4874e7e",
"type":"variable"
},
{
"text":"(self, item):\n        if isinstance(item, ",
"type":"code"
},
{
"id":"49dc22ba19624755a18a13a9e76734b1",
"type":"variable"
},
{
"text":"):\n            return item\n        elif isinstance(item, list):\n            return ",
"type":"code"
},
{
"id":"b277e0c5612d4697bf8f8237494f8474",
"type":"variable"
},
{
"text":"([",
"type":"code"
},
{
"id":"49dc22ba19624755a18a13a9e76734b1",
"type":"variable"
},
{
"text":".create(x) for x in item])\n        else:\n            return ",
"type":"code"
},
{
"id":"50ee7994db484890abbeeb13330e22a7",
"type":"variable"
},
{
"text":"(item)\n\n",
"type":"code"
},
{
"path":[
"_Builder"
],
"prefix":"    ",
"type":"chunk"
}
],
"id":"b2a22c8337774967bcccbdd94d6d03a7",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"class ",
"type":"code"
},
{
"id":"b277e0c5612d4697bf8f8237494f8474",
"type":"variable"
},
{
"text":"(",
"type":"code"
},
{
"id":"49dc22ba19624755a18a13a9e76734b1",
"type":"variable"
},
{
"text":"):\n\n    def __init__(self, items):\n        self.items = items\n\n    def ",
"type":"code"
},
{
"id":"a5837c091631449aadeeaa004ae71b0b",
"type":"variable"
},
{
"text":"(self, output):\n        for item in self.items:\n            item.",
"type":"code"
},
{
"id":"a5837c091631449aadeeaa004ae71b0b",
"type":"variable"
},
{
"text":"(output)\n",
"type":"code"
}
],
"id":"fc7990fb7a544e24b79a140198b69c8b",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"class ",
"type":"code"
},
{
"id":"50ee7994db484890abbeeb13330e22a7",
"type":"variable"
},
{
"text":"(",
"type":"code"
},
{
"id":"49dc22ba19624755a18a13a9e76734b1",
"type":"variable"
},
{
"text":"):\n\n    def __init__(self, atom):\n        self.atom = atom\n\n    def ",
"type":"code"
},
{
"id":"a5837c091631449aadeeaa004ae71b0b",
"type":"variable"
},
{
"text":"(self, output):\n        output.",
"type":"code"
},
{
"id":"af5dbdd6e27c451398b2b116b5ff42d3",
"type":"variable"
},
{
"text":"(str(self.atom))\n",
"type":"code"
}
],
"id":"fd6eef92c8274c64a71d219fb2084dce",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"class ",
"type":"code"
},
{
"id":"7d8a78dfe90743759bdd25cf45506815",
"type":"variable"
},
{
"text":"(",
"type":"code"
},
{
"id":"49dc22ba19624755a18a13a9e76734b1",
"type":"variable"
},
{
"text":"):\n\n    def ",
"type":"code"
},
{
"id":"a5837c091631449aadeeaa004ae71b0b",
"type":"variable"
},
{
"text":"(self, output):\n        output.",
"type":"code"
},
{
"id":"8cb500cdd43d41a78158c645da945c70",
"type":"variable"
},
{
"text":"()\n",
"type":"code"
}
],
"id":"533041ab85ef4e13a5bdfd440fe344fa",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"class ",
"type":"code"
},
{
"id":"bfaedafcea7445e7b7ed19c9abb47736",
"type":"variable"
},
{
"text":"(",
"type":"code"
},
{
"id":"49dc22ba19624755a18a13a9e76734b1",
"type":"variable"
},
{
"text":"):\n\n    def ",
"type":"code"
},
{
"id":"a5837c091631449aadeeaa004ae71b0b",
"type":"variable"
},
{
"text":"(self, output):\n        output.",
"type":"code"
},
{
"id":"22163f4ee0fd4e68b2c95f94e111dee1",
"type":"variable"
},
{
"text":"()\n",
"type":"code"
}
],
"id":"cc6e0edd65614f4b8c470b167c521bd5",
"type":"code"
},
{
"chunkpath":[
"classes",
"_Builder"
],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"def ",
"type":"code"
},
{
"id":"56d10f7bfcfd43bb996c3f76423b067b",
"type":"variable"
},
{
"text":"(self):\n    output = ",
"type":"code"
},
{
"id":"4c38cde583ac42ea8c7b9295a92e26f2",
"type":"variable"
},
{
"text":"()\n    self.",
"type":"code"
},
{
"id":"a5837c091631449aadeeaa004ae71b0b",
"type":"variable"
},
{
"text":"(output)\n    return output.value\n",
"type":"code"
}
],
"id":"795bcf7836b44c17996097b87dddd617",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"class ",
"type":"code"
},
{
"id":"4c38cde583ac42ea8c7b9295a92e26f2",
"type":"variable"
},
{
"text":"(object):\n\n    def __init__(self):\n        self.value = \"\"\n        self.level = 0\n\n    def ",
"type":"code"
},
{
"id":"8cb500cdd43d41a78158c645da945c70",
"type":"variable"
},
{
"text":"(self):\n        self.level += 1\n\n    def ",
"type":"code"
},
{
"id":"22163f4ee0fd4e68b2c95f94e111dee1",
"type":"variable"
},
{
"text":"(self):\n        self.level -= 1\n\n    def ",
"type":"code"
},
{
"id":"af5dbdd6e27c451398b2b116b5ff42d3",
"type":"variable"
},
{
"text":"(self, value):\n        for ch in value:\n            if self.value and ch != \"\\n\" and self.value[-1] == \"\\n\":\n                self.value += \"    \"*self.level\n            self.value += ch\n",
"type":"code"
}
],
"id":"fc6caf4810f146e1aac2556d5a12e242",
"type":"code"
}
],
"title":"\"Builder\""
},
{
"children":[],
"id":"f5372dab8e084ca386297eb9575052e8",
"paragraphs":[
{
"chunkpath":[
"rules",
"ast"
],
"filepath":[
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"0a8e6be4bec3466bb658d7d4ff5bc5fd",
"type":"variable"
},
{
"text":"\" .:x ",
"type":"code"
},
{
"id":"85ee4a0a694641c3aa683a15e6a0ba5d",
"type":"variable"
},
{
"text":":y] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { x '(' y ')' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"a264ffede57c4b6aa108a23f741bd694",
"type":"code"
}
],
"title":"FnCall"
},
{
"children":[],
"id":"d9f73bdeb5c447dbaf5b8fe0bf3b67ba",
"paragraphs":[
{
"chunkpath":[
"rules",
"ast"
],
"filepath":[
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"ae823ab23224415f9a539b0354f311b8",
"type":"variable"
},
{
"text":"\" .:x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { '",
"type":"code"
},
{
"id":"289a3db9c53e420da4dbdbc94a32aadf",
"type":"variable"
},
{
"text":".",
"type":"code"
},
{
"id":"ea57b40b324c4c03b030c78e924ed860",
"type":"variable"
},
{
"text":"(' repr(x) ').",
"type":"code"
},
{
"id":"85139f1436944deab62958b8a713d8aa",
"type":"variable"
},
{
"text":"()' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"544bade2ad6a463db74a4b66c7cba6f7",
"type":"code"
},
{
"child_type":"unordered",
"children":[
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"How many times can/should a semantic action be evaluated?",
"type":"text"
}
]
}
],
"id":"9839e9dfe25e47a58b35987a6f5d6154",
"type":"list"
}
],
"title":"VarLookup"
},
{
"children":[],
"id":"d9ea64bbdad3465897667ebec9d5ace1",
"paragraphs":[
{
"fragments":[
{
"text":"The complete code generator:",
"type":"text"
}
],
"id":"245b8164d0dc473b8854c2becb228910",
"type":"text"
},
{
"code_id":"1a998747fffd406f9b8f0bed1e8740a1",
"id":"fc830b863d064f7eabe2e1ed36640b3f",
"type":"expanded_code"
},
{
"fragments":[
{
"text":"The complete support library:",
"type":"text"
}
],
"id":"187f9c4f928d4489a33562120216a287",
"type":"text"
},
{
"code_id":"36fdd2e9ccf7430bbf84158437d5c067",
"id":"1fdabe27b8fc4ef6a80aa4b9e7791560",
"type":"expanded_code"
}
],
"title":"Summary"
}
],
"id":"c3f29fa523f341a487ebc07209c471f9",
"paragraphs":[
{
"fragments":[
{
"text":"The code generator's job is to convert an AST to Python code. Here are the templates for the grammar and support library:",
"type":"text"
}
],
"id":"c56e60448b4e42df867652370c4fe2fb",
"type":"text"
},
{
"chunkpath":[],
"filepath":[
"codegenerator.rlmeta"
],
"fragments":[
{
"id":"8cf9a10b04cc48a484e1cb7c6f1f2f28",
"type":"variable"
},
{
"text":" {\n",
"type":"code"
},
{
"path":[
"rules"
],
"prefix":"  ",
"type":"chunk"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"1a998747fffd406f9b8f0bed1e8740a1",
"type":"code"
},
{
"chunkpath":[],
"filepath":[
"support.py"
],
"fragments":[
{
"blank_lines_before":1,
"path":[
"classes"
],
"prefix":"",
"type":"chunk"
}
],
"id":"36fdd2e9ccf7430bbf84158437d5c067",
"type":"code"
},
{
"fragments":[
{
"text":"The remainder of this section will fill in the details of the ",
"type":"text"
},
{
"id":"8cf9a10b04cc48a484e1cb7c6f1f2f28",
"type":"variable"
},
{
"text":" grammar and the support library.",
"type":"text"
}
],
"id":"469dbb83e24d41d0801793895d6d9ae8",
"type":"text"
}
],
"title":"Code generator"
},
{
"children":[],
"id":"2c78e9d9104c4bddbdd1dfe6314506c9",
"paragraphs":[
{
"fragments":[
{
"text":"Now almost all pieces are in place. Here is a script that compiles to a Python file that is a compiler (accepts source on stdin and writes output on stdout). It can also print the support library on stdout if the ",
"type":"text"
},
{
"text":"--support",
"type":"code"
},
{
"text":" flag is given.",
"type":"text"
}
],
"id":"a4ae12eb01a5413a939a01c84a6d10cf",
"type":"text"
},
{
"chunkpath":[],
"filepath":[
"compile.sh"
],
"fragments":[
{
"text":"#!/bin/sh\n\nset -e\n\n",
"type":"code"
},
{
"id":"83ce9666a26449cd9936798594c99e3f",
"type":"variable"
},
{
"text":"=\"$1\"\n\nto_python_string() {\n    python -c 'import sys; sys.stdout.write(repr(sys.stdin.read()))'\n}\n\n",
"type":"code"
},
{
"id":"6352455a9a4f44c984b2c210151858a2",
"type":"variable"
},
{
"text":"=$(cat support.py)\n",
"type":"code"
},
{
"id":"d09ab0856aa0453385e2158fad4dde9c",
"type":"variable"
},
{
"text":"=$(cat support.py | to_python_string)\n",
"type":"code"
},
{
"id":"195e7fa2b75a40baa69b0bbf57a53150",
"type":"variable"
},
{
"text":"=$(cat parser.rlmeta | python \"$",
"type":"code"
},
{
"id":"83ce9666a26449cd9936798594c99e3f",
"type":"variable"
},
{
"text":"\")\n",
"type":"code"
},
{
"id":"2ea1b512b7444d8ab077edeba233a4f3",
"type":"variable"
},
{
"text":"=$(cat codegenerator.rlmeta | python \"$",
"type":"code"
},
{
"id":"83ce9666a26449cd9936798594c99e3f",
"type":"variable"
},
{
"text":"\")\n\ncat <<EOF\n",
"type":"code"
},
{
"path":[
"rlmeta python file"
],
"prefix":"",
"type":"chunk"
},
{
"text":"EOF\n",
"type":"code"
}
],
"id":"fc33f048fabe4ac98caf108dd96e9799",
"type":"code"
},
{
"chunkpath":[
"rlmeta python file"
],
"filepath":[
"compile.sh"
],
"fragments":[
{
"text":"import sys\n\nSUPPORT = $",
"type":"code"
},
{
"id":"d09ab0856aa0453385e2158fad4dde9c",
"type":"variable"
},
{
"text":"\n\n$",
"type":"code"
},
{
"id":"6352455a9a4f44c984b2c210151858a2",
"type":"variable"
},
{
"text":"\n\n$",
"type":"code"
},
{
"id":"195e7fa2b75a40baa69b0bbf57a53150",
"type":"variable"
},
{
"text":"\n\n$",
"type":"code"
},
{
"id":"2ea1b512b7444d8ab077edeba233a4f3",
"type":"variable"
},
{
"text":"\n\njoin = \"\".join\n\ndef compile_grammar(grammar, logger=None):\n    parser = Parser(logger)\n    code_generator = CodeGenerator(logger)\n    return code_generator.run(\"ast\", parser.run(\"grammar\", grammar))\n\nif __name__ == \"__main__\":\n    if \"--support\" in sys.argv:\n        sys.stdout.write(SUPPORT)\n    else:\n        sys.stdout.write(compile_grammar(\n            sys.stdin.read(),\n            logger=sys.stderr.write\n        ))\n",
"type":"code"
}
],
"id":"f1a53c2ef9e741b2a4c21c13c67f1664",
"type":"code"
}
],
"title":"Putting it together"
}
],
"id":"f5f122c94d3d4fa0b3a7e64a7fa0a724",
"paragraphs":[
{
"fragments":[
{
"text":"I have shown you how RLMeta can be used to implement a calculator and a tree printer. Next I will show you how to use RLMeta to translate RLMeta grammars to executable Python code. That is how to implement the RLMeta compiler.",
"type":"text"
}
],
"id":"4b16be114c27455a870fa89af76211d5",
"type":"text"
},
{
"fragments":[
{
"text":"RLMeta grammars are translated in two stages: the first translates grammar syntax to an abstract syntax tree (AST) and the second translates the AST to Python class. The generated Python class depends on a support library to execute. The combined Python code makes up the parser, interpreter, compiler, etc.",
"type":"text"
}
],
"id":"a476fb2e885b4071b0237eb5f6a17bf1",
"type":"text"
},
{
"fragments":[
{
"text":"RLMeta compiler internals illustrated.",
"type":"text"
}
],
"id":"630f0731e76141dfba74a05cbdff81ed",
"image_base64":"",
"type":"image"
},
{
"fragments":[
{
"text":"In order to implement the RLMeta compiler, the grammar for the parser and code generator have to be written. That is done in RLMeta. And the support Python library must be written.",
"type":"text"
}
],
"id":"80d695938fd840019e3e4abd8b43ef05",
"type":"text"
}
],
"title":"RLMeta in itself"
},
{
"children":[],
"id":"313b147a2f574ea09d76d9c7371bdf18",
"paragraphs":[
{
"fragments":[
{
"text":"If you run RLmeta on the parser grammar and the code generator grammar and combine it with the support library, you should get the functionality of the RLMeta compiler. But how can you run RLMeta before you have it? You have a bootstrapping problem.",
"type":"text"
}
],
"id":"97be5f1d197342b8a567f17d45d8db10",
"type":"text"
},
{
"fragments":[
{
"text":"In this case I solved it by translating the parser and the code generator manually according the the rules specified in the grammars.",
"type":"text"
}
],
"id":"97b7a76bf57c4567ac55f9912ff7e4c1",
"type":"text"
},
{
"fragments":[
{
"text":"TODO: show how one of the rules was manually translated.",
"type":"strong"
}
],
"id":"4686636ba5ce456da5be4ffb7f02cd59",
"type":"text"
},
{
"child_type":"unordered",
"children":[
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Last manual translation: 41094a184ed452141c99047d3187f096388e71d0",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Get rid of bootstrap code: 134c3a360160a2b978cd742a935df1c3a85de546",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Created manually with Vim templates",
"type":"text"
}
]
}
],
"id":"29fd2f33bf344dc0a09d34f914957291",
"type":"list"
}
],
"title":"Bootstrapping"
},
{
"children":[],
"id":"2651c102332c47b892977377323416b7",
"paragraphs":[
{
"child_type":"unordered",
"children":[
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Alan Kay",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"STEPS",
"type":"text"
}
]
},
{
"child_type":"unordered",
"children":[
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Metacompiler workshop",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Video about Lua implementation",
"type":"text"
}
]
}
],
"fragments":[
{
"text":"META II",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"OMeta",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Ohm",
"type":"text"
}
]
}
],
"id":"04202345600343e3a240709206c19590",
"type":"list"
}
],
"title":"Similar projects / inspiration"
}
],
"id":"9a483a4a28de4f298790297b5708b96f",
"paragraphs":[
{
"fragments":[
{
"text":"In this article I present RLMeta, a domain specific language for writing parsers, interpreters, compilers, etc.",
"type":"text"
}
],
"id":"0aa7192e98bd4d02bdb9a0b059155310",
"type":"text"
},
{
"fragments":[
{
"text":"In RLMeta you write grammars that specify how to match objects from an input stream. With semantic actions you specify what should happen when objects are matched.",
"type":"text"
}
],
"id":"f02eaf34f684451a842b6d275b1361f4",
"type":"text"
},
{
"fragments":[
{
"text":"The RLMeta compiler translates grammars into programs that recognize the objects specified in the grammar and performs the semantic actions when the objects are matched. Depending on the semantic actions, the output from RLMeta is either a parser, interpreter, compiler, etc.",
"type":"text"
}
],
"id":"dabc7ecca02244b088ce2018fe46981d",
"type":"text"
},
{
"fragments":[
{
"text":"Overview of RLMeta compiler.",
"type":"text"
}
],
"id":"93f918b4e1e7472a8b1077399152b7ec",
"image_base64":"",
"type":"image"
},
{
"fragments":[
{
"text":"I will illustrate RLMeta with a series of examples.",
"type":"text"
}
],
"id":"c617755ef5da415880b3f91a7cc8c912",
"type":"text"
}
],
"title":"RLMeta"
},
"variables":{
"0051e09230894b6696a82c3f05f6740a":"upper",
"0449532c17204462b4b4681b07ac12b5":"expr1",
"07c126c0f9094e189f37cc4ab940b0b4":"_memo",
"08c927c12a8741f9994399078b91d0b8":"_a864d6cb43244a1ca536085dd92431af",
"092fb427436241669092a2244dc64c33":"treeprinter_py",
"0a8e6be4bec3466bb658d7d4ff5bc5fd":"FnCall",
"0c1a9537d33148388015163fc90329b3":"MatchList",
"10d9c2de82a14d12bd545133bd4e15f8":"MatchString",
"1104a6a7ec934b48a4f1db64dcd27000":"_label",
"1659fb73179a4fd8abfc99b95d9f5560":"bind",
"1868228966e84ad698de9ff7fe063861":"space",
"18d86dcee79847818139f3dd7dc38d8a":"astSeq",
"193b6786b4574a48b5e75f649420b08d":"pos",
"195e7fa2b75a40baa69b0bbf57a53150":"parser_py",
"19791660815a43e1b775ea6a29349648":"astListItem",
"1f94d55a48c14180b2992433d29ace85":"next_object",
"22163f4ee0fd4e68b2c95f94e111dee1":"dedent",
"229c153579734cffaa700c7e26bcd7f4":"_builder",
"2420b6bcf2374252a533688aa0b33b5f":"astList",
"2508a37fdce84b31a7e6093a98c57506":"BuildCharsec",
"25ec6fc64b8b4a39a9df41daa690386f":"MatchAny",
"26534c61b2d94990abb37ceeeb648e4f":"_ors",
"289a3db9c53e420da4dbdbc94a32aadf":"_vars",
"28ffce2da5724d248fa88ac555d118f8":"asListItemWithNewVars",
"2a00f6add9e9443ab98af74a6da8b379":"run",
"2aa377816ed3486da72cff7bd46190ad":"Grammar",
"2c430882d5af40168a69e1b4b9eb7e0d":"_or",
"2e8a56ad01dc4a289fbd584bc4874e7e":"create",
"2ea1b512b7444d8ab077edeba233a4f3":"codegenerator_py",
"2f6729bf45e84649b3187f8016c3fec9":"_advance",
"301f08856bf54373bc5975f75a315105":"String",
"32f243f8879e4c38a5bfbd61623937d2":"_MatchError",
"373f023f0f5f4744a7b309cf9a76d138":"SemanticAction",
"3e7232e282f642ab8ac4fbe709a32a99":"_result",
"3f3db8526d034826bb4d672abcc6029c":"calculator_py",
"41435c2c862f40c1858cd2acd0b4f0bd":"Anonymous",
"42f0b42533be4f7eb54c04f22a137669":"grammar",
"43cd203f934f45c4be5ce3906b60ca5d":"_label",
"4852ced8038c4074a5a8104b8596e0e0":"Apply",
"49ba1aa1e24e408ba2b32bff68a72840":"List",
"49dc22ba19624755a18a13a9e76734b1":"_Builder",
"4ad80c8d1d814fefa2656595f1d841c6":"is_at_end",
"4c38cde583ac42ea8c7b9295a92e26f2":"_Output",
"4e5409ddd4a34450b3c8b4cb8bc5dd60":"escape",
"4e78a4bc50f744bb959c72b5918d9d32":"no_action",
"50ee7994db484890abbeeb13330e22a7":"_AtomBuilder",
"51046a6353b3472f8fe355d7f481eea9":"_b277e0c5612d4697bf8f8237494f8474",
"51620e4ed6bb4e359d4f6be5587dd423":"_Pos",
"53acf505e0ee41de85c674e211ecd39c":"_match_range",
"5440b88cecfb4dafad63f0f7887b82ce":"_match_charseq",
"56c85a8b77424f849f2a1b604066439e":"_or",
"56d10f7bfcfd43bb996c3f76423b067b":"to_rlmeta_output_stream",
"596495d8d3c041d190a3330d1707203c":"_dump_memo",
"59d465325dd74411b347002179ecda0a":"_last_match",
"5b90ab050b7547de847cab210d087685":"support_py",
"5bad22de76f845a68dd802dcb830efcc":"wrapFn",
"5c352d6f3e54444cad73e2891e76e29a":"next_input",
"5cb361e64daa4aea9637f5b3fd6b91f0":"action",
"60d7dacf2a2b4336b0329665c2026cc0":"Star",
"622901123a0747d09cd41c9850f75b72":"092fb427436241669092a2244dc64c33_py",
"6230f0917e9f4954add45c5e39a557e0":"sequence",
"630b364d3e7345c098bc8cff819f4d99":"Or",
"6352455a9a4f44c984b2c210151858a2":"support_py",
"63d39eb3401840e681f80ff11203b175":"action",
"63e215a62fb74cebb9c2939e751e326f":"start",
"653fc20558a64badb437b07f3d1c8490":"nested",
"6544a37a96ce4294ab4553709d89f398":"_RLMeta",
"680e8a08749245bc9bbc232417da1d39":"choice",
"6860db9e40994ebfbe04834b4f12f721":"MatchRange",
"6a519019bfac49598dc36620b5b58811":"Bind",
"6b1fe389a7254359b3fbe4cb26ea084e":"nameChar",
"6de4b0de9db3465b89ec2278c5c557a8":"from_object",
"70c457e3514948bcb6c00b67e5a180a2":"_star",
"736cd2768dcd4843b43aca56bea200d3":"MatchNothing",
"739c23d655494bd8a8b9f16e3bd03a52":"wrapInAnd",
"747c1862acef4f499e2a7f16cbdd472a":"describe",
"793e09d183c5498fa2587841cd94c126":"char",
"7b75cb86cab34645b43d69d790e6e206":"DedentBuilder",
"7befab3d0c5747d687b20830147a70fa":"nameStart",
"7d667137ca2f4350969bcf2044d677de":"choices",
"7d82aaa0f3d34c059532d7a090654ab7":"string",
"7d8a78dfe90743759bdd25cf45506815":"_IndentBuilder",
"7ea6f6977ca24c218e28cd96b1cf8267":"_negative_lookahead",
"7f941dd526284ccc8143dbbc8ae8df3b":"sequence",
"826871508bad4fecb6e575779218874d":"_match",
"83ce9666a26449cd9936798594c99e3f":"rlmeta",
"846fccf81eca4ab48a284407a1647eaa":"_vars",
"85139f1436944deab62958b8a713d8aa":"eval",
"85ee4a0a694641c3aa683a15e6a0ba5d":"astItems",
"87bf33a4869b4d30944c4dd4388631a8":"statement",
"87debc7f453a48eab28b89389b5474a3":"charClass",
"8a8e32dcfa5545f7aa292dd7e696030a":"name",
"8a9e9ea4c4474b40934bd2ec52902c82":"",
"8b98e38b093140fc956b35f6cbf5018e":"ast",
"8c4b9e8c90ff4aa08d4840f8c1560522":"_match",
"8cb500cdd43d41a78158c645da945c70":"indent",
"8cf9a10b04cc48a484e1cb7c6f1f2f28":"CodeGenerator",
"8d17eff4871e411793cf0daf3a2ab204":"And",
"8d8408b72eb3446ab5493dad2c80477e":"lower",
"8f0ac7afdb164a6cb5287e9382330e91":"nothing",
"8ff0b4980efa4e349ec5ef14815be6ec":"MatchCharseq",
"91983a8c8ff04389a1c21c67abcebf46":"wrapInFn",
"938897d17c5542788155a92d7eddb73c":"_log",
"94dd8ae9174644c2bb5e32d35f601486":"astSeqItem",
"98e8edb80565419e93902ec6ebc5b352":"choice",
"99f12ae30d1a42989f875222b33832ba":"support",
"9b21a7a4087848ba8f2ada071a294d73":"_match_list",
"a304a36f0ab541209c9e8aa78f4edc46":"Parser",
"a4f50e79518843e985eb9545a235ae89":"_Vars",
"a5837c091631449aadeeaa004ae71b0b":"write",
"a5d8a6b567934dd6a53cb34b2a18d30c":"_last_match",
"a864d6cb43244a1ca536085dd92431af":"charseq",
"aa94c870055a417b852e05100fb546c0":"BuildDedent",
"ab9490a5e7ba4561b96b04f481a9e57e":"_match_string",
"ae2f859206d741eca9f5e10495cb8095":"buildExpr",
"ae823ab23224415f9a539b0354f311b8":"VarLookup",
"af5dbdd6e27c451398b2b116b5ff42d3":"write",
"b058347d19484740b7e2dec4816c0978":"_ObjectStream",
"b062e0322e284160bf26034e9de32446":"memo_key",
"b09ffc5c602a482982cec2726c306ace":"withNewVars",
"b2115b3eeaa143068958949787f5d104":"next",
"b277e0c5612d4697bf8f8237494f8474":"_ListBuilder",
"b3480703b376431588d58149f19c7a13":"_star",
"b4b8cb5f4cdd4dc68ecc9ca100d1da5a":"_Stream",
"b6663a67104042fe8ee0bcb72896f366":"BuildNewline",
"b845c4cee1734619991d56de83dce37d":"Scope",
"bc27a67cb10b4650a32bfe7af84c5060":"Not",
"bd6daaaf4f8a47a1991da45be10921c3":"expr2",
"be57e79c16d8421fad091ec048a56211":"RetStringBuild",
"bfaedafcea7445e7b7ed19c9abb47736":"_DedentBuilder",
"c590c92167d34fe4bfdbb084c03834c1":"_and",
"c76075de5ae9496f9ef5b3c800111ead":"_any",
"c8edc6f14d27480e9f737a7697f07f07":"rule",
"c9ecfed5791644a3b7ea2122d4ed87c9":"ListBuilder",
"cbbcd925bc2c42b9add24aaa736f4d35":"_SemanticAction",
"cc14e6fceec9478c8fdb4ac3a58dbf7a":"digit",
"ccb3f676f6314d788147dc603933cd28":"astItem",
"cf4267183a3b4175801c67496a385af6":"_stream",
"cf8770da147840679077788180e10778":"ListItemSplice",
"d09ab0856aa0453385e2158fad4dde9c":"support_py_string",
"d34e449a8ca740d0a4b84921fc05b25f":"IndentBuilder",
"d6ed0f3ac9e84f60bae25485ddb2f97e":"_CharStream",
"db7a0c597eb84fc1b38a59b22f01eeef":"nest",
"dc3d22a8b70043628b058ffd00659a5d":"BuildIndent",
"dd463f369f79475da606b1cfc2d96076":"hostExpr",
"de5ba4ce4509433c946eacf356d7cfaa":"class:x ",
"de83a3a772234966ac566909fdfb0789":"file",
"df25061bb4004aa693b603f0a8ec2af2":"_MatchError",
"dfcaa421bd764cce9d99219c61883a45":"expr",
"e1248cbd01c54a1680793b61e7a048e1":"innerChar",
"e22e419d7c4845389694467bfa395529":"_f49eae10880e4186a37c021e34aea403",
"e22fa3c5d4144197906cbb74af6cc83e":"Rule",
"e45d3bc7fadf4cc1bd02843c87f0d034":"original_stream",
"e521dea02b37474cb05f03e800132aa2":"_last",
"ea57b40b324c4c03b030c78e924ed860":"lookup",
"ec2b7e954fe24f329250bd22c70538e4":"_Vars",
"ee43fa1a15be4277b8bdd277451eb04d":"_and",
"efa7dd37aa9e46908ed34f8d31cd476d":"Or",
"f49eae10880e4186a37c021e34aea403":"_ands",
"f8026a10c5b64e46bfde32e671e4760e":"_7ea6f6977ca24c218e28cd96b1cf8267",
"f8b8599256e946a08d2325d52bf8e10b":"BuildVar",
"fdd8dd7ed7f54cc487c14cc791d637e2":"wrapInOr",
"fe84c1eea3fc4476bbcb1c717c92d43b":"hostExprListItem",
"ff0229c63d8a4b4897faed8c38201de3":"astFnBody",
"ff9ae871d46e43eca6fe9d752dfb7afc":"pexpr"
}
}