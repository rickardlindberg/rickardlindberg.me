{
"root_page":{
"children":[
{
"children":[],
"id":"b4f6655bfb5e499997a0b1be8aa83d22",
"paragraphs":[
{
"fragments":[
{
"text":"The first example of RLMeta is a calculator. It recognizes basic arithmetic expressions and evaluates them. It is an interpreter for arithmetic expressions.",
"type":"text"
}
],
"id":"42f1925ded884308b12da0798d94b61e",
"type":"text"
},
{
"fragments":[
{
"text":"Overview of calculator interpreter.",
"type":"text"
}
],
"id":"a87979cf689944828bf1cc0b51214466",
"image_base64":"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",
"type":"image"
},
{
"fragments":[
{
"text":"The grammar (written in RLMeta) looks like this:",
"type":"text"
}
],
"id":"dce094fd38c74606ae9b947632c01a81",
"type":"text"
},
{
"chunkpath":[],
"filepath":[
"calculator.rlmeta"
],
"fragments":[
{
"text":"Calculator {\n  expression =\n    | additive\n  additive =\n    | multitive:x '+' additive:y ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> add(x y)\n    | multitive\n  multitive =\n    | digit:x '*' multitive:y ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> mul(x y)\n    | digit\n  digit =\n    | '0'-'9':x ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> int(x)\n}\n",
"type":"code"
}
],
"id":"b54646c61b3f4216929bc173be5f6430",
"type":"code"
},
{
"fragments":[
{
"text":"TODO: Explain grammar.",
"type":"strong"
}
],
"id":"05e6285771874bfea5734ba3ff65aed3",
"type":"text"
},
{
"fragments":[
{
"text":"When the calculator grammar is fed to the RLMeta compiler, a program is output in a target language that is an interpreter for arithmetic expressions.",
"type":"text"
}
],
"id":"63a18e34ac1c4a7fba249b421fd031df",
"type":"text"
},
{
"fragments":[
{
"text":"Overview of calculator compilation.",
"type":"text"
}
],
"id":"b87e6570816a4e75a51c9dcb035fc2fb",
"image_base64":"",
"type":"image"
},
{
"chunkpath":[],
"filepath":[
"compile_calculator.sh"
],
"fragments":[
{
"text":"#!/bin/sh\n\nset -e\n\n",
"type":"code"
},
{
"id":"5b90ab050b7547de847cab210d087685",
"type":"variable"
},
{
"text":"=$(python rlmeta.py --support)\n",
"type":"code"
},
{
"id":"3f3db8526d034826bb4d672abcc6029c",
"type":"variable"
},
{
"text":"=$(cat calculator.rlmeta | python rlmeta.py)\n\ncat <<EOD\n",
"type":"code"
},
{
"path":[
"calculator python file"
],
"prefix":"",
"type":"chunk"
},
{
"text":"EOD\n",
"type":"code"
}
],
"id":"1c648bdb39f54ee7ad86680530851375",
"type":"code"
},
{
"chunkpath":[
"calculator python file"
],
"filepath":[
"compile_calculator.sh"
],
"fragments":[
{
"text":"import sys\nfrom operator import add, mul\n\n$",
"type":"code"
},
{
"id":"5b90ab050b7547de847cab210d087685",
"type":"variable"
},
{
"text":"\n\n$",
"type":"code"
},
{
"id":"3f3db8526d034826bb4d672abcc6029c",
"type":"variable"
},
{
"text":"\n\nif __name__ == \"__main__\":\n    calculator = Calculator()\n    while True:\n        line = raw_input(\"> \")\n        print(calculator.run(\"expression\", line))\n",
"type":"code"
}
],
"id":"06fd6fc7c27940cda1755a1aec2fa358",
"type":"code"
},
{
"fragments":[
{
"text":"TODO: Include live demo that readers can play with.",
"type":"strong"
}
],
"id":"476723b2b7e046a4a2c0b809b1ce4bfc",
"type":"text"
}
],
"title":"Calculator"
},
{
"children":[],
"id":"25d640e9b62e4609b81d5b50b20a4433",
"paragraphs":[
{
"fragments":[
{
"text":"The second example of RLMeta is a tree to html list conversion.",
"type":"text"
}
],
"id":"dfa7b345cb3d438fb3a3a5b0dcb2c4de",
"type":"text"
},
{
"chunkpath":[],
"filepath":[
"treeprinter.rlmeta"
],
"fragments":[
{
"text":"TreePrinter {\n  toHtmlList =\n    | toHtmlListItem:x ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { \"<ul>\" x \"</ul>\" ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n    | .:x ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { x ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n  toHtmlListItem =\n    | [.:x toHtmlList*:xs] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { \"<li>\" x xs \"</li>\" ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n}\n",
"type":"code"
}
],
"id":"d165ef81494a41418ee8f45c8713747e",
"type":"code"
},
{
"fragments":[
{
"text":"TODO: Include live demo that readers can play with.",
"type":"strong"
}
],
"id":"b7746a4fed574eee9c8934472a5a81f5",
"type":"text"
}
],
"title":"Tree printer"
},
{
"children":[
{
"children":[
{
"children":[],
"id":"a757df1ad1764cc996d9d3e0a0ce4d25",
"paragraphs":[
{
"fragments":[
{
"text":"The top level syntactic elements are grammars. Grammars have a ",
"type":"text"
},
{
"page_id":"19acecc9fbc44023a69cea9eadbe734d",
"text":null,
"type":"reference"
},
{
"text":" and a set of ",
"type":"text"
},
{
"page_id":"e1799ddc14ce4a7f83c8f390f9bf8720",
"text":null,
"type":"reference"
},
{
"text":" enclosed in curly braces. ",
"type":"text"
},
{
"page_id":"d729731e037a4a5aafa6da77d2b8bdb1",
"text":null,
"type":"reference"
},
{
"text":" is ignored. When such a sequence is matched a ",
"type":"text"
},
{
"id":"2aa377816ed3486da72cff7bd46190ad",
"type":"variable"
},
{
"text":" AST node is created:",
"type":"text"
}
],
"id":"8de82ec3c0f34c94af9bfc418229357e",
"type":"text"
},
{
"chunkpath":[
"rules"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"id":"42f0b42533be4f7eb54c04f22a137669",
"type":"variable"
},
{
"text":" =\n  | ",
"type":"code"
},
{
"id":"8a8e32dcfa5545f7aa292dd7e696030a",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '{' ",
"type":"code"
},
{
"id":"c8edc6f14d27480e9f737a7697f07f07",
"type":"variable"
},
{
"text":"*:ys ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '}' ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"2aa377816ed3486da72cff7bd46190ad",
"type":"variable"
},
{
"text":"\" x ~ys]\n",
"type":"code"
}
],
"id":"41afd1b3bc8749a2bdefb2a09eb54f62",
"type":"code"
}
],
"title":"Grammar"
},
{
"children":[],
"id":"e1799ddc14ce4a7f83c8f390f9bf8720",
"paragraphs":[
{
"fragments":[
{
"text":"Inside grammars we have rules. Rules have a ",
"type":"text"
},
{
"page_id":"19acecc9fbc44023a69cea9eadbe734d",
"text":null,
"type":"reference"
},
{
"text":" followed by the equal sign followed by ",
"type":"text"
},
{
"page_id":"c2a43ebb9a7d477f8dd7126f94bd33de",
"text":null,
"type":"reference"
},
{
"text":". ",
"type":"text"
},
{
"page_id":"d729731e037a4a5aafa6da77d2b8bdb1",
"text":null,
"type":"reference"
},
{
"text":" is ignored. When such a sequence is found a ",
"type":"text"
},
{
"id":"e22fa3c5d4144197906cbb74af6cc83e",
"type":"variable"
},
{
"text":" AST node is created:",
"type":"text"
}
],
"id":"5e9600e66ce74fa18b69b96917889a6f",
"type":"text"
},
{
"chunkpath":[
"rules"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"id":"c8edc6f14d27480e9f737a7697f07f07",
"type":"variable"
},
{
"text":" =\n  | ",
"type":"code"
},
{
"id":"8a8e32dcfa5545f7aa292dd7e696030a",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '=' ",
"type":"code"
},
{
"id":"7d667137ca2f4350969bcf2044d677de",
"type":"variable"
},
{
"text":":y ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"e22fa3c5d4144197906cbb74af6cc83e",
"type":"variable"
},
{
"text":"\" x y]\n",
"type":"code"
}
],
"id":"f24d0daa1d1c4ddeb6b111c45aa31102",
"type":"code"
}
],
"title":"Rule"
},
{
"children":[],
"id":"c2a43ebb9a7d477f8dd7126f94bd33de",
"paragraphs":[
{
"fragments":[
{
"text":"Inside rules we have choices. Choices has a set of ",
"type":"text"
},
{
"page_id":"08818eb200d0482f8feb9104e1ae2ea7",
"text":null,
"type":"reference"
},
{
"text":" separated by a pipe character. Optionally the first choice can start with a pipe character to allow all choice lines to look the same. ",
"type":"text"
},
{
"page_id":"d729731e037a4a5aafa6da77d2b8bdb1",
"text":null,
"type":"reference"
},
{
"text":" is ignored. When such a sequence is found an ",
"type":"text"
},
{
"id":"efa7dd37aa9e46908ed34f8d31cd476d",
"type":"variable"
},
{
"text":" AST node is created:",
"type":"text"
}
],
"id":"77e39db8bc6944b8afb793e3fcf28e88",
"type":"text"
},
{
"chunkpath":[
"rules"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"id":"7d667137ca2f4350969bcf2044d677de",
"type":"variable"
},
{
"text":" =\n  | (",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '|')?\n    ",
"type":"code"
},
{
"id":"7f941dd526284ccc8143dbbc8ae8df3b",
"type":"variable"
},
{
"text":":x (",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '|' ",
"type":"code"
},
{
"id":"7f941dd526284ccc8143dbbc8ae8df3b",
"type":"variable"
},
{
"text":")*:xs ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"efa7dd37aa9e46908ed34f8d31cd476d",
"type":"variable"
},
{
"text":"\" x ~xs]\n",
"type":"code"
}
],
"id":"5548c68fed5947a891639cab8086cba5",
"type":"code"
}
],
"title":"Choices"
},
{
"children":[],
"id":"08818eb200d0482f8feb9104e1ae2ea7",
"paragraphs":[
{
"fragments":[
{
"text":"A sequence has one or more ",
"type":"text"
},
{
"page_id":"5fca8ddb3f88457bbe5217fa1ebf4383",
"text":null,
"type":"reference"
},
{
"text":". When such a sequence is found an ",
"type":"text"
},
{
"id":"8d17eff4871e411793cf0daf3a2ab204",
"type":"variable"
},
{
"text":" AST node is created wrapped in a ",
"type":"text"
},
{
"id":"b845c4cee1734619991d56de83dce37d",
"type":"variable"
},
{
"text":" AST node:",
"type":"text"
}
],
"id":"a9761a1483114aebbdab2d94006de2cf",
"type":"text"
},
{
"chunkpath":[
"rules"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"id":"7f941dd526284ccc8143dbbc8ae8df3b",
"type":"variable"
},
{
"text":" =\n  | ",
"type":"code"
},
{
"id":"dfcaa421bd764cce9d99219c61883a45",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"id":"dfcaa421bd764cce9d99219c61883a45",
"type":"variable"
},
{
"text":"*:xs ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"b845c4cee1734619991d56de83dce37d",
"type":"variable"
},
{
"text":"\" [\"",
"type":"code"
},
{
"id":"8d17eff4871e411793cf0daf3a2ab204",
"type":"variable"
},
{
"text":"\" x ~xs]]\n",
"type":"code"
}
],
"id":"a00b4131f7794b6cb496a4e8249dc9d2",
"type":"code"
}
],
"title":"Sequence"
},
{
"children":[],
"id":"5fca8ddb3f88457bbe5217fa1ebf4383",
"paragraphs":[
{
"chunkpath":[
"rules"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"id":"dfcaa421bd764cce9d99219c61883a45",
"type":"variable"
},
{
"text":" =\n",
"type":"code"
},
{
"path":[
"expr"
],
"prefix":"  ",
"type":"chunk"
},
{
"text":"  | ",
"type":"code"
},
{
"id":"0449532c17204462b4b4681b07ac12b5",
"type":"variable"
},
{
"text":"\n",
"type":"code"
}
],
"id":"f1365e28cce74941892cdaa24ba6d2ad",
"type":"code"
},
{
"chunkpath":[
"rules",
"expr"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"text":"| ",
"type":"code"
},
{
"id":"0449532c17204462b4b4681b07ac12b5",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" ':' ",
"type":"code"
},
{
"id":"8a8e32dcfa5545f7aa292dd7e696030a",
"type":"variable"
},
{
"text":":y ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"6a519019bfac49598dc36620b5b58811",
"type":"variable"
},
{
"text":"\" y x]\n",
"type":"code"
}
],
"id":"e2bbebd2652749d69135a786b213433c",
"type":"code"
}
],
"title":"Expression"
},
{
"children":[],
"id":"cdeac4c7bcb84261a3d194c1183c9dd7",
"paragraphs":[
{
"chunkpath":[
"rules"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"id":"0449532c17204462b4b4681b07ac12b5",
"type":"variable"
},
{
"text":" =\n",
"type":"code"
},
{
"path":[
"expr1"
],
"prefix":"  ",
"type":"chunk"
},
{
"text":"  | ",
"type":"code"
},
{
"id":"bd6daaaf4f8a47a1991da45be10921c3",
"type":"variable"
},
{
"text":"\n",
"type":"code"
}
],
"id":"101abf29d86c4c4a82e5d95c13318ec9",
"type":"code"
},
{
"chunkpath":[
"rules",
"expr1"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"text":"| ",
"type":"code"
},
{
"id":"bd6daaaf4f8a47a1991da45be10921c3",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '*' ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"60d7dacf2a2b4336b0329665c2026cc0",
"type":"variable"
},
{
"text":"\" x]\n",
"type":"code"
}
],
"id":"0cb52720d8524ebaa24d9853d0fbfa78",
"type":"code"
},
{
"chunkpath":[
"rules",
"expr1"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"text":"| ",
"type":"code"
},
{
"id":"bd6daaaf4f8a47a1991da45be10921c3",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '?' ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"630b364d3e7345c098bc8cff819f4d99",
"type":"variable"
},
{
"text":"\" x [\"",
"type":"code"
},
{
"id":"736cd2768dcd4843b43aca56bea200d3",
"type":"variable"
},
{
"text":"\"]]\n",
"type":"code"
}
],
"id":"11d2b95572e24714ba973c1e7a225282",
"type":"code"
},
{
"chunkpath":[
"rules",
"expr1"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"text":"| ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '!' ",
"type":"code"
},
{
"id":"bd6daaaf4f8a47a1991da45be10921c3",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"bc27a67cb10b4650a32bfe7af84c5060",
"type":"variable"
},
{
"text":"\" x]\n",
"type":"code"
}
],
"id":"e56a131ffdbe4a649a3e11d1e589a76d",
"type":"code"
}
],
"title":"Expression level 1"
},
{
"children":[],
"id":"4e76262e4c9841db8c0b79401ac7a8ff",
"paragraphs":[
{
"chunkpath":[
"rules"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"id":"bd6daaaf4f8a47a1991da45be10921c3",
"type":"variable"
},
{
"text":" =\n",
"type":"code"
},
{
"path":[
"expr2"
],
"prefix":"  ",
"type":"chunk"
}
],
"id":"f05c9406eceb4daab6c376ababdb1679",
"type":"code"
},
{
"chunkpath":[
"rules",
"expr2"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"text":"| ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '->' ",
"type":"code"
},
{
"id":"dd463f369f79475da606b1cfc2d96076",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"373f023f0f5f4744a7b309cf9a76d138",
"type":"variable"
},
{
"text":"\" x]\n",
"type":"code"
}
],
"id":"abbc1c45efe94a719d1fe1ab62ca8a49",
"type":"code"
},
{
"chunkpath":[
"rules",
"expr2"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"text":"| ",
"type":"code"
},
{
"id":"8a8e32dcfa5545f7aa292dd7e696030a",
"type":"variable"
},
{
"text":":x !(",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '=') ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"4852ced8038c4074a5a8104b8596e0e0",
"type":"variable"
},
{
"text":"\" x]\n",
"type":"code"
}
],
"id":"ec59067ab11540bfa013d3856c713db8",
"type":"code"
},
{
"chunkpath":[
"rules",
"expr2"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"text":"| ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"id":"793e09d183c5498fa2587841cd94c126",
"type":"variable"
},
{
"text":":x '-' ",
"type":"code"
},
{
"id":"793e09d183c5498fa2587841cd94c126",
"type":"variable"
},
{
"text":":y ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"6860db9e40994ebfbe04834b4f12f721",
"type":"variable"
},
{
"text":"\" x y]\n",
"type":"code"
}
],
"id":"c450a47241a448689d950257aa817da7",
"type":"code"
},
{
"chunkpath":[
"rules",
"expr2"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"text":"| ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"id":"7d82aaa0f3d34c059532d7a090654ab7",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"10d9c2de82a14d12bd545133bd4e15f8",
"type":"variable"
},
{
"text":"\" x]\n",
"type":"code"
}
],
"id":"2e68adc773b945baa4039acf18cb9408",
"type":"code"
},
{
"chunkpath":[
"rules",
"expr2"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"text":"| ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"id":"a864d6cb43244a1ca536085dd92431af",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"8ff0b4980efa4e349ec5ef14815be6ec",
"type":"variable"
},
{
"text":"\" x]\n",
"type":"code"
}
],
"id":"bda22384f17e40ea8edd13f87f8b9f8c",
"type":"code"
},
{
"chunkpath":[
"rules",
"expr2"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"text":"| ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '.' ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"25ec6fc64b8b4a39a9df41daa690386f",
"type":"variable"
},
{
"text":"\"]\n",
"type":"code"
}
],
"id":"cefd75a91eac4a14bda7f8123c41dd8f",
"type":"code"
},
{
"chunkpath":[
"rules",
"expr2"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"text":"| ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '(' ",
"type":"code"
},
{
"id":"7d667137ca2f4350969bcf2044d677de",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" ')' ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> x\n",
"type":"code"
}
],
"id":"c013d1870d9d4a42bf491400b4d40ef9",
"type":"code"
},
{
"chunkpath":[
"rules",
"expr2"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"text":"| ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '[' ",
"type":"code"
},
{
"id":"dfcaa421bd764cce9d99219c61883a45",
"type":"variable"
},
{
"text":"*:xs ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" ']' ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"0c1a9537d33148388015163fc90329b3",
"type":"variable"
},
{
"text":"\" [\"",
"type":"code"
},
{
"id":"8d17eff4871e411793cf0daf3a2ab204",
"type":"variable"
},
{
"text":"\" ~xs]]\n",
"type":"code"
}
],
"id":"90062785865d4c69bf5b887ef2dc3977",
"type":"code"
}
],
"title":"Expression level 2"
},
{
"children":[],
"id":"768d143c206146ca8efba292c6e9169b",
"paragraphs":[
{
"chunkpath":[
"rules"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"id":"dd463f369f79475da606b1cfc2d96076",
"type":"variable"
},
{
"text":" =\n",
"type":"code"
},
{
"path":[
"hostExpr"
],
"prefix":"  ",
"type":"chunk"
}
],
"id":"f0b031c3724e42c5a0fb9704ef64976d",
"type":"code"
},
{
"chunkpath":[
"rules",
"hostExpr"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"text":"| ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"id":"7d82aaa0f3d34c059532d7a090654ab7",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"301f08856bf54373bc5975f75a315105",
"type":"variable"
},
{
"text":"\" x]\n",
"type":"code"
}
],
"id":"4e8a93fe7e314817be5d38733f388eb0",
"type":"code"
},
{
"fragments":[
{
"text":"Character sequence is just another way to say a string:",
"type":"text"
}
],
"id":"0044d259ce224f5eb078f8b0ac349194",
"type":"text"
},
{
"chunkpath":[
"rules",
"hostExpr"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"text":"| ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"id":"a864d6cb43244a1ca536085dd92431af",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"301f08856bf54373bc5975f75a315105",
"type":"variable"
},
{
"text":"\" x]\n",
"type":"code"
}
],
"id":"2160b0ae8ebd40b48f737d38078bfc4c",
"type":"code"
},
{
"chunkpath":[
"rules",
"hostExpr"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"text":"| ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '[' ",
"type":"code"
},
{
"id":"fe84c1eea3fc4476bbcb1c717c92d43b",
"type":"variable"
},
{
"text":"*:xs ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" ']' ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"49ba1aa1e24e408ba2b32bff68a72840",
"type":"variable"
},
{
"text":"\" ~xs]\n",
"type":"code"
}
],
"id":"cd1e8eee75404c96b632dc01c89fa462",
"type":"code"
},
{
"chunkpath":[
"rules"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"id":"fe84c1eea3fc4476bbcb1c717c92d43b",
"type":"variable"
},
{
"text":" =\n  | ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '~' ",
"type":"code"
},
{
"id":"dd463f369f79475da606b1cfc2d96076",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"cf8770da147840679077788180e10778",
"type":"variable"
},
{
"text":"\" x]\n  | ",
"type":"code"
},
{
"id":"dd463f369f79475da606b1cfc2d96076",
"type":"variable"
},
{
"text":"\n",
"type":"code"
}
],
"id":"f768cf3997814c6285c98edc162e886f",
"type":"code"
},
{
"chunkpath":[
"rules",
"hostExpr"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"text":"| ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '{' ",
"type":"code"
},
{
"id":"ae2f859206d741eca9f5e10495cb8095",
"type":"variable"
},
{
"text":"*:xs ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '}' ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"c9ecfed5791644a3b7ea2122d4ed87c9",
"type":"variable"
},
{
"text":"\" ~xs]\n",
"type":"code"
}
],
"id":"f2c2d41020ba4ad096e1c27393549301",
"type":"code"
},
{
"chunkpath":[
"rules"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"id":"ae2f859206d741eca9f5e10495cb8095",
"type":"variable"
},
{
"text":" =\n  | ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '>' ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"d34e449a8ca740d0a4b84921fc05b25f",
"type":"variable"
},
{
"text":"\"]\n  | ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '<' ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"7b75cb86cab34645b43d69d790e6e206",
"type":"variable"
},
{
"text":"\"]\n  | ",
"type":"code"
},
{
"id":"dd463f369f79475da606b1cfc2d96076",
"type":"variable"
},
{
"text":"\n",
"type":"code"
}
],
"id":"a3c04d0cc65d41c8af8017af890e7ea4",
"type":"code"
},
{
"chunkpath":[
"rules",
"hostExpr"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"text":"| ",
"type":"code"
},
{
"id":"8a8e32dcfa5545f7aa292dd7e696030a",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '(' ",
"type":"code"
},
{
"id":"dd463f369f79475da606b1cfc2d96076",
"type":"variable"
},
{
"text":"*:xs ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" ')' ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"0a8e6be4bec3466bb658d7d4ff5bc5fd",
"type":"variable"
},
{
"text":"\" x ~xs]\n",
"type":"code"
}
],
"id":"009c0123d4f84ea7bc5b644789e03d58",
"type":"code"
},
{
"chunkpath":[
"rules",
"hostExpr"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"text":"| ",
"type":"code"
},
{
"id":"8a8e32dcfa5545f7aa292dd7e696030a",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"ae823ab23224415f9a539b0354f311b8",
"type":"variable"
},
{
"text":"\" x]\n",
"type":"code"
}
],
"id":"e4954a411cdc4eee98faa1985f1de417",
"type":"code"
}
],
"title":"Host expression"
},
{
"children":[],
"id":"2057abb618bf4209950acd87fa49da5d",
"paragraphs":[
{
"chunkpath":[
"rules"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"id":"7d82aaa0f3d34c059532d7a090654ab7",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"index":5,
"type":"tabstop"
},
{
"text":"= '\"' (!'\"' ",
"type":"code"
},
{
"id":"e1248cbd01c54a1680793b61e7a048e1",
"type":"variable"
},
{
"text":")*:xs '\"' ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> join(xs)\n",
"type":"code"
}
],
"id":"6b45edfd3ac04273aa9498dfcaa199fa",
"type":"code"
},
{
"chunkpath":[
"rules"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"id":"a864d6cb43244a1ca536085dd92431af",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"index":5,
"type":"tabstop"
},
{
"text":"= '\\'' (!'\\'' ",
"type":"code"
},
{
"id":"e1248cbd01c54a1680793b61e7a048e1",
"type":"variable"
},
{
"text":")*:xs '\\'' ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> join(xs)\n",
"type":"code"
}
],
"id":"b3ea44957e4148ab9ded5e09fbe0fcab",
"type":"code"
},
{
"chunkpath":[
"rules"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"id":"793e09d183c5498fa2587841cd94c126",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"index":5,
"type":"tabstop"
},
{
"text":"= '\\'' !'\\'' ",
"type":"code"
},
{
"id":"e1248cbd01c54a1680793b61e7a048e1",
"type":"variable"
},
{
"text":":x '\\'' ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> join(x)\n",
"type":"code"
}
],
"id":"f33996b91f214a82b9bc2e4a0c75ffff",
"type":"code"
},
{
"chunkpath":[
"rules"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"id":"e1248cbd01c54a1680793b61e7a048e1",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"index":5,
"type":"tabstop"
},
{
"text":"= '\\\\' ",
"type":"code"
},
{
"id":"4e5409ddd4a34450b3c8b4cb8bc5dd60",
"type":"variable"
},
{
"text":" | .\n",
"type":"code"
}
],
"id":"65a3e78796854dcea2b7634d2a67bc4c",
"type":"code"
},
{
"chunkpath":[
"rules"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"id":"4e5409ddd4a34450b3c8b4cb8bc5dd60",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"index":5,
"type":"tabstop"
},
{
"text":"= '\\\\' -> \"\\\\\" | '\\'' -> \"'\"\n",
"type":"code"
},
{
"index":5,
"type":"tabstop"
},
{
"text":"| '\"'  -> \"\\\"\" | 'n'  -> \"\\n\"\n",
"type":"code"
}
],
"id":"ec0bcd3b02bf4077aa889dabf912dbb0",
"type":"code"
}
],
"title":"Character related"
},
{
"children":[],
"id":"19acecc9fbc44023a69cea9eadbe734d",
"paragraphs":[
{
"chunkpath":[
"rules"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"id":"8a8e32dcfa5545f7aa292dd7e696030a",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"index":5,
"type":"tabstop"
},
{
"text":"= ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"id":"7befab3d0c5747d687b20830147a70fa",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"id":"6b1fe389a7254359b3fbe4cb26ea084e",
"type":"variable"
},
{
"text":"*:xs ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> join([x ~xs])\n",
"type":"code"
},
{
"id":"7befab3d0c5747d687b20830147a70fa",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"index":5,
"type":"tabstop"
},
{
"text":"= 'a'-'z' | 'A'-'Z'\n",
"type":"code"
},
{
"id":"6b1fe389a7254359b3fbe4cb26ea084e",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"index":5,
"type":"tabstop"
},
{
"text":"= 'a'-'z' | 'A'-'Z' | '0'-'9'\n",
"type":"code"
}
],
"id":"1c6666fb0163411abc814856a4265683",
"type":"code"
}
],
"title":"Name"
},
{
"children":[],
"id":"d729731e037a4a5aafa6da77d2b8bdb1",
"paragraphs":[
{
"chunkpath":[
"rules"
],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"index":5,
"type":"tabstop"
},
{
"text":"= (' ' | '\\t' | '\\n')*\n",
"type":"code"
}
],
"id":"d62875593bb44d2087124443aded53e5",
"type":"code"
}
],
"title":"Space"
},
{
"children":[],
"id":"a56c54f42c00473091d7c8295ff4e0f1",
"paragraphs":[
{
"fragments":[
{
"text":"The complete parser:",
"type":"text"
}
],
"id":"cbbb7c4cccc8418f9b22de8fe6b91c48",
"type":"text"
},
{
"code_id":"c94ba005404c45f78e7511793da8d554",
"id":"104b3c249d084df2b43eebd29698f0f9",
"type":"expanded_code"
}
],
"title":"Summary"
}
],
"id":"1e01a8bdd22d48f2a7e8533d552bc264",
"paragraphs":[
{
"fragments":[
{
"text":"The parser's job is to convert a stream of characters to an AST. Here is the template for the grammar:",
"type":"text"
}
],
"id":"d62cec37c77c4f7b961ad53765449159",
"type":"text"
},
{
"chunkpath":[],
"filepath":[
"parser.rlmeta"
],
"fragments":[
{
"id":"a304a36f0ab541209c9e8aa78f4edc46",
"type":"variable"
},
{
"text":" {\n",
"type":"code"
},
{
"path":[
"rules"
],
"prefix":"  ",
"type":"chunk"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"c94ba005404c45f78e7511793da8d554",
"type":"code"
},
{
"fragments":[
{
"text":"The remainder of this section will fill in the details of the ",
"type":"text"
},
{
"id":"a304a36f0ab541209c9e8aa78f4edc46",
"type":"variable"
},
{
"text":" grammar.",
"type":"text"
}
],
"id":"bc1ada63d87b459fbdffcd4e0b52d602",
"type":"text"
}
],
"title":"Parser"
},
{
"children":[
{
"children":[],
"id":"ed6931f4eeca4d43aaee1e9f5485a295",
"paragraphs":[
{
"fragments":[
{
"text":"When a ",
"type":"text"
},
{
"id":"2aa377816ed3486da72cff7bd46190ad",
"type":"variable"
},
{
"text":" AST node is matched a Python class with the same name is generated that inherits from ",
"type":"text"
},
{
"id":"6544a37a96ce4294ab4553709d89f398",
"type":"variable"
},
{
"text":":",
"type":"text"
}
],
"id":"e3e98686c73d4c7e8211846c6bb629bb",
"type":"text"
},
{
"chunkpath":[
"rules",
"ast"
],
"filepath":[
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"2aa377816ed3486da72cff7bd46190ad",
"type":"variable"
},
{
"text":"\" .:x ",
"type":"code"
},
{
"id":"8b98e38b093140fc956b35f6cbf5018e",
"type":"variable"
},
{
"text":"*:xs] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { 'class ' x '(",
"type":"code"
},
{
"id":"6544a37a96ce4294ab4553709d89f398",
"type":"variable"
},
{
"text":"):\\n' > xs < ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"d3c4ef9bebd64746ab898a18575fd4ac",
"type":"code"
},
{
"fragments":[
{
"text":"The base class is defined in the support library:",
"type":"text"
}
],
"id":"4e3a4349f676432aa6ab703e6cd04414",
"type":"text"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"class ",
"type":"code"
},
{
"id":"6544a37a96ce4294ab4553709d89f398",
"type":"variable"
},
{
"text":"(object):\n",
"type":"code"
},
{
"path":[
"_RLMeta"
],
"prefix":"    ",
"type":"chunk"
}
],
"id":"5df5c3d0f1ae47b7821a5df66bbb63dc",
"type":"code"
},
{
"fragments":[
{
"text":"Names of support classes start with an underscore to not collide with generated grammar names (which can not contain underscores).",
"type":"text"
}
],
"id":"9d189abc5e624388a08c34b923aa8f01",
"type":"text"
},
{
"fragments":[
{
"text":"Grammars in Python have a single entry point: ",
"type":"text"
},
{
"id":"2a00f6add9e9443ab98af74a6da8b379",
"type":"variable"
},
{
"text":".",
"type":"text"
}
],
"id":"955dfe1bc67f4b7ca1b109a36f56cb49",
"type":"text"
},
{
"chunkpath":[
"classes",
"_RLMeta"
],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"def ",
"type":"code"
},
{
"id":"2a00f6add9e9443ab98af74a6da8b379",
"type":"variable"
},
{
"text":"(self, rule_name, input_object):\n    self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":" = ",
"type":"code"
},
{
"id":"b4b8cb5f4cdd4dc68ecc9ca100d1da5a",
"type":"variable"
},
{
"text":".",
"type":"code"
},
{
"id":"6de4b0de9db3465b89ec2278c5c557a8",
"type":"variable"
},
{
"text":"(input_object)\n    self.",
"type":"code"
},
{
"id":"07c126c0f9094e189f37cc4ab940b0b4",
"type":"variable"
},
{
"text":" = {}\n    result = self.",
"type":"code"
},
{
"id":"826871508bad4fecb6e575779218874d",
"type":"variable"
},
{
"text":"(rule_name).",
"type":"code"
},
{
"id":"85139f1436944deab62958b8a713d8aa",
"type":"variable"
},
{
"text":"()\n    if hasattr(result, \"",
"type":"code"
},
{
"id":"56d10f7bfcfd43bb996c3f76423b067b",
"type":"variable"
},
{
"text":"\"):\n        return result.",
"type":"code"
},
{
"id":"56d10f7bfcfd43bb996c3f76423b067b",
"type":"variable"
},
{
"text":"()\n    else:\n        return result\n",
"type":"code"
}
],
"id":"c0bac19d60434ad2bf44cd6b70cf63ca",
"type":"code"
},
{
"chunkpath":[
"classes",
"_RLMeta"
],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"def ",
"type":"code"
},
{
"id":"826871508bad4fecb6e575779218874d",
"type":"variable"
},
{
"text":"(self, rule_name):\n    key = (rule_name, self._input.",
"type":"code"
},
{
"id":"193b6786b4574a48b5e75f649420b08d",
"type":"variable"
},
{
"text":"().key())\n    if key in self.",
"type":"code"
},
{
"id":"07c126c0f9094e189f37cc4ab940b0b4",
"type":"variable"
},
{
"text":":\n        result, self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":" = self.",
"type":"code"
},
{
"id":"07c126c0f9094e189f37cc4ab940b0b4",
"type":"variable"
},
{
"text":"[key]\n    else:\n        result = getattr(self, \"_rule_{}\".format(rule_name))()\n        self.",
"type":"code"
},
{
"id":"07c126c0f9094e189f37cc4ab940b0b4",
"type":"variable"
},
{
"text":"[key] = (result, self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":")\n    return result\n",
"type":"code"
}
],
"id":"26f47b044a2d4e599f7363169fb6a0aa",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"class ",
"type":"code"
},
{
"id":"b4b8cb5f4cdd4dc68ecc9ca100d1da5a",
"type":"variable"
},
{
"text":"(object):\n\n    @classmethod\n    def ",
"type":"code"
},
{
"id":"6de4b0de9db3465b89ec2278c5c557a8",
"type":"variable"
},
{
"text":"(cls, input_object):\n        if isinstance(input_object, basestring):\n            return cls(list(input_object), ",
"type":"code"
},
{
"id":"d6ed0f3ac9e84f60bae25485ddb2f97e",
"type":"variable"
},
{
"text":"())\n        else:\n            return cls([input_object], ",
"type":"code"
},
{
"id":"b058347d19484740b7e2dec4816c0978",
"type":"variable"
},
{
"text":"())\n\n    def __init__(self, objects, pos):\n        self._objects = objects\n        self._pos = pos\n\n    def ",
"type":"code"
},
{
"id":"193b6786b4574a48b5e75f649420b08d",
"type":"variable"
},
{
"text":"(self):\n        return self._pos\n\n    def ",
"type":"code"
},
{
"id":"b2115b3eeaa143068958949787f5d104",
"type":"variable"
},
{
"text":"(self):\n        if self.",
"type":"code"
},
{
"id":"4ad80c8d1d814fefa2656595f1d841c6",
"type":"variable"
},
{
"text":"():\n            raise ",
"type":"code"
},
{
"id":"df25061bb4004aa693b603f0a8ec2af2",
"type":"variable"
},
{
"text":"()\n        next_object = self._objects[0]\n        return next_object, ",
"type":"code"
},
{
"id":"b4b8cb5f4cdd4dc68ecc9ca100d1da5a",
"type":"variable"
},
{
"text":"(\n            self._objects[1:],\n            pos=self._pos.",
"type":"code"
},
{
"id":"2f6729bf45e84649b3187f8016c3fec9",
"type":"variable"
},
{
"text":"(next_object)\n        )\n\n    def ",
"type":"code"
},
{
"id":"4ad80c8d1d814fefa2656595f1d841c6",
"type":"variable"
},
{
"text":"(self):\n        return len(self._objects) == 0\n\n    def ",
"type":"code"
},
{
"id":"653fc20558a64badb437b07f3d1c8490",
"type":"variable"
},
{
"text":"(self, input_object):\n        return ",
"type":"code"
},
{
"id":"b4b8cb5f4cdd4dc68ecc9ca100d1da5a",
"type":"variable"
},
{
"text":"(input_object, self._pos.",
"type":"code"
},
{
"id":"db7a0c597eb84fc1b38a59b22f01eeef",
"type":"variable"
},
{
"text":"())\n",
"type":"code"
}
],
"id":"b11d191c565f44ac8f6ec57f2decacfe",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"class ",
"type":"code"
},
{
"id":"d6ed0f3ac9e84f60bae25485ddb2f97e",
"type":"variable"
},
{
"text":"(object):\n\n    def __init__(self, pos=0, line=1, column=1):\n        self._pos = pos\n        self._line = line\n        self._column = column\n\n    def ",
"type":"code"
},
{
"id":"b062e0322e284160bf26034e9de32446",
"type":"variable"
},
{
"text":"(self):\n        return self._pos\n\n    def ",
"type":"code"
},
{
"id":"2f6729bf45e84649b3187f8016c3fec9",
"type":"variable"
},
{
"text":"(self, next_object):\n        if next_object == \"\\n\":\n            return ",
"type":"code"
},
{
"id":"d6ed0f3ac9e84f60bae25485ddb2f97e",
"type":"variable"
},
{
"text":"(self._pos+1, self._line+1, 1)\n        else:\n            return ",
"type":"code"
},
{
"id":"d6ed0f3ac9e84f60bae25485ddb2f97e",
"type":"variable"
},
{
"text":"(self._pos+1, self._line, self._column+1)\n\n    def ",
"type":"code"
},
{
"id":"747c1862acef4f499e2a7f16cbdd472a",
"type":"variable"
},
{
"text":"(self):\n        return \"line: {}, column: {}\".format(self._line, self._column)\n",
"type":"code"
}
],
"id":"e637234d5baa4d669a60c90ce1688693",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"class ",
"type":"code"
},
{
"id":"b058347d19484740b7e2dec4816c0978",
"type":"variable"
},
{
"text":"(object):\n\n    def __init__(self, parent=None, pos=0):\n        self._parent = [] if parent is None else parent\n        self._pos = pos\n\n    def ",
"type":"code"
},
{
"id":"b062e0322e284160bf26034e9de32446",
"type":"variable"
},
{
"text":"(self):\n        return tuple(self._parent) + (self._pos,)\n\n    def ",
"type":"code"
},
{
"id":"2f6729bf45e84649b3187f8016c3fec9",
"type":"variable"
},
{
"text":"(self, next_object):\n        return ",
"type":"code"
},
{
"id":"b058347d19484740b7e2dec4816c0978",
"type":"variable"
},
{
"text":"(self._parent, self._pos+1)\n\n    def ",
"type":"code"
},
{
"id":"db7a0c597eb84fc1b38a59b22f01eeef",
"type":"variable"
},
{
"text":"(self):\n        return ",
"type":"code"
},
{
"id":"b058347d19484740b7e2dec4816c0978",
"type":"variable"
},
{
"text":"(self._parent+[self._pos])\n\n    def ",
"type":"code"
},
{
"id":"747c1862acef4f499e2a7f16cbdd472a",
"type":"variable"
},
{
"text":"(self):\n        return \"[{}]\".format(\", \".join(str(x) for x in self.",
"type":"code"
},
{
"id":"b062e0322e284160bf26034e9de32446",
"type":"variable"
},
{
"text":"()))\n",
"type":"code"
}
],
"id":"af185bd3045941ab9c96c68a83ec4741",
"type":"code"
}
],
"title":"Grammar"
},
{
"children":[],
"id":"3c542ba5b0104273805b227aeab84c04",
"paragraphs":[
{
"fragments":[
{
"text":"When a ",
"type":"text"
},
{
"id":"e22fa3c5d4144197906cbb74af6cc83e",
"type":"variable"
},
{
"text":" AST node is matched a Python method with the same name is generated:",
"type":"text"
}
],
"id":"6018299ffc344a46978cb303eb4bdb16",
"type":"text"
},
{
"chunkpath":[
"rules",
"ast"
],
"filepath":[
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"e22fa3c5d4144197906cbb74af6cc83e",
"type":"variable"
},
{
"text":"\" .:x ",
"type":"code"
},
{
"id":"8b98e38b093140fc956b35f6cbf5018e",
"type":"variable"
},
{
"text":":y] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { '\\ndef _rule_' x '(self):\\n' > 'return ' y '()\\n' < ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"4bbfe03c503f409f9ac3233cbbd31340",
"type":"code"
},
{
"fragments":[
{
"text":"The body of the rule is assumed to be a matcher. A matcher is a function that, when called, tries to match objecst from the input and return a semantic action if successful or raises an exception if it fails.",
"type":"text"
}
],
"id":"fc46f60ad6a7467bb245c720a9d6e8e9",
"type":"text"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"class ",
"type":"code"
},
{
"id":"cbbcd925bc2c42b9add24aaa736f4d35",
"type":"variable"
},
{
"text":"(object):\n\n    def __init__(self, fn):\n        self.fn = fn\n\n    def ",
"type":"code"
},
{
"id":"85139f1436944deab62958b8a713d8aa",
"type":"variable"
},
{
"text":"(self):\n        return self.fn()\n",
"type":"code"
}
],
"id":"a2fa6b36dba04bcfad978306c9223c55",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"class ",
"type":"code"
},
{
"id":"df25061bb4004aa693b603f0a8ec2af2",
"type":"variable"
},
{
"text":"(Exception):\n    pass\n",
"type":"code"
}
],
"id":"00ace1a1616649898f3ca6095c7884e1",
"type":"code"
},
{
"fragments":[
{
"text":"To simplify the code generator, the following rules are present. The ",
"type":"text"
},
{
"id":"ff0229c63d8a4b4897faed8c38201de3",
"type":"variable"
},
{
"text":" rule is not strictly needed, but without it, many rules would have to wrap its body in a lambda to create the matcher function.",
"type":"text"
}
],
"id":"1b8ad3a855444c598a016788f32237ab",
"type":"text"
},
{
"chunkpath":[
"rules"
],
"filepath":[
"codegenerator.rlmeta"
],
"fragments":[
{
"id":"8b98e38b093140fc956b35f6cbf5018e",
"type":"variable"
},
{
"text":" =\n",
"type":"code"
},
{
"path":[
"ast"
],
"prefix":"  ",
"type":"chunk"
},
{
"text":"  | ",
"type":"code"
},
{
"id":"ff0229c63d8a4b4897faed8c38201de3",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { '(lambda:\\n' > x < '\\n)' }\n",
"type":"code"
},
{
"id":"ff0229c63d8a4b4897faed8c38201de3",
"type":"variable"
},
{
"text":" =\n",
"type":"code"
},
{
"path":[
"astFnBody"
],
"prefix":"  ",
"type":"chunk"
}
],
"id":"bc8464b515df4cf9a0be11f8757cfa24",
"type":"code"
}
],
"title":"Rule"
},
{
"children":[],
"id":"696631bc029c47949b2ad97ce78ea32c",
"paragraphs":[
{
"fragments":[
{
"text":"When a ",
"type":"text"
},
{
"id":"efa7dd37aa9e46908ed34f8d31cd476d",
"type":"variable"
},
{
"text":" AST node is matched a matcher is generated that calls the built-in ",
"type":"text"
},
{
"id":"2c430882d5af40168a69e1b4b9eb7e0d",
"type":"variable"
},
{
"text":" method with a list of matchers:",
"type":"text"
}
],
"id":"218e357da3f04861bdee4b175e32cc54",
"type":"text"
},
{
"chunkpath":[
"rules",
"astFnBody"
],
"filepath":[
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"efa7dd37aa9e46908ed34f8d31cd476d",
"type":"variable"
},
{
"text":"\" ",
"type":"code"
},
{
"id":"85ee4a0a694641c3aa683a15e6a0ba5d",
"type":"variable"
},
{
"text":":x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { 'self.",
"type":"code"
},
{
"id":"2c430882d5af40168a69e1b4b9eb7e0d",
"type":"variable"
},
{
"text":"([' x '])' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"f85612ab9e0d444f8104eb83d1548800",
"type":"code"
},
{
"fragments":[
{
"text":"Helpers to generate a list of items.",
"type":"text"
}
],
"id":"ce9066bd5c3f4a9eb07f8b7d9368f118",
"type":"text"
},
{
"chunkpath":[
"rules"
],
"filepath":[
"codegenerator.rlmeta"
],
"fragments":[
{
"id":"85ee4a0a694641c3aa683a15e6a0ba5d",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"index":5,
"type":"tabstop"
},
{
"text":"= ",
"type":"code"
},
{
"id":"ccb3f676f6314d788147dc603933cd28",
"type":"variable"
},
{
"text":"*:xs ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { '\\n' > xs < ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
},
{
"id":"ccb3f676f6314d788147dc603933cd28",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"index":5,
"type":"tabstop"
},
{
"text":"= ",
"type":"code"
},
{
"id":"8b98e38b093140fc956b35f6cbf5018e",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { x ',\\n' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"8f190300db404d17a2a8f5e36e95ddcd",
"type":"code"
},
{
"fragments":[
{
"text":"The ",
"type":"text"
},
{
"id":"2c430882d5af40168a69e1b4b9eb7e0d",
"type":"variable"
},
{
"text":" method expects a list of matchers. It tries the matchers in sequence and returns the result of the first matching one.",
"type":"text"
}
],
"id":"6611f3677d0f47888d213f4467d3279f",
"type":"text"
},
{
"chunkpath":[
"classes",
"_RLMeta"
],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"def ",
"type":"code"
},
{
"id":"2c430882d5af40168a69e1b4b9eb7e0d",
"type":"variable"
},
{
"text":"(self, matchers):\n    saved_input = self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":"\n    for matcher in matchers:\n        try:\n            return matcher()\n        except ",
"type":"code"
},
{
"id":"df25061bb4004aa693b603f0a8ec2af2",
"type":"variable"
},
{
"text":":\n            self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":" = saved_input\n    raise ",
"type":"code"
},
{
"id":"df25061bb4004aa693b603f0a8ec2af2",
"type":"variable"
},
{
"text":"()\n",
"type":"code"
}
],
"id":"d208a58f49fb42199d2483713b67641e",
"type":"code"
}
],
"title":"Or"
},
{
"children":[],
"id":"86438bda56d342bc9d1f2c62e632a72d",
"paragraphs":[
{
"fragments":[
{
"text":"When a ",
"type":"text"
},
{
"id":"b845c4cee1734619991d56de83dce37d",
"type":"variable"
},
{
"text":" AST node is found a function is generated that creates a new scope:",
"type":"text"
}
],
"id":"99fc5181461b4b658129de1e5a9024db",
"type":"text"
},
{
"chunkpath":[
"rules",
"astFnBody"
],
"filepath":[
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"b845c4cee1734619991d56de83dce37d",
"type":"variable"
},
{
"text":"\" ",
"type":"code"
},
{
"id":"8b98e38b093140fc956b35f6cbf5018e",
"type":"variable"
},
{
"text":":x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { '(lambda ",
"type":"code"
},
{
"id":"289a3db9c53e420da4dbdbc94a32aadf",
"type":"variable"
},
{
"text":":\\n' > x < '()\\n)(",
"type":"code"
},
{
"id":"ec2b7e954fe24f329250bd22c70538e4",
"type":"variable"
},
{
"text":"())' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"89d707f19bd84e5982dcc3f043a68111",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"class ",
"type":"code"
},
{
"id":"ec2b7e954fe24f329250bd22c70538e4",
"type":"variable"
},
{
"text":"(dict):\n\n    def ",
"type":"code"
},
{
"id":"1659fb73179a4fd8abfc99b95d9f5560",
"type":"variable"
},
{
"text":"(self, name, value):\n        self[name] = value\n        return value\n\n    def ",
"type":"code"
},
{
"id":"ea57b40b324c4c03b030c78e924ed860",
"type":"variable"
},
{
"text":"(self, name):\n        return self[name]\n",
"type":"code"
}
],
"id":"6a0b126c11d4408794c26291e417257d",
"type":"code"
}
],
"title":"Scope"
},
{
"children":[],
"id":"487e675a013c45e3aee8b6c068e226df",
"paragraphs":[
{
"fragments":[
{
"text":"When a ",
"type":"text"
},
{
"id":"8d17eff4871e411793cf0daf3a2ab204",
"type":"variable"
},
{
"text":" AST node is found a call to the build-in ",
"type":"text"
},
{
"id":"c590c92167d34fe4bfdbb084c03834c1",
"type":"variable"
},
{
"text":" method is generated:",
"type":"text"
}
],
"id":"bdbe901c77da4a2ab026d978279b4e09",
"type":"text"
},
{
"chunkpath":[
"rules",
"astFnBody"
],
"filepath":[
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"8d17eff4871e411793cf0daf3a2ab204",
"type":"variable"
},
{
"text":"\" ",
"type":"code"
},
{
"id":"85ee4a0a694641c3aa683a15e6a0ba5d",
"type":"variable"
},
{
"text":":x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { 'self.",
"type":"code"
},
{
"id":"c590c92167d34fe4bfdbb084c03834c1",
"type":"variable"
},
{
"text":"([' x '])' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"3fe2404188684b7485049b6298e4ba3e",
"type":"code"
},
{
"fragments":[
{
"text":"The ",
"type":"text"
},
{
"id":"c590c92167d34fe4bfdbb084c03834c1",
"type":"variable"
},
{
"text":" method expects a list of matchers. It applies them in sequence and returns the result of the last one.",
"type":"text"
}
],
"id":"2e113e56a2bd474a8361b07e62faddd1",
"type":"text"
},
{
"chunkpath":[
"classes",
"_RLMeta"
],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"def ",
"type":"code"
},
{
"id":"c590c92167d34fe4bfdbb084c03834c1",
"type":"variable"
},
{
"text":"(self, matchers):\n    result = None\n    for matcher in matchers:\n        result = matcher()\n    return result\n",
"type":"code"
}
],
"id":"4f4a619375d4416ba28f522d8b4cbf06",
"type":"code"
}
],
"title":"And"
},
{
"children":[],
"id":"4309ca572367401bb6c4561f273b8c85",
"paragraphs":[
{
"chunkpath":[
"rules",
"astFnBody"
],
"filepath":[
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"6a519019bfac49598dc36620b5b58811",
"type":"variable"
},
{
"text":"\" .:x ",
"type":"code"
},
{
"id":"8b98e38b093140fc956b35f6cbf5018e",
"type":"variable"
},
{
"text":":y] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { '",
"type":"code"
},
{
"id":"289a3db9c53e420da4dbdbc94a32aadf",
"type":"variable"
},
{
"text":".",
"type":"code"
},
{
"id":"1659fb73179a4fd8abfc99b95d9f5560",
"type":"variable"
},
{
"text":"(' repr(x) ', ' y '())' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"06c9e9a4f10648e090321c427cccb9b3",
"type":"code"
}
],
"title":"Bind"
},
{
"children":[],
"id":"244f0754be514ae88e0f581f3ab58c59",
"paragraphs":[
{
"chunkpath":[
"rules",
"astFnBody"
],
"filepath":[
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"60d7dacf2a2b4336b0329665c2026cc0",
"type":"variable"
},
{
"text":"\" ",
"type":"code"
},
{
"id":"8b98e38b093140fc956b35f6cbf5018e",
"type":"variable"
},
{
"text":":x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { 'self.",
"type":"code"
},
{
"id":"70c457e3514948bcb6c00b67e5a180a2",
"type":"variable"
},
{
"text":"(' x ')' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"36a128587cdd48539a5aef85b434be5b",
"type":"code"
},
{
"chunkpath":[
"classes",
"_RLMeta"
],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"def ",
"type":"code"
},
{
"id":"70c457e3514948bcb6c00b67e5a180a2",
"type":"variable"
},
{
"text":"(self, matcher):\n    result = []\n    while True:\n        saved_input = self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":"\n        try:\n            result.append(matcher())\n        except ",
"type":"code"
},
{
"id":"df25061bb4004aa693b603f0a8ec2af2",
"type":"variable"
},
{
"text":":\n            self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":" = saved_input\n            return ",
"type":"code"
},
{
"id":"cbbcd925bc2c42b9add24aaa736f4d35",
"type":"variable"
},
{
"text":"(lambda: [x.",
"type":"code"
},
{
"id":"85139f1436944deab62958b8a713d8aa",
"type":"variable"
},
{
"text":"() for x in result])\n",
"type":"code"
}
],
"id":"6d7dbee1acd04445a3fa837210e6a42d",
"type":"code"
}
],
"title":"Star"
},
{
"children":[],
"id":"b0f001d2e6484c55a4aa8fec6d62129e",
"paragraphs":[
{
"chunkpath":[
"rules",
"astFnBody"
],
"filepath":[
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"736cd2768dcd4843b43aca56bea200d3",
"type":"variable"
},
{
"text":"\"] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { 'None' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"f89b8db315ca4734a535d6ffbbf464bb",
"type":"code"
}
],
"title":"MatchNothing"
},
{
"children":[],
"id":"44d3b166c62d43e38d2a781fb9f06b6d",
"paragraphs":[
{
"chunkpath":[
"rules",
"astFnBody"
],
"filepath":[
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"bc27a67cb10b4650a32bfe7af84c5060",
"type":"variable"
},
{
"text":"\" ",
"type":"code"
},
{
"id":"8b98e38b093140fc956b35f6cbf5018e",
"type":"variable"
},
{
"text":":x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { 'self.",
"type":"code"
},
{
"id":"7ea6f6977ca24c218e28cd96b1cf8267",
"type":"variable"
},
{
"text":"(' x ')' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"e895e3759e684d7c9022da5bcfd693bb",
"type":"code"
},
{
"chunkpath":[
"classes",
"_RLMeta"
],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"def ",
"type":"code"
},
{
"id":"7ea6f6977ca24c218e28cd96b1cf8267",
"type":"variable"
},
{
"text":"(self, matcher):\n    saved_input = self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":"\n    try:\n        matcher()\n    except ",
"type":"code"
},
{
"id":"df25061bb4004aa693b603f0a8ec2af2",
"type":"variable"
},
{
"text":":\n        return ",
"type":"code"
},
{
"id":"cbbcd925bc2c42b9add24aaa736f4d35",
"type":"variable"
},
{
"text":"(lambda: None)\n    else:\n        raise ",
"type":"code"
},
{
"id":"df25061bb4004aa693b603f0a8ec2af2",
"type":"variable"
},
{
"text":"()\n    finally:\n        self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":" = saved_input\n",
"type":"code"
}
],
"id":"77eb5bfff95948a08d1d3856984cfc9f",
"type":"code"
}
],
"title":"Not"
},
{
"children":[],
"id":"07530ffd21784561bd8594c98fcd050a",
"paragraphs":[
{
"chunkpath":[
"rules",
"astFnBody"
],
"filepath":[
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"373f023f0f5f4744a7b309cf9a76d138",
"type":"variable"
},
{
"text":"\" ",
"type":"code"
},
{
"id":"8b98e38b093140fc956b35f6cbf5018e",
"type":"variable"
},
{
"text":":x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { '",
"type":"code"
},
{
"id":"cbbcd925bc2c42b9add24aaa736f4d35",
"type":"variable"
},
{
"text":"(lambda: ' x ')' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"48288d82d6984e2088ee6ce8a5a5253e",
"type":"code"
}
],
"title":"SemanticAction"
},
{
"children":[],
"id":"c10aabed8057404e97ef8cd6ac1b113d",
"paragraphs":[
{
"chunkpath":[
"rules",
"astFnBody"
],
"filepath":[
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"4852ced8038c4074a5a8104b8596e0e0",
"type":"variable"
},
{
"text":"\" .:x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { 'self.",
"type":"code"
},
{
"id":"826871508bad4fecb6e575779218874d",
"type":"variable"
},
{
"text":"(' repr(x) ')'",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"412bfecbb7244810ba46e206486092c8",
"type":"code"
}
],
"title":"Apply"
},
{
"children":[],
"id":"3ba5893bb7094ece96e853f869df9456",
"paragraphs":[
{
"chunkpath":[
"rules",
"astFnBody"
],
"filepath":[
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"6860db9e40994ebfbe04834b4f12f721",
"type":"variable"
},
{
"text":"\" .:x .:y] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { 'self.",
"type":"code"
},
{
"id":"53acf505e0ee41de85c674e211ecd39c",
"type":"variable"
},
{
"text":"(' repr(x) ', ' repr(y) ')' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"7ce8d15eb0a349e9a26f7c4b65cf23d8",
"type":"code"
},
{
"chunkpath":[
"classes",
"_RLMeta"
],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"def ",
"type":"code"
},
{
"id":"53acf505e0ee41de85c674e211ecd39c",
"type":"variable"
},
{
"text":"(self, a, b):\n    next_objext, self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":" = self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":".",
"type":"code"
},
{
"id":"b2115b3eeaa143068958949787f5d104",
"type":"variable"
},
{
"text":"()\n    if next_objext >= a and next_objext <= b:\n        return ",
"type":"code"
},
{
"id":"cbbcd925bc2c42b9add24aaa736f4d35",
"type":"variable"
},
{
"text":"(lambda: next_objext)\n    else:\n        raise ",
"type":"code"
},
{
"id":"df25061bb4004aa693b603f0a8ec2af2",
"type":"variable"
},
{
"text":"()\n",
"type":"code"
}
],
"id":"fdb81b14b5c54348b151b5b2f379ae78",
"type":"code"
}
],
"title":"MatchCharRange"
},
{
"children":[],
"id":"82022cc15d944579825b52559b1ee469",
"paragraphs":[
{
"chunkpath":[
"rules",
"astFnBody"
],
"filepath":[
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"10d9c2de82a14d12bd545133bd4e15f8",
"type":"variable"
},
{
"text":"\" .:x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { 'self.",
"type":"code"
},
{
"id":"ab9490a5e7ba4561b96b04f481a9e57e",
"type":"variable"
},
{
"text":"(' repr(x) ')' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"2d406fc305b34136a1280841c2098a7a",
"type":"code"
},
{
"chunkpath":[
"classes",
"_RLMeta"
],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"def ",
"type":"code"
},
{
"id":"ab9490a5e7ba4561b96b04f481a9e57e",
"type":"variable"
},
{
"text":"(self, string):\n    next_object, self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":" = self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":".",
"type":"code"
},
{
"id":"b2115b3eeaa143068958949787f5d104",
"type":"variable"
},
{
"text":"()\n    if next_object == string:\n        return ",
"type":"code"
},
{
"id":"cbbcd925bc2c42b9add24aaa736f4d35",
"type":"variable"
},
{
"text":"(lambda: string)\n    else:\n        raise ",
"type":"code"
},
{
"id":"df25061bb4004aa693b603f0a8ec2af2",
"type":"variable"
},
{
"text":"()\n",
"type":"code"
}
],
"id":"971fcb5050aa45348f80f3fe228af352",
"type":"code"
}
],
"title":"MatchString"
},
{
"children":[],
"id":"3eff70b8911e4b4e9bd520a7d25624e7",
"paragraphs":[
{
"chunkpath":[
"rules",
"astFnBody"
],
"filepath":[
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"8ff0b4980efa4e349ec5ef14815be6ec",
"type":"variable"
},
{
"text":"\" .:x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { 'self.",
"type":"code"
},
{
"id":"5440b88cecfb4dafad63f0f7887b82ce",
"type":"variable"
},
{
"text":"(' repr(x) ')' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"b04618e300a746c6930f0c3c5ac338dc",
"type":"code"
},
{
"chunkpath":[
"classes",
"_RLMeta"
],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"def ",
"type":"code"
},
{
"id":"5440b88cecfb4dafad63f0f7887b82ce",
"type":"variable"
},
{
"text":"(self, charseq):\n    for char in charseq:\n        next_object, self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":" = self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":".",
"type":"code"
},
{
"id":"b2115b3eeaa143068958949787f5d104",
"type":"variable"
},
{
"text":"()\n        if next_object != char:\n            raise ",
"type":"code"
},
{
"id":"df25061bb4004aa693b603f0a8ec2af2",
"type":"variable"
},
{
"text":"()\n    return ",
"type":"code"
},
{
"id":"cbbcd925bc2c42b9add24aaa736f4d35",
"type":"variable"
},
{
"text":"(lambda: charseq)\n",
"type":"code"
}
],
"id":"0af5a39ebe764c1097b3a0478104a6fe",
"type":"code"
}
],
"title":"MatchCharseq"
},
{
"children":[],
"id":"5edd25f746a94b8392834343dce57370",
"paragraphs":[
{
"chunkpath":[
"rules",
"ast"
],
"filepath":[
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"25ec6fc64b8b4a39a9df41daa690386f",
"type":"variable"
},
{
"text":"\"] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { 'self.",
"type":"code"
},
{
"id":"c76075de5ae9496f9ef5b3c800111ead",
"type":"variable"
},
{
"text":"' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"982a4ec2696d466ab86d17115f366f87",
"type":"code"
},
{
"chunkpath":[
"classes",
"_RLMeta"
],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"def ",
"type":"code"
},
{
"id":"c76075de5ae9496f9ef5b3c800111ead",
"type":"variable"
},
{
"text":"(self):\n    next_object, self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":" = self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":".",
"type":"code"
},
{
"id":"b2115b3eeaa143068958949787f5d104",
"type":"variable"
},
{
"text":"()\n    return ",
"type":"code"
},
{
"id":"cbbcd925bc2c42b9add24aaa736f4d35",
"type":"variable"
},
{
"text":"(lambda: next_object)\n",
"type":"code"
}
],
"id":"af17e8b2e71143e890440310861281ca",
"type":"code"
}
],
"title":"Any"
},
{
"children":[],
"id":"c3b58d2d7b024fa4a0e5ff0bcf06d154",
"paragraphs":[
{
"chunkpath":[
"rules",
"astFnBody"
],
"filepath":[
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"0c1a9537d33148388015163fc90329b3",
"type":"variable"
},
{
"text":"\" ",
"type":"code"
},
{
"id":"8b98e38b093140fc956b35f6cbf5018e",
"type":"variable"
},
{
"text":":x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { 'self.",
"type":"code"
},
{
"id":"9b21a7a4087848ba8f2ada071a294d73",
"type":"variable"
},
{
"text":"(' x ')' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"258fb08008994945961815115488a6d4",
"type":"code"
},
{
"chunkpath":[
"classes",
"_RLMeta"
],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"def ",
"type":"code"
},
{
"id":"9b21a7a4087848ba8f2ada071a294d73",
"type":"variable"
},
{
"text":"(self, matcher):\n    next_object, next_input = self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":".",
"type":"code"
},
{
"id":"b2115b3eeaa143068958949787f5d104",
"type":"variable"
},
{
"text":"()\n    if isinstance(next_object, list):\n        self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":" = self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":".",
"type":"code"
},
{
"id":"653fc20558a64badb437b07f3d1c8490",
"type":"variable"
},
{
"text":"(next_object)\n        matcher()\n        if self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":".",
"type":"code"
},
{
"id":"4ad80c8d1d814fefa2656595f1d841c6",
"type":"variable"
},
{
"text":"():\n            self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":" = next_input\n            return ",
"type":"code"
},
{
"id":"cbbcd925bc2c42b9add24aaa736f4d35",
"type":"variable"
},
{
"text":"(lambda: next_object)\n    raise ",
"type":"code"
},
{
"id":"df25061bb4004aa693b603f0a8ec2af2",
"type":"variable"
},
{
"text":"()\n",
"type":"code"
}
],
"id":"05a21fd5bf134f7c9208572470e212e1",
"type":"code"
}
],
"title":"MatchList"
},
{
"children":[],
"id":"74804e4e0ee643ac95210d7aa17ae7c6",
"paragraphs":[
{
"chunkpath":[
"rules",
"ast"
],
"filepath":[
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"301f08856bf54373bc5975f75a315105",
"type":"variable"
},
{
"text":"\" .:x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { repr(x) ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"0fdb7fda246f4e99becb87637359df79",
"type":"code"
}
],
"title":"String"
},
{
"children":[],
"id":"03d7a70d44fe4470967acd15d51ad56a",
"paragraphs":[
{
"chunkpath":[
"rules",
"ast"
],
"filepath":[
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"49ba1aa1e24e408ba2b32bff68a72840",
"type":"variable"
},
{
"text":"\" ",
"type":"code"
},
{
"id":"2420b6bcf2374252a533688aa0b33b5f",
"type":"variable"
},
{
"text":":x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { x ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"47a643f9317f47afa2e6d5001b87a1ff",
"type":"code"
},
{
"chunkpath":[
"rules"
],
"filepath":[
"codegenerator.rlmeta"
],
"fragments":[
{
"id":"2420b6bcf2374252a533688aa0b33b5f",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"index":5,
"type":"tabstop"
},
{
"text":"= ",
"type":"code"
},
{
"id":"19791660815a43e1b775ea6a29349648",
"type":"variable"
},
{
"text":"*:xs ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { '(' xs '[])' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"eae26130c7a047daa3ae8fd86ea4a9b6",
"type":"code"
},
{
"chunkpath":[
"rules"
],
"filepath":[
"codegenerator.rlmeta"
],
"fragments":[
{
"id":"19791660815a43e1b775ea6a29349648",
"type":"variable"
},
{
"text":" =\n  | [\"",
"type":"code"
},
{
"id":"cf8770da147840679077788180e10778",
"type":"variable"
},
{
"text":"\" ast:x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> {     x  '+' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n  | ",
"type":"code"
},
{
"id":"8b98e38b093140fc956b35f6cbf5018e",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { '[' x ']+' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"a9726003d9ff409aab302f66b5756a5b",
"type":"code"
}
],
"title":"List/ListItemSplice"
},
{
"children":[],
"id":"166dffacb2ca4911908584d77f30b21f",
"paragraphs":[
{
"chunkpath":[
"rules",
"ast"
],
"filepath":[
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"c9ecfed5791644a3b7ea2122d4ed87c9",
"type":"variable"
},
{
"text":"\" ",
"type":"code"
},
{
"id":"85ee4a0a694641c3aa683a15e6a0ba5d",
"type":"variable"
},
{
"text":":x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { '",
"type":"code"
},
{
"id":"49dc22ba19624755a18a13a9e76734b1",
"type":"variable"
},
{
"text":".",
"type":"code"
},
{
"id":"2e8a56ad01dc4a289fbd584bc4874e7e",
"type":"variable"
},
{
"text":"([' x '])' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"74eb55bab93644eca5a621d9469c86dc",
"type":"code"
},
{
"chunkpath":[
"rules",
"ast"
],
"filepath":[
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"d34e449a8ca740d0a4b84921fc05b25f",
"type":"variable"
},
{
"text":"\"] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { '",
"type":"code"
},
{
"id":"7d8a78dfe90743759bdd25cf45506815",
"type":"variable"
},
{
"text":"()' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"1f9c2f35e18d4eac90c9b8e8a7db8b32",
"type":"code"
},
{
"chunkpath":[
"rules",
"ast"
],
"filepath":[
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"7b75cb86cab34645b43d69d790e6e206",
"type":"variable"
},
{
"text":"\"] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { '",
"type":"code"
},
{
"id":"bfaedafcea7445e7b7ed19c9abb47736",
"type":"variable"
},
{
"text":"()' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"c4aaf6182aa34e73924627f6961161d4",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"class ",
"type":"code"
},
{
"id":"49dc22ba19624755a18a13a9e76734b1",
"type":"variable"
},
{
"text":"(object):\n\n    @classmethod\n    def ",
"type":"code"
},
{
"id":"2e8a56ad01dc4a289fbd584bc4874e7e",
"type":"variable"
},
{
"text":"(self, item):\n        if isinstance(item, ",
"type":"code"
},
{
"id":"49dc22ba19624755a18a13a9e76734b1",
"type":"variable"
},
{
"text":"):\n            return item\n        elif isinstance(item, list):\n            return ",
"type":"code"
},
{
"id":"b277e0c5612d4697bf8f8237494f8474",
"type":"variable"
},
{
"text":"([",
"type":"code"
},
{
"id":"49dc22ba19624755a18a13a9e76734b1",
"type":"variable"
},
{
"text":".create(x) for x in item])\n        else:\n            return ",
"type":"code"
},
{
"id":"50ee7994db484890abbeeb13330e22a7",
"type":"variable"
},
{
"text":"(item)\n\n",
"type":"code"
},
{
"path":[
"_Builder"
],
"prefix":"    ",
"type":"chunk"
}
],
"id":"b2a22c8337774967bcccbdd94d6d03a7",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"class ",
"type":"code"
},
{
"id":"b277e0c5612d4697bf8f8237494f8474",
"type":"variable"
},
{
"text":"(",
"type":"code"
},
{
"id":"49dc22ba19624755a18a13a9e76734b1",
"type":"variable"
},
{
"text":"):\n\n    def __init__(self, items):\n        self.items = items\n\n    def ",
"type":"code"
},
{
"id":"a5837c091631449aadeeaa004ae71b0b",
"type":"variable"
},
{
"text":"(self, output):\n        for item in self.items:\n            item.",
"type":"code"
},
{
"id":"a5837c091631449aadeeaa004ae71b0b",
"type":"variable"
},
{
"text":"(output)\n",
"type":"code"
}
],
"id":"fc7990fb7a544e24b79a140198b69c8b",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"class ",
"type":"code"
},
{
"id":"50ee7994db484890abbeeb13330e22a7",
"type":"variable"
},
{
"text":"(",
"type":"code"
},
{
"id":"49dc22ba19624755a18a13a9e76734b1",
"type":"variable"
},
{
"text":"):\n\n    def __init__(self, atom):\n        self.atom = atom\n\n    def ",
"type":"code"
},
{
"id":"a5837c091631449aadeeaa004ae71b0b",
"type":"variable"
},
{
"text":"(self, output):\n        output.",
"type":"code"
},
{
"id":"af5dbdd6e27c451398b2b116b5ff42d3",
"type":"variable"
},
{
"text":"(str(self.atom))\n",
"type":"code"
}
],
"id":"fd6eef92c8274c64a71d219fb2084dce",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"class ",
"type":"code"
},
{
"id":"7d8a78dfe90743759bdd25cf45506815",
"type":"variable"
},
{
"text":"(",
"type":"code"
},
{
"id":"49dc22ba19624755a18a13a9e76734b1",
"type":"variable"
},
{
"text":"):\n\n    def ",
"type":"code"
},
{
"id":"a5837c091631449aadeeaa004ae71b0b",
"type":"variable"
},
{
"text":"(self, output):\n        output.",
"type":"code"
},
{
"id":"8cb500cdd43d41a78158c645da945c70",
"type":"variable"
},
{
"text":"()\n",
"type":"code"
}
],
"id":"533041ab85ef4e13a5bdfd440fe344fa",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"class ",
"type":"code"
},
{
"id":"bfaedafcea7445e7b7ed19c9abb47736",
"type":"variable"
},
{
"text":"(",
"type":"code"
},
{
"id":"49dc22ba19624755a18a13a9e76734b1",
"type":"variable"
},
{
"text":"):\n\n    def ",
"type":"code"
},
{
"id":"a5837c091631449aadeeaa004ae71b0b",
"type":"variable"
},
{
"text":"(self, output):\n        output.",
"type":"code"
},
{
"id":"22163f4ee0fd4e68b2c95f94e111dee1",
"type":"variable"
},
{
"text":"()\n",
"type":"code"
}
],
"id":"cc6e0edd65614f4b8c470b167c521bd5",
"type":"code"
},
{
"chunkpath":[
"classes",
"_Builder"
],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"def ",
"type":"code"
},
{
"id":"56d10f7bfcfd43bb996c3f76423b067b",
"type":"variable"
},
{
"text":"(self):\n    output = ",
"type":"code"
},
{
"id":"4c38cde583ac42ea8c7b9295a92e26f2",
"type":"variable"
},
{
"text":"()\n    self.",
"type":"code"
},
{
"id":"a5837c091631449aadeeaa004ae71b0b",
"type":"variable"
},
{
"text":"(output)\n    return output.value\n",
"type":"code"
}
],
"id":"795bcf7836b44c17996097b87dddd617",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"support.py"
],
"fragments":[
{
"text":"class ",
"type":"code"
},
{
"id":"4c38cde583ac42ea8c7b9295a92e26f2",
"type":"variable"
},
{
"text":"(object):\n\n    def __init__(self):\n        self.value = \"\"\n        self.level = 0\n\n    def ",
"type":"code"
},
{
"id":"8cb500cdd43d41a78158c645da945c70",
"type":"variable"
},
{
"text":"(self):\n        self.level += 1\n\n    def ",
"type":"code"
},
{
"id":"22163f4ee0fd4e68b2c95f94e111dee1",
"type":"variable"
},
{
"text":"(self):\n        self.level -= 1\n\n    def ",
"type":"code"
},
{
"id":"af5dbdd6e27c451398b2b116b5ff42d3",
"type":"variable"
},
{
"text":"(self, value):\n        for ch in value:\n            if self.value and ch != \"\\n\" and self.value[-1] == \"\\n\":\n                self.value += \"    \"*self.level\n            self.value += ch\n",
"type":"code"
}
],
"id":"fc6caf4810f146e1aac2556d5a12e242",
"type":"code"
}
],
"title":"\"Builder\""
},
{
"children":[],
"id":"f5372dab8e084ca386297eb9575052e8",
"paragraphs":[
{
"chunkpath":[
"rules",
"ast"
],
"filepath":[
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"0a8e6be4bec3466bb658d7d4ff5bc5fd",
"type":"variable"
},
{
"text":"\" .:x ",
"type":"code"
},
{
"id":"85ee4a0a694641c3aa683a15e6a0ba5d",
"type":"variable"
},
{
"text":":y] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { x '(' y ')' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"a264ffede57c4b6aa108a23f741bd694",
"type":"code"
}
],
"title":"FnCall"
},
{
"children":[],
"id":"d9f73bdeb5c447dbaf5b8fe0bf3b67ba",
"paragraphs":[
{
"chunkpath":[
"rules",
"ast"
],
"filepath":[
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"ae823ab23224415f9a539b0354f311b8",
"type":"variable"
},
{
"text":"\" .:x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { '",
"type":"code"
},
{
"id":"289a3db9c53e420da4dbdbc94a32aadf",
"type":"variable"
},
{
"text":".",
"type":"code"
},
{
"id":"ea57b40b324c4c03b030c78e924ed860",
"type":"variable"
},
{
"text":"(' repr(x) ').",
"type":"code"
},
{
"id":"85139f1436944deab62958b8a713d8aa",
"type":"variable"
},
{
"text":"()' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"544bade2ad6a463db74a4b66c7cba6f7",
"type":"code"
},
{
"child_type":"unordered",
"children":[
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"How many times can/should a semantic action be evaluated?",
"type":"text"
}
]
}
],
"id":"9839e9dfe25e47a58b35987a6f5d6154",
"type":"list"
}
],
"title":"VarLookup"
},
{
"children":[],
"id":"d9ea64bbdad3465897667ebec9d5ace1",
"paragraphs":[
{
"fragments":[
{
"text":"The complete code generator:",
"type":"text"
}
],
"id":"245b8164d0dc473b8854c2becb228910",
"type":"text"
},
{
"code_id":"1a998747fffd406f9b8f0bed1e8740a1",
"id":"fc830b863d064f7eabe2e1ed36640b3f",
"type":"expanded_code"
},
{
"fragments":[
{
"text":"The complete support library:",
"type":"text"
}
],
"id":"187f9c4f928d4489a33562120216a287",
"type":"text"
},
{
"code_id":"36fdd2e9ccf7430bbf84158437d5c067",
"id":"1fdabe27b8fc4ef6a80aa4b9e7791560",
"type":"expanded_code"
}
],
"title":"Summary"
}
],
"id":"c3f29fa523f341a487ebc07209c471f9",
"paragraphs":[
{
"fragments":[
{
"text":"The code generator's job is to convert the AST to Python code. Here are the templates for the grammar and support library:",
"type":"text"
}
],
"id":"c56e60448b4e42df867652370c4fe2fb",
"type":"text"
},
{
"chunkpath":[],
"filepath":[
"codegenerator.rlmeta"
],
"fragments":[
{
"id":"8cf9a10b04cc48a484e1cb7c6f1f2f28",
"type":"variable"
},
{
"text":" {\n",
"type":"code"
},
{
"path":[
"rules"
],
"prefix":"  ",
"type":"chunk"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"1a998747fffd406f9b8f0bed1e8740a1",
"type":"code"
},
{
"chunkpath":[],
"filepath":[
"support.py"
],
"fragments":[
{
"path":[
"classes"
],
"prefix":"",
"type":"chunk"
}
],
"id":"36fdd2e9ccf7430bbf84158437d5c067",
"type":"code"
},
{
"fragments":[
{
"text":"The remainder of this section will fill in the details of the ",
"type":"text"
},
{
"id":"8cf9a10b04cc48a484e1cb7c6f1f2f28",
"type":"variable"
},
{
"text":" grammar and the support library.",
"type":"text"
}
],
"id":"469dbb83e24d41d0801793895d6d9ae8",
"type":"text"
}
],
"title":"Code generator"
},
{
"children":[],
"id":"2c78e9d9104c4bddbdd1dfe6314506c9",
"paragraphs":[
{
"chunkpath":[],
"filepath":[
"compile.sh"
],
"fragments":[
{
"text":"#!/bin/sh\n\nset -e\n\n",
"type":"code"
},
{
"id":"83ce9666a26449cd9936798594c99e3f",
"type":"variable"
},
{
"text":"=\"$1\"\n\n",
"type":"code"
},
{
"id":"6352455a9a4f44c984b2c210151858a2",
"type":"variable"
},
{
"text":"=$(cat support.py)\n",
"type":"code"
},
{
"id":"195e7fa2b75a40baa69b0bbf57a53150",
"type":"variable"
},
{
"text":"=$(cat parser.rlmeta | python \"$",
"type":"code"
},
{
"id":"83ce9666a26449cd9936798594c99e3f",
"type":"variable"
},
{
"text":"\")\n",
"type":"code"
},
{
"id":"2ea1b512b7444d8ab077edeba233a4f3",
"type":"variable"
},
{
"text":"=$(cat codegenerator.rlmeta | python \"$",
"type":"code"
},
{
"id":"83ce9666a26449cd9936798594c99e3f",
"type":"variable"
},
{
"text":"\")\n\ncat <<EOD\n",
"type":"code"
},
{
"path":[
"rlmeta python file"
],
"prefix":"",
"type":"chunk"
},
{
"text":"EOD\n",
"type":"code"
}
],
"id":"fc33f048fabe4ac98caf108dd96e9799",
"type":"code"
},
{
"chunkpath":[
"rlmeta python file"
],
"filepath":[
"compile.sh"
],
"fragments":[
{
"text":"import sys\n\nSUPPORT = \"\"\"\\\\\n$",
"type":"code"
},
{
"id":"6352455a9a4f44c984b2c210151858a2",
"type":"variable"
},
{
"text":"\n\"\"\"\n\n$",
"type":"code"
},
{
"id":"6352455a9a4f44c984b2c210151858a2",
"type":"variable"
},
{
"text":"\n\n$",
"type":"code"
},
{
"id":"195e7fa2b75a40baa69b0bbf57a53150",
"type":"variable"
},
{
"text":"\n\n$",
"type":"code"
},
{
"id":"2ea1b512b7444d8ab077edeba233a4f3",
"type":"variable"
},
{
"text":"\n\njoin = \"\".join\n\ndef compile_grammar(grammar):\n    parser = Parser()\n    code_generator = CodeGenerator()\n    return code_generator.run(\"ast\", parser.run(\"grammar\", grammar))\n\nif __name__ == \"__main__\":\n    if \"--support\" in sys.argv:\n        sys.stdout.write(SUPPORT)\n    else:\n        sys.stdout.write(compile_grammar(sys.stdin.read()))\n",
"type":"code"
}
],
"id":"f1a53c2ef9e741b2a4c21c13c67f1664",
"type":"code"
}
],
"title":"Putting it together"
}
],
"id":"f5f122c94d3d4fa0b3a7e64a7fa0a724",
"paragraphs":[
{
"fragments":[
{
"text":"I have shown you how RLMeta can be used to implement a calculator and a tree printer. Next I will show you how to use RLMeta to translate RLMeta grammars to executable Python code. That is how to implement the RLMeta compiler.",
"type":"text"
}
],
"id":"4b16be114c27455a870fa89af76211d5",
"type":"text"
},
{
"fragments":[
{
"text":"RLMeta grammars are translated in two stages: the first translates grammar syntax to an abstract syntax tree (AST) and the second translates the AST to Python source code. The generated Python code depends on a support library to execute. The combined Python code makes up the parser, interpreter, compiler, etc.",
"type":"text"
}
],
"id":"a476fb2e885b4071b0237eb5f6a17bf1",
"type":"text"
},
{
"fragments":[
{
"text":"RLMeta compiler internals illustrated.",
"type":"text"
}
],
"id":"630f0731e76141dfba74a05cbdff81ed",
"image_base64":"",
"type":"image"
},
{
"fragments":[
{
"text":"In order to implement the RLMeta compiler, the grammar for the parser and code generator have to be written. That is done in RLMeta. And the support Python library must be written. Here they are:",
"type":"text"
}
],
"id":"80d695938fd840019e3e4abd8b43ef05",
"type":"text"
}
],
"title":"RLMeta in itself"
},
{
"children":[],
"id":"313b147a2f574ea09d76d9c7371bdf18",
"paragraphs":[
{
"fragments":[
{
"text":"If we run RLmeta on the parser gramamr and the code generator grammar and combine it with the support library, we should get the functionality of the RLMeta compiler. But how can we run RLMeta before we have it? We have a bootstrapping problem.",
"type":"text"
}
],
"id":"97be5f1d197342b8a567f17d45d8db10",
"type":"text"
},
{
"fragments":[
{
"text":"In this case I solved it by translating the parser and the code generator manually according the the rules specified in the grammars.",
"type":"text"
}
],
"id":"97b7a76bf57c4567ac55f9912ff7e4c1",
"type":"text"
},
{
"fragments":[
{
"text":"TODO: show how one of the rules was manually translated.",
"type":"strong"
}
],
"id":"4686636ba5ce456da5be4ffb7f02cd59",
"type":"text"
},
{
"child_type":"unordered",
"children":[
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Last manual translation: 41094a184ed452141c99047d3187f096388e71d0",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Get rid of bootstrap code: 134c3a360160a2b978cd742a935df1c3a85de546",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Created manually with Vim templates",
"type":"text"
}
]
}
],
"id":"29fd2f33bf344dc0a09d34f914957291",
"type":"list"
}
],
"title":"Bootstrapping"
},
{
"children":[],
"id":"2651c102332c47b892977377323416b7",
"paragraphs":[
{
"child_type":"unordered",
"children":[
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Alan Kay",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"STEPS",
"type":"text"
}
]
},
{
"child_type":"unordered",
"children":[
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Metacompiler workshop",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Video about Lua implementation",
"type":"text"
}
]
}
],
"fragments":[
{
"text":"META II",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"OMeta",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Ohm",
"type":"text"
}
]
}
],
"id":"04202345600343e3a240709206c19590",
"type":"list"
}
],
"title":"Similar projects / inspiration"
}
],
"id":"9a483a4a28de4f298790297b5708b96f",
"paragraphs":[
{
"fragments":[
{
"text":"In this article I present RLMeta, a domain specific language for writing parsers, interpreters, compilers, etc.",
"type":"text"
}
],
"id":"0aa7192e98bd4d02bdb9a0b059155310",
"type":"text"
},
{
"fragments":[
{
"text":"In RLMeta you write grammars that specify how to match objects from the input. With semantic actions you specify what should happen when objects are matched.",
"type":"text"
}
],
"id":"f02eaf34f684451a842b6d275b1361f4",
"type":"text"
},
{
"fragments":[
{
"text":"The RLMeta compiler translates grammars into programs in a target language that recognizes the objects specified in the grammar and performs the semantic actions when the objects are matched. Depending on the semantic actions, the output from RLMeta is either a parser, interpreter, compiler, etc.",
"type":"text"
}
],
"id":"dabc7ecca02244b088ce2018fe46981d",
"type":"text"
},
{
"fragments":[
{
"text":"Overview of RLMeta compiler.",
"type":"text"
}
],
"id":"93f918b4e1e7472a8b1077399152b7ec",
"image_base64":"",
"type":"image"
},
{
"fragments":[
{
"text":"I will illustrate RLMeta with a series of examples.",
"type":"text"
}
],
"id":"c617755ef5da415880b3f91a7cc8c912",
"type":"text"
}
],
"title":"RLMeta"
},
"variables":{
"0051e09230894b6696a82c3f05f6740a":"upper",
"0449532c17204462b4b4681b07ac12b5":"expr1",
"07c126c0f9094e189f37cc4ab940b0b4":"_memo",
"08c927c12a8741f9994399078b91d0b8":"_a864d6cb43244a1ca536085dd92431af",
"0a8e6be4bec3466bb658d7d4ff5bc5fd":"FnCall",
"0c1a9537d33148388015163fc90329b3":"MatchList",
"10d9c2de82a14d12bd545133bd4e15f8":"MatchString",
"1104a6a7ec934b48a4f1db64dcd27000":"_label",
"1659fb73179a4fd8abfc99b95d9f5560":"bind",
"1868228966e84ad698de9ff7fe063861":"space",
"18d86dcee79847818139f3dd7dc38d8a":"astSeq",
"193b6786b4574a48b5e75f649420b08d":"pos",
"195e7fa2b75a40baa69b0bbf57a53150":"parserpy",
"19791660815a43e1b775ea6a29349648":"astListItem",
"22163f4ee0fd4e68b2c95f94e111dee1":"dedent",
"229c153579734cffaa700c7e26bcd7f4":"_builder",
"2420b6bcf2374252a533688aa0b33b5f":"astList",
"2508a37fdce84b31a7e6093a98c57506":"BuildCharsec",
"25ec6fc64b8b4a39a9df41daa690386f":"MatchAny",
"26534c61b2d94990abb37ceeeb648e4f":"_ors",
"289a3db9c53e420da4dbdbc94a32aadf":"_vars",
"28ffce2da5724d248fa88ac555d118f8":"asListItemWithNewVars",
"2a00f6add9e9443ab98af74a6da8b379":"run",
"2aa377816ed3486da72cff7bd46190ad":"Grammar",
"2c430882d5af40168a69e1b4b9eb7e0d":"_or",
"2e8a56ad01dc4a289fbd584bc4874e7e":"create",
"2ea1b512b7444d8ab077edeba233a4f3":"codegeneratorpy",
"2f6729bf45e84649b3187f8016c3fec9":"advance",
"301f08856bf54373bc5975f75a315105":"String",
"373f023f0f5f4744a7b309cf9a76d138":"SemanticAction",
"3e7232e282f642ab8ac4fbe709a32a99":"_result",
"3f3db8526d034826bb4d672abcc6029c":"calculatorpy",
"41435c2c862f40c1858cd2acd0b4f0bd":"Anonymous",
"42f0b42533be4f7eb54c04f22a137669":"grammar",
"43cd203f934f45c4be5ce3906b60ca5d":"_label",
"4852ced8038c4074a5a8104b8596e0e0":"Apply",
"49ba1aa1e24e408ba2b32bff68a72840":"List",
"49dc22ba19624755a18a13a9e76734b1":"_Builder",
"4ad80c8d1d814fefa2656595f1d841c6":"is_at_end",
"4c38cde583ac42ea8c7b9295a92e26f2":"_Output",
"4e5409ddd4a34450b3c8b4cb8bc5dd60":"escape",
"4e78a4bc50f744bb959c72b5918d9d32":"no_action",
"50ee7994db484890abbeeb13330e22a7":"_AtomBuilder",
"51046a6353b3472f8fe355d7f481eea9":"_b277e0c5612d4697bf8f8237494f8474",
"51620e4ed6bb4e359d4f6be5587dd423":"_Pos",
"53acf505e0ee41de85c674e211ecd39c":"_match_range",
"5440b88cecfb4dafad63f0f7887b82ce":"_match_charseq",
"56c85a8b77424f849f2a1b604066439e":"_or",
"56d10f7bfcfd43bb996c3f76423b067b":"to_rlmeta_output_stream",
"59d465325dd74411b347002179ecda0a":"_last_match",
"5b90ab050b7547de847cab210d087685":"supportpy",
"5bad22de76f845a68dd802dcb830efcc":"wrapFn",
"5cb361e64daa4aea9637f5b3fd6b91f0":"action",
"60d7dacf2a2b4336b0329665c2026cc0":"Star",
"6230f0917e9f4954add45c5e39a557e0":"sequence",
"630b364d3e7345c098bc8cff819f4d99":"Or",
"6352455a9a4f44c984b2c210151858a2":"supportpy",
"63d39eb3401840e681f80ff11203b175":"action",
"63e215a62fb74cebb9c2939e751e326f":"start",
"653fc20558a64badb437b07f3d1c8490":"nested",
"6544a37a96ce4294ab4553709d89f398":"_RLMeta",
"680e8a08749245bc9bbc232417da1d39":"choice",
"6860db9e40994ebfbe04834b4f12f721":"MatchCharRange",
"6a519019bfac49598dc36620b5b58811":"Bind",
"6b1fe389a7254359b3fbe4cb26ea084e":"nameChar",
"6de4b0de9db3465b89ec2278c5c557a8":"from_object",
"70c457e3514948bcb6c00b67e5a180a2":"_star",
"736cd2768dcd4843b43aca56bea200d3":"MatchNothing",
"739c23d655494bd8a8b9f16e3bd03a52":"wrapInAnd",
"747c1862acef4f499e2a7f16cbdd472a":"describe",
"793e09d183c5498fa2587841cd94c126":"char",
"7b75cb86cab34645b43d69d790e6e206":"DedentBuilder",
"7befab3d0c5747d687b20830147a70fa":"nameStart",
"7d667137ca2f4350969bcf2044d677de":"choices",
"7d82aaa0f3d34c059532d7a090654ab7":"string",
"7d8a78dfe90743759bdd25cf45506815":"_IndentBuilder",
"7ea6f6977ca24c218e28cd96b1cf8267":"_negative_lookahead",
"7f941dd526284ccc8143dbbc8ae8df3b":"sequence",
"826871508bad4fecb6e575779218874d":"_match",
"83ce9666a26449cd9936798594c99e3f":"rlmeta",
"846fccf81eca4ab48a284407a1647eaa":"_vars",
"85139f1436944deab62958b8a713d8aa":"eval",
"85ee4a0a694641c3aa683a15e6a0ba5d":"astItems",
"87bf33a4869b4d30944c4dd4388631a8":"statement",
"87debc7f453a48eab28b89389b5474a3":"charClass",
"8a8e32dcfa5545f7aa292dd7e696030a":"name",
"8a9e9ea4c4474b40934bd2ec52902c82":"",
"8b98e38b093140fc956b35f6cbf5018e":"ast",
"8c4b9e8c90ff4aa08d4840f8c1560522":"_match",
"8cb500cdd43d41a78158c645da945c70":"indent",
"8cf9a10b04cc48a484e1cb7c6f1f2f28":"CodeGenerator",
"8d17eff4871e411793cf0daf3a2ab204":"And",
"8d8408b72eb3446ab5493dad2c80477e":"lower",
"8f0ac7afdb164a6cb5287e9382330e91":"nothing",
"8ff0b4980efa4e349ec5ef14815be6ec":"MatchCharseq",
"91983a8c8ff04389a1c21c67abcebf46":"wrapInFn",
"94dd8ae9174644c2bb5e32d35f601486":"astSeqItem",
"98e8edb80565419e93902ec6ebc5b352":"choice",
"99f12ae30d1a42989f875222b33832ba":"support",
"9b21a7a4087848ba8f2ada071a294d73":"_match_list",
"a304a36f0ab541209c9e8aa78f4edc46":"Parser",
"a4f50e79518843e985eb9545a235ae89":"_Vars",
"a5837c091631449aadeeaa004ae71b0b":"write",
"a5d8a6b567934dd6a53cb34b2a18d30c":"_last_match",
"a864d6cb43244a1ca536085dd92431af":"charseq",
"aa94c870055a417b852e05100fb546c0":"BuildDedent",
"ab9490a5e7ba4561b96b04f481a9e57e":"_match_string",
"ae2f859206d741eca9f5e10495cb8095":"buildExpr",
"ae823ab23224415f9a539b0354f311b8":"VarLookup",
"af5dbdd6e27c451398b2b116b5ff42d3":"write",
"b058347d19484740b7e2dec4816c0978":"_TreePos",
"b062e0322e284160bf26034e9de32446":"key",
"b09ffc5c602a482982cec2726c306ace":"withNewVars",
"b2115b3eeaa143068958949787f5d104":"next",
"b277e0c5612d4697bf8f8237494f8474":"_ListBuilder",
"b3480703b376431588d58149f19c7a13":"_star",
"b4b8cb5f4cdd4dc68ecc9ca100d1da5a":"_Input",
"b6663a67104042fe8ee0bcb72896f366":"BuildNewline",
"b845c4cee1734619991d56de83dce37d":"Scope",
"bc27a67cb10b4650a32bfe7af84c5060":"Not",
"bd6daaaf4f8a47a1991da45be10921c3":"expr2",
"be57e79c16d8421fad091ec048a56211":"RetStringBuild",
"bfaedafcea7445e7b7ed19c9abb47736":"_DedentBuilder",
"c590c92167d34fe4bfdbb084c03834c1":"_and",
"c76075de5ae9496f9ef5b3c800111ead":"_any",
"c8edc6f14d27480e9f737a7697f07f07":"rule",
"c9ecfed5791644a3b7ea2122d4ed87c9":"ListBuilder",
"cbbcd925bc2c42b9add24aaa736f4d35":"_SemanticAction",
"cc14e6fceec9478c8fdb4ac3a58dbf7a":"digit",
"ccb3f676f6314d788147dc603933cd28":"astItem",
"cf4267183a3b4175801c67496a385af6":"_input",
"cf8770da147840679077788180e10778":"ListItemSplice",
"d34e449a8ca740d0a4b84921fc05b25f":"IndentBuilder",
"d6ed0f3ac9e84f60bae25485ddb2f97e":"_StringPos",
"db7a0c597eb84fc1b38a59b22f01eeef":"nest",
"dc3d22a8b70043628b058ffd00659a5d":"BuildIndent",
"dd463f369f79475da606b1cfc2d96076":"hostExpr",
"de5ba4ce4509433c946eacf356d7cfaa":"class:x ",
"de83a3a772234966ac566909fdfb0789":"file",
"df25061bb4004aa693b603f0a8ec2af2":"_MatchError",
"dfcaa421bd764cce9d99219c61883a45":"expr",
"e1248cbd01c54a1680793b61e7a048e1":"innerChar",
"e22e419d7c4845389694467bfa395529":"_f49eae10880e4186a37c021e34aea403",
"e22fa3c5d4144197906cbb74af6cc83e":"Rule",
"e521dea02b37474cb05f03e800132aa2":"_last",
"ea57b40b324c4c03b030c78e924ed860":"lookup",
"ec2b7e954fe24f329250bd22c70538e4":"_Vars",
"ee43fa1a15be4277b8bdd277451eb04d":"_and",
"efa7dd37aa9e46908ed34f8d31cd476d":"Or",
"f49eae10880e4186a37c021e34aea403":"_ands",
"f8026a10c5b64e46bfde32e671e4760e":"_7ea6f6977ca24c218e28cd96b1cf8267",
"f8b8599256e946a08d2325d52bf8e10b":"BuildVar",
"fdd8dd7ed7f54cc487c14cc791d637e2":"wrapInOr",
"fe84c1eea3fc4476bbcb1c717c92d43b":"hostExprListItem",
"ff0229c63d8a4b4897faed8c38201de3":"astFnBody",
"ff9ae871d46e43eca6fe9d752dfb7afc":"pexpr"
}
}