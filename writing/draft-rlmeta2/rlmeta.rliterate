{
"root_page":{
"children":[
{
"children":[],
"id":"3f00cf52d91a411d941312539a15cc32",
"paragraphs":[
{
"fragments":[
{
"text":"Metalanguages are used to reason about languages. In metalanguages you can make statements about statements in a different language.",
"type":"text"
}
],
"id":"a2abcd021060438bb2f874491199987f",
"type":"text"
},
{
"fragments":[
{
"text":"The metalanguage I've developed is called RLMeta. It is inspired by a metalanguage from the sixties called ",
"type":"text"
},
{
"text":"META II",
"type":"link",
"url":"https://en.wikipedia.org/wiki/META_II"
},
{
"text":". I wanted to develop my own version of META II to understand it deeply. RLMeta is also inspired by ",
"type":"text"
},
{
"text":"OMeta",
"type":"link",
"url":"https://en.wikipedia.org/wiki/OMeta"
},
{
"text":" (another META II derivative).",
"type":"text"
}
],
"id":"62f5e2bf63754a13ba84482280f425dd",
"type":"text"
},
{
"fragments":[
{
"text":"RLMeta is a programming language in which you write grammars. Grammars have rules that specify how to match objects from an input stream and specify what should happen when objects are matched. The RLMeta compiler translates grammars into programs that recognize the objects specified in the grammar and performs the semantic actions when the objects are matched.",
"type":"text"
}
],
"id":"76b13838f4044ae4b278190f639de8fa",
"type":"text"
},
{
"fragments":[
{
"text":"Overview of RLMeta compiler.",
"type":"text"
}
],
"id":"93f918b4e1e7472a8b1077399152b7ec",
"image_base64":"",
"type":"image"
}
],
"title":"Metalanguages"
},
{
"children":[],
"id":"ee16dcaf86a7402e9ca78edc620caacb",
"paragraphs":[
{
"fragments":[
{
"text":"How can RLMeta be used to give meaning to arithmetic expressions of the kind presented in the introductory example? Here is a grammar:",
"type":"text"
}
],
"id":"b790e79756a14087b27d48a73fed0c4e",
"type":"text"
},
{
"chunkpath":[],
"filepath":[
"calculator",
"calculator.rlmeta"
],
"fragments":[
{
"id":"ab4302beae5a4a689557c13e8d37179d",
"type":"variable"
},
{
"text":" {\n  expression =\n    | additive\n  additive =\n    | multitive:x '+' additive:y ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> add(x y)\n    | multitive\n  multitive =\n    | digit:x '*' multitive:y ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> mul(x y)\n    | digit\n  digit =\n    | '0'-'9':x ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> int(x)\n}\n",
"type":"code"
}
],
"id":"b54646c61b3f4216929bc173be5f6430",
"type":"code"
},
{
"fragments":[
{
"text":"This grammar is called ",
"type":"text"
},
{
"id":"ab4302beae5a4a689557c13e8d37179d",
"type":"variable"
},
{
"text":". It has four rules. The first rule says that an expression is an additive. The second rule says that an additive is either a multitive followed by the character '+' followed by another additive or just a multitive. The second case is only tried if the first does not match. The third rule says that a multitive is either a digit followed by the character '*' followed by another multitive or just a digit. The fourth rule says that a digit is a character in the range 0-9. The ",
"type":"text"
},
{
"text":":",
"type":"code"
},
{
"text":" followed by a name binds the result of a match to a variable. The expressions to the right of ",
"type":"text"
},
{
"text":"->",
"type":"code"
},
{
"text":" are semantic actions. They specify what should happen on a match. They can refer to variables. In this grammar they say that whenever an additive is matched, call the host language function ",
"type":"text"
},
{
"text":"add",
"type":"code"
},
{
"text":" with the left and right side, and whenever a multitive is matched, call the host language function ",
"type":"text"
},
{
"text":"mul",
"type":"code"
},
{
"text":" with the left and right side, and whenever a digit is matched, call the host language function ",
"type":"text"
},
{
"text":"int",
"type":"code"
},
{
"text":". The host language function ",
"type":"text"
},
{
"text":"int",
"type":"code"
},
{
"text":" converts a digit character to an integer and the ",
"type":"text"
},
{
"text":"add",
"type":"code"
},
{
"text":" and ",
"type":"text"
},
{
"text":"mul",
"type":"code"
},
{
"text":" functions perform addition and multiplication.",
"type":"text"
}
],
"id":"f02eaf34f684451a842b6d275b1361f4",
"type":"text"
},
{
"fragments":[
{
"text":"This grammar describes how to recognize arithmetic expressions in a sequence of characters. Presedence is encoded by the order of the rules. An additive is ",
"type":"text"
},
{
"text":"x1 + x2 + x3 + ..",
"type":"code"
},
{
"text":" where the xes are multitives. Therefore multiplication is performed before addition. It gives meaning to the expressions by calling host language functions when expressions are matched.",
"type":"text"
}
],
"id":"fafee421e91242a49198fe91304ef148",
"type":"text"
},
{
"fragments":[
{
"text":"When the calculator grammar is fed to the RLMeta compiler, a program is output that is an interpreter for arithmetic expressions.",
"type":"text"
}
],
"id":"63a18e34ac1c4a7fba249b421fd031df",
"type":"text"
},
{
"fragments":[
{
"text":"Overview of calculator compilation.",
"type":"text"
}
],
"id":"b87e6570816a4e75a51c9dcb035fc2fb",
"image_base64":"",
"type":"image"
},
{
"fragments":[
{
"text":"More specifically, this program is a Python class that implements interpretation of arithmetic expression. The class depends on a support library and also on the host language functions that were called in the grammar (",
"type":"text"
},
{
"text":"add",
"type":"code"
},
{
"text":", ",
"type":"text"
},
{
"text":"mul",
"type":"code"
},
{
"text":", and ",
"type":"text"
},
{
"text":"int",
"type":"code"
},
{
"text":"). The pieces must be assembled to form an executable program. Here is a template for the final Python file that implements a read-eval-print loop (REPL) for arithmetic expressions:",
"type":"text"
}
],
"id":"186ed1d9c38546ef9ba79650ac0fc56c",
"type":"text"
},
{
"chunkpath":[
"python file template"
],
"filepath":[
"calculator",
"compile.sh"
],
"fragments":[
{
"text":"from operator import add, mul\n\n$",
"type":"code"
},
{
"id":"5b90ab050b7547de847cab210d087685",
"type":"variable"
},
{
"text":"\n\n$",
"type":"code"
},
{
"id":"3f3db8526d034826bb4d672abcc6029c",
"type":"variable"
},
{
"text":"\n\nif __name__ == \"__main__\":\n    calculator = Calculator()\n    while True:\n        line = raw_input(\"> \")\n        print(calculator.run(\"expression\", line))\n",
"type":"code"
}
],
"id":"06fd6fc7c27940cda1755a1aec2fa358",
"language":"python",
"type":"code"
},
{
"fragments":[
{
"text":"First the host language functions are imported (",
"type":"text"
},
{
"text":"int",
"type":"code"
},
{
"text":" is always available). Then the support library and the compiled calculator grammar snippets are inserted. And finally a REPL is implemented. Compiled grammars are used by instatiating them and calling their ",
"type":"text"
},
{
"text":"run",
"type":"code"
},
{
"text":" method with the name of the rule and the input object. This template is rendered with a Bash script:",
"type":"text"
}
],
"id":"99d6cd9644464dd481feba65b559921c",
"type":"text"
},
{
"chunkpath":[],
"filepath":[
"calculator",
"compile.sh"
],
"fragments":[
{
"text":"#!/bin/bash\n\nset -e\n\ncd \"$(dirname \"$0\")\"\n\n",
"type":"code"
},
{
"id":"5b90ab050b7547de847cab210d087685",
"type":"variable"
},
{
"text":"=$(python ../rlmeta/rlmeta.py --support)\n",
"type":"code"
},
{
"id":"3f3db8526d034826bb4d672abcc6029c",
"type":"variable"
},
{
"text":"=$(python ../rlmeta/rlmeta.py < calculator.rlmeta)\n\ncat <<EOF\n",
"type":"code"
},
{
"blank_lines_before":0,
"path":[
"python file template"
],
"prefix":"",
"type":"chunk"
},
{
"text":"EOF\n",
"type":"code"
}
],
"id":"1c648bdb39f54ee7ad86680530851375",
"type":"code"
},
{
"fragments":[
{
"text":"The RLMeta compiler (",
"type":"text"
},
{
"text":"rlmeta.py",
"type":"code"
},
{
"text":") reads grammars from stdin and outputs Python classes on stdout. If the ",
"type":"text"
},
{
"text":"--support",
"type":"code"
},
{
"text":" flag is given, it outputs the support library on stdout instead.",
"type":"text"
}
],
"id":"0064699c33fe4c3cb6c59682d86c62b3",
"type":"text"
},
{
"fragments":[
{
"text":"Example usage on the command line:",
"type":"text"
}
],
"id":"ec28001fbeda4bcca184b932f518b619",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"$ python <(./calculator/compile.sh)\n> 1+2*3\n7\n",
"type":"code"
}
],
"id":"46d623c62dc74aa981d97d3abc9b8848",
"language":"",
"type":"code"
}
],
"title":"Interpreting expressions"
},
{
"children":[],
"id":"61e10d1de6624255a4406572fef4b413",
"paragraphs":[
{
"fragments":[
{
"text":"The previous example relied on host language functions to perform addition and multiplication. The meaning of expressions were defined in terms of the meaning of Python functions. To understand what expressions mean, you need to understand how Python implements those functions. The next example compiles expressions down to a kind of assembly language that eliminates the need for Python.",
"type":"text"
}
],
"id":"67a983c01275458e9486c7aa01558e3b",
"type":"text"
},
{
"fragments":[
{
"text":"For this compilation, two grammars are written: a parser and a code generator. The parser matches exactly the same input expressions as the calculator grammar but instead of evaluating expressions, it creates abstract syntax trees (AST) describing expressions. Nodes in the AST are represented as lists where the first item is a string denoting the type of node.",
"type":"text"
}
],
"id":"f6391e9182fc488aa01ce25f3fe09488",
"type":"text"
},
{
"chunkpath":[],
"filepath":[
"expression",
"parser.rlmeta"
],
"fragments":[
{
"id":"291ec286c3ed4879b024d7df5db5fdde",
"type":"variable"
},
{
"text":" {\n  expression =\n    | additive\n  additive =\n    | multitive:x '+' additive:y ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"add\" x y]\n    | multitive\n  multitive =\n    | digit:x '*' multitive:y ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"mul\" x y]\n    | digit\n  digit =\n    | '0'-'9':x ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"digit\" x]\n}\n",
"type":"code"
}
],
"id":"1c33d785a57347d099fb28e74887c1fa",
"type":"code"
},
{
"fragments":[
{
"text":"The code generator takes as input the AST from the parser and generates assembly language code for an imaginary stack machine.",
"type":"text"
}
],
"id":"7fedf9682c9c4bc78b63a9cbbffc3868",
"type":"text"
},
{
"chunkpath":[],
"filepath":[
"expression",
"codegenerator.rlmeta"
],
"fragments":[
{
"id":"f978010a00194df8a0ce393bb6ff677a",
"type":"variable"
},
{
"text":" {\n  ",
"type":"code"
},
{
"id":"48c8e22a1f1f441e8680e6bcc9810d9a",
"type":"variable"
},
{
"text":" =\n    | [\"add\" ast:x ast:y] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { x y ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"\"add\" ",
"type":"code"
},
{
"index":30,
"type":"tabstop"
},
{
"text":"\"\\n\" }\n    | [\"mul\" ast:x ast:y] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { x y ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"\"mul\" ",
"type":"code"
},
{
"index":30,
"type":"tabstop"
},
{
"text":"\"\\n\" }\n    | [\"digit\" .:x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"\"push \" x ",
"type":"code"
},
{
"index":30,
"type":"tabstop"
},
{
"text":"\"\\n\" }\n}\n",
"type":"code"
}
],
"id":"48b8273f5d79429b9a10007fec2da2b3",
"type":"code"
},
{
"fragments":[
{
"text":"This grammar has only one rule: ",
"type":"text"
},
{
"id":"48c8e22a1f1f441e8680e6bcc9810d9a",
"type":"variable"
},
{
"text":". It says that an AST is either a list that starts with the string 'add', or a list that starts with the string 'mul', or a list that starts with the string 'digit'. The add and mul cases recursively match AST nodes as their left and right side whereas the digit matches anything (",
"type":"text"
},
{
"text":".",
"type":"code"
},
{
"text":") which is the digit stored in the node. The semantic actions in this grammar generate string output which is denoted by the curly braces. When a digit node is matched, the string 'push [digit]\\n' is generated. It instructs the stack machine to push the given digit to the stack. For add and mul, instructions for the operands are first output followed by an 'add\\n' or 'mul\\n' instruction. They instruct the stack machine to pop two numbers off the stack, add or multiply them, and push the result.",
"type":"text"
}
],
"id":"1872b7e904f047e980db91ec2920eda9",
"type":"text"
},
{
"fragments":[
{
"text":"When the expression grammars are fed to the RLMeta compiler, programs are output that, when combined, is a compiler for arithmetic expressions.",
"type":"text"
}
],
"id":"3a9a42c669674acfa50f238c24a4fd60",
"type":"text"
},
{
"fragments":[
{
"text":"Overview of expression compilation.",
"type":"text"
}
],
"id":"21385bc01a9c424681961e5fce11efca",
"image_base64":"",
"type":"image"
},
{
"fragments":[
{
"text":"Here is a template for the final Python file that implements a REPL for arithmetic expression compilation:",
"type":"text"
}
],
"id":"418e9b716a6b49b5b850d5f3cdb45499",
"type":"text"
},
{
"chunkpath":[
"python file template"
],
"filepath":[
"expression",
"compile.sh"
],
"fragments":[
{
"text":"import sys\n\n$",
"type":"code"
},
{
"id":"5b90ab050b7547de847cab210d087685",
"type":"variable"
},
{
"text":"\n\n$",
"type":"code"
},
{
"id":"bf29f97b4f354ee5a3ac3d9346be1e52",
"type":"variable"
},
{
"text":"\n\n$",
"type":"code"
},
{
"id":"3a76a9617ce44d7eb1609bbff707013e",
"type":"variable"
},
{
"text":"\n\nif __name__ == \"__main__\":\n    parser = ",
"type":"code"
},
{
"id":"291ec286c3ed4879b024d7df5db5fdde",
"type":"variable"
},
{
"text":"()\n    codegenerator = ",
"type":"code"
},
{
"id":"f978010a00194df8a0ce393bb6ff677a",
"type":"variable"
},
{
"text":"()\n    while True:\n        line = raw_input(\"> \")\n        ast = parser.run(\"expression\", line)\n        assembly = codegenerator.run(\"",
"type":"code"
},
{
"id":"48c8e22a1f1f441e8680e6bcc9810d9a",
"type":"variable"
},
{
"text":"\", ast)\n        sys.stdout.write(assembly)\n",
"type":"code"
}
],
"id":"a3e4e452d8a149f69101fc8a7ed23020",
"language":"python",
"type":"code"
},
{
"fragments":[
{
"text":"This template is rendered with a Bash script:",
"type":"text"
}
],
"id":"6cd78bcb58f44f7298daf17b1f21b985",
"type":"text"
},
{
"chunkpath":[],
"filepath":[
"expression",
"compile.sh"
],
"fragments":[
{
"text":"#!/bin/bash\n\nset -e\n\ncd \"$(dirname \"$0\")\"\n\n",
"type":"code"
},
{
"id":"5b90ab050b7547de847cab210d087685",
"type":"variable"
},
{
"text":"=$(python ../rlmeta/rlmeta.py --support)\n",
"type":"code"
},
{
"id":"bf29f97b4f354ee5a3ac3d9346be1e52",
"type":"variable"
},
{
"text":"=$(python ../rlmeta/rlmeta.py < parser.rlmeta)\n",
"type":"code"
},
{
"id":"3a76a9617ce44d7eb1609bbff707013e",
"type":"variable"
},
{
"text":"=$(python ../rlmeta/rlmeta.py < codegenerator.rlmeta)\n\ncat <<EOF\n",
"type":"code"
},
{
"blank_lines_before":0,
"path":[
"python file template"
],
"prefix":"",
"type":"chunk"
},
{
"text":"EOF\n",
"type":"code"
}
],
"id":"3ef9e2fe1c5d49fb8efd3b30641f8189",
"type":"code"
},
{
"fragments":[
{
"text":"Example usage on the command line:",
"type":"text"
}
],
"id":"7668140579554f10946c0aa94ae7b616",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"$ python <(./expression/compile.sh)\n> 1+2*3\npush 1\npush 2\npush 3\nmul\nadd\n> 1*2+3\npush 1\npush 2\nmul\npush 3\nadd\n",
"type":"code"
}
],
"id":"c4b0637463164b6681f2d71a50ed9dd8",
"type":"code"
},
{
"fragments":[
{
"text":"This assembly language code is much closer to CPU instructions than the Python-based interpreter. A grammar could be written to convert these assembly instructions to assembly instructions of a real CPU. But I will not do that here. The point is that that the meaning of an expression can be described by a series of transformations that eventually output machine instructions.",
"type":"text"
}
],
"id":"4e9215a9b94d468a82d0f88f6f92d71a",
"type":"text"
}
],
"title":"Compiling expressions"
},
{
"children":[
{
"children":[
{
"children":[],
"id":"a757df1ad1764cc996d9d3e0a0ce4d25",
"paragraphs":[
{
"fragments":[
{
"text":"The top level syntactic element is a grammar. A grammar has a ",
"type":"text"
},
{
"page_id":"19acecc9fbc44023a69cea9eadbe734d",
"text":"name",
"type":"reference"
},
{
"text":" followed by ",
"type":"text"
},
{
"page_id":"e1799ddc14ce4a7f83c8f390f9bf8720",
"text":"rules",
"type":"reference"
},
{
"text":" enclosed in curly braces. When this is matched, a ",
"type":"text"
},
{
"id":"2aa377816ed3486da72cff7bd46190ad",
"type":"variable"
},
{
"text":" AST node is created containing the name of the grammar and the rule AST nodes:",
"type":"text"
}
],
"id":"8de82ec3c0f34c94af9bfc418229357e",
"type":"text"
},
{
"chunkpath":[
"rules"
],
"filepath":[
"rlmeta",
"parser.rlmeta"
],
"fragments":[
{
"id":"42f0b42533be4f7eb54c04f22a137669",
"type":"variable"
},
{
"text":" =\n  | ",
"type":"code"
},
{
"id":"8a8e32dcfa5545f7aa292dd7e696030a",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '{' ",
"type":"code"
},
{
"id":"c8edc6f14d27480e9f737a7697f07f07",
"type":"variable"
},
{
"text":"*:ys ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '}' ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"2aa377816ed3486da72cff7bd46190ad",
"type":"variable"
},
{
"text":"\" x ~ys]\n",
"type":"code"
}
],
"id":"41afd1b3bc8749a2bdefb2a09eb54f62",
"type":"code"
},
{
"fragments":[
{
"text":"Throughout the parser, ",
"type":"text"
},
{
"page_id":"d729731e037a4a5aafa6da77d2b8bdb1",
"text":"space",
"type":"reference"
},
{
"text":" is ignored. As a rule of thumb, it is inserted before matching a character sequence (and not before matching other rules).",
"type":"text"
}
],
"id":"951cf37dc6b740b385a94ee6dab5c66a",
"type":"text"
},
{
"fragments":[
{
"text":"The ",
"type":"text"
},
{
"text":"*",
"type":"code"
},
{
"text":" operator after ",
"type":"text"
},
{
"id":"c8edc6f14d27480e9f737a7697f07f07",
"type":"variable"
},
{
"text":" means match the preceding expression zero ore more times. The result is a list.",
"type":"text"
}
],
"id":"77ce7116d56343719fc18afd56521b7b",
"type":"text"
},
{
"fragments":[
{
"text":"The ",
"type":"text"
},
{
"text":"~",
"type":"code"
},
{
"text":" operator in the semantic action means splice the list in-line into the enclosing list. The ",
"type":"text"
},
{
"id":"2aa377816ed3486da72cff7bd46190ad",
"type":"variable"
},
{
"text":" AST node thus has the name as element one, the first rule AST node as element two, the second rule AST node as element three, and so on.",
"type":"text"
}
],
"id":"3b17be4371c243d78861a6c94cc0a081",
"type":"text"
}
],
"title":"Grammar"
},
{
"children":[],
"id":"e1799ddc14ce4a7f83c8f390f9bf8720",
"paragraphs":[
{
"fragments":[
{
"text":"A rule has a ",
"type":"text"
},
{
"page_id":"19acecc9fbc44023a69cea9eadbe734d",
"text":"name",
"type":"reference"
},
{
"text":" followed by an equal sign followed by a ",
"type":"text"
},
{
"page_id":"c2a43ebb9a7d477f8dd7126f94bd33de",
"text":"choice",
"type":"reference"
},
{
"text":". When this is matched, a ",
"type":"text"
},
{
"id":"e22fa3c5d4144197906cbb74af6cc83e",
"type":"variable"
},
{
"text":" AST node is created containing the name and the choice AST node:",
"type":"text"
}
],
"id":"5e9600e66ce74fa18b69b96917889a6f",
"type":"text"
},
{
"chunkpath":[
"rules"
],
"filepath":[
"rlmeta",
"parser.rlmeta"
],
"fragments":[
{
"id":"c8edc6f14d27480e9f737a7697f07f07",
"type":"variable"
},
{
"text":" =\n  | ",
"type":"code"
},
{
"id":"8a8e32dcfa5545f7aa292dd7e696030a",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '=' ",
"type":"code"
},
{
"id":"7d667137ca2f4350969bcf2044d677de",
"type":"variable"
},
{
"text":":y ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"e22fa3c5d4144197906cbb74af6cc83e",
"type":"variable"
},
{
"text":"\" x y]\n",
"type":"code"
}
],
"id":"f24d0daa1d1c4ddeb6b111c45aa31102",
"type":"code"
}
],
"title":"Rule"
},
{
"children":[],
"id":"c2a43ebb9a7d477f8dd7126f94bd33de",
"paragraphs":[
{
"fragments":[
{
"text":"A choice has ",
"type":"text"
},
{
"page_id":"08818eb200d0482f8feb9104e1ae2ea7",
"text":"sequences",
"type":"reference"
},
{
"text":" separated by vertical bars. Optionally the first sequence can start with a vertical bar to allow all sequence lines to look the same. When this is matched, an ",
"type":"text"
},
{
"id":"efa7dd37aa9e46908ed34f8d31cd476d",
"type":"variable"
},
{
"text":" AST node is created containing the sequence AST nodes:",
"type":"text"
}
],
"id":"77e39db8bc6944b8afb793e3fcf28e88",
"type":"text"
},
{
"chunkpath":[
"rules"
],
"filepath":[
"rlmeta",
"parser.rlmeta"
],
"fragments":[
{
"id":"7d667137ca2f4350969bcf2044d677de",
"type":"variable"
},
{
"text":" =\n  | (",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '|')?\n    ",
"type":"code"
},
{
"id":"7f941dd526284ccc8143dbbc8ae8df3b",
"type":"variable"
},
{
"text":":x (",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '|' ",
"type":"code"
},
{
"id":"7f941dd526284ccc8143dbbc8ae8df3b",
"type":"variable"
},
{
"text":")*:xs ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"efa7dd37aa9e46908ed34f8d31cd476d",
"type":"variable"
},
{
"text":"\" x ~xs]\n",
"type":"code"
}
],
"id":"5548c68fed5947a891639cab8086cba5",
"type":"code"
},
{
"fragments":[
{
"text":"The ",
"type":"text"
},
{
"text":"?",
"type":"code"
},
{
"text":" operator menas match the preceding expression zero or one time.",
"type":"text"
}
],
"id":"69a20341034947ab9dafb7ab7d31094f",
"type":"text"
},
{
"fragments":[
{
"text":"The result of ",
"type":"text"
},
{
"text":"xs",
"type":"code"
},
{
"text":" is a list of sequences since the expression inside parenthesis returns the last match (which is a sequence).",
"type":"text"
}
],
"id":"f768c4c9a91a4646ba1792b1e37af71f",
"type":"text"
}
],
"title":"Choice"
},
{
"children":[],
"id":"08818eb200d0482f8feb9104e1ae2ea7",
"paragraphs":[
{
"fragments":[
{
"text":"A sequence has one or more ",
"type":"text"
},
{
"page_id":"5fca8ddb3f88457bbe5217fa1ebf4383",
"text":"expressions",
"type":"reference"
},
{
"text":". When this is matched, a ",
"type":"text"
},
{
"id":"b845c4cee1734619991d56de83dce37d",
"type":"variable"
},
{
"text":" AST node is created containing an ",
"type":"text"
},
{
"id":"8d17eff4871e411793cf0daf3a2ab204",
"type":"variable"
},
{
"text":" AST node containing the expression AST nodes:",
"type":"text"
}
],
"id":"a9761a1483114aebbdab2d94006de2cf",
"type":"text"
},
{
"chunkpath":[
"rules"
],
"filepath":[
"rlmeta",
"parser.rlmeta"
],
"fragments":[
{
"id":"7f941dd526284ccc8143dbbc8ae8df3b",
"type":"variable"
},
{
"text":" =\n  | ",
"type":"code"
},
{
"id":"dfcaa421bd764cce9d99219c61883a45",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"id":"dfcaa421bd764cce9d99219c61883a45",
"type":"variable"
},
{
"text":"*:xs ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"b845c4cee1734619991d56de83dce37d",
"type":"variable"
},
{
"text":"\" [\"",
"type":"code"
},
{
"id":"8d17eff4871e411793cf0daf3a2ab204",
"type":"variable"
},
{
"text":"\" x ~xs]]\n",
"type":"code"
}
],
"id":"a00b4131f7794b6cb496a4e8249dc9d2",
"type":"code"
}
],
"title":"Sequence"
},
{
"children":[],
"id":"5fca8ddb3f88457bbe5217fa1ebf4383",
"paragraphs":[
{
"fragments":[
{
"text":"An expression is one of the following sequences:",
"type":"text"
}
],
"id":"5f48d5736fe448dd872b861c5aeb4a18",
"type":"text"
},
{
"chunkpath":[
"rules"
],
"filepath":[
"rlmeta",
"parser.rlmeta"
],
"fragments":[
{
"id":"dfcaa421bd764cce9d99219c61883a45",
"type":"variable"
},
{
"text":" =\n  | ",
"type":"code"
},
{
"id":"0449532c17204462b4b4681b07ac12b5",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" ':' ",
"type":"code"
},
{
"id":"8a8e32dcfa5545f7aa292dd7e696030a",
"type":"variable"
},
{
"text":":y ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"6a519019bfac49598dc36620b5b58811",
"type":"variable"
},
{
"text":"\" y x]\n  | ",
"type":"code"
},
{
"id":"0449532c17204462b4b4681b07ac12b5",
"type":"variable"
},
{
"text":"\n",
"type":"code"
}
],
"id":"f1365e28cce74941892cdaa24ba6d2ad",
"language":"",
"type":"code"
},
{
"fragments":[
{
"text":"The first sequence is an ",
"type":"text"
},
{
"page_id":"cdeac4c7bcb84261a3d194c1183c9dd7",
"text":"expression of level 1",
"type":"reference"
},
{
"text":" followed by a colon followed by a ",
"type":"text"
},
{
"page_id":"19acecc9fbc44023a69cea9eadbe734d",
"text":"name",
"type":"reference"
},
{
"text":". When this is matched, a ",
"type":"text"
},
{
"id":"6a519019bfac49598dc36620b5b58811",
"type":"variable"
},
{
"text":" AST node is created containing the name and the expression AST node.",
"type":"text"
}
],
"id":"6ce6b486a7124a1298073f7e700db4d2",
"type":"text"
},
{
"fragments":[
{
"text":"The second sequence is an ",
"type":"text"
},
{
"page_id":"cdeac4c7bcb84261a3d194c1183c9dd7",
"text":"expression of level 1",
"type":"reference"
},
{
"text":".",
"type":"text"
}
],
"id":"030a1c6c00894008859a36c099742365",
"type":"text"
}
],
"title":"Expression"
},
{
"children":[],
"id":"cdeac4c7bcb84261a3d194c1183c9dd7",
"paragraphs":[
{
"fragments":[
{
"text":"An expression of level 1 is one of the following sequences:",
"type":"text"
}
],
"id":"974e6a8e91534f1997cf16e2e99ebc11",
"type":"text"
},
{
"chunkpath":[
"rules"
],
"filepath":[
"rlmeta",
"parser.rlmeta"
],
"fragments":[
{
"id":"0449532c17204462b4b4681b07ac12b5",
"type":"variable"
},
{
"text":" =\n  | ",
"type":"code"
},
{
"id":"bd6daaaf4f8a47a1991da45be10921c3",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '*' ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"60d7dacf2a2b4336b0329665c2026cc0",
"type":"variable"
},
{
"text":"\" x]\n  | ",
"type":"code"
},
{
"id":"bd6daaaf4f8a47a1991da45be10921c3",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '?' ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"630b364d3e7345c098bc8cff819f4d99",
"type":"variable"
},
{
"text":"\" x [\"",
"type":"code"
},
{
"id":"8d17eff4871e411793cf0daf3a2ab204",
"type":"variable"
},
{
"text":"\"]]\n  | ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '!' ",
"type":"code"
},
{
"id":"bd6daaaf4f8a47a1991da45be10921c3",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"bc27a67cb10b4650a32bfe7af84c5060",
"type":"variable"
},
{
"text":"\" x]\n  | ",
"type":"code"
},
{
"id":"bd6daaaf4f8a47a1991da45be10921c3",
"type":"variable"
},
{
"text":"\n",
"type":"code"
}
],
"id":"101abf29d86c4c4a82e5d95c13318ec9",
"language":"",
"type":"code"
},
{
"fragments":[
{
"text":"The first sequence is an ",
"type":"text"
},
{
"page_id":"4e76262e4c9841db8c0b79401ac7a8ff",
"text":"expression of level 2",
"type":"reference"
},
{
"text":" followed by an asterisk. When this is matched, a ",
"type":"text"
},
{
"id":"60d7dacf2a2b4336b0329665c2026cc0",
"type":"variable"
},
{
"text":" AST node is created containing the expression AST node.",
"type":"text"
}
],
"id":"ab30de459ca843658e3afb417864752e",
"type":"text"
},
{
"fragments":[
{
"text":"The second sequence is an ",
"type":"text"
},
{
"page_id":"4e76262e4c9841db8c0b79401ac7a8ff",
"text":"expression of level 2",
"type":"reference"
},
{
"text":" followed by a question mark. When this is matched, an ",
"type":"text"
},
{
"id":"630b364d3e7345c098bc8cff819f4d99",
"type":"variable"
},
{
"text":" AST node is created containing the expression AST node and an empty ",
"type":"text"
},
{
"id":"8d17eff4871e411793cf0daf3a2ab204",
"type":"variable"
},
{
"text":" AST node. There is no dedicated AST node for the ",
"type":"text"
},
{
"text":"?",
"type":"code"
},
{
"text":" operator, but it is equivalent to matching the expression or zero expressions and'ed.",
"type":"text"
}
],
"id":"65a08ba114694b42994c6730848524fd",
"type":"text"
},
{
"fragments":[
{
"text":"The third sequence is an exclamation mark followed by an ",
"type":"text"
},
{
"page_id":"4e76262e4c9841db8c0b79401ac7a8ff",
"text":"expression of level 2",
"type":"reference"
},
{
"text":". When this is matched, a ",
"type":"text"
},
{
"id":"bc27a67cb10b4650a32bfe7af84c5060",
"type":"variable"
},
{
"text":" AST node is created containing the expression AST node.",
"type":"text"
}
],
"id":"73b1bf8f4c53481d950d024885e1871f",
"type":"text"
},
{
"fragments":[
{
"text":"The fourth sequence is an ",
"type":"text"
},
{
"page_id":"4e76262e4c9841db8c0b79401ac7a8ff",
"text":"expression of level 2",
"type":"reference"
},
{
"text":".",
"type":"text"
}
],
"id":"2bf5e58f5921457d8a38a1e208b4ebec",
"type":"text"
}
],
"title":"Expression of level 1"
},
{
"children":[],
"id":"4e76262e4c9841db8c0b79401ac7a8ff",
"paragraphs":[
{
"fragments":[
{
"text":"An expression of level 2 is one of the following sequences:",
"type":"text"
}
],
"id":"67270cd6542f4f5e830563ba93c0cdb1",
"type":"text"
},
{
"chunkpath":[
"rules"
],
"filepath":[
"rlmeta",
"parser.rlmeta"
],
"fragments":[
{
"id":"bd6daaaf4f8a47a1991da45be10921c3",
"type":"variable"
},
{
"text":" =\n  | ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '->' ",
"type":"code"
},
{
"id":"dd463f369f79475da606b1cfc2d96076",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"373f023f0f5f4744a7b309cf9a76d138",
"type":"variable"
},
{
"text":"\" x]\n  | ",
"type":"code"
},
{
"id":"8a8e32dcfa5545f7aa292dd7e696030a",
"type":"variable"
},
{
"text":":x !(",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '=') ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"4852ced8038c4074a5a8104b8596e0e0",
"type":"variable"
},
{
"text":"\" x]\n  | ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"id":"793e09d183c5498fa2587841cd94c126",
"type":"variable"
},
{
"text":":x '-' ",
"type":"code"
},
{
"id":"793e09d183c5498fa2587841cd94c126",
"type":"variable"
},
{
"text":":y ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"6860db9e40994ebfbe04834b4f12f721",
"type":"variable"
},
{
"text":"\" x y]\n  | ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"id":"7d82aaa0f3d34c059532d7a090654ab7",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"10d9c2de82a14d12bd545133bd4e15f8",
"type":"variable"
},
{
"text":"\" x]\n  | ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"id":"a864d6cb43244a1ca536085dd92431af",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"8ff0b4980efa4e349ec5ef14815be6ec",
"type":"variable"
},
{
"text":"\" x]\n  | ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '.' ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"25ec6fc64b8b4a39a9df41daa690386f",
"type":"variable"
},
{
"text":"\"]\n  | ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '(' ",
"type":"code"
},
{
"id":"7d667137ca2f4350969bcf2044d677de",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" ')' ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> x\n  | ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '[' ",
"type":"code"
},
{
"id":"dfcaa421bd764cce9d99219c61883a45",
"type":"variable"
},
{
"text":"*:xs ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" ']' ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"0c1a9537d33148388015163fc90329b3",
"type":"variable"
},
{
"text":"\" [\"",
"type":"code"
},
{
"id":"8d17eff4871e411793cf0daf3a2ab204",
"type":"variable"
},
{
"text":"\" ~xs]]\n",
"type":"code"
}
],
"id":"f05c9406eceb4daab6c376ababdb1679",
"language":"",
"type":"code"
},
{
"fragments":[
{
"text":"The first sequence is the characters '->' followed by a ",
"type":"text"
},
{
"page_id":"768d143c206146ca8efba292c6e9169b",
"text":"host expression",
"type":"reference"
},
{
"text":". When this is matched, a ",
"type":"text"
},
{
"id":"373f023f0f5f4744a7b309cf9a76d138",
"type":"variable"
},
{
"text":" AST node is created containing the expression AST node.",
"type":"text"
}
],
"id":"8764dd9f6d7e45eb9cf481a0c3676b36",
"type":"text"
},
{
"fragments":[
{
"text":"The second sequence is a ",
"type":"text"
},
{
"page_id":"19acecc9fbc44023a69cea9eadbe734d",
"text":"name",
"type":"reference"
},
{
"text":" that is not followed by an equal sign (otherwise it would also match the start of a rule). When this is matched, a ",
"type":"text"
},
{
"id":"4852ced8038c4074a5a8104b8596e0e0",
"type":"variable"
},
{
"text":" AST node is created containing the name.",
"type":"text"
}
],
"id":"df03f2cd7a6f43fa8bfb68951d00ca81",
"type":"text"
},
{
"fragments":[
{
"text":"The third sequence is a ",
"type":"text"
},
{
"page_id":"2057abb618bf4209950acd87fa49da5d",
"text":"character",
"type":"reference"
},
{
"text":" followed by a dash followed by another character. When this is matched, a ",
"type":"text"
},
{
"id":"6860db9e40994ebfbe04834b4f12f721",
"type":"variable"
},
{
"text":" AST node is created containing the two characters.",
"type":"text"
}
],
"id":"28e9878b6ba741d5a633a306c50c7bf5",
"type":"text"
},
{
"fragments":[
{
"text":"The fourth sequence is a ",
"type":"text"
},
{
"page_id":"2057abb618bf4209950acd87fa49da5d",
"text":"string",
"type":"reference"
},
{
"text":". When this is matched, a ",
"type":"text"
},
{
"id":"10d9c2de82a14d12bd545133bd4e15f8",
"type":"variable"
},
{
"text":" AST node is created containing the string.",
"type":"text"
}
],
"id":"b5fffe63cb7d48fca443f689caa82cb1",
"type":"text"
},
{
"fragments":[
{
"text":"The fifth sequence is a ",
"type":"text"
},
{
"page_id":"2057abb618bf4209950acd87fa49da5d",
"text":"character sequence",
"type":"reference"
},
{
"text":". When this is matched, a ",
"type":"text"
},
{
"id":"8ff0b4980efa4e349ec5ef14815be6ec",
"type":"variable"
},
{
"text":" AST node is created containing the character sequence.",
"type":"text"
}
],
"id":"3ebbe5435f0e4123999d909438f72dc3",
"type":"text"
},
{
"fragments":[
{
"text":"The sixth sequence is a dot. When this is matched, a ",
"type":"text"
},
{
"id":"25ec6fc64b8b4a39a9df41daa690386f",
"type":"variable"
},
{
"text":" AST node is created.",
"type":"text"
}
],
"id":"9a841fa6c5e74c48b871e881f9746820",
"type":"text"
},
{
"fragments":[
{
"text":"The seventh sequence is an open parenthesis followed by a ",
"type":"text"
},
{
"page_id":"c2a43ebb9a7d477f8dd7126f94bd33de",
"text":"choice",
"type":"reference"
},
{
"text":" followed by a closing parenthesis. When this is matched, the choice AST node is returned.",
"type":"text"
}
],
"id":"ed28f90ab7e54709bc74d46f8f4e6dd4",
"type":"text"
},
{
"fragments":[
{
"text":"The eighth sequence is an open bracket followed by ",
"type":"text"
},
{
"page_id":"5fca8ddb3f88457bbe5217fa1ebf4383",
"text":"expressions",
"type":"reference"
},
{
"text":" followed by a closing bracket. When this is matched a ",
"type":"text"
},
{
"id":"0c1a9537d33148388015163fc90329b3",
"type":"variable"
},
{
"text":" AST node is created containing an ",
"type":"text"
},
{
"id":"8d17eff4871e411793cf0daf3a2ab204",
"type":"variable"
},
{
"text":" AST node containing the expressions.",
"type":"text"
}
],
"id":"32191d3a20754225bd24f22b3f4b398f",
"type":"text"
}
],
"title":"Expression of level 2"
},
{
"children":[],
"id":"768d143c206146ca8efba292c6e9169b",
"paragraphs":[
{
"fragments":[
{
"text":"A host expression is one of the following sequences:",
"type":"text"
}
],
"id":"aa1eab8093b64cf99796fe22f1386122",
"type":"text"
},
{
"chunkpath":[
"rules"
],
"filepath":[
"rlmeta",
"parser.rlmeta"
],
"fragments":[
{
"id":"dd463f369f79475da606b1cfc2d96076",
"type":"variable"
},
{
"text":" =\n  | ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"id":"7d82aaa0f3d34c059532d7a090654ab7",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"301f08856bf54373bc5975f75a315105",
"type":"variable"
},
{
"text":"\" x]\n  | ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '[' ",
"type":"code"
},
{
"id":"fe84c1eea3fc4476bbcb1c717c92d43b",
"type":"variable"
},
{
"text":"*:xs ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" ']' ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"49ba1aa1e24e408ba2b32bff68a72840",
"type":"variable"
},
{
"text":"\" ~xs]\n  | ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '{' ",
"type":"code"
},
{
"id":"ae2f859206d741eca9f5e10495cb8095",
"type":"variable"
},
{
"text":"*:xs ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '}' ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"c9ecfed5791644a3b7ea2122d4ed87c9",
"type":"variable"
},
{
"text":"\" ~xs]\n  | ",
"type":"code"
},
{
"id":"8a8e32dcfa5545f7aa292dd7e696030a",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '(' ",
"type":"code"
},
{
"id":"dd463f369f79475da606b1cfc2d96076",
"type":"variable"
},
{
"text":"*:ys ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" ')' ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"0a8e6be4bec3466bb658d7d4ff5bc5fd",
"type":"variable"
},
{
"text":"\" x ~ys]\n  | ",
"type":"code"
},
{
"id":"8a8e32dcfa5545f7aa292dd7e696030a",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"ae823ab23224415f9a539b0354f311b8",
"type":"variable"
},
{
"text":"\" x]\n",
"type":"code"
}
],
"id":"f0b031c3724e42c5a0fb9704ef64976d",
"language":"",
"type":"code"
},
{
"fragments":[
{
"text":"The first sequence is a ",
"type":"text"
},
{
"page_id":"2057abb618bf4209950acd87fa49da5d",
"text":"string",
"type":"reference"
},
{
"text":". When this is matched, a ",
"type":"text"
},
{
"id":"301f08856bf54373bc5975f75a315105",
"type":"variable"
},
{
"text":" AST node is created containing the string.",
"type":"text"
}
],
"id":"cd1e23ee8dc541d1a4ecebc5109f258c",
"type":"text"
},
{
"fragments":[
{
"text":"The second sequence is an open bracket followed by host expression list items followed by a closing bracket. When this is matched a ",
"type":"text"
},
{
"id":"49ba1aa1e24e408ba2b32bff68a72840",
"type":"variable"
},
{
"text":" AST node is created containing the list item AST nodes.",
"type":"text"
}
],
"id":"949dcf7910dc4375b839e82124169f2d",
"type":"text"
},
{
"fragments":[
{
"text":"A list item is either a host expression preceded by the ",
"type":"text"
},
{
"text":"~",
"type":"code"
},
{
"text":" operator, in which case a ",
"type":"text"
},
{
"id":"cf8770da147840679077788180e10778",
"type":"variable"
},
{
"text":" AST node is created containing the expression, or a host expression:",
"type":"text"
}
],
"id":"26942fd45f1e425c8a6d493bbd2ce4da",
"type":"text"
},
{
"chunkpath":[
"rules"
],
"filepath":[
"rlmeta",
"parser.rlmeta"
],
"fragments":[
{
"id":"fe84c1eea3fc4476bbcb1c717c92d43b",
"type":"variable"
},
{
"text":" =\n  | ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '~' ",
"type":"code"
},
{
"id":"dd463f369f79475da606b1cfc2d96076",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"cf8770da147840679077788180e10778",
"type":"variable"
},
{
"text":"\" x]\n  | ",
"type":"code"
},
{
"id":"dd463f369f79475da606b1cfc2d96076",
"type":"variable"
},
{
"text":"\n",
"type":"code"
}
],
"id":"f768cf3997814c6285c98edc162e886f",
"type":"code"
},
{
"fragments":[
{
"text":"The third sequence is an open brace followed by build expressions followed by a closing brace. When this is matched, a ",
"type":"text"
},
{
"id":"c9ecfed5791644a3b7ea2122d4ed87c9",
"type":"variable"
},
{
"text":" AST node is created cotaining the expression AST nodes.",
"type":"text"
}
],
"id":"52c3a5a9a7624ba6ae7c901e617562b4",
"type":"text"
},
{
"fragments":[
{
"text":"A build expression is either a greater than character, in which case an ",
"type":"text"
},
{
"id":"d34e449a8ca740d0a4b84921fc05b25f",
"type":"variable"
},
{
"text":" AST node is created, or a less than character, in which case a ",
"type":"text"
},
{
"id":"7b75cb86cab34645b43d69d790e6e206",
"type":"variable"
},
{
"text":" AST node is created, or a host expression.",
"type":"text"
}
],
"id":"866a8d0983c8488aa99e2282e0adda99",
"type":"text"
},
{
"chunkpath":[
"rules"
],
"filepath":[
"rlmeta",
"parser.rlmeta"
],
"fragments":[
{
"id":"ae2f859206d741eca9f5e10495cb8095",
"type":"variable"
},
{
"text":" =\n  | ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '>' ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"d34e449a8ca740d0a4b84921fc05b25f",
"type":"variable"
},
{
"text":"\"]\n  | ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '<' ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"7b75cb86cab34645b43d69d790e6e206",
"type":"variable"
},
{
"text":"\"]\n  | ",
"type":"code"
},
{
"id":"dd463f369f79475da606b1cfc2d96076",
"type":"variable"
},
{
"text":"\n",
"type":"code"
}
],
"id":"a3c04d0cc65d41c8af8017af890e7ea4",
"type":"code"
},
{
"fragments":[
{
"text":"The fourth sequence is a ",
"type":"text"
},
{
"page_id":"19acecc9fbc44023a69cea9eadbe734d",
"text":"name",
"type":"reference"
},
{
"text":" followed by an open parenthesis followed by host expressions followed by a closing parenthesis. When this is matched, a ",
"type":"text"
},
{
"id":"0a8e6be4bec3466bb658d7d4ff5bc5fd",
"type":"variable"
},
{
"text":" AST node is created containing the name and expression AST nodes.",
"type":"text"
}
],
"id":"de53278350e84eddb1372b894ef0fd58",
"type":"text"
},
{
"fragments":[
{
"text":"The fifth sequence is a ",
"type":"text"
},
{
"page_id":"19acecc9fbc44023a69cea9eadbe734d",
"text":"name",
"type":"reference"
},
{
"text":". When this is matched, a ",
"type":"text"
},
{
"id":"ae823ab23224415f9a539b0354f311b8",
"type":"variable"
},
{
"text":" AST node is created containing the name.",
"type":"text"
}
],
"id":"04e9994d8f8346e49b8675b456d21acc",
"type":"text"
}
],
"title":"Host expression"
},
{
"children":[],
"id":"2057abb618bf4209950acd87fa49da5d",
"paragraphs":[
{
"fragments":[
{
"text":"Character related rules capture strings, character sequences, and single characters. Inside all of them a few escape codes are possible. When this is matched, the characters inside the delimiters are joined together to create the string:",
"type":"text"
}
],
"id":"9c9d6cf8dd2c43eea7df12f94f215792",
"type":"text"
},
{
"chunkpath":[
"rules"
],
"filepath":[
"rlmeta",
"parser.rlmeta"
],
"fragments":[
{
"id":"7d82aaa0f3d34c059532d7a090654ab7",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"index":5,
"type":"tabstop"
},
{
"text":"= '\"'  (!'\"'  ",
"type":"code"
},
{
"id":"e1248cbd01c54a1680793b61e7a048e1",
"type":"variable"
},
{
"text":")*:xs '\"' ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> join(xs)\n",
"type":"code"
},
{
"id":"a864d6cb43244a1ca536085dd92431af",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"index":5,
"type":"tabstop"
},
{
"text":"= '\\'' (!'\\'' ",
"type":"code"
},
{
"id":"e1248cbd01c54a1680793b61e7a048e1",
"type":"variable"
},
{
"text":")*:xs '\\'' ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> join(xs)\n",
"type":"code"
},
{
"id":"793e09d183c5498fa2587841cd94c126",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"index":5,
"type":"tabstop"
},
{
"text":"= '\\''  !'\\'' ",
"type":"code"
},
{
"id":"e1248cbd01c54a1680793b61e7a048e1",
"type":"variable"
},
{
"text":"  :x  '\\'' ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> join(x)\n",
"type":"code"
},
{
"id":"e1248cbd01c54a1680793b61e7a048e1",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"index":5,
"type":"tabstop"
},
{
"text":"= '\\\\' ",
"type":"code"
},
{
"id":"4e5409ddd4a34450b3c8b4cb8bc5dd60",
"type":"variable"
},
{
"text":" | .\n",
"type":"code"
},
{
"id":"4e5409ddd4a34450b3c8b4cb8bc5dd60",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"index":5,
"type":"tabstop"
},
{
"text":"= '\\\\' -> \"\\\\\" | '\\'' -> \"'\"\n",
"type":"code"
},
{
"index":5,
"type":"tabstop"
},
{
"text":"| '\"'  -> \"\\\"\" | 'n'  -> \"\\n\"\n",
"type":"code"
}
],
"id":"6b45edfd3ac04273aa9498dfcaa199fa",
"language":"",
"type":"code"
}
],
"title":"Character related"
},
{
"children":[],
"id":"19acecc9fbc44023a69cea9eadbe734d",
"paragraphs":[
{
"fragments":[
{
"text":"A name has at least one alphabetic character followed by any number of alphanumeric characters. When this is matched, the individual characters are joined togheter to create a string:",
"type":"text"
}
],
"id":"2a86dcada0f7474483ffaf5998525698",
"type":"text"
},
{
"chunkpath":[
"rules"
],
"filepath":[
"rlmeta",
"parser.rlmeta"
],
"fragments":[
{
"id":"8a8e32dcfa5545f7aa292dd7e696030a",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"index":5,
"type":"tabstop"
},
{
"text":"= ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"id":"172d3a0762114a328cbf1339fd2dd484",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"id":"6b1fe389a7254359b3fbe4cb26ea084e",
"type":"variable"
},
{
"text":"*:xs ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> join([x ~xs])\n",
"type":"code"
},
{
"id":"172d3a0762114a328cbf1339fd2dd484",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"index":5,
"type":"tabstop"
},
{
"text":"= 'a'-'z' | 'A'-'Z'\n",
"type":"code"
},
{
"id":"6b1fe389a7254359b3fbe4cb26ea084e",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"index":5,
"type":"tabstop"
},
{
"text":"= 'a'-'z' | 'A'-'Z' | '0'-'9'\n",
"type":"code"
}
],
"id":"1c6666fb0163411abc814856a4265683",
"language":"",
"type":"code"
}
],
"title":"Name"
},
{
"children":[],
"id":"d729731e037a4a5aafa6da77d2b8bdb1",
"paragraphs":[
{
"fragments":[
{
"text":"A space is any number of space characters or newlines:",
"type":"text"
}
],
"id":"d12f42d73f384cd5b9ee16993c8e5b8a",
"type":"text"
},
{
"chunkpath":[
"rules"
],
"filepath":[
"rlmeta",
"parser.rlmeta"
],
"fragments":[
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"index":5,
"type":"tabstop"
},
{
"text":"= (' ' | '\\n')*\n",
"type":"code"
}
],
"id":"d62875593bb44d2087124443aded53e5",
"type":"code"
}
],
"title":"Space"
}
],
"id":"1e01a8bdd22d48f2a7e8533d552bc264",
"paragraphs":[
{
"fragments":[
{
"text":"This section defines the parser that translates grammar syntax to ASTs.",
"type":"text"
}
],
"id":"d62cec37c77c4f7b961ad53765449159",
"type":"text"
},
{
"chunkpath":[],
"filepath":[
"rlmeta",
"parser.rlmeta"
],
"fragments":[
{
"id":"a304a36f0ab541209c9e8aa78f4edc46",
"type":"variable"
},
{
"text":" {\n",
"type":"code"
},
{
"blank_lines_before":0,
"path":[
"rules"
],
"prefix":"  ",
"type":"chunk"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"c94ba005404c45f78e7511793da8d554",
"type":"code"
}
],
"title":"Parser"
},
{
"children":[
{
"children":[],
"id":"b225bd1638614a808495e33a63797beb",
"paragraphs":[
{
"fragments":[
{
"text":"The choice of Python as the target language for code generation is an implementation detail. A different target language could easily be used. Say for example that you would like to use RLMeta on the web. In that case Javascript must be used as a target language. RLMeta could be ported to Javascript by modifying the code generator and the support library.",
"type":"text"
}
],
"id":"e0dbbe7614984ee091cd6ca9cf9488f6",
"type":"text"
}
],
"title":"Note on target language"
},
{
"children":[],
"id":"69841ad3d1044db18591fe09cdf1caee",
"paragraphs":[
{
"fragments":[
{
"text":"The parsing algorithm that RLMeta implements is based on ",
"type":"text"
},
{
"text":"parsing expression grammars",
"type":"link",
"url":"https://en.wikipedia.org/wiki/Parsing_expression_grammar"
},
{
"text":" (PEG), but is extended to match arbitrary objects, not just characters. Another way to describe the parsing algorithm is that it is a ",
"type":"text"
},
{
"text":"recursive descent parser",
"type":"link",
"url":"https://en.wikipedia.org/wiki/Recursive_descent_parser"
},
{
"text":" with backtracking an memoization. Details of the algorithm is shown in the remainder of this section.",
"type":"text"
}
],
"id":"cd828eb7ed7c4c58aabf26e9609051cc",
"type":"text"
}
],
"title":"Parsing algorithm"
},
{
"children":[],
"id":"0d8a472a5c844a729b866f2c2c64794b",
"paragraphs":[
{
"fragments":[
{
"text":"The code generator has two main rules: ",
"type":"text"
},
{
"id":"8b98e38b093140fc956b35f6cbf5018e",
"type":"variable"
},
{
"text":" and ",
"type":"text"
},
{
"id":"ff0229c63d8a4b4897faed8c38201de3",
"type":"variable"
},
{
"text":":",
"type":"text"
}
],
"id":"1b8ad3a855444c598a016788f32237ab",
"type":"text"
},
{
"chunkpath":[
"rules"
],
"filepath":[
"rlmeta",
"codegenerator.rlmeta"
],
"fragments":[
{
"id":"8b98e38b093140fc956b35f6cbf5018e",
"type":"variable"
},
{
"text":" =\n",
"type":"code"
},
{
"blank_lines_before":0,
"path":[
"ast"
],
"prefix":"  ",
"type":"chunk"
},
{
"text":"  | ",
"type":"code"
},
{
"id":"ff0229c63d8a4b4897faed8c38201de3",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { \"(lambda:\\n\" > x < \"\\n)\" }\n",
"type":"code"
},
{
"id":"ff0229c63d8a4b4897faed8c38201de3",
"type":"variable"
},
{
"text":" =\n",
"type":"code"
},
{
"blank_lines_before":0,
"path":[
"astFnBody"
],
"prefix":"  ",
"type":"chunk"
}
],
"id":"bc8464b515df4cf9a0be11f8757cfa24",
"type":"code"
},
{
"fragments":[
{
"text":"Sometimes generated code for an AST node should be wrapped in a lambda. Those AST nodes are added to the ",
"type":"text"
},
{
"id":"ff0229c63d8a4b4897faed8c38201de3",
"type":"variable"
},
{
"text":" rule. The ",
"type":"text"
},
{
"id":"ff0229c63d8a4b4897faed8c38201de3",
"type":"variable"
},
{
"text":" rule is not strictly needed, but without it, many rules would have to wrap its output in a lambda.",
"type":"text"
}
],
"id":"8172dcdb7405433d8a4a3225c445a15f",
"type":"text"
},
{
"fragments":[
{
"text":"The greater than and less than characters in the output expression cause an indent and a dedent in the output string like this:",
"type":"text"
}
],
"id":"94c40f01f4d34d7ab40617e1f1ef3632",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"(lambda:\n    x\n)\n",
"type":"code"
}
],
"id":"f011c0159f7e415fa1bcea0fb52fb524",
"language":"python",
"type":"code"
}
],
"title":"Structure of code generator"
},
{
"children":[],
"id":"ed6931f4eeca4d43aaee1e9f5485a295",
"paragraphs":[
{
"fragments":[
{
"text":"When a ",
"type":"text"
},
{
"id":"2aa377816ed3486da72cff7bd46190ad",
"type":"variable"
},
{
"text":" AST node is matched, a Python class with the same name is generated that inherits from ",
"type":"text"
},
{
"id":"6544a37a96ce4294ab4553709d89f398",
"type":"variable"
},
{
"text":":",
"type":"text"
}
],
"id":"e3e98686c73d4c7e8211846c6bb629bb",
"type":"text"
},
{
"chunkpath":[
"rules",
"ast"
],
"filepath":[
"rlmeta",
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"2aa377816ed3486da72cff7bd46190ad",
"type":"variable"
},
{
"text":"\" .:x ",
"type":"code"
},
{
"id":"8b98e38b093140fc956b35f6cbf5018e",
"type":"variable"
},
{
"text":"*:ys] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { \"class \" x \"(",
"type":"code"
},
{
"id":"6544a37a96ce4294ab4553709d89f398",
"type":"variable"
},
{
"text":"):\\n\" > ys < ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"d3c4ef9bebd64746ab898a18575fd4ac",
"type":"code"
},
{
"fragments":[
{
"text":"The base class, whose details is presented in the remainder of this section, is defined in the support library:",
"type":"text"
}
],
"id":"4e3a4349f676432aa6ab703e6cd04414",
"type":"text"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"rlmeta",
"support.py"
],
"fragments":[
{
"text":"class ",
"type":"code"
},
{
"id":"6544a37a96ce4294ab4553709d89f398",
"type":"variable"
},
{
"text":"(object):\n\n",
"type":"code"
},
{
"blank_lines_before":1,
"path":[
"_RLMeta"
],
"prefix":"    ",
"type":"chunk"
}
],
"id":"5df5c3d0f1ae47b7821a5df66bbb63dc",
"type":"code"
},
{
"fragments":[
{
"text":"Names of support classes start with underscores to not collide with generated grammar names (which can not contain underscores).",
"type":"text"
}
],
"id":"9d189abc5e624388a08c34b923aa8f01",
"type":"text"
}
],
"title":"Grammar"
},
{
"children":[],
"id":"3c542ba5b0104273805b227aeab84c04",
"paragraphs":[
{
"fragments":[
{
"text":"When a ",
"type":"text"
},
{
"id":"e22fa3c5d4144197906cbb74af6cc83e",
"type":"variable"
},
{
"text":" AST node is matched, a Python method with that name in it is generated:",
"type":"text"
}
],
"id":"6018299ffc344a46978cb303eb4bdb16",
"type":"text"
},
{
"chunkpath":[
"rules",
"ast"
],
"filepath":[
"rlmeta",
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"e22fa3c5d4144197906cbb74af6cc83e",
"type":"variable"
},
{
"text":"\" .:x ",
"type":"code"
},
{
"id":"8b98e38b093140fc956b35f6cbf5018e",
"type":"variable"
},
{
"text":":y] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { \"\\ndef _rule_\" x \"(self):\\n\" > \"return \" y \"()\\n\" < ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"4bbfe03c503f409f9ac3233cbbd31340",
"type":"code"
},
{
"fragments":[
{
"text":"The body of the rule is assumed to generate a matcher. A matcher is a function that, when called, tries to match objects from the input stream and return a semantic action if successful or raise an exception if it fails. That function is called from the generated method and its result is returned.",
"type":"text"
}
],
"id":"fc46f60ad6a7467bb245c720a9d6e8e9",
"type":"text"
}
],
"title":"Rule"
},
{
"children":[],
"id":"696631bc029c47949b2ad97ce78ea32c",
"paragraphs":[
{
"fragments":[
{
"text":"When an ",
"type":"text"
},
{
"id":"efa7dd37aa9e46908ed34f8d31cd476d",
"type":"variable"
},
{
"text":" AST node is matched, a matcher that calls the built-in ",
"type":"text"
},
{
"id":"2c430882d5af40168a69e1b4b9eb7e0d",
"type":"variable"
},
{
"text":" method is generated:",
"type":"text"
}
],
"id":"218e357da3f04861bdee4b175e32cc54",
"type":"text"
},
{
"chunkpath":[
"rules",
"astFnBody"
],
"filepath":[
"rlmeta",
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"efa7dd37aa9e46908ed34f8d31cd476d",
"type":"variable"
},
{
"text":"\" ",
"type":"code"
},
{
"id":"85ee4a0a694641c3aa683a15e6a0ba5d",
"type":"variable"
},
{
"text":":x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { \"self.",
"type":"code"
},
{
"id":"2c430882d5af40168a69e1b4b9eb7e0d",
"type":"variable"
},
{
"text":"([\" x \"])\" ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"f85612ab9e0d444f8104eb83d1548800",
"type":"code"
},
{
"fragments":[
{
"text":"Helpers to generate a list of items:",
"type":"text"
}
],
"id":"ce9066bd5c3f4a9eb07f8b7d9368f118",
"type":"text"
},
{
"chunkpath":[
"rules"
],
"filepath":[
"rlmeta",
"codegenerator.rlmeta"
],
"fragments":[
{
"id":"85ee4a0a694641c3aa683a15e6a0ba5d",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"index":5,
"type":"tabstop"
},
{
"text":"= ",
"type":"code"
},
{
"id":"ccb3f676f6314d788147dc603933cd28",
"type":"variable"
},
{
"text":"*:xs ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { \"\\n\" > xs < ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
},
{
"id":"ccb3f676f6314d788147dc603933cd28",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"index":5,
"type":"tabstop"
},
{
"text":"= ",
"type":"code"
},
{
"id":"8b98e38b093140fc956b35f6cbf5018e",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { x \",\\n\" ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"8f190300db404d17a2a8f5e36e95ddcd",
"type":"code"
},
{
"fragments":[
{
"text":"The code is wrapped in a lambda becasue it is added to the ",
"type":"text"
},
{
"id":"ff0229c63d8a4b4897faed8c38201de3",
"type":"variable"
},
{
"text":" rule. The output string will thus look something like this:",
"type":"text"
}
],
"id":"9544848ac4f54f9ba2efa131392df509",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"(lambda:\n    self.",
"type":"code"
},
{
"id":"2c430882d5af40168a69e1b4b9eb7e0d",
"type":"variable"
},
{
"text":"([\n        matcher1,\n        matcher2,\n        ...\n    ])\n)\n",
"type":"code"
}
],
"id":"7d15c1645ff4452a97f9c34939d62fc1",
"language":"python",
"type":"code"
},
{
"fragments":[
{
"text":"The ",
"type":"text"
},
{
"id":"2c430882d5af40168a69e1b4b9eb7e0d",
"type":"variable"
},
{
"text":" method expects a list of matchers. It tries them in sequence and returns the result of the first matching:",
"type":"text"
}
],
"id":"6611f3677d0f47888d213f4467d3279f",
"type":"text"
},
{
"chunkpath":[
"classes",
"_RLMeta"
],
"filepath":[
"rlmeta",
"support.py"
],
"fragments":[
{
"text":"def ",
"type":"code"
},
{
"id":"2c430882d5af40168a69e1b4b9eb7e0d",
"type":"variable"
},
{
"text":"(self, matchers):\n    ",
"type":"code"
},
{
"id":"e45d3bc7fadf4cc1bd02843c87f0d034",
"type":"variable"
},
{
"text":" = self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":"\n    for matcher in matchers:\n        try:\n            return matcher()\n        except ",
"type":"code"
},
{
"id":"df25061bb4004aa693b603f0a8ec2af2",
"type":"variable"
},
{
"text":":\n            self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":" = ",
"type":"code"
},
{
"id":"e45d3bc7fadf4cc1bd02843c87f0d034",
"type":"variable"
},
{
"text":"\n    ",
"type":"code"
},
{
"id":"e45d3bc7fadf4cc1bd02843c87f0d034",
"type":"variable"
},
{
"text":".",
"type":"code"
},
{
"id":"00fd348d71754fcfaadae0de1ee5f198",
"type":"variable"
},
{
"text":"(\"no choice matched\")\n",
"type":"code"
}
],
"id":"d208a58f49fb42199d2483713b67641e",
"language":"",
"type":"code"
},
{
"fragments":[
{
"text":"Streams are immutable, so resetting the stream upon failure is just a matter of saving and restoring the ",
"type":"text"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":". ",
"type":"text"
},
{
"id":"df25061bb4004aa693b603f0a8ec2af2",
"type":"variable"
},
{
"text":" is the name of the exception raised when a match fails. Streams have a ",
"type":"text"
},
{
"id":"00fd348d71754fcfaadae0de1ee5f198",
"type":"variable"
},
{
"text":" method that generates that error and adds context to it useful for error reporting.",
"type":"text"
}
],
"id":"24227da21c4c4360bca7cbf0bfe31d59",
"type":"text"
}
],
"title":"Or"
},
{
"children":[],
"id":"86438bda56d342bc9d1f2c62e632a72d",
"paragraphs":[
{
"fragments":[
{
"text":"When a ",
"type":"text"
},
{
"id":"b845c4cee1734619991d56de83dce37d",
"type":"variable"
},
{
"text":" AST node is matched, a matcher that creates a new scope is generated:",
"type":"text"
}
],
"id":"99fc5181461b4b658129de1e5a9024db",
"type":"text"
},
{
"chunkpath":[
"rules",
"astFnBody"
],
"filepath":[
"rlmeta",
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"b845c4cee1734619991d56de83dce37d",
"type":"variable"
},
{
"text":"\" ",
"type":"code"
},
{
"id":"8b98e38b093140fc956b35f6cbf5018e",
"type":"variable"
},
{
"text":":x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { \"(lambda ",
"type":"code"
},
{
"id":"289a3db9c53e420da4dbdbc94a32aadf",
"type":"variable"
},
{
"text":":\\n\" > x < \"()\\n)(",
"type":"code"
},
{
"id":"ec2b7e954fe24f329250bd22c70538e4",
"type":"variable"
},
{
"text":"())\" ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"89d707f19bd84e5982dcc3f043a68111",
"type":"code"
},
{
"fragments":[
{
"text":"The ",
"type":"text"
},
{
"id":"ec2b7e954fe24f329250bd22c70538e4",
"type":"variable"
},
{
"text":" class is a subclass of a Python dictionary:",
"type":"text"
}
],
"id":"04439956a908437fbae68fc7b50fe76c",
"type":"text"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"rlmeta",
"support.py"
],
"fragments":[
{
"text":"class ",
"type":"code"
},
{
"id":"ec2b7e954fe24f329250bd22c70538e4",
"type":"variable"
},
{
"text":"(dict):\n\n",
"type":"code"
},
{
"blank_lines_before":1,
"path":[
"_Vars"
],
"prefix":"    ",
"type":"chunk"
}
],
"id":"6a0b126c11d4408794c26291e417257d",
"language":"",
"type":"code"
},
{
"fragments":[
{
"text":"A scope is a set of variables that do not conflict with variables in other scopes. The name ",
"type":"text"
},
{
"id":"289a3db9c53e420da4dbdbc94a32aadf",
"type":"variable"
},
{
"text":" is used to refer to variables in the current scope. The body is assumed to generate a matcher which is then called. The output string will thus look like this:",
"type":"text"
}
],
"id":"ea686d13c87142a7bfed82720ab16afd",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"(lambda:\n    (lambda _vars:\n        matcher()\n    )(_Vars())\n)\n",
"type":"code"
}
],
"id":"6d796a030d8346acb21d218808258a08",
"language":"python",
"type":"code"
}
],
"title":"Scope"
},
{
"children":[],
"id":"487e675a013c45e3aee8b6c068e226df",
"paragraphs":[
{
"fragments":[
{
"text":"When an ",
"type":"text"
},
{
"id":"8d17eff4871e411793cf0daf3a2ab204",
"type":"variable"
},
{
"text":" AST node is matched, a matcher that calls the built-in ",
"type":"text"
},
{
"id":"c590c92167d34fe4bfdbb084c03834c1",
"type":"variable"
},
{
"text":" method is generated:",
"type":"text"
}
],
"id":"bdbe901c77da4a2ab026d978279b4e09",
"type":"text"
},
{
"chunkpath":[
"rules",
"astFnBody"
],
"filepath":[
"rlmeta",
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"8d17eff4871e411793cf0daf3a2ab204",
"type":"variable"
},
{
"text":"\" ",
"type":"code"
},
{
"id":"85ee4a0a694641c3aa683a15e6a0ba5d",
"type":"variable"
},
{
"text":":x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { \"self.",
"type":"code"
},
{
"id":"c590c92167d34fe4bfdbb084c03834c1",
"type":"variable"
},
{
"text":"([\" x \"])\" ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"3fe2404188684b7485049b6298e4ba3e",
"type":"code"
},
{
"fragments":[
{
"text":"The ",
"type":"text"
},
{
"id":"c590c92167d34fe4bfdbb084c03834c1",
"type":"variable"
},
{
"text":" method expects a list of matchers. It tries them in sequence and returns the result of the last one:",
"type":"text"
}
],
"id":"2e113e56a2bd474a8361b07e62faddd1",
"type":"text"
},
{
"chunkpath":[
"classes",
"_RLMeta"
],
"filepath":[
"rlmeta",
"support.py"
],
"fragments":[
{
"text":"def ",
"type":"code"
},
{
"id":"c590c92167d34fe4bfdbb084c03834c1",
"type":"variable"
},
{
"text":"(self, matchers):\n    result = None\n    for matcher in matchers:\n        result = matcher()\n    return result\n",
"type":"code"
}
],
"id":"4f4a619375d4416ba28f522d8b4cbf06",
"type":"code"
}
],
"title":"And"
},
{
"children":[],
"id":"4309ca572367401bb6c4561f273b8c85",
"paragraphs":[
{
"fragments":[
{
"text":"When a ",
"type":"text"
},
{
"id":"6a519019bfac49598dc36620b5b58811",
"type":"variable"
},
{
"text":" AST node is matched, a matcher that stores the result of the child matcher as a side effect is generated:",
"type":"text"
}
],
"id":"4bb917b40e054274bf6726599c459b66",
"type":"text"
},
{
"chunkpath":[
"rules",
"astFnBody"
],
"filepath":[
"rlmeta",
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"6a519019bfac49598dc36620b5b58811",
"type":"variable"
},
{
"text":"\" .:x ",
"type":"code"
},
{
"id":"8b98e38b093140fc956b35f6cbf5018e",
"type":"variable"
},
{
"text":":y] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { \"",
"type":"code"
},
{
"id":"289a3db9c53e420da4dbdbc94a32aadf",
"type":"variable"
},
{
"text":".",
"type":"code"
},
{
"id":"1659fb73179a4fd8abfc99b95d9f5560",
"type":"variable"
},
{
"text":"(\" repr(x) \", \" y \"())\" ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"06c9e9a4f10648e090321c427cccb9b3",
"type":"code"
},
{
"fragments":[
{
"text":"The ",
"type":"text"
},
{
"id":"1659fb73179a4fd8abfc99b95d9f5560",
"type":"variable"
},
{
"text":" method stores and returns the result:",
"type":"text"
}
],
"id":"05ddb43ae5e74922bb661788f2743409",
"type":"text"
},
{
"chunkpath":[
"classes",
"_Vars"
],
"filepath":[
"rlmeta",
"support.py"
],
"fragments":[
{
"text":"def ",
"type":"code"
},
{
"id":"1659fb73179a4fd8abfc99b95d9f5560",
"type":"variable"
},
{
"text":"(self, name, value):\n    self[name] = value\n    return value\n",
"type":"code"
}
],
"id":"f4e7e5c8f837406ba73ce0ae003a276a",
"language":"",
"type":"code"
}
],
"title":"Bind"
},
{
"children":[],
"id":"244f0754be514ae88e0f581f3ab58c59",
"paragraphs":[
{
"fragments":[
{
"text":"When a ",
"type":"text"
},
{
"id":"60d7dacf2a2b4336b0329665c2026cc0",
"type":"variable"
},
{
"text":" AST node is matched, a matcher that calls the built-in ",
"type":"text"
},
{
"id":"70c457e3514948bcb6c00b67e5a180a2",
"type":"variable"
},
{
"text":" method is generated:",
"type":"text"
}
],
"id":"72e28909cac9471f835472ae2517bf83",
"type":"text"
},
{
"chunkpath":[
"rules",
"astFnBody"
],
"filepath":[
"rlmeta",
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"60d7dacf2a2b4336b0329665c2026cc0",
"type":"variable"
},
{
"text":"\" ",
"type":"code"
},
{
"id":"8b98e38b093140fc956b35f6cbf5018e",
"type":"variable"
},
{
"text":":x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { \"self.",
"type":"code"
},
{
"id":"70c457e3514948bcb6c00b67e5a180a2",
"type":"variable"
},
{
"text":"(\" x \")\" ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"36a128587cdd48539a5aef85b434be5b",
"type":"code"
},
{
"fragments":[
{
"text":"The ",
"type":"text"
},
{
"id":"70c457e3514948bcb6c00b67e5a180a2",
"type":"variable"
},
{
"text":" method expects a matcher. It tries it for as long as it succeeds, and returns a semantic action that generates a list of all results:",
"type":"text"
}
],
"id":"e312e15dbf9d4f2bbd6f80efecedb705",
"type":"text"
},
{
"chunkpath":[
"classes",
"_RLMeta"
],
"filepath":[
"rlmeta",
"support.py"
],
"fragments":[
{
"text":"def ",
"type":"code"
},
{
"id":"70c457e3514948bcb6c00b67e5a180a2",
"type":"variable"
},
{
"text":"(self, matcher):\n    result = []\n    while True:\n        ",
"type":"code"
},
{
"id":"e45d3bc7fadf4cc1bd02843c87f0d034",
"type":"variable"
},
{
"text":" = self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":"\n        try:\n            result.append(matcher())\n        except ",
"type":"code"
},
{
"id":"df25061bb4004aa693b603f0a8ec2af2",
"type":"variable"
},
{
"text":":\n            self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":" = ",
"type":"code"
},
{
"id":"e45d3bc7fadf4cc1bd02843c87f0d034",
"type":"variable"
},
{
"text":"\n            return ",
"type":"code"
},
{
"id":"cbbcd925bc2c42b9add24aaa736f4d35",
"type":"variable"
},
{
"text":"(lambda: [x.",
"type":"code"
},
{
"id":"85139f1436944deab62958b8a713d8aa",
"type":"variable"
},
{
"text":"() for x in result])\n",
"type":"code"
}
],
"id":"6d7dbee1acd04445a3fa837210e6a42d",
"type":"code"
},
{
"fragments":[
{
"text":"The result of matchers are semantic actions. They have an ",
"type":"text"
},
{
"id":"85139f1436944deab62958b8a713d8aa",
"type":"variable"
},
{
"text":" method that returns the actual result. The ",
"type":"text"
},
{
"id":"70c457e3514948bcb6c00b67e5a180a2",
"type":"variable"
},
{
"text":" method is also a matcher, so it also returns a semantic action. The result of it is a list with all the actual results of the child matches. Therefore it has to call ",
"type":"text"
},
{
"id":"85139f1436944deab62958b8a713d8aa",
"type":"variable"
},
{
"text":" on all children.",
"type":"text"
}
],
"id":"0eb26166081a40feaa784cbc773c1e04",
"type":"text"
}
],
"title":"Star"
},
{
"children":[],
"id":"44d3b166c62d43e38d2a781fb9f06b6d",
"paragraphs":[
{
"fragments":[
{
"text":"When a ",
"type":"text"
},
{
"id":"bc27a67cb10b4650a32bfe7af84c5060",
"type":"variable"
},
{
"text":" AST node is matched, a matcher that calls the built-in ",
"type":"text"
},
{
"id":"7ea6f6977ca24c218e28cd96b1cf8267",
"type":"variable"
},
{
"text":" method is generated:",
"type":"text"
}
],
"id":"e018ec0c06a24eaa9b9370fd1554c1c3",
"type":"text"
},
{
"chunkpath":[
"rules",
"astFnBody"
],
"filepath":[
"rlmeta",
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"bc27a67cb10b4650a32bfe7af84c5060",
"type":"variable"
},
{
"text":"\" ",
"type":"code"
},
{
"id":"8b98e38b093140fc956b35f6cbf5018e",
"type":"variable"
},
{
"text":":x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { \"self.",
"type":"code"
},
{
"id":"7ea6f6977ca24c218e28cd96b1cf8267",
"type":"variable"
},
{
"text":"(\" x \")\" ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"e895e3759e684d7c9022da5bcfd693bb",
"type":"code"
},
{
"fragments":[
{
"text":"The ",
"type":"text"
},
{
"id":"7ea6f6977ca24c218e28cd96b1cf8267",
"type":"variable"
},
{
"text":" method expects a matcher. It never consumes any input. The original stream is always reset. It succeeds if the matcher fails.",
"type":"text"
}
],
"id":"8e269a4aae13471aad8cdf7b69fc3796",
"type":"text"
},
{
"chunkpath":[
"classes",
"_RLMeta"
],
"filepath":[
"rlmeta",
"support.py"
],
"fragments":[
{
"text":"def ",
"type":"code"
},
{
"id":"7ea6f6977ca24c218e28cd96b1cf8267",
"type":"variable"
},
{
"text":"(self, matcher):\n    ",
"type":"code"
},
{
"id":"e45d3bc7fadf4cc1bd02843c87f0d034",
"type":"variable"
},
{
"text":" = self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":"\n    try:\n        matcher()\n    except ",
"type":"code"
},
{
"id":"df25061bb4004aa693b603f0a8ec2af2",
"type":"variable"
},
{
"text":":\n        return ",
"type":"code"
},
{
"id":"cbbcd925bc2c42b9add24aaa736f4d35",
"type":"variable"
},
{
"text":"(lambda: None)\n    else:\n        ",
"type":"code"
},
{
"id":"e45d3bc7fadf4cc1bd02843c87f0d034",
"type":"variable"
},
{
"text":".",
"type":"code"
},
{
"id":"00fd348d71754fcfaadae0de1ee5f198",
"type":"variable"
},
{
"text":"(\"match found\")\n    finally:\n        self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":" = ",
"type":"code"
},
{
"id":"e45d3bc7fadf4cc1bd02843c87f0d034",
"type":"variable"
},
{
"text":"\n",
"type":"code"
}
],
"id":"77eb5bfff95948a08d1d3856984cfc9f",
"type":"code"
}
],
"title":"Not"
},
{
"children":[],
"id":"07530ffd21784561bd8594c98fcd050a",
"paragraphs":[
{
"fragments":[
{
"text":"When a ",
"type":"text"
},
{
"id":"373f023f0f5f4744a7b309cf9a76d138",
"type":"variable"
},
{
"text":" AST node is matched, a matcher that creates a ",
"type":"text"
},
{
"id":"cbbcd925bc2c42b9add24aaa736f4d35",
"type":"variable"
},
{
"text":" instance is generated:",
"type":"text"
}
],
"id":"4dbcefd9b2a34e9ebfbdf7c0d7c40208",
"type":"text"
},
{
"chunkpath":[
"rules",
"astFnBody"
],
"filepath":[
"rlmeta",
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"373f023f0f5f4744a7b309cf9a76d138",
"type":"variable"
},
{
"text":"\" ",
"type":"code"
},
{
"id":"8b98e38b093140fc956b35f6cbf5018e",
"type":"variable"
},
{
"text":":x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { \"",
"type":"code"
},
{
"id":"cbbcd925bc2c42b9add24aaa736f4d35",
"type":"variable"
},
{
"text":"(lambda: \" x \")\" ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"48288d82d6984e2088ee6ce8a5a5253e",
"type":"code"
},
{
"fragments":[
{
"text":"The body is assumed to generate a Python expression that will be returned when the semantic action is evaluated.",
"type":"text"
}
],
"id":"eb94c5af9061497c8834e0b26d88888e",
"type":"text"
},
{
"fragments":[
{
"text":"A semantic action is a wrapper for a function:",
"type":"text"
}
],
"id":"e7dc3c5bf9b548f59724a6164a851bfd",
"type":"text"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"rlmeta",
"support.py"
],
"fragments":[
{
"text":"class ",
"type":"code"
},
{
"id":"cbbcd925bc2c42b9add24aaa736f4d35",
"type":"variable"
},
{
"text":"(object):\n\n    def __init__(self, fn):\n        self.fn = fn\n\n    def ",
"type":"code"
},
{
"id":"85139f1436944deab62958b8a713d8aa",
"type":"variable"
},
{
"text":"(self):\n        return self.fn()\n",
"type":"code"
}
],
"id":"a2fa6b36dba04bcfad978306c9223c55",
"type":"code"
},
{
"child_type":"unordered",
"children":[
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"How many times can/should a semantic action be evaluated?",
"type":"text"
}
]
}
],
"id":"9839e9dfe25e47a58b35987a6f5d6154",
"type":"list"
}
],
"title":"SemanticAction"
},
{
"children":[],
"id":"c10aabed8057404e97ef8cd6ac1b113d",
"paragraphs":[
{
"fragments":[
{
"text":"When a ",
"type":"text"
},
{
"id":"4852ced8038c4074a5a8104b8596e0e0",
"type":"variable"
},
{
"text":" AST node is matched, a matcher that calls the built-in ",
"type":"text"
},
{
"id":"826871508bad4fecb6e575779218874d",
"type":"variable"
},
{
"text":" is generated:",
"type":"text"
}
],
"id":"8bb74c95d91e41bc9129926d653639d8",
"type":"text"
},
{
"chunkpath":[
"rules",
"astFnBody"
],
"filepath":[
"rlmeta",
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"4852ced8038c4074a5a8104b8596e0e0",
"type":"variable"
},
{
"text":"\" .:x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { \"self.",
"type":"code"
},
{
"id":"826871508bad4fecb6e575779218874d",
"type":"variable"
},
{
"text":"(\" repr(x) \")\"",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"412bfecbb7244810ba46e206486092c8",
"type":"code"
},
{
"fragments":[
{
"text":"The ",
"type":"text"
},
{
"id":"826871508bad4fecb6e575779218874d",
"type":"variable"
},
{
"text":" method expects the name of the rule to match. If the given rule has been matched at the current position before, the memoized result is returned and the input stream is changed. If there has been no previous match, the rule is matched by calling the method. The result of the match is stored in the memoization table for later retrival.",
"type":"text"
}
],
"id":"39c0b14efbff4e43a3423dd51ca79a90",
"type":"text"
},
{
"chunkpath":[
"classes",
"_RLMeta"
],
"filepath":[
"rlmeta",
"support.py"
],
"fragments":[
{
"text":"def ",
"type":"code"
},
{
"id":"826871508bad4fecb6e575779218874d",
"type":"variable"
},
{
"text":"(self, rule_name):\n    key = (rule_name, self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":".",
"type":"code"
},
{
"id":"b062e0322e284160bf26034e9de32446",
"type":"variable"
},
{
"text":"())\n    if key in self.",
"type":"code"
},
{
"id":"07c126c0f9094e189f37cc4ab940b0b4",
"type":"variable"
},
{
"text":":\n        result, _, self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":" = self.",
"type":"code"
},
{
"id":"07c126c0f9094e189f37cc4ab940b0b4",
"type":"variable"
},
{
"text":"[key]\n    else:\n        start = self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":"\n        result = getattr(self, \"_rule_{}\".format(rule_name))()\n        end = self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":"\n        self.",
"type":"code"
},
{
"id":"07c126c0f9094e189f37cc4ab940b0b4",
"type":"variable"
},
{
"text":"[key] = (result, start, end)\n    return result\n",
"type":"code"
}
],
"id":"26f47b044a2d4e599f7363169fb6a0aa",
"type":"code"
}
],
"title":"MatchRule"
},
{
"children":[],
"id":"3ba5893bb7094ece96e853f869df9456",
"paragraphs":[
{
"fragments":[
{
"text":"When a ",
"type":"text"
},
{
"id":"6860db9e40994ebfbe04834b4f12f721",
"type":"variable"
},
{
"text":" AST node is matched, a matcher that calls the built-in ",
"type":"text"
},
{
"id":"53acf505e0ee41de85c674e211ecd39c",
"type":"variable"
},
{
"text":" is generated:",
"type":"text"
}
],
"id":"096a751ad60046b0b57ea126f76f3ba6",
"type":"text"
},
{
"chunkpath":[
"rules",
"astFnBody"
],
"filepath":[
"rlmeta",
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"6860db9e40994ebfbe04834b4f12f721",
"type":"variable"
},
{
"text":"\" .:x .:y] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { \"self.",
"type":"code"
},
{
"id":"53acf505e0ee41de85c674e211ecd39c",
"type":"variable"
},
{
"text":"(\" repr(x) \", \" repr(y) \")\" ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"7ce8d15eb0a349e9a26f7c4b65cf23d8",
"type":"code"
},
{
"fragments":[
{
"text":"The ",
"type":"text"
},
{
"id":"53acf505e0ee41de85c674e211ecd39c",
"type":"variable"
},
{
"text":" method expects two objects. If the next object from the input stream is in that range, it succeeds, otherwise it fails:",
"type":"text"
}
],
"id":"fc2595cabe394e818b94e60e51486150",
"type":"text"
},
{
"chunkpath":[
"classes",
"_RLMeta"
],
"filepath":[
"rlmeta",
"support.py"
],
"fragments":[
{
"text":"def ",
"type":"code"
},
{
"id":"53acf505e0ee41de85c674e211ecd39c",
"type":"variable"
},
{
"text":"(self, start, end):\n    original_stream = self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":"\n    next_objext, self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":" = self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":".",
"type":"code"
},
{
"id":"b2115b3eeaa143068958949787f5d104",
"type":"variable"
},
{
"text":"()\n    if next_objext >= start and next_objext <= end:\n        return ",
"type":"code"
},
{
"id":"cbbcd925bc2c42b9add24aaa736f4d35",
"type":"variable"
},
{
"text":"(lambda: next_objext)\n    else:\n        original_stream.",
"type":"code"
},
{
"id":"00fd348d71754fcfaadae0de1ee5f198",
"type":"variable"
},
{
"text":"(\"expected range {}-{} but found {!r}\".format(start, end, next_objext))\n",
"type":"code"
}
],
"id":"fdb81b14b5c54348b151b5b2f379ae78",
"type":"code"
}
],
"title":"MatchRange"
},
{
"children":[],
"id":"82022cc15d944579825b52559b1ee469",
"paragraphs":[
{
"fragments":[
{
"text":"When a ",
"type":"text"
},
{
"id":"10d9c2de82a14d12bd545133bd4e15f8",
"type":"variable"
},
{
"text":" AST node is matched, a matcher that calls the built-in ",
"type":"text"
},
{
"id":"ab9490a5e7ba4561b96b04f481a9e57e",
"type":"variable"
},
{
"text":" is generated:",
"type":"text"
}
],
"id":"e09d0bb37d214fa095efc58f98224225",
"type":"text"
},
{
"chunkpath":[
"rules",
"astFnBody"
],
"filepath":[
"rlmeta",
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"10d9c2de82a14d12bd545133bd4e15f8",
"type":"variable"
},
{
"text":"\" .:x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { \"self.",
"type":"code"
},
{
"id":"ab9490a5e7ba4561b96b04f481a9e57e",
"type":"variable"
},
{
"text":"(\" repr(x) \")\" ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"2d406fc305b34136a1280841c2098a7a",
"type":"code"
},
{
"fragments":[
{
"text":"The ",
"type":"text"
},
{
"id":"ab9490a5e7ba4561b96b04f481a9e57e",
"type":"variable"
},
{
"text":" method expects the string to match. If the next object from the input stream is that string, it succeeds, otherwise it fails:",
"type":"text"
}
],
"id":"f25c9986a98b4dfe916e542d04877443",
"type":"text"
},
{
"chunkpath":[
"classes",
"_RLMeta"
],
"filepath":[
"rlmeta",
"support.py"
],
"fragments":[
{
"text":"def ",
"type":"code"
},
{
"id":"ab9490a5e7ba4561b96b04f481a9e57e",
"type":"variable"
},
{
"text":"(self, string):\n    original_stream = self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":"\n    ",
"type":"code"
},
{
"id":"1f94d55a48c14180b2992433d29ace85",
"type":"variable"
},
{
"text":", self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":" = self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":".",
"type":"code"
},
{
"id":"b2115b3eeaa143068958949787f5d104",
"type":"variable"
},
{
"text":"()\n    if ",
"type":"code"
},
{
"id":"1f94d55a48c14180b2992433d29ace85",
"type":"variable"
},
{
"text":" == string:\n        return ",
"type":"code"
},
{
"id":"cbbcd925bc2c42b9add24aaa736f4d35",
"type":"variable"
},
{
"text":"(lambda: string)\n    else:\n        original_stream.",
"type":"code"
},
{
"id":"00fd348d71754fcfaadae0de1ee5f198",
"type":"variable"
},
{
"text":"(\"expected {!r} but found {!r}\".format(string, ",
"type":"code"
},
{
"id":"1f94d55a48c14180b2992433d29ace85",
"type":"variable"
},
{
"text":"))\n",
"type":"code"
}
],
"id":"971fcb5050aa45348f80f3fe228af352",
"type":"code"
}
],
"title":"MatchString"
},
{
"children":[],
"id":"3eff70b8911e4b4e9bd520a7d25624e7",
"paragraphs":[
{
"fragments":[
{
"text":"When a ",
"type":"text"
},
{
"id":"8ff0b4980efa4e349ec5ef14815be6ec",
"type":"variable"
},
{
"text":" AST node is matched, a matcher that calls the built-in ",
"type":"text"
},
{
"id":"5440b88cecfb4dafad63f0f7887b82ce",
"type":"variable"
},
{
"text":" is generated:",
"type":"text"
}
],
"id":"d8be7f86258f42f5b65adc6e01c2cd2d",
"type":"text"
},
{
"chunkpath":[
"rules",
"astFnBody"
],
"filepath":[
"rlmeta",
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"8ff0b4980efa4e349ec5ef14815be6ec",
"type":"variable"
},
{
"text":"\" .:x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { \"self.",
"type":"code"
},
{
"id":"5440b88cecfb4dafad63f0f7887b82ce",
"type":"variable"
},
{
"text":"(\" repr(x) \")\" ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"b04618e300a746c6930f0c3c5ac338dc",
"type":"code"
},
{
"fragments":[
{
"text":"The ",
"type":"text"
},
{
"id":"5440b88cecfb4dafad63f0f7887b82ce",
"type":"variable"
},
{
"text":" method expects a string with characters to match. If the next objects from the input stream are those characters, it succeeds, otherwise it fails:",
"type":"text"
}
],
"id":"33483216c3834bfd89ffeb9152b3424e",
"type":"text"
},
{
"chunkpath":[
"classes",
"_RLMeta"
],
"filepath":[
"rlmeta",
"support.py"
],
"fragments":[
{
"text":"def ",
"type":"code"
},
{
"id":"5440b88cecfb4dafad63f0f7887b82ce",
"type":"variable"
},
{
"text":"(self, charseq):\n    for char in charseq:\n        original_stream = self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":"\n        ",
"type":"code"
},
{
"id":"1f94d55a48c14180b2992433d29ace85",
"type":"variable"
},
{
"text":", self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":" = self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":".",
"type":"code"
},
{
"id":"b2115b3eeaa143068958949787f5d104",
"type":"variable"
},
{
"text":"()\n        if ",
"type":"code"
},
{
"id":"1f94d55a48c14180b2992433d29ace85",
"type":"variable"
},
{
"text":" != char:\n            original_stream.",
"type":"code"
},
{
"id":"00fd348d71754fcfaadae0de1ee5f198",
"type":"variable"
},
{
"text":"(\n                \"expected {} but found {}\".format(char, ",
"type":"code"
},
{
"id":"1f94d55a48c14180b2992433d29ace85",
"type":"variable"
},
{
"text":")\n            )\n    return ",
"type":"code"
},
{
"id":"cbbcd925bc2c42b9add24aaa736f4d35",
"type":"variable"
},
{
"text":"(lambda: charseq)\n",
"type":"code"
}
],
"id":"0af5a39ebe764c1097b3a0478104a6fe",
"type":"code"
}
],
"title":"MatchCharseq"
},
{
"children":[],
"id":"5edd25f746a94b8392834343dce57370",
"paragraphs":[
{
"fragments":[
{
"text":"When a ",
"type":"text"
},
{
"id":"25ec6fc64b8b4a39a9df41daa690386f",
"type":"variable"
},
{
"text":" AST node is matched, the built-in ",
"type":"text"
},
{
"id":"c76075de5ae9496f9ef5b3c800111ead",
"type":"variable"
},
{
"text":" is returned:",
"type":"text"
}
],
"id":"ef57a95155f9434391765c826b20301f",
"type":"text"
},
{
"chunkpath":[
"rules",
"ast"
],
"filepath":[
"rlmeta",
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"25ec6fc64b8b4a39a9df41daa690386f",
"type":"variable"
},
{
"text":"\"] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { \"self.",
"type":"code"
},
{
"id":"c76075de5ae9496f9ef5b3c800111ead",
"type":"variable"
},
{
"text":"\" ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"982a4ec2696d466ab86d17115f366f87",
"type":"code"
},
{
"fragments":[
{
"text":"The ",
"type":"text"
},
{
"id":"c76075de5ae9496f9ef5b3c800111ead",
"type":"variable"
},
{
"text":" method expects no arguments and always returns the next object from the input stream. It only fails if there are no more objects.",
"type":"text"
}
],
"id":"488803d6daff4f329ad509831bda12db",
"type":"text"
},
{
"chunkpath":[
"classes",
"_RLMeta"
],
"filepath":[
"rlmeta",
"support.py"
],
"fragments":[
{
"text":"def ",
"type":"code"
},
{
"id":"c76075de5ae9496f9ef5b3c800111ead",
"type":"variable"
},
{
"text":"(self):\n    ",
"type":"code"
},
{
"id":"1f94d55a48c14180b2992433d29ace85",
"type":"variable"
},
{
"text":", self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":" = self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":".",
"type":"code"
},
{
"id":"b2115b3eeaa143068958949787f5d104",
"type":"variable"
},
{
"text":"()\n    return ",
"type":"code"
},
{
"id":"cbbcd925bc2c42b9add24aaa736f4d35",
"type":"variable"
},
{
"text":"(lambda: ",
"type":"code"
},
{
"id":"1f94d55a48c14180b2992433d29ace85",
"type":"variable"
},
{
"text":")\n",
"type":"code"
}
],
"id":"af17e8b2e71143e890440310861281ca",
"type":"code"
}
],
"title":"MatchAny"
},
{
"children":[],
"id":"c3b58d2d7b024fa4a0e5ff0bcf06d154",
"paragraphs":[
{
"fragments":[
{
"text":"When a ",
"type":"text"
},
{
"id":"0c1a9537d33148388015163fc90329b3",
"type":"variable"
},
{
"text":" AST node is matched, a matcher that calls the built-in ",
"type":"text"
},
{
"id":"9b21a7a4087848ba8f2ada071a294d73",
"type":"variable"
},
{
"text":" is generated:",
"type":"text"
}
],
"id":"936dd889744c4cb5afbec089ee203d99",
"type":"text"
},
{
"chunkpath":[
"rules",
"astFnBody"
],
"filepath":[
"rlmeta",
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"0c1a9537d33148388015163fc90329b3",
"type":"variable"
},
{
"text":"\" ",
"type":"code"
},
{
"id":"8b98e38b093140fc956b35f6cbf5018e",
"type":"variable"
},
{
"text":":x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { \"self.",
"type":"code"
},
{
"id":"9b21a7a4087848ba8f2ada071a294d73",
"type":"variable"
},
{
"text":"(\" x \")\" ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"258fb08008994945961815115488a6d4",
"type":"code"
},
{
"chunkpath":[
"classes",
"_RLMeta"
],
"filepath":[
"rlmeta",
"support.py"
],
"fragments":[
{
"text":"def ",
"type":"code"
},
{
"id":"9b21a7a4087848ba8f2ada071a294d73",
"type":"variable"
},
{
"text":"(self, matcher):\n    original_stream = self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":"\n    ",
"type":"code"
},
{
"id":"1f94d55a48c14180b2992433d29ace85",
"type":"variable"
},
{
"text":", ",
"type":"code"
},
{
"id":"5c352d6f3e54444cad73e2891e76e29a",
"type":"variable"
},
{
"text":" = self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":".",
"type":"code"
},
{
"id":"b2115b3eeaa143068958949787f5d104",
"type":"variable"
},
{
"text":"()\n    if isinstance(",
"type":"code"
},
{
"id":"1f94d55a48c14180b2992433d29ace85",
"type":"variable"
},
{
"text":", list):\n        self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":" = self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":".",
"type":"code"
},
{
"id":"653fc20558a64badb437b07f3d1c8490",
"type":"variable"
},
{
"text":"(",
"type":"code"
},
{
"id":"1f94d55a48c14180b2992433d29ace85",
"type":"variable"
},
{
"text":")\n        matcher()\n        if self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":".",
"type":"code"
},
{
"id":"4ad80c8d1d814fefa2656595f1d841c6",
"type":"variable"
},
{
"text":"():\n            self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":" = ",
"type":"code"
},
{
"id":"5c352d6f3e54444cad73e2891e76e29a",
"type":"variable"
},
{
"text":"\n            return ",
"type":"code"
},
{
"id":"cbbcd925bc2c42b9add24aaa736f4d35",
"type":"variable"
},
{
"text":"(lambda: ",
"type":"code"
},
{
"id":"1f94d55a48c14180b2992433d29ace85",
"type":"variable"
},
{
"text":")\n    original_stream.",
"type":"code"
},
{
"id":"00fd348d71754fcfaadae0de1ee5f198",
"type":"variable"
},
{
"text":"(\"expected list match\")\n",
"type":"code"
}
],
"id":"05a21fd5bf134f7c9208572470e212e1",
"type":"code"
}
],
"title":"MatchList"
},
{
"children":[],
"id":"74804e4e0ee643ac95210d7aa17ae7c6",
"paragraphs":[
{
"fragments":[
{
"text":"When a ",
"type":"text"
},
{
"id":"301f08856bf54373bc5975f75a315105",
"type":"variable"
},
{
"text":" AST node is matched, a Python string is generated:",
"type":"text"
}
],
"id":"50c2ea77dfc74d30b8b00e79e83ff849",
"type":"text"
},
{
"chunkpath":[
"rules",
"ast"
],
"filepath":[
"rlmeta",
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"301f08856bf54373bc5975f75a315105",
"type":"variable"
},
{
"text":"\" .:x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { repr(x) ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"0fdb7fda246f4e99becb87637359df79",
"type":"code"
}
],
"title":"String"
},
{
"children":[],
"id":"03d7a70d44fe4470967acd15d51ad56a",
"paragraphs":[
{
"fragments":[
{
"text":"When a ",
"type":"text"
},
{
"id":"49ba1aa1e24e408ba2b32bff68a72840",
"type":"variable"
},
{
"text":" AST node is matched, a Python list is generated:",
"type":"text"
}
],
"id":"6affca4fbfbc4860afd2a092891658fe",
"type":"text"
},
{
"chunkpath":[
"rules",
"ast"
],
"filepath":[
"rlmeta",
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"49ba1aa1e24e408ba2b32bff68a72840",
"type":"variable"
},
{
"text":"\" ",
"type":"code"
},
{
"id":"2420b6bcf2374252a533688aa0b33b5f",
"type":"variable"
},
{
"text":":x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { x ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"47a643f9317f47afa2e6d5001b87a1ff",
"type":"code"
},
{
"chunkpath":[
"rules"
],
"filepath":[
"rlmeta",
"codegenerator.rlmeta"
],
"fragments":[
{
"id":"2420b6bcf2374252a533688aa0b33b5f",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"index":5,
"type":"tabstop"
},
{
"text":"= ",
"type":"code"
},
{
"id":"19791660815a43e1b775ea6a29349648",
"type":"variable"
},
{
"text":"*:xs ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { \"(\" xs \"[])\" ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
},
{
"id":"19791660815a43e1b775ea6a29349648",
"type":"variable"
},
{
"text":" =\n  | [\"",
"type":"code"
},
{
"id":"cf8770da147840679077788180e10778",
"type":"variable"
},
{
"text":"\" ast:x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> {     x  \"+\" ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n  | ",
"type":"code"
},
{
"id":"8b98e38b093140fc956b35f6cbf5018e",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { \"[\" x \"]+\" ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"eae26130c7a047daa3ae8fd86ea4a9b6",
"language":"",
"type":"code"
},
{
"fragments":[
{
"text":"The list is generated by concatenating the parts. If an item should be spliced, it is assumed to be a list already and is not wrapped in brackets.",
"type":"text"
}
],
"id":"96c84bbf136547cc8296f336faab3d17",
"type":"text"
}
],
"title":"List"
},
{
"children":[],
"id":"166dffacb2ca4911908584d77f30b21f",
"paragraphs":[
{
"fragments":[
{
"text":"When a ",
"type":"text"
},
{
"id":"c9ecfed5791644a3b7ea2122d4ed87c9",
"type":"variable"
},
{
"text":" AST node is matched, a ",
"type":"text"
},
{
"id":"49dc22ba19624755a18a13a9e76734b1",
"type":"variable"
},
{
"text":" is created with a list:",
"type":"text"
}
],
"id":"e6f8e372a9034bca823062bdfec934e7",
"type":"text"
},
{
"chunkpath":[
"rules",
"ast"
],
"filepath":[
"rlmeta",
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"c9ecfed5791644a3b7ea2122d4ed87c9",
"type":"variable"
},
{
"text":"\" ",
"type":"code"
},
{
"id":"85ee4a0a694641c3aa683a15e6a0ba5d",
"type":"variable"
},
{
"text":":x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { \"",
"type":"code"
},
{
"id":"49dc22ba19624755a18a13a9e76734b1",
"type":"variable"
},
{
"text":".",
"type":"code"
},
{
"id":"2e8a56ad01dc4a289fbd584bc4874e7e",
"type":"variable"
},
{
"text":"([\" x \"])\" ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"74eb55bab93644eca5a621d9469c86dc",
"type":"code"
},
{
"fragments":[
{
"text":"When a ",
"type":"text"
},
{
"id":"d34e449a8ca740d0a4b84921fc05b25f",
"type":"variable"
},
{
"text":" AST node is matched, a ",
"type":"text"
},
{
"id":"7d8a78dfe90743759bdd25cf45506815",
"type":"variable"
},
{
"text":" is created:",
"type":"text"
}
],
"id":"f39bf47fd10e4ad494693f3573c3a215",
"type":"text"
},
{
"chunkpath":[
"rules",
"ast"
],
"filepath":[
"rlmeta",
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"d34e449a8ca740d0a4b84921fc05b25f",
"type":"variable"
},
{
"text":"\"] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { \"",
"type":"code"
},
{
"id":"7d8a78dfe90743759bdd25cf45506815",
"type":"variable"
},
{
"text":"()\" ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"1f9c2f35e18d4eac90c9b8e8a7db8b32",
"type":"code"
},
{
"fragments":[
{
"text":"When a ",
"type":"text"
},
{
"id":"7b75cb86cab34645b43d69d790e6e206",
"type":"variable"
},
{
"text":" AST node is matched, a ",
"type":"text"
},
{
"id":"bfaedafcea7445e7b7ed19c9abb47736",
"type":"variable"
},
{
"text":" is created:",
"type":"text"
}
],
"id":"a3a3334fd6d542f3b885308b7b096cd2",
"type":"text"
},
{
"chunkpath":[
"rules",
"ast"
],
"filepath":[
"rlmeta",
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"7b75cb86cab34645b43d69d790e6e206",
"type":"variable"
},
{
"text":"\"] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { \"",
"type":"code"
},
{
"id":"bfaedafcea7445e7b7ed19c9abb47736",
"type":"variable"
},
{
"text":"()\" ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"c4aaf6182aa34e73924627f6961161d4",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"rlmeta",
"support.py"
],
"fragments":[
{
"text":"class ",
"type":"code"
},
{
"id":"49dc22ba19624755a18a13a9e76734b1",
"type":"variable"
},
{
"text":"(object):\n\n    @classmethod\n    def ",
"type":"code"
},
{
"id":"2e8a56ad01dc4a289fbd584bc4874e7e",
"type":"variable"
},
{
"text":"(self, item):\n        if isinstance(item, ",
"type":"code"
},
{
"id":"49dc22ba19624755a18a13a9e76734b1",
"type":"variable"
},
{
"text":"):\n            return item\n        elif isinstance(item, list):\n            return ",
"type":"code"
},
{
"id":"b277e0c5612d4697bf8f8237494f8474",
"type":"variable"
},
{
"text":"([",
"type":"code"
},
{
"id":"49dc22ba19624755a18a13a9e76734b1",
"type":"variable"
},
{
"text":".create(x) for x in item])\n        else:\n            return ",
"type":"code"
},
{
"id":"50ee7994db484890abbeeb13330e22a7",
"type":"variable"
},
{
"text":"(item)\n\n",
"type":"code"
},
{
"blank_lines_before":0,
"path":[
"_Builder"
],
"prefix":"    ",
"type":"chunk"
}
],
"id":"b2a22c8337774967bcccbdd94d6d03a7",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"rlmeta",
"support.py"
],
"fragments":[
{
"text":"class ",
"type":"code"
},
{
"id":"b277e0c5612d4697bf8f8237494f8474",
"type":"variable"
},
{
"text":"(",
"type":"code"
},
{
"id":"49dc22ba19624755a18a13a9e76734b1",
"type":"variable"
},
{
"text":"):\n\n    def __init__(self, items):\n        self.items = items\n\n    def ",
"type":"code"
},
{
"id":"a5837c091631449aadeeaa004ae71b0b",
"type":"variable"
},
{
"text":"(self, output):\n        for item in self.items:\n            item.",
"type":"code"
},
{
"id":"a5837c091631449aadeeaa004ae71b0b",
"type":"variable"
},
{
"text":"(output)\n",
"type":"code"
}
],
"id":"fc7990fb7a544e24b79a140198b69c8b",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"rlmeta",
"support.py"
],
"fragments":[
{
"text":"class ",
"type":"code"
},
{
"id":"50ee7994db484890abbeeb13330e22a7",
"type":"variable"
},
{
"text":"(",
"type":"code"
},
{
"id":"49dc22ba19624755a18a13a9e76734b1",
"type":"variable"
},
{
"text":"):\n\n    def __init__(self, atom):\n        self.atom = atom\n\n    def ",
"type":"code"
},
{
"id":"a5837c091631449aadeeaa004ae71b0b",
"type":"variable"
},
{
"text":"(self, output):\n        output.",
"type":"code"
},
{
"id":"af5dbdd6e27c451398b2b116b5ff42d3",
"type":"variable"
},
{
"text":"(str(self.atom))\n",
"type":"code"
}
],
"id":"fd6eef92c8274c64a71d219fb2084dce",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"rlmeta",
"support.py"
],
"fragments":[
{
"text":"class ",
"type":"code"
},
{
"id":"7d8a78dfe90743759bdd25cf45506815",
"type":"variable"
},
{
"text":"(",
"type":"code"
},
{
"id":"49dc22ba19624755a18a13a9e76734b1",
"type":"variable"
},
{
"text":"):\n\n    def ",
"type":"code"
},
{
"id":"a5837c091631449aadeeaa004ae71b0b",
"type":"variable"
},
{
"text":"(self, output):\n        output.",
"type":"code"
},
{
"id":"8cb500cdd43d41a78158c645da945c70",
"type":"variable"
},
{
"text":"()\n",
"type":"code"
}
],
"id":"533041ab85ef4e13a5bdfd440fe344fa",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"rlmeta",
"support.py"
],
"fragments":[
{
"text":"class ",
"type":"code"
},
{
"id":"bfaedafcea7445e7b7ed19c9abb47736",
"type":"variable"
},
{
"text":"(",
"type":"code"
},
{
"id":"49dc22ba19624755a18a13a9e76734b1",
"type":"variable"
},
{
"text":"):\n\n    def ",
"type":"code"
},
{
"id":"a5837c091631449aadeeaa004ae71b0b",
"type":"variable"
},
{
"text":"(self, output):\n        output.",
"type":"code"
},
{
"id":"22163f4ee0fd4e68b2c95f94e111dee1",
"type":"variable"
},
{
"text":"()\n",
"type":"code"
}
],
"id":"cc6e0edd65614f4b8c470b167c521bd5",
"type":"code"
},
{
"chunkpath":[
"classes",
"_Builder"
],
"filepath":[
"rlmeta",
"support.py"
],
"fragments":[
{
"text":"def ",
"type":"code"
},
{
"id":"56d10f7bfcfd43bb996c3f76423b067b",
"type":"variable"
},
{
"text":"(self):\n    output = ",
"type":"code"
},
{
"id":"4c38cde583ac42ea8c7b9295a92e26f2",
"type":"variable"
},
{
"text":"()\n    self.",
"type":"code"
},
{
"id":"a5837c091631449aadeeaa004ae71b0b",
"type":"variable"
},
{
"text":"(output)\n    return output.value\n",
"type":"code"
}
],
"id":"795bcf7836b44c17996097b87dddd617",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"rlmeta",
"support.py"
],
"fragments":[
{
"text":"class ",
"type":"code"
},
{
"id":"4c38cde583ac42ea8c7b9295a92e26f2",
"type":"variable"
},
{
"text":"(object):\n\n    def __init__(self):\n        self.value = \"\"\n        self.level = 0\n\n    def ",
"type":"code"
},
{
"id":"8cb500cdd43d41a78158c645da945c70",
"type":"variable"
},
{
"text":"(self):\n        self.level += 1\n\n    def ",
"type":"code"
},
{
"id":"22163f4ee0fd4e68b2c95f94e111dee1",
"type":"variable"
},
{
"text":"(self):\n        self.level -= 1\n\n    def ",
"type":"code"
},
{
"id":"af5dbdd6e27c451398b2b116b5ff42d3",
"type":"variable"
},
{
"text":"(self, value):\n        for ch in value:\n            if self.value and ch != \"\\n\" and self.value[-1] == \"\\n\":\n                self.value += \"    \"*self.level\n            self.value += ch\n",
"type":"code"
}
],
"id":"fc6caf4810f146e1aac2556d5a12e242",
"type":"code"
}
],
"title":"Builder"
},
{
"children":[],
"id":"f5372dab8e084ca386297eb9575052e8",
"paragraphs":[
{
"chunkpath":[
"rules",
"ast"
],
"filepath":[
"rlmeta",
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"0a8e6be4bec3466bb658d7d4ff5bc5fd",
"type":"variable"
},
{
"text":"\" .:x ",
"type":"code"
},
{
"id":"85ee4a0a694641c3aa683a15e6a0ba5d",
"type":"variable"
},
{
"text":":y] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { x \"(\" y \")\" ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"a264ffede57c4b6aa108a23f741bd694",
"type":"code"
}
],
"title":"FnCall"
},
{
"children":[],
"id":"d9f73bdeb5c447dbaf5b8fe0bf3b67ba",
"paragraphs":[
{
"chunkpath":[
"rules",
"ast"
],
"filepath":[
"rlmeta",
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"ae823ab23224415f9a539b0354f311b8",
"type":"variable"
},
{
"text":"\" .:x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { \"",
"type":"code"
},
{
"id":"289a3db9c53e420da4dbdbc94a32aadf",
"type":"variable"
},
{
"text":".",
"type":"code"
},
{
"id":"ea57b40b324c4c03b030c78e924ed860",
"type":"variable"
},
{
"text":"(\" repr(x) \").",
"type":"code"
},
{
"id":"85139f1436944deab62958b8a713d8aa",
"type":"variable"
},
{
"text":"()\" ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"544bade2ad6a463db74a4b66c7cba6f7",
"type":"code"
},
{
"chunkpath":[
"classes",
"_Vars"
],
"filepath":[
"rlmeta",
"support.py"
],
"fragments":[
{
"text":"def ",
"type":"code"
},
{
"id":"ea57b40b324c4c03b030c78e924ed860",
"type":"variable"
},
{
"text":"(self, name):\n    return self[name]\n",
"type":"code"
}
],
"id":"7123ba114a244e929d6519a2bd2f8d0f",
"language":"",
"type":"code"
}
],
"title":"VarLookup"
},
{
"children":[],
"id":"4397d20868fa4c08ac289e463725f18e",
"paragraphs":[
{
"fragments":[
{
"text":"Grammars in Python have a single entry point: ",
"type":"text"
},
{
"id":"2a00f6add9e9443ab98af74a6da8b379",
"type":"variable"
},
{
"text":".",
"type":"text"
}
],
"id":"955dfe1bc67f4b7ca1b109a36f56cb49",
"type":"text"
},
{
"chunkpath":[
"classes",
"_RLMeta"
],
"filepath":[
"rlmeta",
"support.py"
],
"fragments":[
{
"text":"def ",
"type":"code"
},
{
"id":"2a00f6add9e9443ab98af74a6da8b379",
"type":"variable"
},
{
"text":"(self, rule_name, input_object):\n    self.",
"type":"code"
},
{
"id":"07c126c0f9094e189f37cc4ab940b0b4",
"type":"variable"
},
{
"text":" = ",
"type":"code"
},
{
"id":"331ec96e6c01440198c9134d85336b9b",
"type":"variable"
},
{
"text":"()\n    self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":" = ",
"type":"code"
},
{
"id":"b4b8cb5f4cdd4dc68ecc9ca100d1da5a",
"type":"variable"
},
{
"text":".",
"type":"code"
},
{
"id":"6de4b0de9db3465b89ec2278c5c557a8",
"type":"variable"
},
{
"text":"(self.",
"type":"code"
},
{
"id":"07c126c0f9094e189f37cc4ab940b0b4",
"type":"variable"
},
{
"text":", input_object)\n    result = self.",
"type":"code"
},
{
"id":"826871508bad4fecb6e575779218874d",
"type":"variable"
},
{
"text":"(rule_name).",
"type":"code"
},
{
"id":"85139f1436944deab62958b8a713d8aa",
"type":"variable"
},
{
"text":"()\n    if isinstance(result, ",
"type":"code"
},
{
"id":"49dc22ba19624755a18a13a9e76734b1",
"type":"variable"
},
{
"text":"):\n        return result.",
"type":"code"
},
{
"id":"56d10f7bfcfd43bb996c3f76423b067b",
"type":"variable"
},
{
"text":"()\n    else:\n        return result\n",
"type":"code"
}
],
"id":"c0bac19d60434ad2bf44cd6b70cf63ca",
"language":"",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"rlmeta",
"support.py"
],
"fragments":[
{
"text":"class ",
"type":"code"
},
{
"id":"331ec96e6c01440198c9134d85336b9b",
"type":"variable"
},
{
"text":"(dict):\n\n    def __init__(self):\n        dict.__init__(self)\n        self._latest_stream = None\n        self._latest_message = None\n\n    def ",
"type":"code"
},
{
"id":"596495d8d3c041d190a3330d1707203c",
"type":"variable"
},
{
"text":"(self):\n        message = []\n        items = []\n        for (rule_name, _), (_, start, end) in self.items():\n            items.append((rule_name, start, end))\n        items.sort(key=lambda item: (item[2].",
"type":"code"
},
{
"id":"b062e0322e284160bf26034e9de32446",
"type":"variable"
},
{
"text":"(), item[1].",
"type":"code"
},
{
"id":"b062e0322e284160bf26034e9de32446",
"type":"variable"
},
{
"text":"()))\n        for item in items:\n            message.append(\"matched {: <20} {} -> {}\\n\".format(*item))\n        message.append(\"\\n\")\n        message.append(\"ERROR: {}: {}\\n\".format(\n            self._latest_stream,\n            self._latest_message\n        ))\n        return \"\".join(message)\n\n    def ",
"type":"code"
},
{
"id":"5b5e4143fac64a7ba4fc1e5211b1d5f1",
"type":"variable"
},
{
"text":"(self, stream, message):\n        if self._latest_stream is None or stream.",
"type":"code"
},
{
"id":"b062e0322e284160bf26034e9de32446",
"type":"variable"
},
{
"text":"() >= self._latest_stream.",
"type":"code"
},
{
"id":"b062e0322e284160bf26034e9de32446",
"type":"variable"
},
{
"text":"():\n            self._latest_stream = stream\n            self._latest_message = message\n        raise ",
"type":"code"
},
{
"id":"df25061bb4004aa693b603f0a8ec2af2",
"type":"variable"
},
{
"text":"(self)\n",
"type":"code"
}
],
"id":"6bf95d09ed70474bb70345fb1877f34e",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"rlmeta",
"support.py"
],
"fragments":[
{
"text":"class ",
"type":"code"
},
{
"id":"df25061bb4004aa693b603f0a8ec2af2",
"type":"variable"
},
{
"text":"(Exception):\n\n    def __init__(self, memo):\n        Exception.__init__(self)\n        self._memo = memo\n\n    def ",
"type":"code"
},
{
"id":"e86cf4c2ab6c4d45948e33529e447036",
"type":"variable"
},
{
"text":"(self):\n        return self._memo.",
"type":"code"
},
{
"id":"596495d8d3c041d190a3330d1707203c",
"type":"variable"
},
{
"text":"()\n",
"type":"code"
}
],
"id":"00ace1a1616649898f3ca6095c7884e1",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"rlmeta",
"support.py"
],
"fragments":[
{
"text":"class ",
"type":"code"
},
{
"id":"b4b8cb5f4cdd4dc68ecc9ca100d1da5a",
"type":"variable"
},
{
"text":"(object):\n\n    @classmethod\n    def ",
"type":"code"
},
{
"id":"6de4b0de9db3465b89ec2278c5c557a8",
"type":"variable"
},
{
"text":"(cls, memo, input_object):\n        if isinstance(input_object, basestring):\n            return ",
"type":"code"
},
{
"id":"d6ed0f3ac9e84f60bae25485ddb2f97e",
"type":"variable"
},
{
"text":"(memo, list(input_object))\n        else:\n            return ",
"type":"code"
},
{
"id":"b058347d19484740b7e2dec4816c0978",
"type":"variable"
},
{
"text":"(memo, [input_object])\n\n    def __init__(self, memo, objects):\n        self._memo = memo\n        self._objects = objects\n\n    def ",
"type":"code"
},
{
"id":"00fd348d71754fcfaadae0de1ee5f198",
"type":"variable"
},
{
"text":"(self, message):\n        self._memo.",
"type":"code"
},
{
"id":"5b5e4143fac64a7ba4fc1e5211b1d5f1",
"type":"variable"
},
{
"text":"(self, message)\n\n    def ",
"type":"code"
},
{
"id":"b2115b3eeaa143068958949787f5d104",
"type":"variable"
},
{
"text":"(self):\n        if self.",
"type":"code"
},
{
"id":"4ad80c8d1d814fefa2656595f1d841c6",
"type":"variable"
},
{
"text":"():\n            self.",
"type":"code"
},
{
"id":"00fd348d71754fcfaadae0de1ee5f198",
"type":"variable"
},
{
"text":"(\"not eof\")\n        ",
"type":"code"
},
{
"id":"1f94d55a48c14180b2992433d29ace85",
"type":"variable"
},
{
"text":" = self._objects[0]\n        return (\n            ",
"type":"code"
},
{
"id":"1f94d55a48c14180b2992433d29ace85",
"type":"variable"
},
{
"text":",\n            self.",
"type":"code"
},
{
"id":"2f6729bf45e84649b3187f8016c3fec9",
"type":"variable"
},
{
"text":"(",
"type":"code"
},
{
"id":"1f94d55a48c14180b2992433d29ace85",
"type":"variable"
},
{
"text":", self._objects[1:]),\n        )\n\n    def ",
"type":"code"
},
{
"id":"4ad80c8d1d814fefa2656595f1d841c6",
"type":"variable"
},
{
"text":"(self):\n        return len(self._objects) == 0\n",
"type":"code"
}
],
"id":"b11d191c565f44ac8f6ec57f2decacfe",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"rlmeta",
"support.py"
],
"fragments":[
{
"text":"class ",
"type":"code"
},
{
"id":"d6ed0f3ac9e84f60bae25485ddb2f97e",
"type":"variable"
},
{
"text":"(",
"type":"code"
},
{
"id":"b4b8cb5f4cdd4dc68ecc9ca100d1da5a",
"type":"variable"
},
{
"text":"):\n\n    def __init__(self, memo, objects, line=1, column=1):\n        ",
"type":"code"
},
{
"id":"b4b8cb5f4cdd4dc68ecc9ca100d1da5a",
"type":"variable"
},
{
"text":".__init__(self, memo, objects)\n        self._line = line\n        self._column = column\n\n    def ",
"type":"code"
},
{
"id":"b062e0322e284160bf26034e9de32446",
"type":"variable"
},
{
"text":"(self):\n        return (self._line, self._column)\n\n    def ",
"type":"code"
},
{
"id":"2f6729bf45e84649b3187f8016c3fec9",
"type":"variable"
},
{
"text":"(self, ",
"type":"code"
},
{
"id":"1f94d55a48c14180b2992433d29ace85",
"type":"variable"
},
{
"text":", objects):\n        if ",
"type":"code"
},
{
"id":"1f94d55a48c14180b2992433d29ace85",
"type":"variable"
},
{
"text":" == \"\\n\":\n            return ",
"type":"code"
},
{
"id":"d6ed0f3ac9e84f60bae25485ddb2f97e",
"type":"variable"
},
{
"text":"(self._memo, objects, self._line+1, 1)\n        else:\n            return ",
"type":"code"
},
{
"id":"d6ed0f3ac9e84f60bae25485ddb2f97e",
"type":"variable"
},
{
"text":"(self._memo, objects, self._line, self._column+1)\n\n    def __str__(self):\n        return \"L{:03d}:C{:03d}\".format(self._line, self._column)\n",
"type":"code"
}
],
"id":"e637234d5baa4d669a60c90ce1688693",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"rlmeta",
"support.py"
],
"fragments":[
{
"text":"class ",
"type":"code"
},
{
"id":"b058347d19484740b7e2dec4816c0978",
"type":"variable"
},
{
"text":"(",
"type":"code"
},
{
"id":"b4b8cb5f4cdd4dc68ecc9ca100d1da5a",
"type":"variable"
},
{
"text":"):\n\n    def __init__(self, memo, objects, parent=(), pos=0):\n        ",
"type":"code"
},
{
"id":"b4b8cb5f4cdd4dc68ecc9ca100d1da5a",
"type":"variable"
},
{
"text":".__init__(self, memo, objects)\n        self._parent = parent\n        self._pos = pos\n\n    def ",
"type":"code"
},
{
"id":"b062e0322e284160bf26034e9de32446",
"type":"variable"
},
{
"text":"(self):\n        return self._parent + (self._pos,)\n\n    def ",
"type":"code"
},
{
"id":"653fc20558a64badb437b07f3d1c8490",
"type":"variable"
},
{
"text":"(self, input_object):\n        return ",
"type":"code"
},
{
"id":"b058347d19484740b7e2dec4816c0978",
"type":"variable"
},
{
"text":"(self._memo, input_object, self._parent+(self._pos,))\n\n    def ",
"type":"code"
},
{
"id":"2f6729bf45e84649b3187f8016c3fec9",
"type":"variable"
},
{
"text":"(self, ",
"type":"code"
},
{
"id":"1f94d55a48c14180b2992433d29ace85",
"type":"variable"
},
{
"text":", objects):\n        return ",
"type":"code"
},
{
"id":"b058347d19484740b7e2dec4816c0978",
"type":"variable"
},
{
"text":"(self._memo, objects, self._parent, self._pos+1)\n\n    def __str__(self):\n        return \"[{}]\".format(\", \".join(str(x) for x in self.",
"type":"code"
},
{
"id":"b062e0322e284160bf26034e9de32446",
"type":"variable"
},
{
"text":"()))\n",
"type":"code"
}
],
"id":"af185bd3045941ab9c96c68a83ec4741",
"type":"code"
}
],
"title":"Final support methods"
}
],
"id":"c3f29fa523f341a487ebc07209c471f9",
"paragraphs":[
{
"fragments":[
{
"text":"This section defines the code generator that translates ASTs to Python classes and the support library that the generated classes depend on.",
"type":"text"
}
],
"id":"c56e60448b4e42df867652370c4fe2fb",
"type":"text"
},
{
"chunkpath":[],
"filepath":[
"rlmeta",
"codegenerator.rlmeta"
],
"fragments":[
{
"id":"8cf9a10b04cc48a484e1cb7c6f1f2f28",
"type":"variable"
},
{
"text":" {\n",
"type":"code"
},
{
"blank_lines_before":0,
"path":[
"rules"
],
"prefix":"  ",
"type":"chunk"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"1a998747fffd406f9b8f0bed1e8740a1",
"type":"code"
},
{
"chunkpath":[],
"filepath":[
"rlmeta",
"support.py"
],
"fragments":[
{
"blank_lines_before":1,
"path":[
"classes"
],
"prefix":"",
"type":"chunk"
}
],
"id":"36fdd2e9ccf7430bbf84158437d5c067",
"type":"code"
}
],
"title":"Code generator"
},
{
"children":[],
"id":"2c78e9d9104c4bddbdd1dfe6314506c9",
"paragraphs":[
{
"fragments":[
{
"text":"Here is a template for the final Python file that implements the RLMeta compiler:",
"type":"text"
}
],
"id":"0df5b4de6f7a410db58a44db325c9597",
"type":"text"
},
{
"chunkpath":[
"python file template"
],
"filepath":[
"rlmeta",
"compile.sh"
],
"fragments":[
{
"text":"import sys\n\nSUPPORT = $",
"type":"code"
},
{
"id":"d09ab0856aa0453385e2158fad4dde9c",
"type":"variable"
},
{
"text":"\n\n$",
"type":"code"
},
{
"id":"6352455a9a4f44c984b2c210151858a2",
"type":"variable"
},
{
"text":"\n\n$",
"type":"code"
},
{
"id":"195e7fa2b75a40baa69b0bbf57a53150",
"type":"variable"
},
{
"text":"\n\n$",
"type":"code"
},
{
"id":"2ea1b512b7444d8ab077edeba233a4f3",
"type":"variable"
},
{
"text":"\n\njoin = \"\".join\n\ndef compile_grammar(grammar):\n    parser = Parser()\n    code_generator = CodeGenerator()\n    return code_generator.run(\"ast\", parser.run(\"grammar\", grammar))\n\nif __name__ == \"__main__\":\n    if \"--support\" in sys.argv:\n        sys.stdout.write(SUPPORT)\n    else:\n        try:\n            sys.stdout.write(compile_grammar(sys.stdin.read()))\n        except ",
"type":"code"
},
{
"id":"df25061bb4004aa693b603f0a8ec2af2",
"type":"variable"
},
{
"text":" as e:\n            sys.stderr.write(e.",
"type":"code"
},
{
"id":"e86cf4c2ab6c4d45948e33529e447036",
"type":"variable"
},
{
"text":"())\n            sys.exit(1)\n",
"type":"code"
}
],
"id":"f1a53c2ef9e741b2a4c21c13c67f1664",
"language":"python",
"type":"code"
},
{
"fragments":[
{
"text":"First, the support library snippet is stored in a variable. This is needed so that it can be output when the ",
"type":"text"
},
{
"text":"--support",
"type":"code"
},
{
"text":" flag is given. Then the support library, compiled parser grammar, and compiled code generator grammar snippets are inserted. Then the host language function ",
"type":"text"
},
{
"text":"join",
"type":"code"
},
{
"text":" is defined. Then a function to compile a grammar is defined. Finally the main method that accepts grammars on stdin and writes Python classes on stdout is implemented. This template is rendered with a Bash script:",
"type":"text"
}
],
"id":"a4ae12eb01a5413a939a01c84a6d10cf",
"type":"text"
},
{
"chunkpath":[],
"filepath":[
"rlmeta",
"compile.sh"
],
"fragments":[
{
"text":"#!/bin/bash\n\nset -e\n\n",
"type":"code"
},
{
"id":"83ce9666a26449cd9936798594c99e3f",
"type":"variable"
},
{
"text":"=\"$(pwd)/$1\"\n\ncd \"$(dirname \"$0\")\"\n\nto_python_string() {\n    python -c 'import sys; sys.stdout.write(repr(sys.stdin.read()))'\n}\n\n",
"type":"code"
},
{
"id":"6352455a9a4f44c984b2c210151858a2",
"type":"variable"
},
{
"text":"=$(cat support.py)\n",
"type":"code"
},
{
"id":"d09ab0856aa0453385e2158fad4dde9c",
"type":"variable"
},
{
"text":"=$(to_python_string < support.py)\n",
"type":"code"
},
{
"id":"195e7fa2b75a40baa69b0bbf57a53150",
"type":"variable"
},
{
"text":"=$(python \"$",
"type":"code"
},
{
"id":"83ce9666a26449cd9936798594c99e3f",
"type":"variable"
},
{
"text":"\" < parser.rlmeta)\n",
"type":"code"
},
{
"id":"2ea1b512b7444d8ab077edeba233a4f3",
"type":"variable"
},
{
"text":"=$(python \"$",
"type":"code"
},
{
"id":"83ce9666a26449cd9936798594c99e3f",
"type":"variable"
},
{
"text":"\" < codegenerator.rlmeta)\n\ncat <<EOF\n",
"type":"code"
},
{
"blank_lines_before":0,
"path":[
"python file template"
],
"prefix":"",
"type":"chunk"
},
{
"text":"EOF\n",
"type":"code"
}
],
"id":"fc33f048fabe4ac98caf108dd96e9799",
"type":"code"
},
{
"fragments":[
{
"text":"If the compile script is run with the ",
"type":"text"
},
{
"text":"rlmeta.py",
"type":"code"
},
{
"text":" compiler, a new Python file is output. This file is exactly the same as the original ",
"type":"text"
},
{
"text":"rlmeta.py",
"type":"code"
},
{
"text":" file. It can be seen by diffing the two files:",
"type":"text"
}
],
"id":"b7c427bbcd404a4b8cdb50f1d9383b33",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"$ diff <(./rlmeta/compile.sh rlmeta/rlmeta.py) rlmeta/rlmeta.py && echo EQUAL\nEQUAL\n",
"type":"code"
}
],
"id":"46ec2ac30c8d4762a7e3017195451261",
"type":"code"
}
],
"title":"Putting it together"
},
{
"children":[],
"id":"313b147a2f574ea09d76d9c7371bdf18",
"paragraphs":[
{
"fragments":[
{
"text":"In the previous section, a version of the RLMeta compiler was needed to compile the RLMeta compiler:",
"type":"text"
}
],
"id":"97be5f1d197342b8a567f17d45d8db10",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"id":"195e7fa2b75a40baa69b0bbf57a53150",
"type":"variable"
},
{
"text":"=$(python \"$",
"type":"code"
},
{
"id":"83ce9666a26449cd9936798594c99e3f",
"type":"variable"
},
{
"text":"\" < parser.rlmeta)\n",
"type":"code"
},
{
"id":"2ea1b512b7444d8ab077edeba233a4f3",
"type":"variable"
},
{
"text":"=$(python \"$",
"type":"code"
},
{
"id":"83ce9666a26449cd9936798594c99e3f",
"type":"variable"
},
{
"text":"\" < codegenerator.rlmeta)\n",
"type":"code"
}
],
"id":"fc6cf81d888d48feac3782e29a853bd5",
"language":"bash",
"type":"code"
},
{
"fragments":[
{
"text":"But how can the RLMeta compiler be run before it exists? How was the first version of ",
"type":"text"
},
{
"text":"rlmeta.py",
"type":"code"
},
{
"text":" created? This is a bootstrapping problem. In this case I solved it by translating the parser and the code generator to Python code manually according the the rules specified in the grammars. I did manually what the compiler would do.",
"type":"text"
}
],
"id":"3f474624538a407182ab7a182d314cdd",
"type":"text"
},
{
"fragments":[
{
"text":"I started translating the parser that looks like this:",
"type":"text"
}
],
"id":"767ffa89a7ca44d98725d0fb2d692e30",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"id":"a304a36f0ab541209c9e8aa78f4edc46",
"type":"variable"
},
{
"text":" {\n  ...\n}\n",
"type":"code"
}
],
"id":"567dcacc177a4705a64601a99244ad7b",
"language":"rlmeta",
"type":"code"
},
{
"fragments":[
{
"text":"This is matched by the ",
"type":"text"
},
{
"id":"42f0b42533be4f7eb54c04f22a137669",
"type":"variable"
},
{
"text":" rule in the parser and turned into a ",
"type":"text"
},
{
"id":"2aa377816ed3486da72cff7bd46190ad",
"type":"variable"
},
{
"text":" AST node:",
"type":"text"
}
],
"id":"2bbc91c85ae84cfa8454e23d21c5ff60",
"type":"text"
},
{
"code_id":"41afd1b3bc8749a2bdefb2a09eb54f62",
"id":"39f744fa7c9041eeba9676487e09758f",
"type":"expanded_code"
},
{
"fragments":[
{
"text":"The ",
"type":"text"
},
{
"id":"2aa377816ed3486da72cff7bd46190ad",
"type":"variable"
},
{
"text":" AST node is then turned into a Python class definition by the code generator:",
"type":"text"
}
],
"id":"17d5962612dd429a9e847e3383a1596d",
"type":"text"
},
{
"code_id":"d3c4ef9bebd64746ab898a18575fd4ac",
"id":"b025c0f14e44447a9bd3992865a3b512",
"type":"expanded_code"
},
{
"fragments":[
{
"text":"The parser is thus turned into the following Python code:",
"type":"text"
}
],
"id":"766fcd9737c44120a3f69b30c16b2423",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"class Parser(_RLMeta):\n    ...\n",
"type":"code"
}
],
"id":"801e511130a04556bd44e04b6fbc2b7c",
"language":"python",
"type":"code"
},
{
"fragments":[
{
"text":"I then went on to translate the rules in the parser. The first rule is ",
"type":"text"
},
{
"id":"42f0b42533be4f7eb54c04f22a137669",
"type":"variable"
},
{
"text":":",
"type":"text"
}
],
"id":"bc27feae1407409f8f711847b0f33ddb",
"type":"text"
},
{
"code_id":"41afd1b3bc8749a2bdefb2a09eb54f62",
"id":"a92a804a3822459ab79204c3561e3355",
"type":"expanded_code"
},
{
"fragments":[
{
"text":"It is matched by the ",
"type":"text"
},
{
"id":"c8edc6f14d27480e9f737a7697f07f07",
"type":"variable"
},
{
"text":" rule in the parser and turned into a ",
"type":"text"
},
{
"id":"e22fa3c5d4144197906cbb74af6cc83e",
"type":"variable"
},
{
"text":" AST node:",
"type":"text"
}
],
"id":"20ce48c8fe8649f784a50729b4f85eb4",
"type":"text"
},
{
"code_id":"f24d0daa1d1c4ddeb6b111c45aa31102",
"id":"19d749fe5f8c4819aa99995b1c012986",
"type":"expanded_code"
},
{
"fragments":[
{
"text":"The ",
"type":"text"
},
{
"id":"e22fa3c5d4144197906cbb74af6cc83e",
"type":"variable"
},
{
"text":" AST node is then turned into a Python method definition by the code generator:",
"type":"text"
}
],
"id":"20f97026782f4a309ff4581fdbb0ae1a",
"type":"text"
},
{
"code_id":"4bbfe03c503f409f9ac3233cbbd31340",
"id":"b6475bba1e0e41e3b987288329ab26de",
"type":"expanded_code"
},
{
"fragments":[
{
"text":"The ",
"type":"text"
},
{
"id":"42f0b42533be4f7eb54c04f22a137669",
"type":"variable"
},
{
"text":" rule is thus turned into the following Python code:",
"type":"text"
}
],
"id":"b6e1377b7cce4adb998ab82d06b0b207",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"\ndef _rule_grammar(self):\n    return ...()\n",
"type":"code"
}
],
"id":"1f573998730e41b295145367a614c6c7",
"language":"python",
"type":"code"
},
{
"fragments":[
{
"text":"The body of the ",
"type":"text"
},
{
"id":"42f0b42533be4f7eb54c04f22a137669",
"type":"variable"
},
{
"text":" rule is matched by the ",
"type":"text"
},
{
"id":"7d667137ca2f4350969bcf2044d677de",
"type":"variable"
},
{
"text":" rule in the parser and turned into an ",
"type":"text"
},
{
"id":"efa7dd37aa9e46908ed34f8d31cd476d",
"type":"variable"
},
{
"text":" AST node:",
"type":"text"
}
],
"id":"3765db7f2936457298f5db014ae96e7c",
"type":"text"
},
{
"code_id":"5548c68fed5947a891639cab8086cba5",
"id":"d5c1e6b2c2bc4510a8ac73c2889f4344",
"type":"expanded_code"
},
{
"fragments":[
{
"text":"The ",
"type":"text"
},
{
"id":"efa7dd37aa9e46908ed34f8d31cd476d",
"type":"variable"
},
{
"text":" AST node is then turned into a Python lambda expression by the code generator:",
"type":"text"
}
],
"id":"43e3f8046f1c4d36828b09c84fc01660",
"type":"text"
},
{
"code_id":"f85612ab9e0d444f8104eb83d1548800",
"id":"6350f59106b84545b99026b088f4d356",
"type":"expanded_code"
},
{
"fragments":[
{
"text":"The body of the ",
"type":"text"
},
{
"id":"42f0b42533be4f7eb54c04f22a137669",
"type":"variable"
},
{
"text":" rule is thus turned into the following Python code:",
"type":"text"
}
],
"id":"f6c8f5e58488454d940fce10cc168c42",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"(lambda:\n    self._or([...])\n)\n",
"type":"code"
}
],
"id":"5bdd9105811e4adb9e539f385777ebf2",
"language":"python",
"type":"code"
},
{
"fragments":[
{
"text":"I continued this process until all dots had been expanded. Then I did the same for all remaining rules. Finally I repeated the process for the code generator. Once I had the manually translated versions of ",
"type":"text"
},
{
"text":"parser.py",
"type":"code"
},
{
"text":" and ",
"type":"text"
},
{
"text":"codegenerator.py",
"type":"code"
},
{
"text":", I could temporarily replace",
"type":"text"
}
],
"id":"fcff0326e4fe419e8cf46bc41395bc16",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"id":"195e7fa2b75a40baa69b0bbf57a53150",
"type":"variable"
},
{
"text":"=$(python \"$",
"type":"code"
},
{
"id":"83ce9666a26449cd9936798594c99e3f",
"type":"variable"
},
{
"text":"\" < parser.rlmeta)\n",
"type":"code"
},
{
"id":"2ea1b512b7444d8ab077edeba233a4f3",
"type":"variable"
},
{
"text":"=$(python \"$",
"type":"code"
},
{
"id":"83ce9666a26449cd9936798594c99e3f",
"type":"variable"
},
{
"text":"\" < codegenerator.rlmeta)\n",
"type":"code"
}
],
"id":"2bd9aaaf4fbf416b9dbb1154709e55c8",
"language":"bash",
"type":"code"
},
{
"fragments":[
{
"text":"with",
"type":"text"
}
],
"id":"910f69c7651342dc9192dc0d5649e6da",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"id":"195e7fa2b75a40baa69b0bbf57a53150",
"type":"variable"
},
{
"text":"=$(cat parser.py)\n",
"type":"code"
},
{
"id":"2ea1b512b7444d8ab077edeba233a4f3",
"type":"variable"
},
{
"text":"=$(cat codegenerator.py)\n",
"type":"code"
}
],
"id":"0c6a05d52dba4f678879c5099bbcbac1",
"language":"bash",
"type":"code"
},
{
"fragments":[
{
"text":"to create the initial version of ",
"type":"text"
},
{
"text":"rlmeta.py",
"type":"code"
},
{
"text":".",
"type":"text"
}
],
"id":"324ce5edcc6948949f1d6c0bef519125",
"type":"text"
},
{
"fragments":[
{
"text":"With the initial version of ",
"type":"text"
},
{
"text":"rlmeta.py",
"type":"code"
},
{
"text":" I could run the compile script to generate the second version of ",
"type":"text"
},
{
"text":"rlmeta.py",
"type":"code"
},
{
"text":". The second version did not match the first version exactly. The complete diff can be seen in the commit ",
"type":"text"
},
{
"text":"Get rid of bootstrapped compiler",
"type":"link",
"url":"https://github.com/rickardlindberg/rickardlindberg.me/commit/134c3a360160a2b978cd742a935df1c3a85de546#diff-7687f8856e0607ca8e0247b6cd77cf7b"
},
{
"text":". Mostly I had used a different character for strings and forgotten some commas that were not strictly necessary. Once the second version replaced the first, the compile script reproduced ",
"type":"text"
},
{
"text":"rlmeta.py",
"type":"code"
},
{
"text":" exactly. At this point the manually translated versions could be discarded. The RLMeta compiler was bootstrapped. This was a tremendously rewarding experience.",
"type":"text"
}
],
"id":"c913c7ca397044649f31559d0b3d1c97",
"type":"text"
},
{
"fragments":[
{
"text":"Did the first version work on the first run? No. In the translation process I noticed incorrect behavior in the grammars that I had to fix. And some manual translations were done incorrectly. But all fixes were relatively minor.",
"type":"text"
}
],
"id":"0733ecc602d64d5d8310251fc6ab415f",
"type":"text"
},
{
"fragments":[
{
"text":"To avoid making mistakes in the manual translation process, I created snippets for the Vim text editor for each of the AST nodes. So when I encountered a ",
"type":"text"
},
{
"id":"e22fa3c5d4144197906cbb74af6cc83e",
"type":"variable"
},
{
"text":" AST node, I could type \"rule\", hit tab, and the following snippet would be inserted placing the cursor where the rule name should be inserted:",
"type":"text"
}
],
"id":"e094fbacd5524701aa1149f4e9a714ca",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"def _rule_${1:name}(self):\n    return ${2:matcher}()\n",
"type":"code"
}
],
"id":"a2cb373c0e0e43f4851d661536a43346",
"language":"python",
"type":"code"
},
{
"fragments":[
{
"text":"I could then type the name (\"grammar\" for example), hit tab, write the name of the next AST node, and hit tab. If the next AST node was ",
"type":"text"
},
{
"id":"efa7dd37aa9e46908ed34f8d31cd476d",
"type":"variable"
},
{
"text":" for example, the following snipped would be inserted, placing the cursor inside the list:",
"type":"text"
}
],
"id":"d55d0c96941b4378bc4848d0f5e69f25",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"(lambda:\n    self._or([\n        ${1:matchers}\n    ])\n)\n",
"type":"code"
}
],
"id":"c15732899dff4ef58acaac0aa882676e",
"language":"python",
"type":"code"
},
{
"fragments":[
{
"text":"The Vim snippets saved me a lot of typing and made manual translation feasable. Getting all commas and parenthesis right would have been difficult otherwise.",
"type":"text"
}
],
"id":"47c303c35d604f279b9314e8227990e2",
"type":"text"
}
],
"title":"Bootstrapping"
}
],
"id":"f5f122c94d3d4fa0b3a7e64a7fa0a724",
"paragraphs":[
{
"fragments":[
{
"text":"So far I've just given informal descriptions of how RLMeta works. To fully understand how arithmetic expressions are evaluated and compiled, you need to understand how RLMeta is implemented.",
"type":"text"
}
],
"id":"941e6240d48542d2b8bd9cfc55c5d551",
"type":"text"
},
{
"fragments":[
{
"text":"The RLMeta compiler translates grammars to Python classes. This translation is implemented in RLMeta itself. Grammars are, like expression compilation, translated in two steps: the parser translates grammar syntax to ASTs and the code generator translates ASTs to Python classes. The generated Python classes depend on a support library.",
"type":"text"
}
],
"id":"a476fb2e885b4071b0237eb5f6a17bf1",
"type":"text"
},
{
"fragments":[
{
"text":"RLMeta compiler internals illustrated.",
"type":"text"
}
],
"id":"630f0731e76141dfba74a05cbdff81ed",
"image_base64":"",
"type":"image"
},
{
"fragments":[
{
"text":"The RLMeta compiler thus comprises three pieces: the parser, the code generator, and the support library.",
"type":"text"
}
],
"id":"80d695938fd840019e3e4abd8b43ef05",
"type":"text"
}
],
"title":"RLMeta implementation"
},
{
"children":[],
"id":"5f558623cfce441fb3e61033299d1419",
"paragraphs":[
{
"fragments":[
{
"text":"When I read ",
"type":"text"
},
{
"text":"Structure and Interpretation of Computer Programs",
"type":"link",
"url":"https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book.html"
},
{
"text":" I remember thinking that it described what programming was all about. The following quote from ",
"type":"text"
},
{
"text":"chapter 4",
"type":"link",
"url":"https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book-Z-H-25.html#%_chap_4"
},
{
"text":" I think summarizes it:",
"type":"text"
}
],
"id":"f88fa310ceea4c919ddabfc95268336d",
"type":"text"
},
{
"fragments":[
{
"text":"However, as we confront increasingly complex problems, we will find that Lisp, or indeed any fixed programming language, is not sufficient for our needs. We must constantly turn to new languages in order to express our ideas more effectively. Establishing new languages is a powerful strategy for controlling complexity in engineering design; we can often enhance our ability to deal with a complex problem by adopting a new language that enables us to describe (and hence to think about) the problem in a different way, using primitives, means of combination, and means of abstraction that are particularly well suited to the problem at hand.",
"type":"text"
}
],
"id":"1c01ea855bde4617a7549c4236df4a3e",
"type":"quote"
},
{
"fragments":[
{
"text":"In this article I set out to explain how a metalanguage could be used to give meaning to arithmetic expressions. But RLMeta is more powerful than that. It can be used to implement itself and also many other programming languages because matching and transforming is at the heart of programming language implementation. Its small implementation, just under 400 lines of code, also makes it feasable to understand and modify:",
"type":"text"
}
],
"id":"0dbdd5e57ef94961b10a24fac9f89882",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"   52 parser.rlmeta\n   34 codegenerator.rlmeta\n  279 support.py\n  365 total\n",
"type":"code"
}
],
"id":"86c81484418d47ef9883ffb817db1906",
"language":"",
"type":"code"
},
{
"fragments":[
{
"text":"I hope this article inspires you to experiment with implementing programming languages so that you can solve more complex problems elegantly.",
"type":"text"
}
],
"id":"91a672dc3aa0483196a9e23cb70134ae",
"type":"text"
}
],
"title":"Implementing languages"
},
{
"children":[
{
"children":[],
"id":"4c6af1a11ed440d2bf31a497032c9c0b",
"paragraphs":[
{
"fragments":[
{
"text":"I was helped by the following resources when implementing RLMeta:",
"type":"text"
}
],
"id":"c70ef036e62749ab85c1157aba752b1e",
"type":"text"
},
{
"child_type":"unordered",
"children":[
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"META II paper",
"type":"link",
"url":"http://www.hcs64.com/files/pd1-3-schorre.pdf"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"OMeta thesis",
"type":"link",
"url":"http://www.vpri.org/pdf/tr2008003_experimenting.pdf"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Tutorial: Metacompilers Part 1",
"type":"link",
"url":"http://www.bayfronttechnologies.com/mc_tutorial.html"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"META II: A Syntax-Oriented Compiler Writing Language - Papers We Love Singapore",
"type":"link",
"url":"https://www.youtube.com/watch?v=L1rwVBLHGiU"
}
]
}
],
"id":"e4125a19ab474510a27a3cd76c42c2f1",
"type":"list"
}
],
"title":"Resources"
},
{
"children":[
{
"children":[],
"id":"a56c54f42c00473091d7c8295ff4e0f1",
"paragraphs":[
{
"code_id":"c94ba005404c45f78e7511793da8d554",
"id":"104b3c249d084df2b43eebd29698f0f9",
"type":"expanded_code"
}
],
"title":"parser.rlmeta"
},
{
"children":[],
"id":"d9ea64bbdad3465897667ebec9d5ace1",
"paragraphs":[
{
"code_id":"1a998747fffd406f9b8f0bed1e8740a1",
"id":"fc830b863d064f7eabe2e1ed36640b3f",
"type":"expanded_code"
}
],
"title":"codegenerator.rlmeta"
},
{
"children":[],
"id":"983e606587034a0a9c8e8b5c714e7ef8",
"paragraphs":[
{
"code_id":"36fdd2e9ccf7430bbf84158437d5c067",
"id":"1fdabe27b8fc4ef6a80aa4b9e7791560",
"type":"expanded_code"
}
],
"title":"support.py"
},
{
"children":[],
"id":"193d8f0ff47f4edcb201139df8cd9520",
"paragraphs":[
{
"code_id":"fc33f048fabe4ac98caf108dd96e9799",
"id":"ff95eeba32cf4b41bb078f85aea85be1",
"type":"expanded_code"
}
],
"title":"compile.sh"
}
],
"id":"388bb1e8ccbd4d55b89b391c08452c33",
"paragraphs":[],
"title":"Code listings"
}
],
"id":"6f7a509358784145b38fd210c96513c5",
"paragraphs":[],
"title":"Appendix"
}
],
"id":"9a483a4a28de4f298790297b5708b96f",
"paragraphs":[
{
"fragments":[
{
"text":"How does the computer know what to do with the following expression?",
"type":"text"
}
],
"id":"1d1852f165214216b1e730838fb98b4f",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"1+2*3\n",
"type":"code"
}
],
"id":"dd9049bffe13466b941e02b0edf3daad",
"type":"code"
},
{
"fragments":[
{
"text":"How does it know how to recognize the sequence of characters as an arithmetic expression? How does it know that ",
"type":"text"
},
{
"text":"2*3",
"type":"code"
},
{
"text":" should be computed first? How does it translate it to instructions that execute on the CPU?",
"type":"text"
}
],
"id":"d0230a0a282548c5a0b77ef0d16f27e2",
"type":"text"
},
{
"fragments":[
{
"text":"In this article I present a metalanguage that I've developed that can help answer those questions.",
"type":"text"
}
],
"id":"0aa7192e98bd4d02bdb9a0b059155310",
"type":"text"
}
],
"title":"RLMeta"
},
"variables":{
"0051e09230894b6696a82c3f05f6740a":"upper",
"00fd348d71754fcfaadae0de1ee5f198":"fail",
"0449532c17204462b4b4681b07ac12b5":"expr1",
"07c126c0f9094e189f37cc4ab940b0b4":"_memo",
"08c927c12a8741f9994399078b91d0b8":"_a864d6cb43244a1ca536085dd92431af",
"092fb427436241669092a2244dc64c33":"treeprinter_py",
"0a8e6be4bec3466bb658d7d4ff5bc5fd":"FnCall",
"0c1a9537d33148388015163fc90329b3":"MatchList",
"10d9c2de82a14d12bd545133bd4e15f8":"MatchString",
"1104a6a7ec934b48a4f1db64dcd27000":"_label",
"1659fb73179a4fd8abfc99b95d9f5560":"bind",
"172d3a0762114a328cbf1339fd2dd484":"nameStart",
"1868228966e84ad698de9ff7fe063861":"space",
"18d86dcee79847818139f3dd7dc38d8a":"astSeq",
"193b6786b4574a48b5e75f649420b08d":"pos",
"195e7fa2b75a40baa69b0bbf57a53150":"parser_py",
"19791660815a43e1b775ea6a29349648":"astListItem",
"1e277b5550594e67a25fd80dc917ed21":"_dump_memo",
"1f94d55a48c14180b2992433d29ace85":"next_object",
"22163f4ee0fd4e68b2c95f94e111dee1":"dedent",
"229c153579734cffaa700c7e26bcd7f4":"_builder",
"2420b6bcf2374252a533688aa0b33b5f":"astList",
"2508a37fdce84b31a7e6093a98c57506":"BuildCharsec",
"25ec6fc64b8b4a39a9df41daa690386f":"MatchAny",
"26534c61b2d94990abb37ceeeb648e4f":"_ors",
"289a3db9c53e420da4dbdbc94a32aadf":"_vars",
"28ffce2da5724d248fa88ac555d118f8":"asListItemWithNewVars",
"291ec286c3ed4879b024d7df5db5fdde":"Parser",
"2a00f6add9e9443ab98af74a6da8b379":"run",
"2aa377816ed3486da72cff7bd46190ad":"Grammar",
"2c430882d5af40168a69e1b4b9eb7e0d":"_or",
"2e8a56ad01dc4a289fbd584bc4874e7e":"create",
"2ea1b512b7444d8ab077edeba233a4f3":"codegenerator_py",
"2f6729bf45e84649b3187f8016c3fec9":"_advance",
"301f08856bf54373bc5975f75a315105":"String",
"32f243f8879e4c38a5bfbd61623937d2":"_MatchError",
"331ec96e6c01440198c9134d85336b9b":"_Memo",
"373f023f0f5f4744a7b309cf9a76d138":"SemanticAction",
"3a76a9617ce44d7eb1609bbff707013e":"codegenerator_py",
"3b1db94c1404473c9afd3d95c8fb91bd":"_memo",
"3e7232e282f642ab8ac4fbe709a32a99":"_result",
"3f3db8526d034826bb4d672abcc6029c":"calculator_py",
"41435c2c862f40c1858cd2acd0b4f0bd":"Anonymous",
"42f0b42533be4f7eb54c04f22a137669":"grammar",
"43cd203f934f45c4be5ce3906b60ca5d":"_label",
"4852ced8038c4074a5a8104b8596e0e0":"MatchRule",
"48c8e22a1f1f441e8680e6bcc9810d9a":"ast",
"49ba1aa1e24e408ba2b32bff68a72840":"List",
"49dc22ba19624755a18a13a9e76734b1":"_Builder",
"4ad80c8d1d814fefa2656595f1d841c6":"is_at_end",
"4c38cde583ac42ea8c7b9295a92e26f2":"_Output",
"4e5409ddd4a34450b3c8b4cb8bc5dd60":"escape",
"4e78a4bc50f744bb959c72b5918d9d32":"no_action",
"50ee7994db484890abbeeb13330e22a7":"_AtomBuilder",
"51046a6353b3472f8fe355d7f481eea9":"_b277e0c5612d4697bf8f8237494f8474",
"51620e4ed6bb4e359d4f6be5587dd423":"_Pos",
"53acf505e0ee41de85c674e211ecd39c":"_match_range",
"5440b88cecfb4dafad63f0f7887b82ce":"_match_charseq",
"56c85a8b77424f849f2a1b604066439e":"_or",
"56d10f7bfcfd43bb996c3f76423b067b":"build_string",
"596495d8d3c041d190a3330d1707203c":"describe",
"59d465325dd74411b347002179ecda0a":"_last_match",
"5b5e4143fac64a7ba4fc1e5211b1d5f1":"fail",
"5b90ab050b7547de847cab210d087685":"support_py",
"5bad22de76f845a68dd802dcb830efcc":"wrapFn",
"5c352d6f3e54444cad73e2891e76e29a":"next_input",
"5cb361e64daa4aea9637f5b3fd6b91f0":"action",
"60d7dacf2a2b4336b0329665c2026cc0":"Star",
"622901123a0747d09cd41c9850f75b72":"092fb427436241669092a2244dc64c33_py",
"6230f0917e9f4954add45c5e39a557e0":"sequence",
"630b364d3e7345c098bc8cff819f4d99":"Or",
"6352455a9a4f44c984b2c210151858a2":"support_py",
"63d39eb3401840e681f80ff11203b175":"action",
"63e215a62fb74cebb9c2939e751e326f":"start",
"653fc20558a64badb437b07f3d1c8490":"nested",
"6544a37a96ce4294ab4553709d89f398":"_RLMeta",
"680e8a08749245bc9bbc232417da1d39":"choice",
"6860db9e40994ebfbe04834b4f12f721":"MatchRange",
"6a519019bfac49598dc36620b5b58811":"Bind",
"6b1fe389a7254359b3fbe4cb26ea084e":"nameChar",
"6de4b0de9db3465b89ec2278c5c557a8":"from_object",
"70c457e3514948bcb6c00b67e5a180a2":"_star",
"736cd2768dcd4843b43aca56bea200d3":"MatchNothing",
"739c23d655494bd8a8b9f16e3bd03a52":"wrapInAnd",
"747c1862acef4f499e2a7f16cbdd472a":"describe",
"793e09d183c5498fa2587841cd94c126":"char",
"7b75cb86cab34645b43d69d790e6e206":"DedentBuilder",
"7befab3d0c5747d687b20830147a70fa":"nameStart",
"7d667137ca2f4350969bcf2044d677de":"choice",
"7d82aaa0f3d34c059532d7a090654ab7":"string",
"7d8a78dfe90743759bdd25cf45506815":"_IndentBuilder",
"7ea6f6977ca24c218e28cd96b1cf8267":"_negative_lookahead",
"7f941dd526284ccc8143dbbc8ae8df3b":"sequence",
"826871508bad4fecb6e575779218874d":"_match_rule",
"83ce9666a26449cd9936798594c99e3f":"rlmeta_compiler",
"846fccf81eca4ab48a284407a1647eaa":"_vars",
"85139f1436944deab62958b8a713d8aa":"eval",
"85ee4a0a694641c3aa683a15e6a0ba5d":"astItems",
"87bf33a4869b4d30944c4dd4388631a8":"statement",
"87debc7f453a48eab28b89389b5474a3":"charClass",
"8a8e32dcfa5545f7aa292dd7e696030a":"name",
"8a9e9ea4c4474b40934bd2ec52902c82":"",
"8b98e38b093140fc956b35f6cbf5018e":"ast",
"8c4b9e8c90ff4aa08d4840f8c1560522":"_match",
"8cb500cdd43d41a78158c645da945c70":"indent",
"8cf9a10b04cc48a484e1cb7c6f1f2f28":"CodeGenerator",
"8d17eff4871e411793cf0daf3a2ab204":"And",
"8d8408b72eb3446ab5493dad2c80477e":"lower",
"8f0ac7afdb164a6cb5287e9382330e91":"nothing",
"8ff0b4980efa4e349ec5ef14815be6ec":"MatchCharseq",
"91983a8c8ff04389a1c21c67abcebf46":"wrapInFn",
"938897d17c5542788155a92d7eddb73c":"_log",
"94dd8ae9174644c2bb5e32d35f601486":"astSeqItem",
"98e8edb80565419e93902ec6ebc5b352":"choice",
"99f12ae30d1a42989f875222b33832ba":"support",
"9b21a7a4087848ba8f2ada071a294d73":"_match_list",
"a304a36f0ab541209c9e8aa78f4edc46":"Parser",
"a4f50e79518843e985eb9545a235ae89":"_Vars",
"a5837c091631449aadeeaa004ae71b0b":"write",
"a5d8a6b567934dd6a53cb34b2a18d30c":"_last_match",
"a864d6cb43244a1ca536085dd92431af":"charseq",
"aa94c870055a417b852e05100fb546c0":"BuildDedent",
"ab4302beae5a4a689557c13e8d37179d":"Calculator",
"ab9490a5e7ba4561b96b04f481a9e57e":"_match_string",
"ae2f859206d741eca9f5e10495cb8095":"buildExpr",
"ae823ab23224415f9a539b0354f311b8":"VarLookup",
"af5dbdd6e27c451398b2b116b5ff42d3":"write",
"b058347d19484740b7e2dec4816c0978":"_ObjectStream",
"b062e0322e284160bf26034e9de32446":"memo_key",
"b09ffc5c602a482982cec2726c306ace":"withNewVars",
"b2115b3eeaa143068958949787f5d104":"next",
"b277e0c5612d4697bf8f8237494f8474":"_ListBuilder",
"b3480703b376431588d58149f19c7a13":"_star",
"b4b8cb5f4cdd4dc68ecc9ca100d1da5a":"_Stream",
"b6663a67104042fe8ee0bcb72896f366":"BuildNewline",
"b845c4cee1734619991d56de83dce37d":"Scope",
"bc27a67cb10b4650a32bfe7af84c5060":"Not",
"bd6daaaf4f8a47a1991da45be10921c3":"expr2",
"be57e79c16d8421fad091ec048a56211":"RetStringBuild",
"bf29f97b4f354ee5a3ac3d9346be1e52":"parser_py",
"bfaedafcea7445e7b7ed19c9abb47736":"_DedentBuilder",
"c590c92167d34fe4bfdbb084c03834c1":"_and",
"c76075de5ae9496f9ef5b3c800111ead":"_match_any",
"c8edc6f14d27480e9f737a7697f07f07":"rule",
"c9ecfed5791644a3b7ea2122d4ed87c9":"Builder",
"cbbcd925bc2c42b9add24aaa736f4d35":"_SemanticAction",
"cc14e6fceec9478c8fdb4ac3a58dbf7a":"digit",
"ccb3f676f6314d788147dc603933cd28":"astItem",
"cf4267183a3b4175801c67496a385af6":"_stream",
"cf8770da147840679077788180e10778":"ListItemSplice",
"d09ab0856aa0453385e2158fad4dde9c":"support_py_string",
"d34e449a8ca740d0a4b84921fc05b25f":"IndentBuilder",
"d6ed0f3ac9e84f60bae25485ddb2f97e":"_CharStream",
"db7a0c597eb84fc1b38a59b22f01eeef":"nest",
"dc3d22a8b70043628b058ffd00659a5d":"BuildIndent",
"dd463f369f79475da606b1cfc2d96076":"hostExpr",
"de27a24b43ba4b2aa9b2bebd86e442b2":"_log",
"de5ba4ce4509433c946eacf356d7cfaa":"class:x ",
"de83a3a772234966ac566909fdfb0789":"file",
"df25061bb4004aa693b603f0a8ec2af2":"_MatchError",
"dfcaa421bd764cce9d99219c61883a45":"expr",
"e1248cbd01c54a1680793b61e7a048e1":"innerChar",
"e22e419d7c4845389694467bfa395529":"_f49eae10880e4186a37c021e34aea403",
"e22fa3c5d4144197906cbb74af6cc83e":"Rule",
"e45d3bc7fadf4cc1bd02843c87f0d034":"original_stream",
"e521dea02b37474cb05f03e800132aa2":"_last",
"e86cf4c2ab6c4d45948e33529e447036":"describe",
"ea57b40b324c4c03b030c78e924ed860":"lookup",
"ec2b7e954fe24f329250bd22c70538e4":"_Vars",
"ee43fa1a15be4277b8bdd277451eb04d":"_and",
"efa7dd37aa9e46908ed34f8d31cd476d":"Or",
"f49eae10880e4186a37c021e34aea403":"_ands",
"f8026a10c5b64e46bfde32e671e4760e":"_7ea6f6977ca24c218e28cd96b1cf8267",
"f8b8599256e946a08d2325d52bf8e10b":"BuildVar",
"f978010a00194df8a0ce393bb6ff677a":"CodeGenerator",
"fdd8dd7ed7f54cc487c14cc791d637e2":"wrapInOr",
"fe84c1eea3fc4476bbcb1c717c92d43b":"hostExprListItem",
"ff0229c63d8a4b4897faed8c38201de3":"astFnBody",
"ff9ae871d46e43eca6fe9d752dfb7afc":"pexpr"
}
}