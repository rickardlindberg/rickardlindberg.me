{
"root_page":{
"children":[
{
"children":[],
"id":"3f00cf52d91a411d941312539a15cc32",
"paragraphs":[
{
"fragments":[
{
"text":"Metalanguages are used to reason about languages. In metalanguages you can make statements about statements in a language.",
"type":"text"
}
],
"id":"a2abcd021060438bb2f874491199987f",
"type":"text"
},
{
"fragments":[
{
"text":"The metalanguage I've developed is called RLMeta. It is inspired by a metalanguage from the sixties called META II. I wanted to develop my own version of META II to understand it deeply. RLMeta is also inspired by OMeta (another META II derivative).",
"type":"text"
}
],
"id":"62f5e2bf63754a13ba84482280f425dd",
"type":"text"
},
{
"fragments":[
{
"text":"RLMeta is a programming language in which you write grammars. Grammars have rules that specify how to match objects from an input stream and specify what should happen when objects are matched. The RLMeta compiler translates grammars into programs that recognize the objects specified in the grammar and performs the corresponding actions when the objects are matched.",
"type":"text"
}
],
"id":"76b13838f4044ae4b278190f639de8fa",
"type":"text"
},
{
"fragments":[
{
"text":"Overview of RLMeta compiler.",
"type":"text"
}
],
"id":"93f918b4e1e7472a8b1077399152b7ec",
"image_base64":"",
"type":"image"
}
],
"title":"Metalanguages"
},
{
"children":[],
"id":"ee16dcaf86a7402e9ca78edc620caacb",
"paragraphs":[
{
"fragments":[
{
"text":"How can RLMeta be used to give meaning to arithmetic expressions of the kind presented in the introductory example? Here is a grammar:",
"type":"text"
}
],
"id":"b790e79756a14087b27d48a73fed0c4e",
"type":"text"
},
{
"chunkpath":[],
"filepath":[
"calculator",
"calculator.rlmeta"
],
"fragments":[
{
"id":"ab4302beae5a4a689557c13e8d37179d",
"type":"variable"
},
{
"text":" {\n  expression =\n    | additive\n  additive =\n    | multitive:x '+' additive:y ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> add(x y)\n    | multitive\n  multitive =\n    | digit:x '*' multitive:y ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> mul(x y)\n    | digit\n  digit =\n    | '0'-'9':x ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> int(x)\n}\n",
"type":"code"
}
],
"id":"b54646c61b3f4216929bc173be5f6430",
"type":"code"
},
{
"fragments":[
{
"text":"This grammar is called ",
"type":"text"
},
{
"id":"ab4302beae5a4a689557c13e8d37179d",
"type":"variable"
},
{
"text":". It has four rules. The first rule says that an expression is an additive. The second rule says that an additive is either a multitive followed by the character '+' followed by another additive or just a multitive. The third rule says that a multitive is either a digit followed by the character '*' followed by another multitive or just a digit. The fourth rule says that a digit is a character in the range 0-9. The expressions to the right of ",
"type":"text"
},
{
"text":"->",
"type":"code"
},
{
"text":" are semantic actions. They specify what should happen on a match. In this grammar they say that whenever an additive is matched, call the host language function ",
"type":"text"
},
{
"text":"add",
"type":"code"
},
{
"text":" with the left and right side, and whenever a multitive is matched, call the host language function ",
"type":"text"
},
{
"text":"mul",
"type":"code"
},
{
"text":" with the left and right side, and whenever a digit is matched, call the host language function ",
"type":"text"
},
{
"text":"int",
"type":"code"
},
{
"text":". The host language function ",
"type":"text"
},
{
"text":"int",
"type":"code"
},
{
"text":" converts a digit character to an integer and the ",
"type":"text"
},
{
"text":"add",
"type":"code"
},
{
"text":" and ",
"type":"text"
},
{
"text":"mul",
"type":"code"
},
{
"text":" functions perform addition and multiplication.",
"type":"text"
}
],
"id":"f02eaf34f684451a842b6d275b1361f4",
"type":"text"
},
{
"fragments":[
{
"text":"This grammar describes how to recognize arithmetic expressions in a sequence of characters. Presedence is encoded by the order of the rules. An additive is ",
"type":"text"
},
{
"text":"x1 + x2 + x3 + ..",
"type":"code"
},
{
"text":" where the xes are multitives. Therefore multiplication is performed before addition. It gives meaning to the expressions by calling host language functions when expressions are matched.",
"type":"text"
}
],
"id":"fafee421e91242a49198fe91304ef148",
"type":"text"
},
{
"fragments":[
{
"text":"When the calculator grammar is fed to the RLMeta compiler, a program is output that is an interpreter for arithmetic expressions.",
"type":"text"
}
],
"id":"63a18e34ac1c4a7fba249b421fd031df",
"type":"text"
},
{
"fragments":[
{
"text":"Overview of calculator compilation.",
"type":"text"
}
],
"id":"b87e6570816a4e75a51c9dcb035fc2fb",
"image_base64":"",
"type":"image"
},
{
"fragments":[
{
"text":"More specifically, this program is a Python class. The class depends on a support library and also on the host language functions that were called in the grammar (",
"type":"text"
},
{
"text":"add",
"type":"code"
},
{
"text":", ",
"type":"text"
},
{
"text":"mul",
"type":"code"
},
{
"text":", and ",
"type":"text"
},
{
"text":"int",
"type":"code"
},
{
"text":"). The pieces must be assembled to form an executable program. Here is a template for the final Python file that implements a read-eval-print loop (REPL) for arithmetic expressions:",
"type":"text"
}
],
"id":"186ed1d9c38546ef9ba79650ac0fc56c",
"type":"text"
},
{
"chunkpath":[
"python file template"
],
"filepath":[
"calculator",
"compile.sh"
],
"fragments":[
{
"text":"from operator import add, mul\n\n$",
"type":"code"
},
{
"id":"5b90ab050b7547de847cab210d087685",
"type":"variable"
},
{
"text":"\n\n$",
"type":"code"
},
{
"id":"3f3db8526d034826bb4d672abcc6029c",
"type":"variable"
},
{
"text":"\n\nif __name__ == \"__main__\":\n    calculator = Calculator()\n    while True:\n        line = raw_input(\"> \")\n        print(calculator.run(\"expression\", line))\n",
"type":"code"
}
],
"id":"06fd6fc7c27940cda1755a1aec2fa358",
"type":"code"
},
{
"fragments":[
{
"text":"First the host language functions are imported. Then the support library and the compiled calculator grammar snippets are inserted. And finally a REPL is implemented. Compiled grammars are instatiated and their ",
"type":"text"
},
{
"text":"run",
"type":"code"
},
{
"text":" method is called with the name of the rule and the input object. This template is realized with a Bash script:",
"type":"text"
}
],
"id":"99d6cd9644464dd481feba65b559921c",
"type":"text"
},
{
"chunkpath":[],
"filepath":[
"calculator",
"compile.sh"
],
"fragments":[
{
"text":"#!/bin/bash\n\nset -e\n\ncd \"$(dirname \"$0\")\"\n\n",
"type":"code"
},
{
"id":"5b90ab050b7547de847cab210d087685",
"type":"variable"
},
{
"text":"=$(python ../rlmeta/rlmeta.py --support)\n",
"type":"code"
},
{
"id":"3f3db8526d034826bb4d672abcc6029c",
"type":"variable"
},
{
"text":"=$(python ../rlmeta/rlmeta.py < calculator.rlmeta)\n\ncat <<EOF\n",
"type":"code"
},
{
"blank_lines_before":0,
"path":[
"python file template"
],
"prefix":"",
"type":"chunk"
},
{
"text":"EOF\n",
"type":"code"
}
],
"id":"1c648bdb39f54ee7ad86680530851375",
"type":"code"
},
{
"fragments":[
{
"text":"The RLMeta compiler (",
"type":"text"
},
{
"text":"rlmeta.py",
"type":"code"
},
{
"text":") reads grammars from stdin and outputs the result on stdout. If ",
"type":"text"
},
{
"text":"--support",
"type":"code"
},
{
"text":" flag is given, it outputs the support library on stdout.",
"type":"text"
}
],
"id":"0064699c33fe4c3cb6c59682d86c62b3",
"type":"text"
},
{
"fragments":[
{
"text":"Example usage on the command line:",
"type":"text"
}
],
"id":"ec28001fbeda4bcca184b932f518b619",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"$ python <(./calculator/compile.sh)\n> 1+2*3\n7\n",
"type":"code"
}
],
"id":"46d623c62dc74aa981d97d3abc9b8848",
"type":"code"
}
],
"title":"Interpreting expressions"
},
{
"children":[],
"id":"61e10d1de6624255a4406572fef4b413",
"paragraphs":[
{
"fragments":[
{
"text":"The previous example relied on host language functions to perform addition and multiplication. The meaning of expressions were defined in terms of the meaning of Python functions. To understand what expressions mean, you need to understand how Python implements those functions. The next example compiles expressions down to a kind of assembly language that eliminates the need for Python.",
"type":"text"
}
],
"id":"67a983c01275458e9486c7aa01558e3b",
"type":"text"
},
{
"fragments":[
{
"text":"For this compilation, two grammars are written: a parser and a code generator. The parser matches exactly the same input expressions as the calculator grammar but instead of evaluating expressions, it creates an abstract syntax tree (AST) describing expressions. Nodes in the AST are represented as lists where the first item is a string denoting the type of node.",
"type":"text"
}
],
"id":"f6391e9182fc488aa01ce25f3fe09488",
"type":"text"
},
{
"chunkpath":[],
"filepath":[
"expression",
"parser.rlmeta"
],
"fragments":[
{
"id":"291ec286c3ed4879b024d7df5db5fdde",
"type":"variable"
},
{
"text":" {\n  expression =\n    | additive\n  additive =\n    | multitive:x '+' additive:y ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"add\" x y]\n    | multitive\n  multitive =\n    | digit:x '*' multitive:y ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"mul\" x y]\n    | digit\n  digit =\n    | '0'-'9':x ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"digit\" x]\n}\n",
"type":"code"
}
],
"id":"1c33d785a57347d099fb28e74887c1fa",
"type":"code"
},
{
"fragments":[
{
"text":"The code generator takes as input the AST from the parser and generates assembly language code for an imaginary stack machine.",
"type":"text"
}
],
"id":"7fedf9682c9c4bc78b63a9cbbffc3868",
"type":"text"
},
{
"chunkpath":[],
"filepath":[
"expression",
"codegenerator.rlmeta"
],
"fragments":[
{
"id":"f978010a00194df8a0ce393bb6ff677a",
"type":"variable"
},
{
"text":" {\n  ast =\n    | [\"add\" ast:x ast:y] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { x y \"add\\n\" }\n    | [\"mul\" ast:x ast:y] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { x y \"mul\\n\" }\n    | [\"digit\" .:x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { \"push \" x \"\\n\" }\n}\n",
"type":"code"
}
],
"id":"48b8273f5d79429b9a10007fec2da2b3",
"type":"code"
},
{
"fragments":[
{
"text":"This grammar has only one rule. It says that an ast is either a list that starts with the string 'add', or a list that starts with the string 'mul', or a list that starts with the string 'digit'. The add and mul cases recursively matches ast nodes as their left and right side whereas the digit matches anything (",
"type":"text"
},
{
"text":".",
"type":"code"
},
{
"text":") which is the digit. The semantic actions in this grammar generate string output denoted by the curly braces. When a digit node is matched, the string 'push [digit]\\n' is generated. It instructs the stack machine to push the given digit to the stack. For add and mul, instructions for the operands are first output followed by 'add\\n' or 'mul\\n' instructions. They instruct the stack machine to pop two numbers from the stack, add or multiply them, and push the result.",
"type":"text"
}
],
"id":"1872b7e904f047e980db91ec2920eda9",
"type":"text"
},
{
"fragments":[
{
"text":"Overview of expression compilation.",
"type":"text"
}
],
"id":"21385bc01a9c424681961e5fce11efca",
"image_base64":"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",
"type":"image"
},
{
"fragments":[
{
"text":"Here is a template for the final Python file that implements a REPL for arithmetic expression compilation:",
"type":"text"
}
],
"id":"418e9b716a6b49b5b850d5f3cdb45499",
"type":"text"
},
{
"chunkpath":[
"python file template"
],
"filepath":[
"expression",
"compile.sh"
],
"fragments":[
{
"text":"import sys\n\n$",
"type":"code"
},
{
"id":"5b90ab050b7547de847cab210d087685",
"type":"variable"
},
{
"text":"\n\n$",
"type":"code"
},
{
"id":"bf29f97b4f354ee5a3ac3d9346be1e52",
"type":"variable"
},
{
"text":"\n\n$",
"type":"code"
},
{
"id":"3a76a9617ce44d7eb1609bbff707013e",
"type":"variable"
},
{
"text":"\n\nif __name__ == \"__main__\":\n    parser = ",
"type":"code"
},
{
"id":"291ec286c3ed4879b024d7df5db5fdde",
"type":"variable"
},
{
"text":"()\n    codegenerator = ",
"type":"code"
},
{
"id":"f978010a00194df8a0ce393bb6ff677a",
"type":"variable"
},
{
"text":"()\n    while True:\n        line = raw_input(\"> \")\n        ast = parser.run(\"expression\", line)\n        assembly = codegenerator.run(\"ast\", ast)\n        sys.stdout.write(assembly)\n",
"type":"code"
}
],
"id":"a3e4e452d8a149f69101fc8a7ed23020",
"type":"code"
},
{
"fragments":[
{
"text":"This template is realized with a Bash script:",
"type":"text"
}
],
"id":"6cd78bcb58f44f7298daf17b1f21b985",
"type":"text"
},
{
"chunkpath":[],
"filepath":[
"expression",
"compile.sh"
],
"fragments":[
{
"text":"#!/bin/bash\n\nset -e\n\ncd \"$(dirname \"$0\")\"\n\n",
"type":"code"
},
{
"id":"5b90ab050b7547de847cab210d087685",
"type":"variable"
},
{
"text":"=$(python ../rlmeta/rlmeta.py --support)\n",
"type":"code"
},
{
"id":"bf29f97b4f354ee5a3ac3d9346be1e52",
"type":"variable"
},
{
"text":"=$(python ../rlmeta/rlmeta.py < parser.rlmeta)\n",
"type":"code"
},
{
"id":"3a76a9617ce44d7eb1609bbff707013e",
"type":"variable"
},
{
"text":"=$(python ../rlmeta/rlmeta.py < codegenerator.rlmeta)\n\ncat <<EOF\n",
"type":"code"
},
{
"blank_lines_before":0,
"path":[
"python file template"
],
"prefix":"",
"type":"chunk"
},
{
"text":"EOF\n",
"type":"code"
}
],
"id":"3ef9e2fe1c5d49fb8efd3b30641f8189",
"type":"code"
},
{
"fragments":[
{
"text":"Example usage on the command line:",
"type":"text"
}
],
"id":"7668140579554f10946c0aa94ae7b616",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"$ python <(./expression/compile.sh)\n> 1+2*3\npush 1\npush 2\npush 3\nmul\nadd\n> 1*2+3\npush 1\npush 2\nmul\npush 3\nadd\n",
"type":"code"
}
],
"id":"c4b0637463164b6681f2d71a50ed9dd8",
"type":"code"
},
{
"fragments":[
{
"text":"This assembly language code for an imaginary stack machine is much closer to CPU instructions than the Python-based interpreter. A grammar could be written to convert these assembly instructions to assembly instructions of real CPU. But I leave that excersise to you. The point is that that the meaning of an expression can be described by a series of transformations that eventually output machine instructions.",
"type":"text"
}
],
"id":"4e9215a9b94d468a82d0f88f6f92d71a",
"type":"text"
}
],
"title":"Compiling expressions"
},
{
"children":[
{
"children":[
{
"children":[],
"id":"a757df1ad1764cc996d9d3e0a0ce4d25",
"paragraphs":[
{
"fragments":[
{
"text":"The top level syntactic elements are grammars. Grammars have a ",
"type":"text"
},
{
"page_id":"19acecc9fbc44023a69cea9eadbe734d",
"text":null,
"type":"reference"
},
{
"text":" and a set of ",
"type":"text"
},
{
"page_id":"e1799ddc14ce4a7f83c8f390f9bf8720",
"text":null,
"type":"reference"
},
{
"text":" enclosed in curly braces. ",
"type":"text"
},
{
"page_id":"d729731e037a4a5aafa6da77d2b8bdb1",
"text":null,
"type":"reference"
},
{
"text":" is ignored. When such a sequence is matched a ",
"type":"text"
},
{
"id":"2aa377816ed3486da72cff7bd46190ad",
"type":"variable"
},
{
"text":" AST node is created containing the name of the grammar and the list of ",
"type":"text"
},
{
"page_id":"e1799ddc14ce4a7f83c8f390f9bf8720",
"text":null,
"type":"reference"
},
{
"text":" AST nodes:",
"type":"text"
}
],
"id":"8de82ec3c0f34c94af9bfc418229357e",
"type":"text"
},
{
"chunkpath":[
"rules"
],
"filepath":[
"rlmeta",
"parser.rlmeta"
],
"fragments":[
{
"id":"42f0b42533be4f7eb54c04f22a137669",
"type":"variable"
},
{
"text":" =\n  | ",
"type":"code"
},
{
"id":"8a8e32dcfa5545f7aa292dd7e696030a",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '{' ",
"type":"code"
},
{
"id":"c8edc6f14d27480e9f737a7697f07f07",
"type":"variable"
},
{
"text":"*:ys ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '}' ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"2aa377816ed3486da72cff7bd46190ad",
"type":"variable"
},
{
"text":"\" x ~ys]\n",
"type":"code"
}
],
"id":"41afd1b3bc8749a2bdefb2a09eb54f62",
"type":"code"
}
],
"title":"Grammar"
},
{
"children":[],
"id":"e1799ddc14ce4a7f83c8f390f9bf8720",
"paragraphs":[
{
"fragments":[
{
"text":"Inside grammars are rules. Rules have a ",
"type":"text"
},
{
"page_id":"19acecc9fbc44023a69cea9eadbe734d",
"text":null,
"type":"reference"
},
{
"text":" followed by the equal sign followed by ",
"type":"text"
},
{
"page_id":"c2a43ebb9a7d477f8dd7126f94bd33de",
"text":null,
"type":"reference"
},
{
"text":". ",
"type":"text"
},
{
"page_id":"d729731e037a4a5aafa6da77d2b8bdb1",
"text":null,
"type":"reference"
},
{
"text":" is ignored. When such a sequence is found a ",
"type":"text"
},
{
"id":"e22fa3c5d4144197906cbb74af6cc83e",
"type":"variable"
},
{
"text":" AST node is created:",
"type":"text"
}
],
"id":"5e9600e66ce74fa18b69b96917889a6f",
"type":"text"
},
{
"chunkpath":[
"rules"
],
"filepath":[
"rlmeta",
"parser.rlmeta"
],
"fragments":[
{
"id":"c8edc6f14d27480e9f737a7697f07f07",
"type":"variable"
},
{
"text":" =\n  | ",
"type":"code"
},
{
"id":"8a8e32dcfa5545f7aa292dd7e696030a",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '=' ",
"type":"code"
},
{
"id":"7d667137ca2f4350969bcf2044d677de",
"type":"variable"
},
{
"text":":y ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"e22fa3c5d4144197906cbb74af6cc83e",
"type":"variable"
},
{
"text":"\" x y]\n",
"type":"code"
}
],
"id":"f24d0daa1d1c4ddeb6b111c45aa31102",
"type":"code"
}
],
"title":"Rule"
},
{
"children":[],
"id":"c2a43ebb9a7d477f8dd7126f94bd33de",
"paragraphs":[
{
"fragments":[
{
"text":"Inside rules are choices. Choices has a set of ",
"type":"text"
},
{
"page_id":"08818eb200d0482f8feb9104e1ae2ea7",
"text":null,
"type":"reference"
},
{
"text":" separated by a pipe character. Optionally the first choice can start with a pipe character to allow all choice lines to look the same. ",
"type":"text"
},
{
"page_id":"d729731e037a4a5aafa6da77d2b8bdb1",
"text":null,
"type":"reference"
},
{
"text":" is ignored. When such a sequence is found an ",
"type":"text"
},
{
"id":"efa7dd37aa9e46908ed34f8d31cd476d",
"type":"variable"
},
{
"text":" AST node is created:",
"type":"text"
}
],
"id":"77e39db8bc6944b8afb793e3fcf28e88",
"type":"text"
},
{
"chunkpath":[
"rules"
],
"filepath":[
"rlmeta",
"parser.rlmeta"
],
"fragments":[
{
"id":"7d667137ca2f4350969bcf2044d677de",
"type":"variable"
},
{
"text":" =\n  | (",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '|')?\n    ",
"type":"code"
},
{
"id":"7f941dd526284ccc8143dbbc8ae8df3b",
"type":"variable"
},
{
"text":":x (",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '|' ",
"type":"code"
},
{
"id":"7f941dd526284ccc8143dbbc8ae8df3b",
"type":"variable"
},
{
"text":")*:xs ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"efa7dd37aa9e46908ed34f8d31cd476d",
"type":"variable"
},
{
"text":"\" x ~xs]\n",
"type":"code"
}
],
"id":"5548c68fed5947a891639cab8086cba5",
"type":"code"
}
],
"title":"Choices"
},
{
"children":[],
"id":"08818eb200d0482f8feb9104e1ae2ea7",
"paragraphs":[
{
"fragments":[
{
"text":"A sequence has one or more ",
"type":"text"
},
{
"page_id":"5fca8ddb3f88457bbe5217fa1ebf4383",
"text":null,
"type":"reference"
},
{
"text":". When such a sequence is found an ",
"type":"text"
},
{
"id":"8d17eff4871e411793cf0daf3a2ab204",
"type":"variable"
},
{
"text":" AST node is created wrapped in a ",
"type":"text"
},
{
"id":"b845c4cee1734619991d56de83dce37d",
"type":"variable"
},
{
"text":" AST node:",
"type":"text"
}
],
"id":"a9761a1483114aebbdab2d94006de2cf",
"type":"text"
},
{
"chunkpath":[
"rules"
],
"filepath":[
"rlmeta",
"parser.rlmeta"
],
"fragments":[
{
"id":"7f941dd526284ccc8143dbbc8ae8df3b",
"type":"variable"
},
{
"text":" =\n  | ",
"type":"code"
},
{
"id":"dfcaa421bd764cce9d99219c61883a45",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"id":"dfcaa421bd764cce9d99219c61883a45",
"type":"variable"
},
{
"text":"*:xs ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"b845c4cee1734619991d56de83dce37d",
"type":"variable"
},
{
"text":"\" [\"",
"type":"code"
},
{
"id":"8d17eff4871e411793cf0daf3a2ab204",
"type":"variable"
},
{
"text":"\" x ~xs]]\n",
"type":"code"
}
],
"id":"a00b4131f7794b6cb496a4e8249dc9d2",
"type":"code"
}
],
"title":"Sequence"
},
{
"children":[],
"id":"5fca8ddb3f88457bbe5217fa1ebf4383",
"paragraphs":[
{
"chunkpath":[
"rules"
],
"filepath":[
"rlmeta",
"parser.rlmeta"
],
"fragments":[
{
"id":"dfcaa421bd764cce9d99219c61883a45",
"type":"variable"
},
{
"text":" =\n",
"type":"code"
},
{
"blank_lines_before":0,
"path":[
"expr"
],
"prefix":"  ",
"type":"chunk"
},
{
"text":"  | ",
"type":"code"
},
{
"id":"0449532c17204462b4b4681b07ac12b5",
"type":"variable"
},
{
"text":"\n",
"type":"code"
}
],
"id":"f1365e28cce74941892cdaa24ba6d2ad",
"type":"code"
},
{
"chunkpath":[
"rules",
"expr"
],
"filepath":[
"rlmeta",
"parser.rlmeta"
],
"fragments":[
{
"text":"| ",
"type":"code"
},
{
"id":"0449532c17204462b4b4681b07ac12b5",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" ':' ",
"type":"code"
},
{
"id":"8a8e32dcfa5545f7aa292dd7e696030a",
"type":"variable"
},
{
"text":":y ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"6a519019bfac49598dc36620b5b58811",
"type":"variable"
},
{
"text":"\" y x]\n",
"type":"code"
}
],
"id":"e2bbebd2652749d69135a786b213433c",
"type":"code"
}
],
"title":"Expression"
},
{
"children":[],
"id":"cdeac4c7bcb84261a3d194c1183c9dd7",
"paragraphs":[
{
"chunkpath":[
"rules"
],
"filepath":[
"rlmeta",
"parser.rlmeta"
],
"fragments":[
{
"id":"0449532c17204462b4b4681b07ac12b5",
"type":"variable"
},
{
"text":" =\n",
"type":"code"
},
{
"blank_lines_before":0,
"path":[
"expr1"
],
"prefix":"  ",
"type":"chunk"
},
{
"text":"  | ",
"type":"code"
},
{
"id":"bd6daaaf4f8a47a1991da45be10921c3",
"type":"variable"
},
{
"text":"\n",
"type":"code"
}
],
"id":"101abf29d86c4c4a82e5d95c13318ec9",
"type":"code"
},
{
"chunkpath":[
"rules",
"expr1"
],
"filepath":[
"rlmeta",
"parser.rlmeta"
],
"fragments":[
{
"text":"| ",
"type":"code"
},
{
"id":"bd6daaaf4f8a47a1991da45be10921c3",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '*' ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"60d7dacf2a2b4336b0329665c2026cc0",
"type":"variable"
},
{
"text":"\" x]\n",
"type":"code"
}
],
"id":"0cb52720d8524ebaa24d9853d0fbfa78",
"type":"code"
},
{
"chunkpath":[
"rules",
"expr1"
],
"filepath":[
"rlmeta",
"parser.rlmeta"
],
"fragments":[
{
"text":"| ",
"type":"code"
},
{
"id":"bd6daaaf4f8a47a1991da45be10921c3",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '?' ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"630b364d3e7345c098bc8cff819f4d99",
"type":"variable"
},
{
"text":"\" x [\"",
"type":"code"
},
{
"id":"736cd2768dcd4843b43aca56bea200d3",
"type":"variable"
},
{
"text":"\"]]\n",
"type":"code"
}
],
"id":"11d2b95572e24714ba973c1e7a225282",
"type":"code"
},
{
"chunkpath":[
"rules",
"expr1"
],
"filepath":[
"rlmeta",
"parser.rlmeta"
],
"fragments":[
{
"text":"| ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '!' ",
"type":"code"
},
{
"id":"bd6daaaf4f8a47a1991da45be10921c3",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"bc27a67cb10b4650a32bfe7af84c5060",
"type":"variable"
},
{
"text":"\" x]\n",
"type":"code"
}
],
"id":"e56a131ffdbe4a649a3e11d1e589a76d",
"type":"code"
}
],
"title":"Expression level 1"
},
{
"children":[],
"id":"4e76262e4c9841db8c0b79401ac7a8ff",
"paragraphs":[
{
"chunkpath":[
"rules"
],
"filepath":[
"rlmeta",
"parser.rlmeta"
],
"fragments":[
{
"id":"bd6daaaf4f8a47a1991da45be10921c3",
"type":"variable"
},
{
"text":" =\n",
"type":"code"
},
{
"blank_lines_before":0,
"path":[
"expr2"
],
"prefix":"  ",
"type":"chunk"
}
],
"id":"f05c9406eceb4daab6c376ababdb1679",
"type":"code"
},
{
"chunkpath":[
"rules",
"expr2"
],
"filepath":[
"rlmeta",
"parser.rlmeta"
],
"fragments":[
{
"text":"| ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '->' ",
"type":"code"
},
{
"id":"dd463f369f79475da606b1cfc2d96076",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"373f023f0f5f4744a7b309cf9a76d138",
"type":"variable"
},
{
"text":"\" x]\n",
"type":"code"
}
],
"id":"abbc1c45efe94a719d1fe1ab62ca8a49",
"type":"code"
},
{
"chunkpath":[
"rules",
"expr2"
],
"filepath":[
"rlmeta",
"parser.rlmeta"
],
"fragments":[
{
"text":"| ",
"type":"code"
},
{
"id":"8a8e32dcfa5545f7aa292dd7e696030a",
"type":"variable"
},
{
"text":":x !(",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '=') ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"4852ced8038c4074a5a8104b8596e0e0",
"type":"variable"
},
{
"text":"\" x]\n",
"type":"code"
}
],
"id":"ec59067ab11540bfa013d3856c713db8",
"type":"code"
},
{
"chunkpath":[
"rules",
"expr2"
],
"filepath":[
"rlmeta",
"parser.rlmeta"
],
"fragments":[
{
"text":"| ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"id":"793e09d183c5498fa2587841cd94c126",
"type":"variable"
},
{
"text":":x '-' ",
"type":"code"
},
{
"id":"793e09d183c5498fa2587841cd94c126",
"type":"variable"
},
{
"text":":y ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"6860db9e40994ebfbe04834b4f12f721",
"type":"variable"
},
{
"text":"\" x y]\n",
"type":"code"
}
],
"id":"c450a47241a448689d950257aa817da7",
"type":"code"
},
{
"chunkpath":[
"rules",
"expr2"
],
"filepath":[
"rlmeta",
"parser.rlmeta"
],
"fragments":[
{
"text":"| ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"id":"7d82aaa0f3d34c059532d7a090654ab7",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"10d9c2de82a14d12bd545133bd4e15f8",
"type":"variable"
},
{
"text":"\" x]\n",
"type":"code"
}
],
"id":"2e68adc773b945baa4039acf18cb9408",
"type":"code"
},
{
"chunkpath":[
"rules",
"expr2"
],
"filepath":[
"rlmeta",
"parser.rlmeta"
],
"fragments":[
{
"text":"| ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"id":"a864d6cb43244a1ca536085dd92431af",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"8ff0b4980efa4e349ec5ef14815be6ec",
"type":"variable"
},
{
"text":"\" x]\n",
"type":"code"
}
],
"id":"bda22384f17e40ea8edd13f87f8b9f8c",
"type":"code"
},
{
"chunkpath":[
"rules",
"expr2"
],
"filepath":[
"rlmeta",
"parser.rlmeta"
],
"fragments":[
{
"text":"| ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '.' ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"25ec6fc64b8b4a39a9df41daa690386f",
"type":"variable"
},
{
"text":"\"]\n",
"type":"code"
}
],
"id":"cefd75a91eac4a14bda7f8123c41dd8f",
"type":"code"
},
{
"chunkpath":[
"rules",
"expr2"
],
"filepath":[
"rlmeta",
"parser.rlmeta"
],
"fragments":[
{
"text":"| ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '(' ",
"type":"code"
},
{
"id":"7d667137ca2f4350969bcf2044d677de",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" ')' ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> x\n",
"type":"code"
}
],
"id":"c013d1870d9d4a42bf491400b4d40ef9",
"type":"code"
},
{
"chunkpath":[
"rules",
"expr2"
],
"filepath":[
"rlmeta",
"parser.rlmeta"
],
"fragments":[
{
"text":"| ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '[' ",
"type":"code"
},
{
"id":"dfcaa421bd764cce9d99219c61883a45",
"type":"variable"
},
{
"text":"*:xs ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" ']' ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"0c1a9537d33148388015163fc90329b3",
"type":"variable"
},
{
"text":"\" [\"",
"type":"code"
},
{
"id":"8d17eff4871e411793cf0daf3a2ab204",
"type":"variable"
},
{
"text":"\" ~xs]]\n",
"type":"code"
}
],
"id":"90062785865d4c69bf5b887ef2dc3977",
"type":"code"
}
],
"title":"Expression level 2"
},
{
"children":[],
"id":"768d143c206146ca8efba292c6e9169b",
"paragraphs":[
{
"chunkpath":[
"rules"
],
"filepath":[
"rlmeta",
"parser.rlmeta"
],
"fragments":[
{
"id":"dd463f369f79475da606b1cfc2d96076",
"type":"variable"
},
{
"text":" =\n",
"type":"code"
},
{
"blank_lines_before":0,
"path":[
"hostExpr"
],
"prefix":"  ",
"type":"chunk"
}
],
"id":"f0b031c3724e42c5a0fb9704ef64976d",
"type":"code"
},
{
"chunkpath":[
"rules",
"hostExpr"
],
"filepath":[
"rlmeta",
"parser.rlmeta"
],
"fragments":[
{
"text":"| ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"id":"7d82aaa0f3d34c059532d7a090654ab7",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"301f08856bf54373bc5975f75a315105",
"type":"variable"
},
{
"text":"\" x]\n",
"type":"code"
}
],
"id":"4e8a93fe7e314817be5d38733f388eb0",
"type":"code"
},
{
"fragments":[
{
"text":"Character sequence is just another way to say a string:",
"type":"text"
}
],
"id":"0044d259ce224f5eb078f8b0ac349194",
"type":"text"
},
{
"chunkpath":[
"rules",
"hostExpr"
],
"filepath":[
"rlmeta",
"parser.rlmeta"
],
"fragments":[
{
"text":"| ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"id":"a864d6cb43244a1ca536085dd92431af",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"301f08856bf54373bc5975f75a315105",
"type":"variable"
},
{
"text":"\" x]\n",
"type":"code"
}
],
"id":"2160b0ae8ebd40b48f737d38078bfc4c",
"type":"code"
},
{
"chunkpath":[
"rules",
"hostExpr"
],
"filepath":[
"rlmeta",
"parser.rlmeta"
],
"fragments":[
{
"text":"| ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '[' ",
"type":"code"
},
{
"id":"fe84c1eea3fc4476bbcb1c717c92d43b",
"type":"variable"
},
{
"text":"*:xs ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" ']' ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"49ba1aa1e24e408ba2b32bff68a72840",
"type":"variable"
},
{
"text":"\" ~xs]\n",
"type":"code"
}
],
"id":"cd1e8eee75404c96b632dc01c89fa462",
"type":"code"
},
{
"chunkpath":[
"rules"
],
"filepath":[
"rlmeta",
"parser.rlmeta"
],
"fragments":[
{
"id":"fe84c1eea3fc4476bbcb1c717c92d43b",
"type":"variable"
},
{
"text":" =\n  | ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '~' ",
"type":"code"
},
{
"id":"dd463f369f79475da606b1cfc2d96076",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"cf8770da147840679077788180e10778",
"type":"variable"
},
{
"text":"\" x]\n  | ",
"type":"code"
},
{
"id":"dd463f369f79475da606b1cfc2d96076",
"type":"variable"
},
{
"text":"\n",
"type":"code"
}
],
"id":"f768cf3997814c6285c98edc162e886f",
"type":"code"
},
{
"chunkpath":[
"rules",
"hostExpr"
],
"filepath":[
"rlmeta",
"parser.rlmeta"
],
"fragments":[
{
"text":"| ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '{' ",
"type":"code"
},
{
"id":"ae2f859206d741eca9f5e10495cb8095",
"type":"variable"
},
{
"text":"*:xs ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '}' ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"c9ecfed5791644a3b7ea2122d4ed87c9",
"type":"variable"
},
{
"text":"\" ~xs]\n",
"type":"code"
}
],
"id":"f2c2d41020ba4ad096e1c27393549301",
"type":"code"
},
{
"chunkpath":[
"rules"
],
"filepath":[
"rlmeta",
"parser.rlmeta"
],
"fragments":[
{
"id":"ae2f859206d741eca9f5e10495cb8095",
"type":"variable"
},
{
"text":" =\n  | ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '>' ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"d34e449a8ca740d0a4b84921fc05b25f",
"type":"variable"
},
{
"text":"\"]\n  | ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '<' ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"7b75cb86cab34645b43d69d790e6e206",
"type":"variable"
},
{
"text":"\"]\n  | ",
"type":"code"
},
{
"id":"dd463f369f79475da606b1cfc2d96076",
"type":"variable"
},
{
"text":"\n",
"type":"code"
}
],
"id":"a3c04d0cc65d41c8af8017af890e7ea4",
"type":"code"
},
{
"chunkpath":[
"rules",
"hostExpr"
],
"filepath":[
"rlmeta",
"parser.rlmeta"
],
"fragments":[
{
"text":"| ",
"type":"code"
},
{
"id":"8a8e32dcfa5545f7aa292dd7e696030a",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" '(' ",
"type":"code"
},
{
"id":"dd463f369f79475da606b1cfc2d96076",
"type":"variable"
},
{
"text":"*:ys ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" ')' ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"0a8e6be4bec3466bb658d7d4ff5bc5fd",
"type":"variable"
},
{
"text":"\" x ~ys]\n",
"type":"code"
}
],
"id":"009c0123d4f84ea7bc5b644789e03d58",
"type":"code"
},
{
"chunkpath":[
"rules",
"hostExpr"
],
"filepath":[
"rlmeta",
"parser.rlmeta"
],
"fragments":[
{
"text":"| ",
"type":"code"
},
{
"id":"8a8e32dcfa5545f7aa292dd7e696030a",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> [\"",
"type":"code"
},
{
"id":"ae823ab23224415f9a539b0354f311b8",
"type":"variable"
},
{
"text":"\" x]\n",
"type":"code"
}
],
"id":"e4954a411cdc4eee98faa1985f1de417",
"type":"code"
}
],
"title":"Host expression"
},
{
"children":[],
"id":"2057abb618bf4209950acd87fa49da5d",
"paragraphs":[
{
"chunkpath":[
"rules"
],
"filepath":[
"rlmeta",
"parser.rlmeta"
],
"fragments":[
{
"id":"7d82aaa0f3d34c059532d7a090654ab7",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"index":5,
"type":"tabstop"
},
{
"text":"= '\"'  (!'\"'  ",
"type":"code"
},
{
"id":"e1248cbd01c54a1680793b61e7a048e1",
"type":"variable"
},
{
"text":")*:xs '\"' ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> join(xs)\n",
"type":"code"
}
],
"id":"6b45edfd3ac04273aa9498dfcaa199fa",
"type":"code"
},
{
"chunkpath":[
"rules"
],
"filepath":[
"rlmeta",
"parser.rlmeta"
],
"fragments":[
{
"id":"a864d6cb43244a1ca536085dd92431af",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"index":5,
"type":"tabstop"
},
{
"text":"= '\\'' (!'\\'' ",
"type":"code"
},
{
"id":"e1248cbd01c54a1680793b61e7a048e1",
"type":"variable"
},
{
"text":")*:xs '\\'' ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> join(xs)\n",
"type":"code"
}
],
"id":"b3ea44957e4148ab9ded5e09fbe0fcab",
"type":"code"
},
{
"chunkpath":[
"rules"
],
"filepath":[
"rlmeta",
"parser.rlmeta"
],
"fragments":[
{
"id":"793e09d183c5498fa2587841cd94c126",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"index":5,
"type":"tabstop"
},
{
"text":"= '\\''  !'\\'' ",
"type":"code"
},
{
"id":"e1248cbd01c54a1680793b61e7a048e1",
"type":"variable"
},
{
"text":"  :x  '\\'' ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> join(x)\n",
"type":"code"
}
],
"id":"f33996b91f214a82b9bc2e4a0c75ffff",
"type":"code"
},
{
"chunkpath":[
"rules"
],
"filepath":[
"rlmeta",
"parser.rlmeta"
],
"fragments":[
{
"id":"e1248cbd01c54a1680793b61e7a048e1",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"index":5,
"type":"tabstop"
},
{
"text":"= '\\\\' ",
"type":"code"
},
{
"id":"4e5409ddd4a34450b3c8b4cb8bc5dd60",
"type":"variable"
},
{
"text":" | .\n",
"type":"code"
}
],
"id":"65a3e78796854dcea2b7634d2a67bc4c",
"type":"code"
},
{
"chunkpath":[
"rules"
],
"filepath":[
"rlmeta",
"parser.rlmeta"
],
"fragments":[
{
"id":"4e5409ddd4a34450b3c8b4cb8bc5dd60",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"index":5,
"type":"tabstop"
},
{
"text":"= '\\\\' -> \"\\\\\" | '\\'' -> \"'\"\n",
"type":"code"
},
{
"index":5,
"type":"tabstop"
},
{
"text":"| '\"'  -> \"\\\"\" | 'n'  -> \"\\n\"\n",
"type":"code"
}
],
"id":"ec0bcd3b02bf4077aa889dabf912dbb0",
"type":"code"
}
],
"title":"Character related"
},
{
"children":[],
"id":"19acecc9fbc44023a69cea9eadbe734d",
"paragraphs":[
{
"chunkpath":[
"rules"
],
"filepath":[
"rlmeta",
"parser.rlmeta"
],
"fragments":[
{
"id":"8a8e32dcfa5545f7aa292dd7e696030a",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"index":5,
"type":"tabstop"
},
{
"text":"= ",
"type":"code"
},
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"id":"7befab3d0c5747d687b20830147a70fa",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"id":"6b1fe389a7254359b3fbe4cb26ea084e",
"type":"variable"
},
{
"text":"*:xs ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> join([x ~xs])\n",
"type":"code"
},
{
"id":"7befab3d0c5747d687b20830147a70fa",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"index":5,
"type":"tabstop"
},
{
"text":"= 'a'-'z' | 'A'-'Z'\n",
"type":"code"
},
{
"id":"6b1fe389a7254359b3fbe4cb26ea084e",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"index":5,
"type":"tabstop"
},
{
"text":"= 'a'-'z' | 'A'-'Z' | '0'-'9'\n",
"type":"code"
}
],
"id":"1c6666fb0163411abc814856a4265683",
"type":"code"
}
],
"title":"Name"
},
{
"children":[],
"id":"d729731e037a4a5aafa6da77d2b8bdb1",
"paragraphs":[
{
"chunkpath":[
"rules"
],
"filepath":[
"rlmeta",
"parser.rlmeta"
],
"fragments":[
{
"id":"1868228966e84ad698de9ff7fe063861",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"index":5,
"type":"tabstop"
},
{
"text":"= (' ' | '\\n')*\n",
"type":"code"
}
],
"id":"d62875593bb44d2087124443aded53e5",
"type":"code"
}
],
"title":"Space"
},
{
"children":[],
"id":"a56c54f42c00473091d7c8295ff4e0f1",
"paragraphs":[
{
"fragments":[
{
"text":"The complete parser:",
"type":"text"
}
],
"id":"cbbb7c4cccc8418f9b22de8fe6b91c48",
"type":"text"
},
{
"code_id":"c94ba005404c45f78e7511793da8d554",
"id":"104b3c249d084df2b43eebd29698f0f9",
"type":"expanded_code"
}
],
"title":"Summary"
}
],
"id":"1e01a8bdd22d48f2a7e8533d552bc264",
"paragraphs":[
{
"fragments":[
{
"text":"The parser's job is to convert a stream of characters to an AST. Here is the template for the ",
"type":"text"
},
{
"id":"a304a36f0ab541209c9e8aa78f4edc46",
"type":"variable"
},
{
"text":" grammar:",
"type":"text"
}
],
"id":"d62cec37c77c4f7b961ad53765449159",
"type":"text"
},
{
"chunkpath":[],
"filepath":[
"rlmeta",
"parser.rlmeta"
],
"fragments":[
{
"id":"a304a36f0ab541209c9e8aa78f4edc46",
"type":"variable"
},
{
"text":" {\n",
"type":"code"
},
{
"blank_lines_before":0,
"path":[
"rules"
],
"prefix":"  ",
"type":"chunk"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"c94ba005404c45f78e7511793da8d554",
"type":"code"
},
{
"fragments":[
{
"text":"The remainder of this section will fill in all the rules.",
"type":"text"
}
],
"id":"bc1ada63d87b459fbdffcd4e0b52d602",
"type":"text"
}
],
"title":"Parser"
},
{
"children":[
{
"children":[],
"id":"ed6931f4eeca4d43aaee1e9f5485a295",
"paragraphs":[
{
"fragments":[
{
"text":"When a ",
"type":"text"
},
{
"id":"2aa377816ed3486da72cff7bd46190ad",
"type":"variable"
},
{
"text":" AST node is matched a Python class with the same name is generated that inherits from ",
"type":"text"
},
{
"id":"6544a37a96ce4294ab4553709d89f398",
"type":"variable"
},
{
"text":":",
"type":"text"
}
],
"id":"e3e98686c73d4c7e8211846c6bb629bb",
"type":"text"
},
{
"chunkpath":[
"rules",
"ast"
],
"filepath":[
"rlmeta",
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"2aa377816ed3486da72cff7bd46190ad",
"type":"variable"
},
{
"text":"\" .:x ",
"type":"code"
},
{
"id":"8b98e38b093140fc956b35f6cbf5018e",
"type":"variable"
},
{
"text":"*:ys] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { 'class ' x '(",
"type":"code"
},
{
"id":"6544a37a96ce4294ab4553709d89f398",
"type":"variable"
},
{
"text":"):\\n' > ys < ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"d3c4ef9bebd64746ab898a18575fd4ac",
"type":"code"
},
{
"fragments":[
{
"text":"The base class is defined in the support library:",
"type":"text"
}
],
"id":"4e3a4349f676432aa6ab703e6cd04414",
"type":"text"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"rlmeta",
"support.py"
],
"fragments":[
{
"text":"class ",
"type":"code"
},
{
"id":"6544a37a96ce4294ab4553709d89f398",
"type":"variable"
},
{
"text":"(object):\n\n",
"type":"code"
},
{
"blank_lines_before":1,
"path":[
"_RLMeta"
],
"prefix":"    ",
"type":"chunk"
}
],
"id":"5df5c3d0f1ae47b7821a5df66bbb63dc",
"type":"code"
},
{
"fragments":[
{
"text":"Names of support classes start with an underscore to not collide with generated grammar names (which can not contain underscores).",
"type":"text"
}
],
"id":"9d189abc5e624388a08c34b923aa8f01",
"type":"text"
},
{
"fragments":[
{
"text":"Grammars in Python have a single entry point: ",
"type":"text"
},
{
"id":"2a00f6add9e9443ab98af74a6da8b379",
"type":"variable"
},
{
"text":".",
"type":"text"
}
],
"id":"955dfe1bc67f4b7ca1b109a36f56cb49",
"type":"text"
},
{
"chunkpath":[
"classes",
"_RLMeta"
],
"filepath":[
"rlmeta",
"support.py"
],
"fragments":[
{
"text":"def ",
"type":"code"
},
{
"id":"2a00f6add9e9443ab98af74a6da8b379",
"type":"variable"
},
{
"text":"(self, rule_name, input_object):\n    self.",
"type":"code"
},
{
"id":"07c126c0f9094e189f37cc4ab940b0b4",
"type":"variable"
},
{
"text":" = ",
"type":"code"
},
{
"id":"331ec96e6c01440198c9134d85336b9b",
"type":"variable"
},
{
"text":"()\n    self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":" = ",
"type":"code"
},
{
"id":"b4b8cb5f4cdd4dc68ecc9ca100d1da5a",
"type":"variable"
},
{
"text":".",
"type":"code"
},
{
"id":"6de4b0de9db3465b89ec2278c5c557a8",
"type":"variable"
},
{
"text":"(self.",
"type":"code"
},
{
"id":"07c126c0f9094e189f37cc4ab940b0b4",
"type":"variable"
},
{
"text":", input_object)\n    result = self.",
"type":"code"
},
{
"id":"826871508bad4fecb6e575779218874d",
"type":"variable"
},
{
"text":"(rule_name).",
"type":"code"
},
{
"id":"85139f1436944deab62958b8a713d8aa",
"type":"variable"
},
{
"text":"()\n    if hasattr(result, \"",
"type":"code"
},
{
"id":"56d10f7bfcfd43bb996c3f76423b067b",
"type":"variable"
},
{
"text":"\"):\n        return result.",
"type":"code"
},
{
"id":"56d10f7bfcfd43bb996c3f76423b067b",
"type":"variable"
},
{
"text":"()\n    else:\n        return result\n",
"type":"code"
}
],
"id":"c0bac19d60434ad2bf44cd6b70cf63ca",
"type":"code"
},
{
"chunkpath":[
"classes",
"_RLMeta"
],
"filepath":[
"rlmeta",
"support.py"
],
"fragments":[
{
"text":"def ",
"type":"code"
},
{
"id":"826871508bad4fecb6e575779218874d",
"type":"variable"
},
{
"text":"(self, rule_name):\n    key = (rule_name, self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":".",
"type":"code"
},
{
"id":"b062e0322e284160bf26034e9de32446",
"type":"variable"
},
{
"text":"())\n    if key in self.",
"type":"code"
},
{
"id":"07c126c0f9094e189f37cc4ab940b0b4",
"type":"variable"
},
{
"text":":\n        result, _, self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":" = self.",
"type":"code"
},
{
"id":"07c126c0f9094e189f37cc4ab940b0b4",
"type":"variable"
},
{
"text":"[key]\n    else:\n        start = self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":"\n        result = getattr(self, \"_rule_{}\".format(rule_name))()\n        end = self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":"\n        self.",
"type":"code"
},
{
"id":"07c126c0f9094e189f37cc4ab940b0b4",
"type":"variable"
},
{
"text":"[key] = (result, start, end)\n    return result\n",
"type":"code"
}
],
"id":"26f47b044a2d4e599f7363169fb6a0aa",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"rlmeta",
"support.py"
],
"fragments":[
{
"text":"class ",
"type":"code"
},
{
"id":"331ec96e6c01440198c9134d85336b9b",
"type":"variable"
},
{
"text":"(dict):\n\n    def __init__(self):\n        dict.__init__(self)\n        self._latest_stream = None\n        self._latest_message = None\n\n    def ",
"type":"code"
},
{
"id":"596495d8d3c041d190a3330d1707203c",
"type":"variable"
},
{
"text":"(self):\n        message = []\n        items = []\n        for (rule_name, _), (_, start, end) in self.items():\n            items.append((rule_name, start, end))\n        items.sort(key=lambda item: (item[2].",
"type":"code"
},
{
"id":"b062e0322e284160bf26034e9de32446",
"type":"variable"
},
{
"text":"(), item[1].",
"type":"code"
},
{
"id":"b062e0322e284160bf26034e9de32446",
"type":"variable"
},
{
"text":"()))\n        for item in items:\n            message.append(\"matched {: <20} {} -> {}\\n\".format(*item))\n        message.append(\"\\n\")\n        message.append(\"ERROR: {}: {}\\n\".format(\n            self._latest_stream,\n            self._latest_message\n        ))\n        return \"\".join(message)\n\n    def ",
"type":"code"
},
{
"id":"5b5e4143fac64a7ba4fc1e5211b1d5f1",
"type":"variable"
},
{
"text":"(self, stream, message):\n        if self._latest_stream is None or stream.",
"type":"code"
},
{
"id":"b062e0322e284160bf26034e9de32446",
"type":"variable"
},
{
"text":"() >= self._latest_stream.",
"type":"code"
},
{
"id":"b062e0322e284160bf26034e9de32446",
"type":"variable"
},
{
"text":"():\n            self._latest_stream = stream\n            self._latest_message = message\n        raise ",
"type":"code"
},
{
"id":"df25061bb4004aa693b603f0a8ec2af2",
"type":"variable"
},
{
"text":"(self)\n",
"type":"code"
}
],
"id":"6bf95d09ed70474bb70345fb1877f34e",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"rlmeta",
"support.py"
],
"fragments":[
{
"text":"class ",
"type":"code"
},
{
"id":"df25061bb4004aa693b603f0a8ec2af2",
"type":"variable"
},
{
"text":"(Exception):\n\n    def __init__(self, memo):\n        Exception.__init__(self)\n        self._memo = memo\n\n    def ",
"type":"code"
},
{
"id":"e86cf4c2ab6c4d45948e33529e447036",
"type":"variable"
},
{
"text":"(self):\n        return self._memo.",
"type":"code"
},
{
"id":"596495d8d3c041d190a3330d1707203c",
"type":"variable"
},
{
"text":"()\n",
"type":"code"
}
],
"id":"00ace1a1616649898f3ca6095c7884e1",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"rlmeta",
"support.py"
],
"fragments":[
{
"text":"class ",
"type":"code"
},
{
"id":"b4b8cb5f4cdd4dc68ecc9ca100d1da5a",
"type":"variable"
},
{
"text":"(object):\n\n    @classmethod\n    def ",
"type":"code"
},
{
"id":"6de4b0de9db3465b89ec2278c5c557a8",
"type":"variable"
},
{
"text":"(cls, memo, input_object):\n        if isinstance(input_object, basestring):\n            return ",
"type":"code"
},
{
"id":"d6ed0f3ac9e84f60bae25485ddb2f97e",
"type":"variable"
},
{
"text":"(memo, list(input_object))\n        else:\n            return ",
"type":"code"
},
{
"id":"b058347d19484740b7e2dec4816c0978",
"type":"variable"
},
{
"text":"(memo, [input_object])\n\n    def __init__(self, memo, objects):\n        self._memo = memo\n        self._objects = objects\n\n    def ",
"type":"code"
},
{
"id":"00fd348d71754fcfaadae0de1ee5f198",
"type":"variable"
},
{
"text":"(self, message):\n        self._memo.",
"type":"code"
},
{
"id":"5b5e4143fac64a7ba4fc1e5211b1d5f1",
"type":"variable"
},
{
"text":"(self, message)\n\n    def ",
"type":"code"
},
{
"id":"b2115b3eeaa143068958949787f5d104",
"type":"variable"
},
{
"text":"(self):\n        if self.",
"type":"code"
},
{
"id":"4ad80c8d1d814fefa2656595f1d841c6",
"type":"variable"
},
{
"text":"():\n            self.",
"type":"code"
},
{
"id":"00fd348d71754fcfaadae0de1ee5f198",
"type":"variable"
},
{
"text":"(\"not eof\")\n        ",
"type":"code"
},
{
"id":"1f94d55a48c14180b2992433d29ace85",
"type":"variable"
},
{
"text":" = self._objects[0]\n        return (\n            ",
"type":"code"
},
{
"id":"1f94d55a48c14180b2992433d29ace85",
"type":"variable"
},
{
"text":",\n            self.",
"type":"code"
},
{
"id":"2f6729bf45e84649b3187f8016c3fec9",
"type":"variable"
},
{
"text":"(",
"type":"code"
},
{
"id":"1f94d55a48c14180b2992433d29ace85",
"type":"variable"
},
{
"text":", self._objects[1:]),\n        )\n\n    def ",
"type":"code"
},
{
"id":"4ad80c8d1d814fefa2656595f1d841c6",
"type":"variable"
},
{
"text":"(self):\n        return len(self._objects) == 0\n",
"type":"code"
}
],
"id":"b11d191c565f44ac8f6ec57f2decacfe",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"rlmeta",
"support.py"
],
"fragments":[
{
"text":"class ",
"type":"code"
},
{
"id":"d6ed0f3ac9e84f60bae25485ddb2f97e",
"type":"variable"
},
{
"text":"(",
"type":"code"
},
{
"id":"b4b8cb5f4cdd4dc68ecc9ca100d1da5a",
"type":"variable"
},
{
"text":"):\n\n    def __init__(self, memo, objects, line=1, column=1):\n        ",
"type":"code"
},
{
"id":"b4b8cb5f4cdd4dc68ecc9ca100d1da5a",
"type":"variable"
},
{
"text":".__init__(self, memo, objects)\n        self._line = line\n        self._column = column\n\n    def ",
"type":"code"
},
{
"id":"b062e0322e284160bf26034e9de32446",
"type":"variable"
},
{
"text":"(self):\n        return (self._line, self._column)\n\n    def ",
"type":"code"
},
{
"id":"2f6729bf45e84649b3187f8016c3fec9",
"type":"variable"
},
{
"text":"(self, ",
"type":"code"
},
{
"id":"1f94d55a48c14180b2992433d29ace85",
"type":"variable"
},
{
"text":", objects):\n        if ",
"type":"code"
},
{
"id":"1f94d55a48c14180b2992433d29ace85",
"type":"variable"
},
{
"text":" == \"\\n\":\n            return ",
"type":"code"
},
{
"id":"d6ed0f3ac9e84f60bae25485ddb2f97e",
"type":"variable"
},
{
"text":"(self._memo, objects, self._line+1, 1)\n        else:\n            return ",
"type":"code"
},
{
"id":"d6ed0f3ac9e84f60bae25485ddb2f97e",
"type":"variable"
},
{
"text":"(self._memo, objects, self._line, self._column+1)\n\n    def __str__(self):\n        return \"L{:03d}:C{:03d}\".format(self._line, self._column)\n",
"type":"code"
}
],
"id":"e637234d5baa4d669a60c90ce1688693",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"rlmeta",
"support.py"
],
"fragments":[
{
"text":"class ",
"type":"code"
},
{
"id":"b058347d19484740b7e2dec4816c0978",
"type":"variable"
},
{
"text":"(",
"type":"code"
},
{
"id":"b4b8cb5f4cdd4dc68ecc9ca100d1da5a",
"type":"variable"
},
{
"text":"):\n\n    def __init__(self, memo, objects, parent=(), pos=0):\n        ",
"type":"code"
},
{
"id":"b4b8cb5f4cdd4dc68ecc9ca100d1da5a",
"type":"variable"
},
{
"text":".__init__(self, memo, objects)\n        self._parent = parent\n        self._pos = pos\n\n    def ",
"type":"code"
},
{
"id":"b062e0322e284160bf26034e9de32446",
"type":"variable"
},
{
"text":"(self):\n        return self._parent + (self._pos,)\n\n    def ",
"type":"code"
},
{
"id":"653fc20558a64badb437b07f3d1c8490",
"type":"variable"
},
{
"text":"(self, input_object):\n        return ",
"type":"code"
},
{
"id":"b058347d19484740b7e2dec4816c0978",
"type":"variable"
},
{
"text":"(self._memo, input_object, self._parent+(self._pos,))\n\n    def ",
"type":"code"
},
{
"id":"2f6729bf45e84649b3187f8016c3fec9",
"type":"variable"
},
{
"text":"(self, ",
"type":"code"
},
{
"id":"1f94d55a48c14180b2992433d29ace85",
"type":"variable"
},
{
"text":", objects):\n        return ",
"type":"code"
},
{
"id":"b058347d19484740b7e2dec4816c0978",
"type":"variable"
},
{
"text":"(self._memo, objects, self._parent, self._pos+1)\n\n    def __str__(self):\n        return \"[{}]\".format(\", \".join(str(x) for x in self.",
"type":"code"
},
{
"id":"b062e0322e284160bf26034e9de32446",
"type":"variable"
},
{
"text":"()))\n",
"type":"code"
}
],
"id":"af185bd3045941ab9c96c68a83ec4741",
"type":"code"
}
],
"title":"Grammar"
},
{
"children":[],
"id":"3c542ba5b0104273805b227aeab84c04",
"paragraphs":[
{
"fragments":[
{
"text":"When a ",
"type":"text"
},
{
"id":"e22fa3c5d4144197906cbb74af6cc83e",
"type":"variable"
},
{
"text":" AST node is matched a Python method with the same name is generated:",
"type":"text"
}
],
"id":"6018299ffc344a46978cb303eb4bdb16",
"type":"text"
},
{
"chunkpath":[
"rules",
"ast"
],
"filepath":[
"rlmeta",
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"e22fa3c5d4144197906cbb74af6cc83e",
"type":"variable"
},
{
"text":"\" .:x ",
"type":"code"
},
{
"id":"8b98e38b093140fc956b35f6cbf5018e",
"type":"variable"
},
{
"text":":y] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { '\\ndef _rule_' x '(self):\\n' > 'return ' y '()\\n' < ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"4bbfe03c503f409f9ac3233cbbd31340",
"type":"code"
},
{
"fragments":[
{
"text":"The body of the rule is assumed to be a matcher. A matcher is a function that, when called, tries to match objecst from the input stream and return a semantic action if successful or raises an exception if it fails.",
"type":"text"
}
],
"id":"fc46f60ad6a7467bb245c720a9d6e8e9",
"type":"text"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"rlmeta",
"support.py"
],
"fragments":[
{
"text":"class ",
"type":"code"
},
{
"id":"cbbcd925bc2c42b9add24aaa736f4d35",
"type":"variable"
},
{
"text":"(object):\n\n    def __init__(self, fn):\n        self.fn = fn\n\n    def ",
"type":"code"
},
{
"id":"85139f1436944deab62958b8a713d8aa",
"type":"variable"
},
{
"text":"(self):\n        return self.fn()\n",
"type":"code"
}
],
"id":"a2fa6b36dba04bcfad978306c9223c55",
"type":"code"
},
{
"fragments":[
{
"text":"To simplify the code generator, the following rules are present. The ",
"type":"text"
},
{
"id":"ff0229c63d8a4b4897faed8c38201de3",
"type":"variable"
},
{
"text":" rule is not strictly needed, but without it, many rules would have to wrap its body in a lambda to create the matcher function.",
"type":"text"
}
],
"id":"1b8ad3a855444c598a016788f32237ab",
"type":"text"
},
{
"chunkpath":[
"rules"
],
"filepath":[
"rlmeta",
"codegenerator.rlmeta"
],
"fragments":[
{
"id":"8b98e38b093140fc956b35f6cbf5018e",
"type":"variable"
},
{
"text":" =\n",
"type":"code"
},
{
"blank_lines_before":0,
"path":[
"ast"
],
"prefix":"  ",
"type":"chunk"
},
{
"text":"  | ",
"type":"code"
},
{
"id":"ff0229c63d8a4b4897faed8c38201de3",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { '(lambda:\\n' > x < '\\n)' }\n",
"type":"code"
},
{
"id":"ff0229c63d8a4b4897faed8c38201de3",
"type":"variable"
},
{
"text":" =\n",
"type":"code"
},
{
"blank_lines_before":0,
"path":[
"astFnBody"
],
"prefix":"  ",
"type":"chunk"
}
],
"id":"bc8464b515df4cf9a0be11f8757cfa24",
"type":"code"
}
],
"title":"Rule"
},
{
"children":[],
"id":"696631bc029c47949b2ad97ce78ea32c",
"paragraphs":[
{
"fragments":[
{
"text":"When a ",
"type":"text"
},
{
"id":"efa7dd37aa9e46908ed34f8d31cd476d",
"type":"variable"
},
{
"text":" AST node is matched a matcher is generated that calls the built-in ",
"type":"text"
},
{
"id":"2c430882d5af40168a69e1b4b9eb7e0d",
"type":"variable"
},
{
"text":" method with a list of matchers:",
"type":"text"
}
],
"id":"218e357da3f04861bdee4b175e32cc54",
"type":"text"
},
{
"chunkpath":[
"rules",
"astFnBody"
],
"filepath":[
"rlmeta",
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"efa7dd37aa9e46908ed34f8d31cd476d",
"type":"variable"
},
{
"text":"\" ",
"type":"code"
},
{
"id":"85ee4a0a694641c3aa683a15e6a0ba5d",
"type":"variable"
},
{
"text":":x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { 'self.",
"type":"code"
},
{
"id":"2c430882d5af40168a69e1b4b9eb7e0d",
"type":"variable"
},
{
"text":"([' x '])' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"f85612ab9e0d444f8104eb83d1548800",
"type":"code"
},
{
"fragments":[
{
"text":"Helpers to generate a list of items.",
"type":"text"
}
],
"id":"ce9066bd5c3f4a9eb07f8b7d9368f118",
"type":"text"
},
{
"chunkpath":[
"rules"
],
"filepath":[
"rlmeta",
"codegenerator.rlmeta"
],
"fragments":[
{
"id":"85ee4a0a694641c3aa683a15e6a0ba5d",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"index":5,
"type":"tabstop"
},
{
"text":"= ",
"type":"code"
},
{
"id":"ccb3f676f6314d788147dc603933cd28",
"type":"variable"
},
{
"text":"*:xs ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { '\\n' > xs < ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
},
{
"id":"ccb3f676f6314d788147dc603933cd28",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"index":5,
"type":"tabstop"
},
{
"text":"= ",
"type":"code"
},
{
"id":"8b98e38b093140fc956b35f6cbf5018e",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { x ',\\n' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"8f190300db404d17a2a8f5e36e95ddcd",
"type":"code"
},
{
"fragments":[
{
"text":"The ",
"type":"text"
},
{
"id":"2c430882d5af40168a69e1b4b9eb7e0d",
"type":"variable"
},
{
"text":" method expects a list of matchers. It tries the matchers in sequence and returns the result of the first matching one.",
"type":"text"
}
],
"id":"6611f3677d0f47888d213f4467d3279f",
"type":"text"
},
{
"chunkpath":[
"classes",
"_RLMeta"
],
"filepath":[
"rlmeta",
"support.py"
],
"fragments":[
{
"text":"def ",
"type":"code"
},
{
"id":"2c430882d5af40168a69e1b4b9eb7e0d",
"type":"variable"
},
{
"text":"(self, matchers):\n    ",
"type":"code"
},
{
"id":"e45d3bc7fadf4cc1bd02843c87f0d034",
"type":"variable"
},
{
"text":" = self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":"\n    for matcher in matchers:\n        try:\n            return matcher()\n        except ",
"type":"code"
},
{
"id":"df25061bb4004aa693b603f0a8ec2af2",
"type":"variable"
},
{
"text":":\n            self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":" = ",
"type":"code"
},
{
"id":"e45d3bc7fadf4cc1bd02843c87f0d034",
"type":"variable"
},
{
"text":"\n    ",
"type":"code"
},
{
"id":"e45d3bc7fadf4cc1bd02843c87f0d034",
"type":"variable"
},
{
"text":".",
"type":"code"
},
{
"id":"00fd348d71754fcfaadae0de1ee5f198",
"type":"variable"
},
{
"text":"(\"no alternative matched\")\n",
"type":"code"
}
],
"id":"d208a58f49fb42199d2483713b67641e",
"type":"code"
}
],
"title":"Or"
},
{
"children":[],
"id":"86438bda56d342bc9d1f2c62e632a72d",
"paragraphs":[
{
"fragments":[
{
"text":"When a ",
"type":"text"
},
{
"id":"b845c4cee1734619991d56de83dce37d",
"type":"variable"
},
{
"text":" AST node is found a function is generated that creates a new scope:",
"type":"text"
}
],
"id":"99fc5181461b4b658129de1e5a9024db",
"type":"text"
},
{
"chunkpath":[
"rules",
"astFnBody"
],
"filepath":[
"rlmeta",
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"b845c4cee1734619991d56de83dce37d",
"type":"variable"
},
{
"text":"\" ",
"type":"code"
},
{
"id":"8b98e38b093140fc956b35f6cbf5018e",
"type":"variable"
},
{
"text":":x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { '(lambda ",
"type":"code"
},
{
"id":"289a3db9c53e420da4dbdbc94a32aadf",
"type":"variable"
},
{
"text":":\\n' > x < '()\\n)(",
"type":"code"
},
{
"id":"ec2b7e954fe24f329250bd22c70538e4",
"type":"variable"
},
{
"text":"())' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"89d707f19bd84e5982dcc3f043a68111",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"rlmeta",
"support.py"
],
"fragments":[
{
"text":"class ",
"type":"code"
},
{
"id":"ec2b7e954fe24f329250bd22c70538e4",
"type":"variable"
},
{
"text":"(dict):\n\n    def ",
"type":"code"
},
{
"id":"1659fb73179a4fd8abfc99b95d9f5560",
"type":"variable"
},
{
"text":"(self, name, value):\n        self[name] = value\n        return value\n\n    def ",
"type":"code"
},
{
"id":"ea57b40b324c4c03b030c78e924ed860",
"type":"variable"
},
{
"text":"(self, name):\n        return self[name]\n",
"type":"code"
}
],
"id":"6a0b126c11d4408794c26291e417257d",
"type":"code"
}
],
"title":"Scope"
},
{
"children":[],
"id":"487e675a013c45e3aee8b6c068e226df",
"paragraphs":[
{
"fragments":[
{
"text":"When a ",
"type":"text"
},
{
"id":"8d17eff4871e411793cf0daf3a2ab204",
"type":"variable"
},
{
"text":" AST node is found a call to the build-in ",
"type":"text"
},
{
"id":"c590c92167d34fe4bfdbb084c03834c1",
"type":"variable"
},
{
"text":" method is generated:",
"type":"text"
}
],
"id":"bdbe901c77da4a2ab026d978279b4e09",
"type":"text"
},
{
"chunkpath":[
"rules",
"astFnBody"
],
"filepath":[
"rlmeta",
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"8d17eff4871e411793cf0daf3a2ab204",
"type":"variable"
},
{
"text":"\" ",
"type":"code"
},
{
"id":"85ee4a0a694641c3aa683a15e6a0ba5d",
"type":"variable"
},
{
"text":":x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { 'self.",
"type":"code"
},
{
"id":"c590c92167d34fe4bfdbb084c03834c1",
"type":"variable"
},
{
"text":"([' x '])' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"3fe2404188684b7485049b6298e4ba3e",
"type":"code"
},
{
"fragments":[
{
"text":"The ",
"type":"text"
},
{
"id":"c590c92167d34fe4bfdbb084c03834c1",
"type":"variable"
},
{
"text":" method expects a list of matchers. It applies them in sequence and returns the result of the last one.",
"type":"text"
}
],
"id":"2e113e56a2bd474a8361b07e62faddd1",
"type":"text"
},
{
"chunkpath":[
"classes",
"_RLMeta"
],
"filepath":[
"rlmeta",
"support.py"
],
"fragments":[
{
"text":"def ",
"type":"code"
},
{
"id":"c590c92167d34fe4bfdbb084c03834c1",
"type":"variable"
},
{
"text":"(self, matchers):\n    result = None\n    for matcher in matchers:\n        result = matcher()\n    return result\n",
"type":"code"
}
],
"id":"4f4a619375d4416ba28f522d8b4cbf06",
"type":"code"
}
],
"title":"And"
},
{
"children":[],
"id":"4309ca572367401bb6c4561f273b8c85",
"paragraphs":[
{
"chunkpath":[
"rules",
"astFnBody"
],
"filepath":[
"rlmeta",
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"6a519019bfac49598dc36620b5b58811",
"type":"variable"
},
{
"text":"\" .:x ",
"type":"code"
},
{
"id":"8b98e38b093140fc956b35f6cbf5018e",
"type":"variable"
},
{
"text":":y] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { '",
"type":"code"
},
{
"id":"289a3db9c53e420da4dbdbc94a32aadf",
"type":"variable"
},
{
"text":".",
"type":"code"
},
{
"id":"1659fb73179a4fd8abfc99b95d9f5560",
"type":"variable"
},
{
"text":"(' repr(x) ', ' y '())' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"06c9e9a4f10648e090321c427cccb9b3",
"type":"code"
}
],
"title":"Bind"
},
{
"children":[],
"id":"244f0754be514ae88e0f581f3ab58c59",
"paragraphs":[
{
"chunkpath":[
"rules",
"astFnBody"
],
"filepath":[
"rlmeta",
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"60d7dacf2a2b4336b0329665c2026cc0",
"type":"variable"
},
{
"text":"\" ",
"type":"code"
},
{
"id":"8b98e38b093140fc956b35f6cbf5018e",
"type":"variable"
},
{
"text":":x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { 'self.",
"type":"code"
},
{
"id":"70c457e3514948bcb6c00b67e5a180a2",
"type":"variable"
},
{
"text":"(' x ')' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"36a128587cdd48539a5aef85b434be5b",
"type":"code"
},
{
"chunkpath":[
"classes",
"_RLMeta"
],
"filepath":[
"rlmeta",
"support.py"
],
"fragments":[
{
"text":"def ",
"type":"code"
},
{
"id":"70c457e3514948bcb6c00b67e5a180a2",
"type":"variable"
},
{
"text":"(self, matcher):\n    result = []\n    while True:\n        ",
"type":"code"
},
{
"id":"e45d3bc7fadf4cc1bd02843c87f0d034",
"type":"variable"
},
{
"text":" = self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":"\n        try:\n            result.append(matcher())\n        except ",
"type":"code"
},
{
"id":"df25061bb4004aa693b603f0a8ec2af2",
"type":"variable"
},
{
"text":":\n            self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":" = ",
"type":"code"
},
{
"id":"e45d3bc7fadf4cc1bd02843c87f0d034",
"type":"variable"
},
{
"text":"\n            return ",
"type":"code"
},
{
"id":"cbbcd925bc2c42b9add24aaa736f4d35",
"type":"variable"
},
{
"text":"(lambda: [x.",
"type":"code"
},
{
"id":"85139f1436944deab62958b8a713d8aa",
"type":"variable"
},
{
"text":"() for x in result])\n",
"type":"code"
}
],
"id":"6d7dbee1acd04445a3fa837210e6a42d",
"type":"code"
}
],
"title":"Star"
},
{
"children":[],
"id":"b0f001d2e6484c55a4aa8fec6d62129e",
"paragraphs":[
{
"chunkpath":[
"rules",
"astFnBody"
],
"filepath":[
"rlmeta",
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"736cd2768dcd4843b43aca56bea200d3",
"type":"variable"
},
{
"text":"\"] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { 'None' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"f89b8db315ca4734a535d6ffbbf464bb",
"type":"code"
}
],
"title":"MatchNothing"
},
{
"children":[],
"id":"44d3b166c62d43e38d2a781fb9f06b6d",
"paragraphs":[
{
"chunkpath":[
"rules",
"astFnBody"
],
"filepath":[
"rlmeta",
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"bc27a67cb10b4650a32bfe7af84c5060",
"type":"variable"
},
{
"text":"\" ",
"type":"code"
},
{
"id":"8b98e38b093140fc956b35f6cbf5018e",
"type":"variable"
},
{
"text":":x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { 'self.",
"type":"code"
},
{
"id":"7ea6f6977ca24c218e28cd96b1cf8267",
"type":"variable"
},
{
"text":"(' x ')' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"e895e3759e684d7c9022da5bcfd693bb",
"type":"code"
},
{
"chunkpath":[
"classes",
"_RLMeta"
],
"filepath":[
"rlmeta",
"support.py"
],
"fragments":[
{
"text":"def ",
"type":"code"
},
{
"id":"7ea6f6977ca24c218e28cd96b1cf8267",
"type":"variable"
},
{
"text":"(self, matcher):\n    ",
"type":"code"
},
{
"id":"e45d3bc7fadf4cc1bd02843c87f0d034",
"type":"variable"
},
{
"text":" = self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":"\n    try:\n        matcher()\n    except ",
"type":"code"
},
{
"id":"df25061bb4004aa693b603f0a8ec2af2",
"type":"variable"
},
{
"text":":\n        return ",
"type":"code"
},
{
"id":"cbbcd925bc2c42b9add24aaa736f4d35",
"type":"variable"
},
{
"text":"(lambda: None)\n    else:\n        ",
"type":"code"
},
{
"id":"e45d3bc7fadf4cc1bd02843c87f0d034",
"type":"variable"
},
{
"text":".",
"type":"code"
},
{
"id":"00fd348d71754fcfaadae0de1ee5f198",
"type":"variable"
},
{
"text":"(\"match found\")\n    finally:\n        self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":" = ",
"type":"code"
},
{
"id":"e45d3bc7fadf4cc1bd02843c87f0d034",
"type":"variable"
},
{
"text":"\n",
"type":"code"
}
],
"id":"77eb5bfff95948a08d1d3856984cfc9f",
"type":"code"
}
],
"title":"Not"
},
{
"children":[],
"id":"07530ffd21784561bd8594c98fcd050a",
"paragraphs":[
{
"chunkpath":[
"rules",
"astFnBody"
],
"filepath":[
"rlmeta",
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"373f023f0f5f4744a7b309cf9a76d138",
"type":"variable"
},
{
"text":"\" ",
"type":"code"
},
{
"id":"8b98e38b093140fc956b35f6cbf5018e",
"type":"variable"
},
{
"text":":x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { '",
"type":"code"
},
{
"id":"cbbcd925bc2c42b9add24aaa736f4d35",
"type":"variable"
},
{
"text":"(lambda: ' x ')' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"48288d82d6984e2088ee6ce8a5a5253e",
"type":"code"
}
],
"title":"SemanticAction"
},
{
"children":[],
"id":"c10aabed8057404e97ef8cd6ac1b113d",
"paragraphs":[
{
"chunkpath":[
"rules",
"astFnBody"
],
"filepath":[
"rlmeta",
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"4852ced8038c4074a5a8104b8596e0e0",
"type":"variable"
},
{
"text":"\" .:x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { 'self.",
"type":"code"
},
{
"id":"826871508bad4fecb6e575779218874d",
"type":"variable"
},
{
"text":"(' repr(x) ')'",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"412bfecbb7244810ba46e206486092c8",
"type":"code"
}
],
"title":"Apply"
},
{
"children":[],
"id":"3ba5893bb7094ece96e853f869df9456",
"paragraphs":[
{
"chunkpath":[
"rules",
"astFnBody"
],
"filepath":[
"rlmeta",
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"6860db9e40994ebfbe04834b4f12f721",
"type":"variable"
},
{
"text":"\" .:x .:y] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { 'self.",
"type":"code"
},
{
"id":"53acf505e0ee41de85c674e211ecd39c",
"type":"variable"
},
{
"text":"(' repr(x) ', ' repr(y) ')' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"7ce8d15eb0a349e9a26f7c4b65cf23d8",
"type":"code"
},
{
"chunkpath":[
"classes",
"_RLMeta"
],
"filepath":[
"rlmeta",
"support.py"
],
"fragments":[
{
"text":"def ",
"type":"code"
},
{
"id":"53acf505e0ee41de85c674e211ecd39c",
"type":"variable"
},
{
"text":"(self, start, end):\n    original_stream = self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":"\n    next_objext, self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":" = self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":".",
"type":"code"
},
{
"id":"b2115b3eeaa143068958949787f5d104",
"type":"variable"
},
{
"text":"()\n    if next_objext >= start and next_objext <= end:\n        return ",
"type":"code"
},
{
"id":"cbbcd925bc2c42b9add24aaa736f4d35",
"type":"variable"
},
{
"text":"(lambda: next_objext)\n    else:\n        original_stream.",
"type":"code"
},
{
"id":"00fd348d71754fcfaadae0de1ee5f198",
"type":"variable"
},
{
"text":"(\"expected range {}-{} but found {!r}\".format(start, end, next_objext))\n",
"type":"code"
}
],
"id":"fdb81b14b5c54348b151b5b2f379ae78",
"type":"code"
}
],
"title":"MatchRange"
},
{
"children":[],
"id":"82022cc15d944579825b52559b1ee469",
"paragraphs":[
{
"chunkpath":[
"rules",
"astFnBody"
],
"filepath":[
"rlmeta",
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"10d9c2de82a14d12bd545133bd4e15f8",
"type":"variable"
},
{
"text":"\" .:x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { 'self.",
"type":"code"
},
{
"id":"ab9490a5e7ba4561b96b04f481a9e57e",
"type":"variable"
},
{
"text":"(' repr(x) ')' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"2d406fc305b34136a1280841c2098a7a",
"type":"code"
},
{
"chunkpath":[
"classes",
"_RLMeta"
],
"filepath":[
"rlmeta",
"support.py"
],
"fragments":[
{
"text":"def ",
"type":"code"
},
{
"id":"ab9490a5e7ba4561b96b04f481a9e57e",
"type":"variable"
},
{
"text":"(self, string):\n    original_stream = self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":"\n    ",
"type":"code"
},
{
"id":"1f94d55a48c14180b2992433d29ace85",
"type":"variable"
},
{
"text":", self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":" = self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":".",
"type":"code"
},
{
"id":"b2115b3eeaa143068958949787f5d104",
"type":"variable"
},
{
"text":"()\n    if ",
"type":"code"
},
{
"id":"1f94d55a48c14180b2992433d29ace85",
"type":"variable"
},
{
"text":" == string:\n        return ",
"type":"code"
},
{
"id":"cbbcd925bc2c42b9add24aaa736f4d35",
"type":"variable"
},
{
"text":"(lambda: string)\n    else:\n        original_stream.",
"type":"code"
},
{
"id":"00fd348d71754fcfaadae0de1ee5f198",
"type":"variable"
},
{
"text":"(\"expected {!r} but found {!r}\".format(string, ",
"type":"code"
},
{
"id":"1f94d55a48c14180b2992433d29ace85",
"type":"variable"
},
{
"text":"))\n",
"type":"code"
}
],
"id":"971fcb5050aa45348f80f3fe228af352",
"type":"code"
}
],
"title":"MatchString"
},
{
"children":[],
"id":"3eff70b8911e4b4e9bd520a7d25624e7",
"paragraphs":[
{
"chunkpath":[
"rules",
"astFnBody"
],
"filepath":[
"rlmeta",
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"8ff0b4980efa4e349ec5ef14815be6ec",
"type":"variable"
},
{
"text":"\" .:x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { 'self.",
"type":"code"
},
{
"id":"5440b88cecfb4dafad63f0f7887b82ce",
"type":"variable"
},
{
"text":"(' repr(x) ')' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"b04618e300a746c6930f0c3c5ac338dc",
"type":"code"
},
{
"chunkpath":[
"classes",
"_RLMeta"
],
"filepath":[
"rlmeta",
"support.py"
],
"fragments":[
{
"text":"def ",
"type":"code"
},
{
"id":"5440b88cecfb4dafad63f0f7887b82ce",
"type":"variable"
},
{
"text":"(self, charseq):\n    for char in charseq:\n        original_stream = self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":"\n        ",
"type":"code"
},
{
"id":"1f94d55a48c14180b2992433d29ace85",
"type":"variable"
},
{
"text":", self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":" = self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":".",
"type":"code"
},
{
"id":"b2115b3eeaa143068958949787f5d104",
"type":"variable"
},
{
"text":"()\n        if ",
"type":"code"
},
{
"id":"1f94d55a48c14180b2992433d29ace85",
"type":"variable"
},
{
"text":" != char:\n            original_stream.",
"type":"code"
},
{
"id":"00fd348d71754fcfaadae0de1ee5f198",
"type":"variable"
},
{
"text":"(\n                \"expected {} but found {}\".format(char, ",
"type":"code"
},
{
"id":"1f94d55a48c14180b2992433d29ace85",
"type":"variable"
},
{
"text":")\n            )\n    return ",
"type":"code"
},
{
"id":"cbbcd925bc2c42b9add24aaa736f4d35",
"type":"variable"
},
{
"text":"(lambda: charseq)\n",
"type":"code"
}
],
"id":"0af5a39ebe764c1097b3a0478104a6fe",
"type":"code"
}
],
"title":"MatchCharseq"
},
{
"children":[],
"id":"5edd25f746a94b8392834343dce57370",
"paragraphs":[
{
"chunkpath":[
"rules",
"ast"
],
"filepath":[
"rlmeta",
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"25ec6fc64b8b4a39a9df41daa690386f",
"type":"variable"
},
{
"text":"\"] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { 'self.",
"type":"code"
},
{
"id":"c76075de5ae9496f9ef5b3c800111ead",
"type":"variable"
},
{
"text":"' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"982a4ec2696d466ab86d17115f366f87",
"type":"code"
},
{
"chunkpath":[
"classes",
"_RLMeta"
],
"filepath":[
"rlmeta",
"support.py"
],
"fragments":[
{
"text":"def ",
"type":"code"
},
{
"id":"c76075de5ae9496f9ef5b3c800111ead",
"type":"variable"
},
{
"text":"(self):\n    ",
"type":"code"
},
{
"id":"1f94d55a48c14180b2992433d29ace85",
"type":"variable"
},
{
"text":", self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":" = self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":".",
"type":"code"
},
{
"id":"b2115b3eeaa143068958949787f5d104",
"type":"variable"
},
{
"text":"()\n    return ",
"type":"code"
},
{
"id":"cbbcd925bc2c42b9add24aaa736f4d35",
"type":"variable"
},
{
"text":"(lambda: ",
"type":"code"
},
{
"id":"1f94d55a48c14180b2992433d29ace85",
"type":"variable"
},
{
"text":")\n",
"type":"code"
}
],
"id":"af17e8b2e71143e890440310861281ca",
"type":"code"
}
],
"title":"Any"
},
{
"children":[],
"id":"c3b58d2d7b024fa4a0e5ff0bcf06d154",
"paragraphs":[
{
"chunkpath":[
"rules",
"astFnBody"
],
"filepath":[
"rlmeta",
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"0c1a9537d33148388015163fc90329b3",
"type":"variable"
},
{
"text":"\" ",
"type":"code"
},
{
"id":"8b98e38b093140fc956b35f6cbf5018e",
"type":"variable"
},
{
"text":":x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { 'self.",
"type":"code"
},
{
"id":"9b21a7a4087848ba8f2ada071a294d73",
"type":"variable"
},
{
"text":"(' x ')' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"258fb08008994945961815115488a6d4",
"type":"code"
},
{
"chunkpath":[
"classes",
"_RLMeta"
],
"filepath":[
"rlmeta",
"support.py"
],
"fragments":[
{
"text":"def ",
"type":"code"
},
{
"id":"9b21a7a4087848ba8f2ada071a294d73",
"type":"variable"
},
{
"text":"(self, matcher):\n    original_stream = self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":"\n    ",
"type":"code"
},
{
"id":"1f94d55a48c14180b2992433d29ace85",
"type":"variable"
},
{
"text":", ",
"type":"code"
},
{
"id":"5c352d6f3e54444cad73e2891e76e29a",
"type":"variable"
},
{
"text":" = self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":".",
"type":"code"
},
{
"id":"b2115b3eeaa143068958949787f5d104",
"type":"variable"
},
{
"text":"()\n    if isinstance(",
"type":"code"
},
{
"id":"1f94d55a48c14180b2992433d29ace85",
"type":"variable"
},
{
"text":", list):\n        self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":" = self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":".",
"type":"code"
},
{
"id":"653fc20558a64badb437b07f3d1c8490",
"type":"variable"
},
{
"text":"(",
"type":"code"
},
{
"id":"1f94d55a48c14180b2992433d29ace85",
"type":"variable"
},
{
"text":")\n        matcher()\n        if self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":".",
"type":"code"
},
{
"id":"4ad80c8d1d814fefa2656595f1d841c6",
"type":"variable"
},
{
"text":"():\n            self.",
"type":"code"
},
{
"id":"cf4267183a3b4175801c67496a385af6",
"type":"variable"
},
{
"text":" = ",
"type":"code"
},
{
"id":"5c352d6f3e54444cad73e2891e76e29a",
"type":"variable"
},
{
"text":"\n            return ",
"type":"code"
},
{
"id":"cbbcd925bc2c42b9add24aaa736f4d35",
"type":"variable"
},
{
"text":"(lambda: ",
"type":"code"
},
{
"id":"1f94d55a48c14180b2992433d29ace85",
"type":"variable"
},
{
"text":")\n    original_stream.",
"type":"code"
},
{
"id":"00fd348d71754fcfaadae0de1ee5f198",
"type":"variable"
},
{
"text":"(\"expected list match\")\n",
"type":"code"
}
],
"id":"05a21fd5bf134f7c9208572470e212e1",
"type":"code"
}
],
"title":"MatchList"
},
{
"children":[],
"id":"74804e4e0ee643ac95210d7aa17ae7c6",
"paragraphs":[
{
"chunkpath":[
"rules",
"ast"
],
"filepath":[
"rlmeta",
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"301f08856bf54373bc5975f75a315105",
"type":"variable"
},
{
"text":"\" .:x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { repr(x) ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"0fdb7fda246f4e99becb87637359df79",
"type":"code"
}
],
"title":"String"
},
{
"children":[],
"id":"03d7a70d44fe4470967acd15d51ad56a",
"paragraphs":[
{
"chunkpath":[
"rules",
"ast"
],
"filepath":[
"rlmeta",
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"49ba1aa1e24e408ba2b32bff68a72840",
"type":"variable"
},
{
"text":"\" ",
"type":"code"
},
{
"id":"2420b6bcf2374252a533688aa0b33b5f",
"type":"variable"
},
{
"text":":x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { x ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"47a643f9317f47afa2e6d5001b87a1ff",
"type":"code"
},
{
"chunkpath":[
"rules"
],
"filepath":[
"rlmeta",
"codegenerator.rlmeta"
],
"fragments":[
{
"id":"2420b6bcf2374252a533688aa0b33b5f",
"type":"variable"
},
{
"text":" ",
"type":"code"
},
{
"index":5,
"type":"tabstop"
},
{
"text":"= ",
"type":"code"
},
{
"id":"19791660815a43e1b775ea6a29349648",
"type":"variable"
},
{
"text":"*:xs ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { '(' xs '[])' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"eae26130c7a047daa3ae8fd86ea4a9b6",
"type":"code"
},
{
"chunkpath":[
"rules"
],
"filepath":[
"rlmeta",
"codegenerator.rlmeta"
],
"fragments":[
{
"id":"19791660815a43e1b775ea6a29349648",
"type":"variable"
},
{
"text":" =\n  | [\"",
"type":"code"
},
{
"id":"cf8770da147840679077788180e10778",
"type":"variable"
},
{
"text":"\" ast:x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> {     x  '+' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n  | ",
"type":"code"
},
{
"id":"8b98e38b093140fc956b35f6cbf5018e",
"type":"variable"
},
{
"text":":x ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { '[' x ']+' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"a9726003d9ff409aab302f66b5756a5b",
"type":"code"
}
],
"title":"List/ListItemSplice"
},
{
"children":[],
"id":"166dffacb2ca4911908584d77f30b21f",
"paragraphs":[
{
"chunkpath":[
"rules",
"ast"
],
"filepath":[
"rlmeta",
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"c9ecfed5791644a3b7ea2122d4ed87c9",
"type":"variable"
},
{
"text":"\" ",
"type":"code"
},
{
"id":"85ee4a0a694641c3aa683a15e6a0ba5d",
"type":"variable"
},
{
"text":":x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { '",
"type":"code"
},
{
"id":"49dc22ba19624755a18a13a9e76734b1",
"type":"variable"
},
{
"text":".",
"type":"code"
},
{
"id":"2e8a56ad01dc4a289fbd584bc4874e7e",
"type":"variable"
},
{
"text":"([' x '])' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"74eb55bab93644eca5a621d9469c86dc",
"type":"code"
},
{
"chunkpath":[
"rules",
"ast"
],
"filepath":[
"rlmeta",
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"d34e449a8ca740d0a4b84921fc05b25f",
"type":"variable"
},
{
"text":"\"] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { '",
"type":"code"
},
{
"id":"7d8a78dfe90743759bdd25cf45506815",
"type":"variable"
},
{
"text":"()' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"1f9c2f35e18d4eac90c9b8e8a7db8b32",
"type":"code"
},
{
"chunkpath":[
"rules",
"ast"
],
"filepath":[
"rlmeta",
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"7b75cb86cab34645b43d69d790e6e206",
"type":"variable"
},
{
"text":"\"] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { '",
"type":"code"
},
{
"id":"bfaedafcea7445e7b7ed19c9abb47736",
"type":"variable"
},
{
"text":"()' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"c4aaf6182aa34e73924627f6961161d4",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"rlmeta",
"support.py"
],
"fragments":[
{
"text":"class ",
"type":"code"
},
{
"id":"49dc22ba19624755a18a13a9e76734b1",
"type":"variable"
},
{
"text":"(object):\n\n    @classmethod\n    def ",
"type":"code"
},
{
"id":"2e8a56ad01dc4a289fbd584bc4874e7e",
"type":"variable"
},
{
"text":"(self, item):\n        if isinstance(item, ",
"type":"code"
},
{
"id":"49dc22ba19624755a18a13a9e76734b1",
"type":"variable"
},
{
"text":"):\n            return item\n        elif isinstance(item, list):\n            return ",
"type":"code"
},
{
"id":"b277e0c5612d4697bf8f8237494f8474",
"type":"variable"
},
{
"text":"([",
"type":"code"
},
{
"id":"49dc22ba19624755a18a13a9e76734b1",
"type":"variable"
},
{
"text":".create(x) for x in item])\n        else:\n            return ",
"type":"code"
},
{
"id":"50ee7994db484890abbeeb13330e22a7",
"type":"variable"
},
{
"text":"(item)\n\n",
"type":"code"
},
{
"blank_lines_before":0,
"path":[
"_Builder"
],
"prefix":"    ",
"type":"chunk"
}
],
"id":"b2a22c8337774967bcccbdd94d6d03a7",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"rlmeta",
"support.py"
],
"fragments":[
{
"text":"class ",
"type":"code"
},
{
"id":"b277e0c5612d4697bf8f8237494f8474",
"type":"variable"
},
{
"text":"(",
"type":"code"
},
{
"id":"49dc22ba19624755a18a13a9e76734b1",
"type":"variable"
},
{
"text":"):\n\n    def __init__(self, items):\n        self.items = items\n\n    def ",
"type":"code"
},
{
"id":"a5837c091631449aadeeaa004ae71b0b",
"type":"variable"
},
{
"text":"(self, output):\n        for item in self.items:\n            item.",
"type":"code"
},
{
"id":"a5837c091631449aadeeaa004ae71b0b",
"type":"variable"
},
{
"text":"(output)\n",
"type":"code"
}
],
"id":"fc7990fb7a544e24b79a140198b69c8b",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"rlmeta",
"support.py"
],
"fragments":[
{
"text":"class ",
"type":"code"
},
{
"id":"50ee7994db484890abbeeb13330e22a7",
"type":"variable"
},
{
"text":"(",
"type":"code"
},
{
"id":"49dc22ba19624755a18a13a9e76734b1",
"type":"variable"
},
{
"text":"):\n\n    def __init__(self, atom):\n        self.atom = atom\n\n    def ",
"type":"code"
},
{
"id":"a5837c091631449aadeeaa004ae71b0b",
"type":"variable"
},
{
"text":"(self, output):\n        output.",
"type":"code"
},
{
"id":"af5dbdd6e27c451398b2b116b5ff42d3",
"type":"variable"
},
{
"text":"(str(self.atom))\n",
"type":"code"
}
],
"id":"fd6eef92c8274c64a71d219fb2084dce",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"rlmeta",
"support.py"
],
"fragments":[
{
"text":"class ",
"type":"code"
},
{
"id":"7d8a78dfe90743759bdd25cf45506815",
"type":"variable"
},
{
"text":"(",
"type":"code"
},
{
"id":"49dc22ba19624755a18a13a9e76734b1",
"type":"variable"
},
{
"text":"):\n\n    def ",
"type":"code"
},
{
"id":"a5837c091631449aadeeaa004ae71b0b",
"type":"variable"
},
{
"text":"(self, output):\n        output.",
"type":"code"
},
{
"id":"8cb500cdd43d41a78158c645da945c70",
"type":"variable"
},
{
"text":"()\n",
"type":"code"
}
],
"id":"533041ab85ef4e13a5bdfd440fe344fa",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"rlmeta",
"support.py"
],
"fragments":[
{
"text":"class ",
"type":"code"
},
{
"id":"bfaedafcea7445e7b7ed19c9abb47736",
"type":"variable"
},
{
"text":"(",
"type":"code"
},
{
"id":"49dc22ba19624755a18a13a9e76734b1",
"type":"variable"
},
{
"text":"):\n\n    def ",
"type":"code"
},
{
"id":"a5837c091631449aadeeaa004ae71b0b",
"type":"variable"
},
{
"text":"(self, output):\n        output.",
"type":"code"
},
{
"id":"22163f4ee0fd4e68b2c95f94e111dee1",
"type":"variable"
},
{
"text":"()\n",
"type":"code"
}
],
"id":"cc6e0edd65614f4b8c470b167c521bd5",
"type":"code"
},
{
"chunkpath":[
"classes",
"_Builder"
],
"filepath":[
"rlmeta",
"support.py"
],
"fragments":[
{
"text":"def ",
"type":"code"
},
{
"id":"56d10f7bfcfd43bb996c3f76423b067b",
"type":"variable"
},
{
"text":"(self):\n    output = ",
"type":"code"
},
{
"id":"4c38cde583ac42ea8c7b9295a92e26f2",
"type":"variable"
},
{
"text":"()\n    self.",
"type":"code"
},
{
"id":"a5837c091631449aadeeaa004ae71b0b",
"type":"variable"
},
{
"text":"(output)\n    return output.value\n",
"type":"code"
}
],
"id":"795bcf7836b44c17996097b87dddd617",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"rlmeta",
"support.py"
],
"fragments":[
{
"text":"class ",
"type":"code"
},
{
"id":"4c38cde583ac42ea8c7b9295a92e26f2",
"type":"variable"
},
{
"text":"(object):\n\n    def __init__(self):\n        self.value = \"\"\n        self.level = 0\n\n    def ",
"type":"code"
},
{
"id":"8cb500cdd43d41a78158c645da945c70",
"type":"variable"
},
{
"text":"(self):\n        self.level += 1\n\n    def ",
"type":"code"
},
{
"id":"22163f4ee0fd4e68b2c95f94e111dee1",
"type":"variable"
},
{
"text":"(self):\n        self.level -= 1\n\n    def ",
"type":"code"
},
{
"id":"af5dbdd6e27c451398b2b116b5ff42d3",
"type":"variable"
},
{
"text":"(self, value):\n        for ch in value:\n            if self.value and ch != \"\\n\" and self.value[-1] == \"\\n\":\n                self.value += \"    \"*self.level\n            self.value += ch\n",
"type":"code"
}
],
"id":"fc6caf4810f146e1aac2556d5a12e242",
"type":"code"
}
],
"title":"\"Builder\""
},
{
"children":[],
"id":"f5372dab8e084ca386297eb9575052e8",
"paragraphs":[
{
"chunkpath":[
"rules",
"ast"
],
"filepath":[
"rlmeta",
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"0a8e6be4bec3466bb658d7d4ff5bc5fd",
"type":"variable"
},
{
"text":"\" .:x ",
"type":"code"
},
{
"id":"85ee4a0a694641c3aa683a15e6a0ba5d",
"type":"variable"
},
{
"text":":y] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { x '(' y ')' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"a264ffede57c4b6aa108a23f741bd694",
"type":"code"
}
],
"title":"FnCall"
},
{
"children":[],
"id":"d9f73bdeb5c447dbaf5b8fe0bf3b67ba",
"paragraphs":[
{
"chunkpath":[
"rules",
"ast"
],
"filepath":[
"rlmeta",
"codegenerator.rlmeta"
],
"fragments":[
{
"text":"| [\"",
"type":"code"
},
{
"id":"ae823ab23224415f9a539b0354f311b8",
"type":"variable"
},
{
"text":"\" .:x] ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"-> { '",
"type":"code"
},
{
"id":"289a3db9c53e420da4dbdbc94a32aadf",
"type":"variable"
},
{
"text":".",
"type":"code"
},
{
"id":"ea57b40b324c4c03b030c78e924ed860",
"type":"variable"
},
{
"text":"(' repr(x) ').",
"type":"code"
},
{
"id":"85139f1436944deab62958b8a713d8aa",
"type":"variable"
},
{
"text":"()' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"544bade2ad6a463db74a4b66c7cba6f7",
"type":"code"
},
{
"child_type":"unordered",
"children":[
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"How many times can/should a semantic action be evaluated?",
"type":"text"
}
]
}
],
"id":"9839e9dfe25e47a58b35987a6f5d6154",
"type":"list"
}
],
"title":"VarLookup"
},
{
"children":[],
"id":"d9ea64bbdad3465897667ebec9d5ace1",
"paragraphs":[
{
"fragments":[
{
"text":"The complete code generator:",
"type":"text"
}
],
"id":"245b8164d0dc473b8854c2becb228910",
"type":"text"
},
{
"code_id":"1a998747fffd406f9b8f0bed1e8740a1",
"id":"fc830b863d064f7eabe2e1ed36640b3f",
"type":"expanded_code"
},
{
"fragments":[
{
"text":"The complete support library:",
"type":"text"
}
],
"id":"187f9c4f928d4489a33562120216a287",
"type":"text"
},
{
"code_id":"36fdd2e9ccf7430bbf84158437d5c067",
"id":"1fdabe27b8fc4ef6a80aa4b9e7791560",
"type":"expanded_code"
}
],
"title":"Summary"
}
],
"id":"c3f29fa523f341a487ebc07209c471f9",
"paragraphs":[
{
"fragments":[
{
"text":"The code generator's job is to convert an AST to Python code. Here are the templates for the grammar and support library:",
"type":"text"
}
],
"id":"c56e60448b4e42df867652370c4fe2fb",
"type":"text"
},
{
"chunkpath":[],
"filepath":[
"rlmeta",
"codegenerator.rlmeta"
],
"fragments":[
{
"id":"8cf9a10b04cc48a484e1cb7c6f1f2f28",
"type":"variable"
},
{
"text":" {\n",
"type":"code"
},
{
"blank_lines_before":0,
"path":[
"rules"
],
"prefix":"  ",
"type":"chunk"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"1a998747fffd406f9b8f0bed1e8740a1",
"type":"code"
},
{
"chunkpath":[],
"filepath":[
"rlmeta",
"support.py"
],
"fragments":[
{
"blank_lines_before":1,
"path":[
"classes"
],
"prefix":"",
"type":"chunk"
}
],
"id":"36fdd2e9ccf7430bbf84158437d5c067",
"type":"code"
},
{
"fragments":[
{
"text":"The remainder of this section will fill in the details of the ",
"type":"text"
},
{
"id":"8cf9a10b04cc48a484e1cb7c6f1f2f28",
"type":"variable"
},
{
"text":" grammar and the support library.",
"type":"text"
}
],
"id":"469dbb83e24d41d0801793895d6d9ae8",
"type":"text"
}
],
"title":"Code generator"
},
{
"children":[],
"id":"2c78e9d9104c4bddbdd1dfe6314506c9",
"paragraphs":[
{
"fragments":[
{
"text":"Now almost all pieces are in place. Here is a script that compiles to a Python file that is a compiler (accepts source on stdin and writes output on stdout). It can also print the support library on stdout if the ",
"type":"text"
},
{
"text":"--support",
"type":"code"
},
{
"text":" flag is given.",
"type":"text"
}
],
"id":"a4ae12eb01a5413a939a01c84a6d10cf",
"type":"text"
},
{
"chunkpath":[
"python file template"
],
"filepath":[
"rlmeta",
"compile.sh"
],
"fragments":[
{
"text":"import sys\n\nSUPPORT = $",
"type":"code"
},
{
"id":"d09ab0856aa0453385e2158fad4dde9c",
"type":"variable"
},
{
"text":"\n\n$",
"type":"code"
},
{
"id":"6352455a9a4f44c984b2c210151858a2",
"type":"variable"
},
{
"text":"\n\n$",
"type":"code"
},
{
"id":"195e7fa2b75a40baa69b0bbf57a53150",
"type":"variable"
},
{
"text":"\n\n$",
"type":"code"
},
{
"id":"2ea1b512b7444d8ab077edeba233a4f3",
"type":"variable"
},
{
"text":"\n\njoin = \"\".join\n\ndef compile_grammar(grammar):\n    parser = Parser()\n    code_generator = CodeGenerator()\n    return code_generator.run(\"ast\", parser.run(\"grammar\", grammar))\n\nif __name__ == \"__main__\":\n    if \"--support\" in sys.argv:\n        sys.stdout.write(SUPPORT)\n    else:\n        try:\n            sys.stdout.write(compile_grammar(sys.stdin.read()))\n        except ",
"type":"code"
},
{
"id":"df25061bb4004aa693b603f0a8ec2af2",
"type":"variable"
},
{
"text":" as e:\n            sys.stderr.write(e.",
"type":"code"
},
{
"id":"e86cf4c2ab6c4d45948e33529e447036",
"type":"variable"
},
{
"text":"())\n            sys.exit(1)\n",
"type":"code"
}
],
"id":"f1a53c2ef9e741b2a4c21c13c67f1664",
"type":"code"
},
{
"chunkpath":[],
"filepath":[
"rlmeta",
"compile.sh"
],
"fragments":[
{
"text":"#!/bin/bash\n\nset -e\n\ncd \"$(dirname \"$0\")\"\n\n",
"type":"code"
},
{
"id":"83ce9666a26449cd9936798594c99e3f",
"type":"variable"
},
{
"text":"=\"$1\"\n\nto_python_string() {\n    python -c 'import sys; sys.stdout.write(repr(sys.stdin.read()))'\n}\n\n",
"type":"code"
},
{
"id":"6352455a9a4f44c984b2c210151858a2",
"type":"variable"
},
{
"text":"=$(cat support.py)\n",
"type":"code"
},
{
"id":"d09ab0856aa0453385e2158fad4dde9c",
"type":"variable"
},
{
"text":"=$(cat support.py | to_python_string)\n",
"type":"code"
},
{
"id":"195e7fa2b75a40baa69b0bbf57a53150",
"type":"variable"
},
{
"text":"=$(cat parser.rlmeta | python \"$",
"type":"code"
},
{
"id":"83ce9666a26449cd9936798594c99e3f",
"type":"variable"
},
{
"text":"\")\n",
"type":"code"
},
{
"id":"2ea1b512b7444d8ab077edeba233a4f3",
"type":"variable"
},
{
"text":"=$(cat codegenerator.rlmeta | python \"$",
"type":"code"
},
{
"id":"83ce9666a26449cd9936798594c99e3f",
"type":"variable"
},
{
"text":"\")\n\ncat <<EOF\n",
"type":"code"
},
{
"blank_lines_before":0,
"path":[
"python file template"
],
"prefix":"",
"type":"chunk"
},
{
"text":"EOF\n",
"type":"code"
}
],
"id":"fc33f048fabe4ac98caf108dd96e9799",
"type":"code"
}
],
"title":"Putting it together"
},
{
"children":[],
"id":"313b147a2f574ea09d76d9c7371bdf18",
"paragraphs":[
{
"fragments":[
{
"text":"If you run RLmeta on the parser grammar and the code generator grammar and combine it with the support library, you should get the functionality of the RLMeta compiler. But how can you run RLMeta before you have it? You have a bootstrapping problem.",
"type":"text"
}
],
"id":"97be5f1d197342b8a567f17d45d8db10",
"type":"text"
},
{
"fragments":[
{
"text":"In this case I solved it by translating the parser and the code generator manually according the the rules specified in the grammars.",
"type":"text"
}
],
"id":"97b7a76bf57c4567ac55f9912ff7e4c1",
"type":"text"
},
{
"fragments":[
{
"text":"TODO: show how one of the rules was manually translated.",
"type":"strong"
}
],
"id":"4686636ba5ce456da5be4ffb7f02cd59",
"type":"text"
},
{
"child_type":"unordered",
"children":[
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Last manual translation: 41094a184ed452141c99047d3187f096388e71d0",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Get rid of bootstrap code: 134c3a360160a2b978cd742a935df1c3a85de546",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Created manually with Vim templates",
"type":"text"
}
]
}
],
"id":"29fd2f33bf344dc0a09d34f914957291",
"type":"list"
}
],
"title":"Bootstrapping"
},
{
"children":[],
"id":"1aa2172a955f4e85a2badcec568db1ae",
"paragraphs":[
{
"fragments":[
{
"text":"TODO: Explain the possibilities with RLMeta implemented in itself. Not just YACC.",
"type":"strong"
}
],
"id":"1e1d159c98904249bbe2d6f386453916",
"type":"text"
}
],
"title":"Summary"
}
],
"id":"f5f122c94d3d4fa0b3a7e64a7fa0a724",
"paragraphs":[
{
"fragments":[
{
"text":"So far I've just given informal descriptions of how RLMeta works. To fully understand how arithmetic expressions are evaluated and compiled, you need to understand how RLMeta works. I will show how to use RLMeta to translate RLMeta grammars to executable Python code. That is how to implement the RLMeta compiler.",
"type":"text"
}
],
"id":"941e6240d48542d2b8bd9cfc55c5d551",
"type":"text"
},
{
"fragments":[
{
"text":"RLMeta grammars are translated in two stages: the first translates grammar syntax to an AST and the second translates the AST to a Python class. The generated Python class depends on a support library.",
"type":"text"
}
],
"id":"a476fb2e885b4071b0237eb5f6a17bf1",
"type":"text"
},
{
"fragments":[
{
"text":"RLMeta compiler internals illustrated.",
"type":"text"
}
],
"id":"630f0731e76141dfba74a05cbdff81ed",
"image_base64":"",
"type":"image"
},
{
"fragments":[
{
"text":"In order to implement the RLMeta compiler, the grammar for the parser and code generator have to be written. That is done in RLMeta. And the support Python library must be written.",
"type":"text"
}
],
"id":"80d695938fd840019e3e4abd8b43ef05",
"type":"text"
}
],
"title":"RLMeta in itself"
},
{
"children":[],
"id":"5f558623cfce441fb3e61033299d1419",
"paragraphs":[
{
"fragments":[
{
"text":"I hope that I've sparked your interest in metalanguages and convinced you that they are not terrebly complicated to implement. The part about being implemented in itself took me a long time to understand. I was helped by the following sources. Should you want to know more about metalanguages they might help you too.",
"type":"text"
}
],
"id":"91a672dc3aa0483196a9e23cb70134ae",
"type":"text"
},
{
"child_type":"unordered",
"children":[
{
"child_type":"unordered",
"children":[
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Metacompiler workshop",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Video about Lua implementation",
"type":"text"
}
]
}
],
"fragments":[
{
"text":"META II",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Ometa",
"type":"text"
}
]
}
],
"id":"e4125a19ab474510a27a3cd76c42c2f1",
"type":"list"
}
],
"title":"Learn more"
},
{
"children":[],
"id":"8f4baa392cfc4fe18f6796ea4c096135",
"paragraphs":[
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"* How to address the reader?\n* What do I want to say?\n    * Have I said it?\n* What one point to make?\n    * What to skip?\n    * Reductions time/place.\n* How much to cover?\n* I write this to learn about META. Clear writing is clear thinking.\n\n* Anyone who thinks clearly can write clearly\n* Every next sentence should build on the previous\n    * Logical small steps forward\n\n--\n\nThis is my report about implementing a META language. I have explored this\ntopic and I want to share my findings.\n\nHow does the computer know that \"x+y\" gives \"z\"? ... In this article I explore\nhow a meta language can answer that question.\n\nFootnotes:\n\n* The web version was made possible by writing the code generator and support\n  library in Javascript.\n\n* This is all about me trying to understand META II.\n\n--\n\nI want to exemplify how programs are executed on a computer. It is all about\nmatching and transforming. And it can be quite simple.\n\n--\n\nSimilar projects/inspiration:\n\n* Alan Kay\n* STEPS\n* META II\n    * Metacompiler workshop\n    * Video about Lua implementation\n* OMeta\n* Ohm\n",
"type":"code"
}
],
"id":"f863fbfa6b18493eb51009faa8ac685c",
"type":"code"
}
],
"title":"Notes"
}
],
"id":"9a483a4a28de4f298790297b5708b96f",
"paragraphs":[
{
"fragments":[
{
"text":"How does the computer know what to do with the following expression?",
"type":"text"
}
],
"id":"1d1852f165214216b1e730838fb98b4f",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"1+2*3\n",
"type":"code"
}
],
"id":"dd9049bffe13466b941e02b0edf3daad",
"type":"code"
},
{
"fragments":[
{
"text":"How does it know how to recognize the sequence of characters as an arithmetic expression? How does it know that ",
"type":"text"
},
{
"text":"2*3",
"type":"code"
},
{
"text":" should be computed first? How does it translate it to instructions that execute on the CPU?",
"type":"text"
}
],
"id":"d0230a0a282548c5a0b77ef0d16f27e2",
"type":"text"
},
{
"fragments":[
{
"text":"In this article I present a metalanguage that I've developed that can help answer those questions.",
"type":"text"
}
],
"id":"0aa7192e98bd4d02bdb9a0b059155310",
"type":"text"
}
],
"title":"RLMeta"
},
"variables":{
"0051e09230894b6696a82c3f05f6740a":"upper",
"00fd348d71754fcfaadae0de1ee5f198":"fail",
"0449532c17204462b4b4681b07ac12b5":"expr1",
"07c126c0f9094e189f37cc4ab940b0b4":"_memo",
"08c927c12a8741f9994399078b91d0b8":"_a864d6cb43244a1ca536085dd92431af",
"092fb427436241669092a2244dc64c33":"treeprinter_py",
"0a8e6be4bec3466bb658d7d4ff5bc5fd":"FnCall",
"0c1a9537d33148388015163fc90329b3":"MatchList",
"10d9c2de82a14d12bd545133bd4e15f8":"MatchString",
"1104a6a7ec934b48a4f1db64dcd27000":"_label",
"1659fb73179a4fd8abfc99b95d9f5560":"bind",
"1868228966e84ad698de9ff7fe063861":"space",
"18d86dcee79847818139f3dd7dc38d8a":"astSeq",
"193b6786b4574a48b5e75f649420b08d":"pos",
"195e7fa2b75a40baa69b0bbf57a53150":"parser_py",
"19791660815a43e1b775ea6a29349648":"astListItem",
"1e277b5550594e67a25fd80dc917ed21":"_dump_memo",
"1f94d55a48c14180b2992433d29ace85":"next_object",
"22163f4ee0fd4e68b2c95f94e111dee1":"dedent",
"229c153579734cffaa700c7e26bcd7f4":"_builder",
"2420b6bcf2374252a533688aa0b33b5f":"astList",
"2508a37fdce84b31a7e6093a98c57506":"BuildCharsec",
"25ec6fc64b8b4a39a9df41daa690386f":"MatchAny",
"26534c61b2d94990abb37ceeeb648e4f":"_ors",
"289a3db9c53e420da4dbdbc94a32aadf":"_vars",
"28ffce2da5724d248fa88ac555d118f8":"asListItemWithNewVars",
"291ec286c3ed4879b024d7df5db5fdde":"Parser",
"2a00f6add9e9443ab98af74a6da8b379":"run",
"2aa377816ed3486da72cff7bd46190ad":"Grammar",
"2c430882d5af40168a69e1b4b9eb7e0d":"_or",
"2e8a56ad01dc4a289fbd584bc4874e7e":"create",
"2ea1b512b7444d8ab077edeba233a4f3":"codegenerator_py",
"2f6729bf45e84649b3187f8016c3fec9":"_advance",
"301f08856bf54373bc5975f75a315105":"String",
"32f243f8879e4c38a5bfbd61623937d2":"_MatchError",
"331ec96e6c01440198c9134d85336b9b":"_Memo",
"373f023f0f5f4744a7b309cf9a76d138":"SemanticAction",
"3a76a9617ce44d7eb1609bbff707013e":"codegenerator_py",
"3b1db94c1404473c9afd3d95c8fb91bd":"_memo",
"3e7232e282f642ab8ac4fbe709a32a99":"_result",
"3f3db8526d034826bb4d672abcc6029c":"calculator_py",
"41435c2c862f40c1858cd2acd0b4f0bd":"Anonymous",
"42f0b42533be4f7eb54c04f22a137669":"grammar",
"43cd203f934f45c4be5ce3906b60ca5d":"_label",
"4852ced8038c4074a5a8104b8596e0e0":"Apply",
"49ba1aa1e24e408ba2b32bff68a72840":"List",
"49dc22ba19624755a18a13a9e76734b1":"_Builder",
"4ad80c8d1d814fefa2656595f1d841c6":"is_at_end",
"4c38cde583ac42ea8c7b9295a92e26f2":"_Output",
"4e5409ddd4a34450b3c8b4cb8bc5dd60":"escape",
"4e78a4bc50f744bb959c72b5918d9d32":"no_action",
"50ee7994db484890abbeeb13330e22a7":"_AtomBuilder",
"51046a6353b3472f8fe355d7f481eea9":"_b277e0c5612d4697bf8f8237494f8474",
"51620e4ed6bb4e359d4f6be5587dd423":"_Pos",
"53acf505e0ee41de85c674e211ecd39c":"_match_range",
"5440b88cecfb4dafad63f0f7887b82ce":"_match_charseq",
"56c85a8b77424f849f2a1b604066439e":"_or",
"56d10f7bfcfd43bb996c3f76423b067b":"to_rlmeta_output_stream",
"596495d8d3c041d190a3330d1707203c":"describe",
"59d465325dd74411b347002179ecda0a":"_last_match",
"5b5e4143fac64a7ba4fc1e5211b1d5f1":"fail",
"5b90ab050b7547de847cab210d087685":"support_py",
"5bad22de76f845a68dd802dcb830efcc":"wrapFn",
"5c352d6f3e54444cad73e2891e76e29a":"next_input",
"5cb361e64daa4aea9637f5b3fd6b91f0":"action",
"60d7dacf2a2b4336b0329665c2026cc0":"Star",
"622901123a0747d09cd41c9850f75b72":"092fb427436241669092a2244dc64c33_py",
"6230f0917e9f4954add45c5e39a557e0":"sequence",
"630b364d3e7345c098bc8cff819f4d99":"Or",
"6352455a9a4f44c984b2c210151858a2":"support_py",
"63d39eb3401840e681f80ff11203b175":"action",
"63e215a62fb74cebb9c2939e751e326f":"start",
"653fc20558a64badb437b07f3d1c8490":"nested",
"6544a37a96ce4294ab4553709d89f398":"_RLMeta",
"680e8a08749245bc9bbc232417da1d39":"choice",
"6860db9e40994ebfbe04834b4f12f721":"MatchRange",
"6a519019bfac49598dc36620b5b58811":"Bind",
"6b1fe389a7254359b3fbe4cb26ea084e":"nameChar",
"6de4b0de9db3465b89ec2278c5c557a8":"from_object",
"70c457e3514948bcb6c00b67e5a180a2":"_star",
"736cd2768dcd4843b43aca56bea200d3":"MatchNothing",
"739c23d655494bd8a8b9f16e3bd03a52":"wrapInAnd",
"747c1862acef4f499e2a7f16cbdd472a":"describe",
"793e09d183c5498fa2587841cd94c126":"char",
"7b75cb86cab34645b43d69d790e6e206":"DedentBuilder",
"7befab3d0c5747d687b20830147a70fa":"nameStart",
"7d667137ca2f4350969bcf2044d677de":"choices",
"7d82aaa0f3d34c059532d7a090654ab7":"string",
"7d8a78dfe90743759bdd25cf45506815":"_IndentBuilder",
"7ea6f6977ca24c218e28cd96b1cf8267":"_negative_lookahead",
"7f941dd526284ccc8143dbbc8ae8df3b":"sequence",
"826871508bad4fecb6e575779218874d":"_match",
"83ce9666a26449cd9936798594c99e3f":"rlmeta",
"846fccf81eca4ab48a284407a1647eaa":"_vars",
"85139f1436944deab62958b8a713d8aa":"eval",
"85ee4a0a694641c3aa683a15e6a0ba5d":"astItems",
"87bf33a4869b4d30944c4dd4388631a8":"statement",
"87debc7f453a48eab28b89389b5474a3":"charClass",
"8a8e32dcfa5545f7aa292dd7e696030a":"name",
"8a9e9ea4c4474b40934bd2ec52902c82":"",
"8b98e38b093140fc956b35f6cbf5018e":"ast",
"8c4b9e8c90ff4aa08d4840f8c1560522":"_match",
"8cb500cdd43d41a78158c645da945c70":"indent",
"8cf9a10b04cc48a484e1cb7c6f1f2f28":"CodeGenerator",
"8d17eff4871e411793cf0daf3a2ab204":"And",
"8d8408b72eb3446ab5493dad2c80477e":"lower",
"8f0ac7afdb164a6cb5287e9382330e91":"nothing",
"8ff0b4980efa4e349ec5ef14815be6ec":"MatchCharseq",
"91983a8c8ff04389a1c21c67abcebf46":"wrapInFn",
"938897d17c5542788155a92d7eddb73c":"_log",
"94dd8ae9174644c2bb5e32d35f601486":"astSeqItem",
"98e8edb80565419e93902ec6ebc5b352":"choice",
"99f12ae30d1a42989f875222b33832ba":"support",
"9b21a7a4087848ba8f2ada071a294d73":"_match_list",
"a304a36f0ab541209c9e8aa78f4edc46":"Parser",
"a4f50e79518843e985eb9545a235ae89":"_Vars",
"a5837c091631449aadeeaa004ae71b0b":"write",
"a5d8a6b567934dd6a53cb34b2a18d30c":"_last_match",
"a864d6cb43244a1ca536085dd92431af":"charseq",
"aa94c870055a417b852e05100fb546c0":"BuildDedent",
"ab4302beae5a4a689557c13e8d37179d":"Calculator",
"ab9490a5e7ba4561b96b04f481a9e57e":"_match_string",
"ae2f859206d741eca9f5e10495cb8095":"buildExpr",
"ae823ab23224415f9a539b0354f311b8":"VarLookup",
"af5dbdd6e27c451398b2b116b5ff42d3":"write",
"b058347d19484740b7e2dec4816c0978":"_ObjectStream",
"b062e0322e284160bf26034e9de32446":"memo_key",
"b09ffc5c602a482982cec2726c306ace":"withNewVars",
"b2115b3eeaa143068958949787f5d104":"next",
"b277e0c5612d4697bf8f8237494f8474":"_ListBuilder",
"b3480703b376431588d58149f19c7a13":"_star",
"b4b8cb5f4cdd4dc68ecc9ca100d1da5a":"_Stream",
"b6663a67104042fe8ee0bcb72896f366":"BuildNewline",
"b845c4cee1734619991d56de83dce37d":"Scope",
"bc27a67cb10b4650a32bfe7af84c5060":"Not",
"bd6daaaf4f8a47a1991da45be10921c3":"expr2",
"be57e79c16d8421fad091ec048a56211":"RetStringBuild",
"bf29f97b4f354ee5a3ac3d9346be1e52":"parser_py",
"bfaedafcea7445e7b7ed19c9abb47736":"_DedentBuilder",
"c590c92167d34fe4bfdbb084c03834c1":"_and",
"c76075de5ae9496f9ef5b3c800111ead":"_any",
"c8edc6f14d27480e9f737a7697f07f07":"rule",
"c9ecfed5791644a3b7ea2122d4ed87c9":"ListBuilder",
"cbbcd925bc2c42b9add24aaa736f4d35":"_SemanticAction",
"cc14e6fceec9478c8fdb4ac3a58dbf7a":"digit",
"ccb3f676f6314d788147dc603933cd28":"astItem",
"cf4267183a3b4175801c67496a385af6":"_stream",
"cf8770da147840679077788180e10778":"ListItemSplice",
"d09ab0856aa0453385e2158fad4dde9c":"support_py_string",
"d34e449a8ca740d0a4b84921fc05b25f":"IndentBuilder",
"d6ed0f3ac9e84f60bae25485ddb2f97e":"_CharStream",
"db7a0c597eb84fc1b38a59b22f01eeef":"nest",
"dc3d22a8b70043628b058ffd00659a5d":"BuildIndent",
"dd463f369f79475da606b1cfc2d96076":"hostExpr",
"de27a24b43ba4b2aa9b2bebd86e442b2":"_log",
"de5ba4ce4509433c946eacf356d7cfaa":"class:x ",
"de83a3a772234966ac566909fdfb0789":"file",
"df25061bb4004aa693b603f0a8ec2af2":"_MatchError",
"dfcaa421bd764cce9d99219c61883a45":"expr",
"e1248cbd01c54a1680793b61e7a048e1":"innerChar",
"e22e419d7c4845389694467bfa395529":"_f49eae10880e4186a37c021e34aea403",
"e22fa3c5d4144197906cbb74af6cc83e":"Rule",
"e45d3bc7fadf4cc1bd02843c87f0d034":"original_stream",
"e521dea02b37474cb05f03e800132aa2":"_last",
"e86cf4c2ab6c4d45948e33529e447036":"describe",
"ea57b40b324c4c03b030c78e924ed860":"lookup",
"ec2b7e954fe24f329250bd22c70538e4":"_Vars",
"ee43fa1a15be4277b8bdd277451eb04d":"_and",
"efa7dd37aa9e46908ed34f8d31cd476d":"Or",
"f49eae10880e4186a37c021e34aea403":"_ands",
"f8026a10c5b64e46bfde32e671e4760e":"_7ea6f6977ca24c218e28cd96b1cf8267",
"f8b8599256e946a08d2325d52bf8e10b":"BuildVar",
"f978010a00194df8a0ce393bb6ff677a":"CodeGenerator",
"fdd8dd7ed7f54cc487c14cc791d637e2":"wrapInOr",
"fe84c1eea3fc4476bbcb1c717c92d43b":"hostExprListItem",
"ff0229c63d8a4b4897faed8c38201de3":"astFnBody",
"ff9ae871d46e43eca6fe9d752dfb7afc":"pexpr"
}
}