CodeGenerator {
  ast =
    | ["Grammar" .:x ast*:ys]    -> { "class " x "(_Grammar):\n" > #rules "\n" ys <       }
    | ["Rule" .:x ast:y]         -> { "\ndef _rule_" x "(self):\n" > "return " y "()\n" < }
    | ["MatchAny"]               -> { "self._match_any"                                   }
    | ["String" .:x]             -> { repr(x)                                             }
    | ["List" astList:x]         -> { x                                                   }
    | ["Builder" .:x astItems:y] -> { "_Builder.create([" y "], " repr(x) ")"             }
    | ["Fork" .:x]               -> { "_ForkBuilder(" repr(x) ")"                         }
    | ["IndentBuilder"]          -> { "_IndentBuilder()"                                  }
    | ["DedentBuilder"]          -> { "_DedentBuilder()"                                  }
    | ["FnCall" .:x astItems:y]  -> { x "(" y ")"                                         }
    | ["VarLookup" .:x]          -> { "_vars.lookup(" repr(x) ").eval()"                  }
    | astFnBody:x #:y            -> { @rules { #rules "\ndef _rule" y "(self):\n" > x < } "self._rule" y        }
  astFnBody =
    | ["Or" astItems:x]          -> { "return self._or([" x "])"                                 }
    | ["Scope" ast:x]            -> {
      "self._vars.append(_Vars())\n"
      "result = " x "()\n"
      "self._vars.pop(-1)\n"
      "return result"
    }
    | ["And" astItems:x]         -> { "return self._and([" x "])"                                }
    | ["Bind" .:x ast:y]         -> { "return self._vars[-1].bind(" repr(x) ", " y "())"         }
    | ["Star" ast:x]             -> { "return self._star(" x ")"                                 }
    | ["Not" ast:x]              -> { "return self._not(" x ")"                                  }
    | ["SemanticAction" ast:x]   -> { "return _SemanticAction(lambda _vars: " x ", self._vars[-1])"                    }
    | ["Label"]                  -> { "return _Label(self)"                                      }
    | ["MatchRule" .:x]          -> { "return self._match_rule(" repr(x) ")"                     }
    | ["MatchRange" .:x .:y]     -> { "return self._match_range(" repr(x) ", " repr(y) ")"       }
    | ["MatchString" .:x]        -> { "return self._match_string(" repr(x) ")"                   }
    | ["MatchCharseq" .:x]       -> { "return self._match_charseq(" repr(x) ")"                  }
    | ["MatchList" ast:x]        -> { "return self._match_list(" x ")"                           }
  astItems = astItem*:xs         -> { "\n" > xs <                                         }
  astItem  = ast:x               -> { x ",\n"                                             }
  astList  = astListItem*:xs     -> { "(" xs "[])"                                        }
  astListItem =
    | ["ListItemSplice" ast:x]   -> {     x  "+"                                          }
    | ast:x                      -> { "[" x "]+"                                          }
}
