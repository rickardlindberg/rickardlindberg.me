Assembler {
  expr = [instr*:xs]     -> [~~xs]
  instr =
    | ["section" .:x]    -> []
    | ["directive" .:x]  -> []
    | ["label" .:x]      -> []
    | [%:x]              -> x
  syscall =              -> [5]
  push = const:x         -> [0x6a ensureByte(x)]
  pop  = reg:r           -> [add(0x58 r)]
  imul = reg:r1 reg:r2   -> [0x48 0x0f 0xaf r1 r2]
  add  = addr:m reg:r    -> [r m]
  mov  =
    | reg:r  addr:m      -> [50 m r]
    | addr:m reg:r       -> [50 r m]
    | reg:r  const:i     -> [50 i]
  const = ["const" .:i]  -> i
  addr  = ["addr" .:m]   -> m
  reg   = ["reg" regn:r] -> r
  regn =
    | "rax" -> 0
    | "rbx" -> 3
    | "rdi" -> 5
}
