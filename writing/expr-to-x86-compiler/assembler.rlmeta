Assembler {
  expr   = [instr*:xs]       -> [~~xs]
  instr  = [%:x]             -> x
  add    =
    | reg64:r const:i        -> [0x48 0x83 directModRm(r) ensureByte(i)]
    | reg32:r addr:m         -> []
  sub    =
    | reg64:r const:i        -> []
    | reg32:r addr:m         -> []
  imul   =
    | reg32:r addr:m         -> []
  cdq    =                   -> []
  idiv   =
    | "long" addr:m          -> []
  mov    =
    | addr:m  reg32:r        -> []
    | reg32:r const:i        -> []
  addr   = ["addr" reg64n:n] -> n
  reg64  = ["reg"  reg64n:n] -> n
  reg64n =
    | "rdi" -> 7
  reg32  = ["reg"  reg32n:n] -> n
  reg32n =
    | "eax" -> 0
  const  = ["const" .:i]     -> i
}
