{
"root_page":{
"children":[
{
"children":[],
"id":"39efe623ff374daba9830984300fcde2",
"paragraphs":[
{
"fragments":[
{
"text":"A compiler translates source code into an executable:",
"type":"text"
}
],
"id":"e192774e5eeb495589a7021b6f8f4d88",
"type":"text"
},
{
"fragments":[],
"id":"39b8446c778f43a4bb2525b200bbd5fc",
"image_base64":"iVBORw0KGgoAAAANSUhEUgAAAXwAAAA5CAYAAAA1BZChAAAABHNCSVQICAgIfAhkiAAAC0BJREFUeJzt3XtQlPUaB/BnubcsrKzAQrCwyAHFC2qigJgiWlRzLJsJOCpZM+eUJwtOI3NMExPN0jyTKZqpU82kYHlFrU5qdtJSbl7r5C1FMVBYTeVqsCz7PX94eMd12WWXRV7wfT4zv4H39nuf3/v89hn2x00GAMRYOxoaGsjLy0vsMJidkpOTac+ePWKHwXqePU5iR8B6NoVCQQC49ZJWXFxMNTU1Yk8b1kNxwWeMMYnggs8YYxLBBZ8xxiSCCz5jjEkEF3zGGJMILviMMSYRXPAZY0wiuOAzxphEcMFnjDGJ4ILPGGMSwQWfMcYkggs+Y4xJBBd8xhiTCC74jDEmEVzwGWNMIlwIRrFjYD1V29zgOdJ7cM6YJTKZkwsR/8MrZgnu+ch6BxDnjJmDMy/pMMaYRHDBZ4wxieCC7yCPhzypsrJS7DCYg4YNf4T27/9O2K6rqyNtWDj5qwMpcXySiJGx3kgbFk5Hjx4z2y/2vOKCzxgRzZ0zhwYM6C9se3t7U/mlMlrz4WoRo2JiW7z4Hfr7KzO7rD+x5xUXfAnLzV1Fu3d/KXYYPUJaWioFBweLHUav9fPP/6X5by2gxsZGsUNhVthV8MvKymjsuERS9fWjgMAgWrTobeHYxYsXKWnCROrj05eihw6jgwd/MLn2TxH9qbi4RNj29VPT2bNnhW1tWDitWfMRRQ8dRoEPB9PUaenCsXXr1tOAqEHkrfSh0QljhCUUnU5HKalp5OunpojIAVRQsNOuwVvq19pYjh8/QcOGP0LeSh/KWbjIpD9H4+lu58+fp2cmP0sJCY/S6dOnxQ6HiOzPSV5ePo2IGUmaEC1NnZZOKalpFBAYRMePnyAiomBNKM189TWKH51Ag4dE0+bNW0zut2LFStKGhZOb+0MmSzod6SjX1ubzg6ipqYkWL36HNCFays/fRID9PyVk6ZneuHGDNCFaKiwsIiKi69evU1BwCJWWHrF63d0szStLdeno0WOkDQun95d/QPn5m0gbFk7asHC6ffs2EREtW/Yv6hceQd5KH3pkRAwdOHDQ7J67du8mdcDDFBIaRnl5+Q49gy4DowG2tvT0acjKmgVjawvqam/hxx8OCsfi4+Mwe/Y/oW/+Azu2b4NKpUJtzU3heHh4OIoKDwvbffv2xZnTvwjboaGhiI+PwzVdFWA04OyZU4DRgC2bv0BISAhOnjgOQ0szDh74HhfLzgNGAxITx2HmzFfQ9Ecjfjp5Ar6+vrhcftGmsVjr19JYWg16REREYMUHy9HcdBtZWbNARKj4rdzheMRor706E0QEZ2dnuLu748UXXxCeP4wG1NfVQKFQdFs8ncnJxg2fYfToeNTX1UAul+PfX3+FpUveRVbWLMBoQFBQEKZM+QtgNKD8UhmUSiWuXqkwu/fQodH4dt9es/1bt2zGuHFjzfZ3lGtL8/l+t+KiQsTGjur2uVRSXASFQgEigqenJwYNGoTDh360qw9rz3Tvnm8QERGBhvpaPPvsZCzMWWBzLqzNq47q0tuLFmLGjJfNYl2/bi3OnjmFVoMe27dthZeXFxrqa03yP2FCEhrqa1FUeBhyudwkps7OK4caDPvtKvjTpz+PtLRUocC1NV31VRARbvx+TdgXFRWFL3fvErZtKfib8vPM7vnkk0/gg+Xvm+0vu/ArXF1dTR7y1KlTsG7tRzaNxVK/1sZy6pefIZfL0aJvAowGVF2tFAq+o/GI0doKfltzd3eHXC7H8uXvo0Xf1O0FvzM52bjhM6SnTwOMBmi1Wlw4fw5ffL5J2BcUFISvv/pSuG7ixAn49JOPze5hT8G3JdeW5vP9bj2h4BMRZDIZ3Nzc8PSkSfjt8qUOr7flmWZmZmD48GGIi4uFoaXZ5usszSsYO1/w722+vr746eQJk/wX7NgubCcljTeJqbPzyqEGw34Xe94NLF3yLs3Lnk8jR8WRh4cHvbd0CaWmptC1a9fJ1dWVVCqVcG5AgJqqq6vterfRr18/s30VFRWk1Wrb2X/nLdmImFHCvsbGRooeMsSme1nq19pYFAoF+fr6kouLy//3B5CTk1OXxPPNN3uopKTUpnO7Sttb4jbNzc1ERJSdPZ9WrVpNuStXdGs8ncmJh4cHOTs7ExGRs7Oz0AwGg3Cuj4+P8LlKpSKdTudgnLblur353B30ej3l5Czq+MQudOXKFdLr9cI2ANLr9bR33z6K7B9F87PnUVbWLHJ3d2/3elue6YyXX6Lc3FW0ft1aIee2XGdpXjmioGAnvbdsGVVX35lLt27dopaWFpNz1Gq1yefXrl2z2qejNcQWdhX8wMBA+vSTj4mIaOvWbfTXv71EKSnPkb+/H7W0tNDNmzeFF2V1tc5kwB4e7sKLEADV19eb9d+WxLtpNBoqLy9vZ38weXl50ZnTv5BMJrNnGFb7tTYWtdqfamtrhXNra2vJaDR2STw9jRgj6ExO7s7H3e5eQ66qqjL5PPnxx22Oyc3NjVpbW++J07ZctzefWfs6eqatra300sszKDMzgxbkLKRJk/5MAQEBNuXC0rwi6rguOTk5mX0/QqfTUfrz0+nA9/+hkSNjiIhI1dfP7Ly7v+DV6XQ0PjFR2HZkXjnEnrcEu3YWCOufBTu2IzAwUDgWGzvKZI1VqVTi1s3fheOTJz+DZe8tBYwGbNu6BURktqRzpLTE7J6bv/gcGo0GP508gVaDHod+/EFYfxs79lFkZ8/D7cZ6NDfdxrf79uLC+XM2jcVav5bG0mrQIzIyUlgiWJW70mQN35F4xGg9bUmnMznZuOEzvPDCdMB45+35pYsXsHXLZqSlpQLGO0s6SUnjUV9Xg8LDhyCXy1FZcdns3paWdM6eOQWVSoXfr+tM9neUa0vz+X63nrakk5LyHKquVtrUh7VnumhhDp566knAaMDCnAV44olkGFtbbMqFtXnVUV369JOPMWZMgrCEBKMBF86fg1KpRH1djdA/EZnku701/LuXwjs7rxxqsHMNPzt7HgIDA+Ht7Y0hQwZj/7f7hGO/njuDxMRx8Pb2xuDBg8xePMeOHkH//v0xZkwCFi3MaXcN39IL5MPVqxAZGQmFQoH4+DhhTbDqaiVSU1Pg5+eHPn36YOLECXY9HEv9WhvLiePHMHJkDOLiYpGR8Rrc3NyERDoaT3e3nvZN287kxJaC/+abc+Hn5weNRmO2rj5w4ECEhobC1dUVarUaoaGhyNu4weScN96YDaVSCU9PT9TcumFTrqVc8Nu+aVt4+JBdfVh6piXFRfD39xe+2GzRNyEmZgRyV66wKRfW5lVHdam25iaSksZDrVYjKCgIjQ11gNGAnAVvISoqCo89NhFz586BRqMxK/jz5r0Jf39/aDQa5OdtNBtvZ+aVQw2G/TIYDfxXliQqIyOTVn+4hhISRtP6dWtp4MCBJscbGhoo8OFgqq+rESlCxwVrQmlnwQ6KiRkhdijdoqSklP7x+utUXFTYrfctLT1CsXHxpFKpKHflCpo6dcoDsbT5QJHRd3at4bMHS0REBO3aWUBPPz1J7FBYL+fh4UHZ2fNozhuzydPTU+xwmAVc8CUsMzND7BDYAyI6eghFR3fdT5Ow+4MLPnugVVZcFjsExnoM/ls6jDEmEVzwGWNMIrjgM8aYRLiI8zuVrHeQ3fOR9Q4y4pwxc7JWF5LxF/nMgra5wXOk9+CcMcuMPCsYY0wiuOAzxphEcMFnjDGJ4ILPGGMSwQWfMcYkggs+Y4xJBBd8xhiTCC74jDEmEVzwGWNMIrjgM8aYRHDBZ4wxieCCzxhjEsEFnzHGJIILPmOMSQQXfMYYkwj+J+bMIldXVwJAMhn/M43eJDk5WewQGGOMMSam/wEzA43KCPab5gAAAABJRU5ErkJggg==",
"type":"image"
},
{
"fragments":[
{
"text":"A C compiler translates source code written in C into an executable:",
"type":"text"
}
],
"id":"247442defad9486dbbc00a80a7ba5853",
"type":"text"
},
{
"fragments":[],
"id":"789da36df4454623b4c6c7fb5ff5e597",
"image_base64":"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",
"type":"image"
},
{
"fragments":[
{
"text":"A metacompiler translates source code written in a metalanguage into an executable:",
"type":"text"
}
],
"id":"dda8f4fc2f004d3fb52fe16672790891",
"type":"text"
},
{
"fragments":[],
"id":"273ca8f69ebc42b7a4ed48cf0a4a36cc",
"image_base64":"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",
"type":"image"
},
{
"fragments":[
{
"text":"A metalanguage is a domain specific language for describing other languages. It can be used to describe what languages look like (their syntax) and how to translate them into executables (their semantics). In essence, it can be used to describe compilers.",
"type":"text"
}
],
"id":"2ae1792b33f04c3cb643d28db004a5f9",
"type":"text"
},
{
"fragments":[
{
"text":"Because a metalanguage can be used to describe any compiler, it can also be used describe the metacompiler itself. The metacompiler translates such a description into itself:",
"type":"text"
}
],
"id":"05285271f1cc494ca90f7d3d9a1dcd91",
"type":"text"
},
{
"fragments":[],
"id":"2296fe8e295d44489c35e0328c5c9c86",
"image_base64":"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",
"type":"image"
},
{
"fragments":[
{
"text":"A metacompiler does not necessarily have to be implemented in the metalanguage itself, but I suspect that it is common that it is. RLMeta is indeed implemented in its own language. This is also known as self-hosting. For the rest of this article, I will assume that a metacompiler is also self-hosting.",
"type":"text"
}
],
"id":"bc611e48de17497caa0a20eaa7664dba",
"type":"text"
},
{
"fragments":[
{
"text":"A C compiler written in C is not a metacompiler because C is not a metalanguage. It is a general purpose programming language not designed specifically to describe other languages. Such compiler is merely a self-hosting compiler.",
"type":"text"
}
],
"id":"68a70728549c41478d8110b0248c678c",
"type":"text"
}
],
"title":"What is a metacompiler?"
},
{
"children":[],
"id":"93d9030e0e4849c5a8d8ca0fffdf7592",
"paragraphs":[
{
"fragments":[
{
"text":"In general, to modify a program written in a compiled language, its source code and a compiler is needed. Modifying the program is a matter of modifying the source code and compiling it:",
"type":"text"
}
],
"id":"e0a64299fcfa4b19ab466704dee628e3",
"type":"text"
},
{
"fragments":[],
"id":"890219b4ed2642b9b5cd65f16e965cc0",
"image_base64":"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",
"type":"image"
},
{
"fragments":[],
"id":"ed5d9cd8afce4af8bff1229d516c88bf",
"image_base64":"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",
"type":"image"
},
{
"fragments":[
{
"text":"In the case of a metacompiler, the compiler and the executable is the same. However, if the source code is changed, the executable might not be the metacompiler itself:",
"type":"text"
}
],
"id":"5e43207a89814de58fe844c511df67f9",
"type":"text"
},
{
"fragments":[],
"id":"3f6b2be2bc824534a298bad799f9182d",
"image_base64":"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",
"type":"image"
},
{
"fragments":[],
"id":"6cc52d10c9e44955943140a331e085b8",
"image_base64":"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",
"type":"image"
},
{
"fragments":[
{
"text":"At this point, the metacompiler is needed to keep maintaining the modified executable. But the source code for the metacompiler itself is \"lost\" because the metacompiler can not be reproduced from the modified source code:",
"type":"text"
}
],
"id":"9aca2d8b77714269915348220a80b2f3",
"type":"text"
},
{
"fragments":[],
"id":"c1a9074398614804a3b71baaa8fe3733",
"image_base64":"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",
"type":"image"
},
{
"fragments":[
{
"text":"Because there is no source code, the original metacompiler can not be modified either.",
"type":"text"
}
],
"id":"52e85832ecd94b3cac6f44a322e61e51",
"type":"text"
},
{
"fragments":[
{
"text":"When making changes to a metacompiler, care has to be taken to ensure that, in the end, the executable is still a metacompiler. Otherwise the metacompiler can not be modified further. This is a key difference from modifying a regular program. (Similar care has to be taken when modifying a self-hosting compiler.)",
"type":"text"
}
],
"id":"c363ade479ef4a0cb62a455a36b802c5",
"type":"text"
}
],
"title":"Modifying a metacompiler"
},
{
"children":[],
"id":"bf2e6a99e41f478f884dd15ea243c111",
"paragraphs":[
{
"fragments":[
{
"text":"RLMeta is compiled with the ",
"type":"text"
},
{
"text":"compile.sh",
"type":"code"
},
{
"text":" script. It takes one argument which is the path to the RLMeta compiler. The script uses that compiler to compile the source code and then assemble the output to a Python file that looks like this:",
"type":"text"
}
],
"id":"22f617b9696f41d68c4ddeb7889d94c5",
"type":"text"
},
{
"chunkpath":[
"rlmeta template"
],
"filepath":[
"compile.sh"
],
"fragments":[
{
"text":"import sys\n\nSUPPORT = $support_py_string\n\n$support_py\n\n$parser_py\n\n$codegenerator_py\n\njoin = \"\".join\n\ndef compile_grammar(grammar):\n    parser = Parser()\n    code_generator = CodeGenerator()\n    return code_generator.run(\"ast\", parser.run(\"grammar\", grammar))\n\nif __name__ == \"__main__\":\n    if \"--support\" in sys.argv:\n        sys.stdout.write(SUPPORT)\n    else:\n        try:\n            sys.stdout.write(compile_grammar(sys.stdin.read()))\n        except _MatchError as e:\n            sys.stderr.write(e.describe())\n            sys.exit(1)\n",
"type":"code"
}
],
"id":"cab1f5d6d3c0412696419fd2f8c0ab88",
"language":"python",
"type":"code"
},
{
"fragments":[
{
"text":"The variables ",
"type":"text"
},
{
"text":"$support_py",
"type":"code"
},
{
"text":", ",
"type":"text"
},
{
"text":"$parser_py",
"type":"code"
},
{
"text":", and ",
"type":"text"
},
{
"text":"$codegenerator_py",
"type":"code"
},
{
"text":" are produced by the RLMeta compiler. The variable ",
"type":"text"
},
{
"text":"$support_py_string",
"type":"code"
},
{
"text":" is produced by converting the support library to a Python string. Here is the rest of the ",
"type":"text"
},
{
"text":"compile.sh",
"type":"code"
},
{
"text":" script:",
"type":"text"
}
],
"id":"ac4e4f2a863f48e4a82eddbc322b4d54",
"type":"text"
},
{
"chunkpath":[],
"filepath":[
"compile.sh"
],
"fragments":[
{
"text":"#!/bin/bash\n\nset -e\n\nrlmeta_compiler=\"$(pwd)/$1\"\n\ncd \"$(dirname \"$0\")\"\n\nto_python_string() {\n    python -c 'import sys; sys.stdout.write(repr(sys.stdin.read()))'\n}\n\nsupport_py_string=$(to_python_string < support.py)\nsupport_py=$(python \"$rlmeta_compiler\" --support)\nparser_py=$(python \"$rlmeta_compiler\" < parser.rlmeta)\ncodegenerator_py=$(python \"$rlmeta_compiler\" < codegenerator.rlmeta)\n\ncat <<EOF\n",
"type":"code"
},
{
"blank_lines_before":0,
"path":[
"rlmeta template"
],
"prefix":"",
"type":"chunk"
},
{
"text":"EOF\n",
"type":"code"
}
],
"id":"ef234944361c48eeb16387d8014a4c9b",
"type":"code"
}
],
"title":"Compiling RLMeta"
},
{
"children":[],
"id":"75ad82923a2142789d01ca5be1d11942",
"paragraphs":[
{
"fragments":[
{
"text":"The ",
"type":"text"
},
{
"text":"is_metacompiler.sh",
"type":"code"
},
{
"text":" script checks if a given file is a metacompiler. It does so by comparing the file to the file generated by the ",
"type":"text"
},
{
"text":"compile.sh",
"type":"code"
},
{
"text":" script. If they are equal, the file is a metacompiler because it reproduced itself exactly. Otherwise the two files differ.",
"type":"text"
}
],
"id":"734c020ee59a4446a84baeeab3e5c655",
"type":"text"
},
{
"chunkpath":[],
"filepath":[
"is_metacompiler.sh"
],
"fragments":[
{
"text":"if diff \"$1\" <(./compile.sh \"$1\"); then\n    echo \"$1 is a metacompiler!\"\nelse\n    echo \"$1 is not a metacompiler. See diff above.\"\nfi\n",
"type":"code"
}
],
"id":"51c75af0347d416181ffec8cab1f0c51",
"type":"code"
},
{
"fragments":[
{
"text":"RLMeta is a metacompiler because its source code is written in a metalanguage and it is able to reproduce itself:",
"type":"text"
}
],
"id":"d86dd49a17e94d2694bedd68c178a028",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"$ ./is_metacompiler.sh rlmeta.py\nrlmeta.py is a metacompiler!\n",
"type":"code"
}
],
"id":"8e96b580ce5c4ed2bc67997925bc1117",
"type":"code"
},
{
"fragments":[
{
"text":"The following sections show examples of how to make changes to RLMeta that ensure that the modified version is still a metacompiler.",
"type":"text"
}
],
"id":"d21afc4f5e604e78b978a9ff65b73c3f",
"type":"text"
}
],
"title":"Verifying metacompiler"
},
{
"children":[],
"id":"5f6a1c91143146dbb3b865ac42562135",
"paragraphs":[
{
"fragments":[
{
"text":"The code generator in RLMeta generates lambda expressions with newlines and indentation:",
"type":"text"
}
],
"id":"c5cf0946f71647f687176d66e5e4fb2f",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"(lambda:\n    ...\n)\n",
"type":"code"
}
],
"id":"cc11caffc9884033bff44020b3fa3632",
"language":"python",
"type":"code"
},
{
"fragments":[
{
"text":"It might be desirable to instead generate lambda expressions without the additional punctuation because it is faster and does not make the generated code less readable:",
"type":"text"
}
],
"id":"72a9d99eed5349d587fd9d5d49145541",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"(lambda: ...)\n",
"type":"code"
}
],
"id":"b7c19d3dc91340c5aa0de1cb3ccd3c86",
"language":"python",
"type":"code"
},
{
"fragments":[
{
"text":"This is achieved by changing the following line in the code generator",
"type":"text"
}
],
"id":"c73514c15f9749a29e5d070423aee716",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"| astFnBody:x -> { \"(lambda:\\n\" > x < \"\\n)\" }\n",
"type":"code"
}
],
"id":"75962a34bc124422840c608c5ce11574",
"language":"rlmeta",
"type":"code"
},
{
"fragments":[
{
"text":"to",
"type":"text"
}
],
"id":"971eabd00f6143428fe06553074e4cb8",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"| astFnBody:x -> { \"(lambda: \" x \")\" }\n",
"type":"code"
}
],
"id":"00aa8eafb77042e58c86e630149b9d27",
"language":"rlmeta",
"type":"code"
},
{
"fragments":[
{
"text":"The modified source code describes a metacompiler whose code generator generates lambda expressions without additional punctuation.",
"type":"text"
}
],
"id":"aef5814858194975a5121743ad87519b",
"type":"text"
},
{
"fragments":[
{
"text":"Compiling the modified source code gives a new executable:",
"type":"text"
}
],
"id":"0be1c52082a54085a0e9f0e94702a4e7",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"$ ./compile.sh rlmeta.py > rlmeta1.py\n",
"type":"code"
}
],
"id":"7a6b856affa54cc4bdb62fd5a0b4f137",
"type":"code"
},
{
"fragments":[],
"id":"43e3cf9387794a2aba1ea4d1a298d7ac",
"image_base64":"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",
"type":"image"
},
{
"fragments":[
{
"text":"With this modification, ",
"type":"text"
},
{
"text":"rlmeta.py",
"type":"code"
},
{
"text":" is no longer a metacompiler because it differs from ",
"type":"text"
},
{
"text":"rlmeta1.py",
"type":"code"
},
{
"text":":",
"type":"text"
}
],
"id":"c16df5bc53fc422796deaf081c25ae8b",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"$ ./is_metacompiler.sh rlmeta.py\n1685,1686c1685\n<                                         '(lambda:\\n',\n<                                         _IndentBuilder(),\n---\n>                                         '(lambda:',\n1688,1689c1687\n<                                         _DedentBuilder(),\n<                                         '\\n)',\n---\n>                                         ')',\nrlmeta.py is not a metacompiler. See diff above.\n",
"type":"code"
}
],
"id":"90cf5d9eca604cd8becd3e9feca345dc",
"language":"diff",
"type":"code"
},
{
"fragments":[
{
"text":"The difference is that the code for generating lambda expressions is different. ",
"type":"text"
},
{
"text":"rlmeta1.py",
"type":"code"
},
{
"text":" should still be a compiler that recognizes the same source language so it can be used to compile the modified source code again, giving yet another executable:",
"type":"text"
}
],
"id":"fde362e72d364e7a8698cca2495fadfe",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"$ ./compile.sh rlmeta1.py > rlmeta2.py\n",
"type":"code"
}
],
"id":"d9e1b2a1b8484b6ba4122794a3df0e20",
"type":"code"
},
{
"fragments":[],
"id":"dfc634f527234ed0be4e5c6b84df0ba5",
"image_base64":"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",
"type":"image"
},
{
"fragments":[
{
"text":"rlmeta1.py",
"type":"code"
},
{
"text":" is not a metacompiler either because it differs from ",
"type":"text"
},
{
"text":"rlmeta2.py",
"type":"code"
},
{
"text":":",
"type":"text"
}
],
"id":"b65b2d835c0448d7a63e36fef48de55a",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"$ ./is_metacompiler.sh rlmeta1.py\n287,325c287,299\n<         return (lambda:\n<             self._or([\n<                 (lambda:\n<                     (lambda _vars:\n<                         (lambda:\n<                             self._and([\n<                                 (lambda:\n<                                     _vars.bind('x', (lambda:\n<                                         self._match_rule('name')\n<                                     )())\n<                                 ),\n<                                 (lambda:\n<                                     self._match_rule('space')\n<                                 ),\n<                                 (lambda:\n<                                     self._match_charseq('{')\n<                                 ),\n<                                 (lambda:\n<                                     _vars.bind('ys', (lambda:\n<                                         self._star((lambda:\n<                                             self._match_rule('rule')\n<                                         ))\n<                                     )())\n<                                 ),\n<                                 (lambda:\n<                                     self._match_rule('space')\n<                                 ),\n<                                 (lambda:\n<                                     self._match_charseq('}')\n<                                 ),\n<                                 (lambda:\n<                                     _SemanticAction(lambda: (['Grammar']+[_vars.lookup('x').eval()]+_vars.lookup('ys').eval()+[]))\n<                                 ),\n<                             ])\n<                         )()\n<                     )(_Vars())\n<                 ),\n<             ])\n<         )()\n---\n>         return (lambda: self._or([\n>             (lambda: (lambda _vars:\n>                 (lambda: self._and([\n>                     (lambda: _vars.bind('x', (lambda: self._match_rule('name'))())),\n>                     (lambda: self._match_rule('space')),\n>                     (lambda: self._match_charseq('{')),\n>                     (lambda: _vars.bind('ys', (lambda: self._star((lambda: self._match_rule('rule'))))())),\n>                     (lambda: self._match_rule('space')),\n>                     (lambda: self._match_charseq('}')),\n>                     (lambda: _SemanticAction(lambda: (['Grammar']+[_vars.lookup('x').eval()]+_vars.lookup('ys').eval()+[]))),\n>                 ]))()\n>             )(_Vars())),\n>         ]))()\n...\nrlmeta1.py is not a metacompiler. See diff above.\n",
"type":"code"
}
],
"id":"27880ff33fae4aafa40bd977cc4cd0c4",
"language":"diff",
"type":"code"
},
{
"fragments":[
{
"text":"This time the difference is only in formatting. The two programs should be semantically equivalent. The original change set out to remove additional punctuation in lambda expressions, and this change can now be seen in the generated code. ",
"type":"text"
},
{
"text":"rlmeta2.py",
"type":"code"
},
{
"text":" can be used to compile the modified source code again, giving yet another executable:",
"type":"text"
}
],
"id":"8719ed6b7ab14ef59c9f71e6dc80059a",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"$ ./compile.sh rlmeta2.py > rlmeta3.py\n",
"type":"code"
}
],
"id":"220782c1b04d44718525cae19adfc70b",
"type":"code"
},
{
"fragments":[],
"id":"6e99cc0748aa4ac681121004906bcd8f",
"image_base64":"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",
"type":"image"
},
{
"fragments":[
{
"text":"rlmeta2.py",
"type":"code"
},
{
"text":" is now a metacompiler because it is the same as ",
"type":"text"
},
{
"text":"rlmeta3.py",
"type":"code"
},
{
"text":":",
"type":"text"
}
],
"id":"a1d45d6b69964c9ea979858cad95ae98",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"$ ./is_metacompiler.sh rlmeta2.py\nrlmeta2.py is a metacompiler!\n",
"type":"code"
}
],
"id":"02c659d8ee7e4f9797fb9ca93a1fa1a4",
"type":"code"
},
{
"fragments":[
{
"text":"rlmeta2.py",
"type":"code"
},
{
"text":" together with the modified source becomes the next version of the metacompiler. All other intermediate versions can be discarded.",
"type":"text"
}
],
"id":"6b890adad1964ae9b928a7531d2c1793",
"type":"text"
},
{
"fragments":[],
"id":"17ba8e9bb9704dd9a5a7386156ce7661",
"image_base64":"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",
"type":"image"
},
{
"fragments":[
{
"text":"A new version of RLMeta has been created that generates code slightly different. Intermediate compilers had to be created to produce the new metacompiler.",
"type":"text"
}
],
"id":"13f5b9ccbb0844468d99fbb40212672d",
"type":"text"
}
],
"title":"Modifying formatting of generated code"
},
{
"children":[],
"id":"d54bbeda3d9846bca027f2c2995775a5",
"paragraphs":[
{
"fragments":[
{
"text":"The steps to produce the next version of the metacompiler can be described with the following script:",
"type":"text"
}
],
"id":"4e9ba6518d91445b8c170031e52bbe42",
"type":"text"
},
{
"chunkpath":[],
"filepath":[
"meta_compile.sh"
],
"fragments":[
{
"text":"#!/bin/bash\n\nset -e\n\ncd \"$(dirname \"$0\")\"\n\n./compile.sh rlmeta.py > rlmeta1.py\n\n./compile.sh rlmeta1.py > rlmeta2.py\n\n./compile.sh rlmeta2.py > rlmeta3.py\n\ndiff rlmeta2.py rlmeta3.py\n\ndiff support.py <(python rlmeta3.py --support)\n\nmv rlmeta3.py rlmeta2.py\n\nmv rlmeta2.py rlmeta1.py\n\nmv rlmeta1.py rlmeta.py\n\necho OK\n",
"type":"code"
}
],
"id":"bd7e31bf3ea7456f975830d5bf2ef05c",
"type":"code"
},
{
"fragments":[
{
"text":"The ",
"type":"text"
},
{
"text":"set -e",
"type":"code"
},
{
"text":" directive ensures that the script stops as soon as one of the commands fail. After that the script compiles the intermediate compilers. If all compile commands succeed, the two last compilers are compared. If the differ, it was not possible to create a metacompiler. The diff command will then fail and the script then fails. If the two last compilers are the same, a sanity check that the support libraries are the same is done. Then intermediate compilers are removed. At the end, an 'OK' is printed, signifying that a new version of the metacompiler was successfully created. On failure, the intermediate compilers are left on disk for inspection.",
"type":"text"
}
],
"id":"ff35e9f8a7b846ed856d0b2a75e52d55",
"type":"text"
},
{
"fragments":[
{
"text":"How many times is compilation needed? Max 2? But VM required 4?",
"type":"text"
}
],
"id":"af0923fee8f34769a93128bbda5645e6",
"type":"text"
}
],
"title":"Meta compile script"
},
{
"children":[],
"id":"6bfdc073cd4041238b169caa671c9652",
"paragraphs":[
{
"fragments":[
{
"text":"What happens if the source code is modified so that it no longer correctly describes a metacompiler?",
"type":"text"
}
],
"id":"2d9fa3e9ffe34f7cbaa940362be99669",
"type":"text"
},
{
"fragments":[
{
"text":"Changing the source code that generates code for rules from",
"type":"text"
}
],
"id":"24958db22ee14ffdb45c2ec86165dd6e",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"| [\"Rule\" .:x ast:y] -> { \"\\ndef _rule_\" x \"(self):\\n\" > \"return \" y \"()\\n\" < }\n",
"type":"code"
}
],
"id":"7f71cf97492c4e44a86fdf80802f2ccd",
"language":"rlmeta",
"type":"code"
},
{
"fragments":[
{
"text":"to",
"type":"text"
}
],
"id":"09c0ad337870423ab7a8cbabcef78427",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"| [\"Rule\" .:x ast:y] -> { \"\\ndef _rule_\" x \"(self):\\n\" > \"pass\\n\" < }\n",
"type":"code"
}
],
"id":"55cec80cf6cc4328b9d09901ae162c3c",
"language":"rlmeta",
"type":"code"
},
{
"fragments":[
{
"text":"is a dummy change that should break things.",
"type":"text"
}
],
"id":"a515f10cf88d4a61904a5480f52b3063",
"type":"text"
},
{
"fragments":[
{
"text":"Running the metacompile script on the modified source code gives an error:",
"type":"text"
}
],
"id":"9260da643b3a4d5799dc6bb3bcf003c6",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"$ ./meta_compile.sh\nTraceback (most recent call last):\n  File \"rlmeta2.py\", line 375, in <module>\n    sys.stdout.write(compile_grammar(sys.stdin.read()))\n  File \"rlmeta2.py\", line 368, in compile_grammar\n    return code_generator.run(\"ast\", parser.run(\"grammar\", grammar))\n  File \"rlmeta2.py\", line 102, in run\n    result = self._match_rule(rule_name).eval()\nAttributeError: 'NoneType' object has no attribute 'eval'\n",
"type":"code"
}
],
"id":"d069bf8775194225a483fffef3be8526",
"type":"code"
},
{
"fragments":[
{
"text":"This means that a new metacompiler could not be created. Why?",
"type":"text"
}
],
"id":"c617edf3bda7486d842c123e90e2e971",
"type":"text"
},
{
"fragments":[
{
"text":"The error happens in ",
"type":"text"
},
{
"text":"rlmeta2.py",
"type":"code"
},
{
"text":", that is when the following compilation step is run:",
"type":"text"
}
],
"id":"1ad2ad00ce734a3a8d6776781256721e",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"./compile.sh rlmeta2.py > rlmeta3.py\n",
"type":"code"
}
],
"id":"05076600aefb4489904a00c344fd8233",
"language":"bash",
"type":"code"
},
{
"fragments":[
{
"text":"It means that both ",
"type":"text"
},
{
"text":"rlmeta1.py",
"type":"code"
},
{
"text":" and ",
"type":"text"
},
{
"text":"rlmeta2.py",
"type":"code"
},
{
"text":" were successfully created. What are the differences?",
"type":"text"
}
],
"id":"1eb2cd9057594a9fb1aaf22acf576831",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"$ diff rlmeta.py rlmeta1.py\n1453,1455c1453\n<                                         'return ',\n<                                         _vars.lookup('y').eval(),\n<                                         '()\\n',\n---\n>                                         'pass\\n',\n",
"type":"code"
}
],
"id":"6d174aabc6874462aea28601c49c6e1d",
"type":"code"
},
{
"fragments":[
{
"text":"The difference is that the code for generating code for rules is different. Instead of generating actual code, only a ",
"type":"text"
},
{
"text":"pass",
"type":"code"
},
{
"text":" is generated. ",
"type":"text"
},
{
"text":"rlmeta1.py",
"type":"code"
},
{
"text":" is still a compiler that recognizes the same source language so it can be used to produce ",
"type":"text"
},
{
"text":"rlmeta2.py",
"type":"code"
},
{
"text":".",
"type":"text"
}
],
"id":"a75dd09d6bf845d1afaaf499352b66ef",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"$ diff rlmeta1.py rlmeta2.py \n287,325c287\n<         return (lambda:\n<             self._or([\n...\n<             ])\n<         )()\n---\n>         pass\n...\n",
"type":"code"
}
],
"id":"3e131a12b0994e3ba2b2de66589bd859",
"type":"code"
},
{
"fragments":[
{
"text":"This time the difference is that all rules return ",
"type":"text"
},
{
"text":"None",
"type":"code"
},
{
"text":" instead of actually doing matching and returning results. What happens if the modified source code is compiled with ",
"type":"text"
},
{
"text":"rlmeta2.py",
"type":"code"
},
{
"text":"?",
"type":"text"
}
],
"id":"3b77b267e9da41cc840b80df19085462",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"AttributeError: 'NoneType' object has no attribute 'eval'\n",
"type":"code"
}
],
"id":"b3ac2d74c6504ee6b7c7f3c49b853392",
"type":"code"
},
{
"fragments":[
{
"text":"Because the modified source code does not correctly describe how code for rules should be generated, it does not describe a metacompiler, and it can never be used to create a metacompiler. The ",
"type":"text"
},
{
"text":"rlmeta3.py",
"type":"code"
},
{
"text":" is an empty file because ",
"type":"text"
},
{
"text":"rlmeta2.py",
"type":"code"
},
{
"text":" could not generate anything.",
"type":"text"
}
],
"id":"df2c1bcf67b44373894a46e7f61a2a6b",
"type":"text"
}
],
"title":"Making a breaking change"
},
{
"children":[],
"id":"0130b76cb3d24f458bb47debb6fc2780",
"paragraphs":[
{
"fragments":[
{
"text":"Say an API change is required in the support library. Say ",
"type":"text"
},
{
"text":"bind",
"type":"code"
},
{
"text":" needs to swap arguments. This is achieved by changing the code generator and the support library:",
"type":"text"
}
],
"id":"81e2b3bcfa5d48ceb09498acbdb94e5d",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"-    | [\"Bind\" .:x ast:y] -> { \"_vars.bind(\" repr(x) \", \" y \"())\" }\n+    | [\"Bind\" .:x ast:y] -> { \"_vars.bind(\" y \"(), \" repr(x) \")\" }\n",
"type":"code"
}
],
"id":"201252047e654a31a94adfd76b1c969a",
"type":"code"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"-    def bind(self, name, value):\n+    def bind(self, value, name):\n",
"type":"code"
}
],
"id":"bafc978d667e49dd95683e06e4d46d47",
"type":"code"
},
{
"fragments":[
{
"text":"Running the metacompile script on the modified source code gives a new metacompiler:",
"type":"text"
}
],
"id":"dd10a3cd9b58422aa7436b0b9e9b45bd",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"$ ./meta_compile.sh\nOK\n",
"type":"code"
}
],
"id":"c7607d5b0a6e459b814c988493667c97",
"type":"code"
},
{
"fragments":[
{
"text":"The difference is that the two version of the support library is changed, and all ",
"type":"text"
},
{
"text":"bind",
"type":"code"
},
{
"text":" calls have swapped arguments:",
"type":"text"
}
],
"id":"e5567479169a44efb49161c3d5a22a0e",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"$ diff rlmeta.py.orig rlmeta.py\n3c3\n< SUPPORT = ...\n---\n> SUPPORT = ...\n110c110\n<     def bind(self, name, value):\n---\n>     def bind(self, value, name):\n294c294\n<                                     _vars.bind('x', (lambda:\n---\n>                                     _vars.bind((lambda:\n296c296\n<                                     )())\n---\n>                                     )(), 'x')\n...\n",
"type":"code"
}
],
"id":"a926657a73694781b76551fbb3d83b7d",
"type":"code"
},
{
"fragments":[
{
"text":"These compilation steps were not possible in the first version of RLMeta because the ",
"type":"text"
},
{
"text":"compile.sh",
"type":"code"
},
{
"text":" script generated the support library incorrectly. All RLMeta compilers have two versions of the support library: the one that it generates (stored in the ",
"type":"text"
},
{
"text":"SUPPORT",
"type":"code"
},
{
"text":" variable), and the one it uses itself. If the compiler is a metacompiler, the two versions are the same, but in intermediate compilers they might differ.",
"type":"text"
}
],
"id":"f159ab372dfa4963933f83b562dbeaaa",
"type":"text"
},
{
"fragments":[
{
"text":"The first version of RLMeta generated the support library like this:",
"type":"text"
}
],
"id":"fc12edcf75974eb1bb5e0b7431e0b4b8",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"support_py=$(cat support.py)\n",
"type":"code"
}
],
"id":"f8b7a99762b94e3d9eb6514380294f79",
"language":"bash",
"type":"code"
},
{
"fragments":[
{
"text":"It meant that the intermediate compilers always had the latest support library, and the two versions of the support library were always the same.",
"type":"text"
}
],
"id":"4bd2d41f68e34d9ead322984c6f73b85",
"type":"text"
},
{
"fragments":[
{
"text":"Running the metacompile script on the modified source code with the old version of ",
"type":"text"
},
{
"text":"compile.sh",
"type":"code"
},
{
"text":" gives an error:",
"type":"text"
}
],
"id":"8019705c315f42ffabb6582b662944ca",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"$ ./meta_compile.sh\nTraceback (most recent call last):\n  File \"rlmeta1.py\", line 2217, in <module>\n    sys.stdout.write(compile_grammar(sys.stdin.read()))\n  File \"rlmeta1.py\", line 2210, in compile_grammar\n    return code_generator.run(\"ast\", parser.run(\"grammar\", grammar))\n  File \"rlmeta1.py\", line 102, in run\n    result = self._match_rule(rule_name).eval()\n  File \"rlmeta1.py\", line 123, in eval\n    return self.fn()\n  File \"rlmeta1.py\", line 318, in <lambda>\n    _SemanticAction(lambda: (['Grammar']+[_vars.lookup('x').eval()]+_vars.lookup('ys').eval()+[]))\n  File \"rlmeta1.py\", line 115, in lookup\n    return self[name]\nKeyError: 'x'\n",
"type":"code"
}
],
"id":"6f0bbe403e654b269ab14c20249907ec",
"type":"code"
},
{
"fragments":[
{
"text":"In this example, it would lead to ",
"type":"text"
},
{
"text":"rlmeta1.py",
"type":"code"
},
{
"text":" having swapped arguments in the support library, but the generated code would still expect not swapped arguments:",
"type":"text"
}
],
"id":"44b91f05b5dd439e97b33a542f968957",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"$ diff rlmeta.py rlmeta1.py\n3c3\n< SUPPORT = ...\n---\n> SUPPORT = ...\n110c110\n<     def bind(self, name, value):\n---\n>     def bind(self, value, name):\n1814a1815,1816\n>                                         _vars.lookup('y').eval(),\n>                                         '(), ',\n1818,1820c1820\n<                                         ', ',\n<                                         _vars.lookup('y').eval(),\n<                                         '())',\n---\n>                                         ')',\n",
"type":"code"
}
],
"id":"59957f0f204246cda36163580870ef35",
"type":"code"
},
{
"fragments":[
{
"text":"This in turn would lead to ",
"type":"text"
},
{
"text":"rlmeta1.py",
"type":"code"
},
{
"text":" not functioning because its ",
"type":"text"
},
{
"text":"bind",
"type":"code"
},
{
"text":" calls have not stored the name as key, but the value. Hence the key error.",
"type":"text"
}
],
"id":"bb42b23bb0c040f19816c8c95a375d61",
"type":"text"
},
{
"fragments":[
{
"text":"The version of RLMeta in this article fixes the generation of the ",
"type":"text"
},
{
"text":"$support_py",
"type":"code"
},
{
"text":" variable like this:",
"type":"text"
}
],
"id":"7dae87609400493c87a72721cf297424",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"support_py=$(python \"$rlmeta_compiler\" --support)\n",
"type":"code"
}
],
"id":"e0f589f3b4534c1db7e683e1ce3f895e",
"language":"bash",
"type":"code"
},
{
"fragments":[
{
"text":"This ensures that the code that the code generator generates is always in sync with the support library.",
"type":"text"
}
],
"id":"a87cb57a477a4bda9aa234c18f099c01",
"type":"text"
}
],
"title":"Modifying API of support library"
},
{
"children":[],
"id":"1a090bb868154140a167968d8b4b15dc",
"paragraphs":[
{
"fragments":[
{
"text":"The escape codes possible in strings are '",
"type":"text"
},
{
"text":"\\\\",
"type":"code"
},
{
"text":"', '",
"type":"text"
},
{
"text":"\\'",
"type":"code"
},
{
"text":"', '",
"type":"text"
},
{
"text":"\\\"",
"type":"code"
},
{
"text":"', and '",
"type":"text"
},
{
"text":"\\n",
"type":"code"
},
{
"text":"':",
"type":"text"
}
],
"id":"3752ee44334c4b9ca7c1e832a365f0cd",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"escape = '\\\\' -> \"\\\\\" | '\\'' -> \"'\"\n       | '\"'  -> \"\\\"\" | 'n'  -> \"\\n\"\n",
"type":"code"
}
],
"id":"0eace03d4c884263974ce5f845ba40b0",
"language":"rlmeta",
"type":"code"
},
{
"fragments":[
{
"text":"Say '",
"type":"text"
},
{
"text":"\\t",
"type":"code"
},
{
"text":"' is required as well. How can it be implemented?",
"type":"text"
}
],
"id":"a83410c86d4e46fe921a76839ca1a893",
"type":"text"
},
{
"fragments":[
{
"text":"A first attempt might look like this:",
"type":"text"
}
],
"id":"ed6d78514ecc475aa4832a05757e2bda",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"escape = '\\\\' -> \"\\\\\" | '\\'' -> \"'\"\n       | '\"'  -> \"\\\"\" | 'n'  -> \"\\n\"\n       | 't'  -> \"\\t\"\n",
"type":"code"
}
],
"id":"2be56ecfeac141b9a7b384a93c14da43",
"language":"rlmeta",
"type":"code"
},
{
"fragments":[
{
"text":"Running the metacompile script on the modified source code gives a new metacompiler:",
"type":"text"
}
],
"id":"b081578826cd4251988dfbd124a693ab",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"$ ./meta_compile.sh\nOK\n",
"type":"code"
}
],
"id":"a6c7487784b14357b6e364747d148d77",
"type":"code"
},
{
"fragments":[
{
"text":"The code generated for the tab case looks like this:",
"type":"text"
}
],
"id":"bda6c32d41814781b1d752a48f9e9c9c",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"(lambda:\n    (lambda _vars:\n        (lambda:\n            self._and([\n                (lambda:\n                    self._match_charseq('t')\n                ),\n                (lambda:\n                    _SemanticAction(lambda: '\\\\t')\n                ),\n            ])\n        )()\n    )(_Vars())\n),\n",
"type":"code"
}
],
"id":"f7ebd9cde05041dd83e33bacd3bf2d0e",
"language":"python",
"type":"code"
},
{
"fragments":[
{
"text":"The semantic action does not return a tab character but rather two characters: '",
"type":"text"
},
{
"text":"\\",
"type":"code"
},
{
"text":"' and '",
"type":"text"
},
{
"text":"t",
"type":"code"
},
{
"text":"'. The reason for this is that the modified source code tries to use the new escape code before the parser understands it. Since the parser does not recognize the new escape code, it will treat it as two separate characters.",
"type":"text"
}
],
"id":"82a056abf1f845d598e345933ec326bc",
"type":"text"
},
{
"fragments":[
{
"text":"How can the semantic action be made to return a tab character? The escape code code not be used until it is implemented, so the only solution is to call a function that returns a tab character:",
"type":"text"
}
],
"id":"dcee60e01ed44ef09ae428ddc4cf4bab",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"escape = '\\\\' -> \"\\\\\" | '\\'' -> \"'\"\n       | '\"'  -> \"\\\"\" | 'n'  -> \"\\n\"\n       | 't'  -> tab()\n",
"type":"code"
}
],
"id":"0b15794e6edb40e2ab156155efcfb688",
"language":"rlmeta",
"type":"code"
},
{
"fragments":[
{
"text":"The ",
"type":"text"
},
{
"text":"tab",
"type":"code"
},
{
"text":" function is added to the Python template to give generated code access to it:",
"type":"text"
}
],
"id":"cd062d599a9a4ccba2a125313deeeb7d",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"tab = lambda: \"\\t\"\n",
"type":"code"
}
],
"id":"1a43c1ff6fb84e989507f0368235a00d",
"language":"python",
"type":"code"
},
{
"fragments":[
{
"text":"Compiling the modified source code gives a new metacompiler:",
"type":"text"
}
],
"id":"b6952241f5dd43e48e586ded2dc1c3d9",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"$ ./meta_compile.sh\nOK\n",
"type":"code"
}
],
"id":"a074bca6bd3441aeb22b187f2c1939dd",
"type":"code"
},
{
"fragments":[
{
"text":"The code generated for the tab case now looks like this:",
"type":"text"
}
],
"id":"e7ca3979a4a740f09f614d1846d9537b",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"(lambda:\n    (lambda _vars:\n        (lambda:\n            self._and([\n                (lambda:\n                    self._match_charseq('t')\n                ),\n                (lambda:\n                    _SemanticAction(lambda: tab(\n                    ))\n                ),\n            ])\n        )()\n    )(_Vars())\n),\n",
"type":"code"
}
],
"id":"883aa54c39e94bbaad439939e0f5b926",
"language":"python",
"type":"code"
},
{
"fragments":[
{
"text":"The semantic action now generates tab characters correctly by calling the ",
"type":"text"
},
{
"text":"tab",
"type":"code"
},
{
"text":" function.",
"type":"text"
}
],
"id":"82b9d4a3e9304a40ae632a7de85d6554",
"type":"text"
},
{
"fragments":[
{
"text":"Now the new escape code can be used inside strings and the ",
"type":"text"
},
{
"text":"tab",
"type":"code"
},
{
"text":" function discarded:",
"type":"text"
}
],
"id":"288a7dca0e0a441c86e15445126d3870",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"escape = '\\\\' -> \"\\\\\" | '\\'' -> \"'\"\n       | '\"'  -> \"\\\"\" | 'n'  -> \"\\n\"\n       | 't'  -> \"\\t\"\n",
"type":"code"
}
],
"id":"920ef986ed9541cc8ac8fa3f42df4199",
"language":"rlmeta",
"type":"code"
},
{
"fragments":[
{
"text":"Compiling the modified source code gives a new metacompiler:",
"type":"text"
}
],
"id":"e528b9f26a6e479f828525d6a614dc2b",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"$ ./meta_compile.sh\nOK\n",
"type":"code"
}
],
"id":"565991516f3244979d33aa4e1103053d",
"type":"code"
},
{
"fragments":[
{
"text":"The code generated for the tab case now looks like this:",
"type":"text"
}
],
"id":"0b7bba4d90284d53a7f5772f4275f21e",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"(lambda:\n    (lambda _vars:\n        (lambda:\n            self._and([\n                (lambda:\n                    self._match_charseq('t')\n                ),\n                (lambda:\n                    _SemanticAction(lambda: '\\t')\n                ),\n            ])\n        )()\n    )(_Vars())\n),\n",
"type":"code"
}
],
"id":"1d5d027c53e04af8953e529629cdaf8e",
"language":"python",
"type":"code"
},
{
"fragments":[
{
"text":"Adding the tab escape code required two passes: one to recognize it and one to actually use it.",
"type":"text"
}
],
"id":"3eebfda49d064c088d05b8fe29d1a17b",
"type":"text"
}
],
"title":"Adding a new escape code"
},
{
"children":[],
"id":"22e574102e394218b874f03bb879c92f",
"paragraphs":[
{
"fragments":[
{
"text":"Changing syntax in steps: 1) modify grammar to accept new syntax 2) feed updated grammar to new compiler.",
"type":"text"
}
],
"id":"73adf0902f014946b6a0b1812588ef8c",
"type":"text"
},
{
"fragments":[
{
"text":"Change ",
"type":"text"
},
{
"text":"->",
"type":"code"
},
{
"text":" to ",
"type":"text"
},
{
"text":"=>",
"type":"code"
},
{
"text":".",
"type":"text"
}
],
"id":"0e6aee95f12d497a9b442328f1625d1a",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"-    | space '->' hostExpr:x -> [\"SemanticAction\" x]\n+    | space '=>' hostExpr:x -> [\"SemanticAction\" x]\n",
"type":"code"
}
],
"id":"319fe18be3be4c3f9e94281f5d4d819d",
"language":"diff",
"type":"code"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"$ ./meta_compile.sh\n...\nERROR: L003:C048: expected '}' but found '-'\n",
"type":"code"
}
],
"id":"db17992a334f4a18a2ae2023ba783d60",
"type":"code"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"Parser {\n  grammar =\n    | name:x space '{' rule*:ys space '}'      -> [\"Grammar\" x ~ys]\n",
"type":"code"
}
],
"id":"46d1811e86074552a7d00826311ccb07",
"language":"rlmeta",
"type":"code"
},
{
"fragments":[
{
"text":"What happened? ",
"type":"text"
},
{
"text":"rlmeta1.py",
"type":"code"
},
{
"text":" expects the syntax to be ",
"type":"text"
},
{
"text":"=>",
"type":"code"
},
{
"text":", but the modified source is still using ",
"type":"text"
},
{
"text":"->",
"type":"code"
},
{
"text":". Modify again.",
"type":"text"
}
],
"id":"f769c4e316fa441d8880b645f239757d",
"type":"text"
},
{
"fragments":[
{
"text":"Metacompile script will not work here :(",
"type":"text"
}
],
"id":"98d47194afe6453fb7ea05fb612a8dca",
"type":"text"
}
],
"title":"Modifying grammar syntax"
},
{
"children":[],
"id":"47e7245c2c0b4ab6a7a7233d4e69f013",
"paragraphs":[
{
"fragments":[
{
"text":"I have shown some examples that I hope helps understanding how RLMeta can be modified. Happy hacking!",
"type":"text"
}
],
"id":"4c4bbcb7b0c243179c2a4092c03ed707",
"type":"text"
}
],
"title":"Conclusions"
},
{
"children":[
{
"children":[],
"id":"df676d8cca604142bd1049c5e86c68a2",
"paragraphs":[
{
"code_id":"ef234944361c48eeb16387d8014a4c9b",
"id":"8f508048c2074e7694a93b1182126307",
"type":"expanded_code"
}
],
"title":"compile.sh"
},
{
"children":[],
"id":"38ee00b5ef7c40f79d24fa61f052368f",
"paragraphs":[
{
"code_id":"bd7e31bf3ea7456f975830d5bf2ef05c",
"id":"7c615378b9b64ca3b811bc614095b4ed",
"type":"expanded_code"
}
],
"title":"meta_compile.sh"
}
],
"id":"60cb5d0ff4ca4d94920bfe635ffd2142",
"paragraphs":[
{
"fragments":[
{
"text":"The only changes from the original ",
"type":"text"
},
{
"text":"RLMeta",
"type":"link",
"url":"../rlmeta/index.html#388bb1e8ccbd4d55b89b391c08452c33"
},
{
"text":" are the ",
"type":"text"
},
{
"text":"compile.sh",
"type":"code"
},
{
"text":" script and the additional ",
"type":"text"
},
{
"text":"meta_compile.sh",
"type":"code"
},
{
"text":" script.",
"type":"text"
}
],
"id":"969153820b334d91838f46bfd52388ad",
"type":"text"
}
],
"title":"Code listings for RLMeta"
},
{
"children":[],
"id":"cce4fba25b5d4b8489e0f311619bdf11",
"paragraphs":[
{
"fragments":[
{
"text":"Better format for intro of changes?",
"type":"text"
}
],
"id":"7750e99bcb064e368a2164c551800494",
"type":"text"
}
],
"title":"TODO"
}
],
"id":"7b987f7cd685486da72bf77dcd0b3f29",
"paragraphs":[
{
"fragments":[
{
"text":"In this article I explain how to modify the ",
"type":"text"
},
{
"text":"RLMeta",
"type":"link",
"url":"/writing/rlmeta/index.html"
},
{
"text":" metacompiler and how modifying it is different from modifying a regular program.",
"type":"text"
}
],
"id":"4d967f1bcd054206b4731c141ff9822a",
"type":"text"
}
],
"title":"Modifying RLMeta"
},
"variables":{}
}