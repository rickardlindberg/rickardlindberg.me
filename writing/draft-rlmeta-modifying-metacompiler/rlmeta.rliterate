{
"root_page":{
"children":[
{
"children":[],
"id":"39efe623ff374daba9830984300fcde2",
"paragraphs":[
{
"fragments":[
{
"text":"What is a metacompiler and how does it differ from a regular compiler?",
"type":"text"
}
],
"id":"12d89fc393104ae1969b7fa8060484ab",
"type":"text"
},
{
"fragments":[
{
"text":"A compiler translates source code into an executable:",
"type":"text"
}
],
"id":"e192774e5eeb495589a7021b6f8f4d88",
"type":"text"
},
{
"fragments":[],
"id":"39b8446c778f43a4bb2525b200bbd5fc",
"image_base64":"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",
"type":"image"
},
{
"fragments":[
{
"text":"A C compiler translates source code written in C into an executable:",
"type":"text"
}
],
"id":"247442defad9486dbbc00a80a7ba5853",
"type":"text"
},
{
"fragments":[],
"id":"789da36df4454623b4c6c7fb5ff5e597",
"image_base64":"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",
"type":"image"
},
{
"fragments":[
{
"text":"A metacompiler translates source code written in a metalanguage into an executable:",
"type":"text"
}
],
"id":"dda8f4fc2f004d3fb52fe16672790891",
"type":"text"
},
{
"fragments":[],
"id":"273ca8f69ebc42b7a4ed48cf0a4a36cc",
"image_base64":"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",
"type":"image"
},
{
"fragments":[
{
"text":"A metalanguage is a domain specific language for describing other languages. It can be used to describe what languages look like (their syntax) and how to translate them into executables (their semantics). In essence, it can be used to describe compilers.",
"type":"text"
}
],
"id":"2ae1792b33f04c3cb643d28db004a5f9",
"type":"text"
},
{
"fragments":[
{
"text":"Because a metalanguage can be used to describe any compiler, it can also be used describe the metacompiler itself. The metacompiler translates such a description into itself:",
"type":"text"
}
],
"id":"05285271f1cc494ca90f7d3d9a1dcd91",
"type":"text"
},
{
"fragments":[],
"id":"2296fe8e295d44489c35e0328c5c9c86",
"image_base64":"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",
"type":"image"
},
{
"fragments":[
{
"text":"A metacompiler does not have to be implemented in the metalanguage itself, but I suspect that it is common that it is. RLMeta is indeed implemented in its own language. This is also known as self-hosting. For the rest of this article, I will assume that a metacompiler is also self-hosting.",
"type":"text"
}
],
"id":"bc611e48de17497caa0a20eaa7664dba",
"type":"text"
},
{
"fragments":[
{
"text":"A C compiler written in C is not a metacompiler because C is not a metalanguage. It is a general purpose programming language not designed specifically to describe other languages. Such a compiler is merely a self-hosting compiler.",
"type":"text"
}
],
"id":"68a70728549c41478d8110b0248c678c",
"type":"text"
}
],
"title":"Meta what?"
},
{
"children":[],
"id":"93d9030e0e4849c5a8d8ca0fffdf7592",
"paragraphs":[
{
"fragments":[
{
"text":"How is modifying a metacompiler different from modifying a regular program?",
"type":"text"
}
],
"id":"a3bcb31f717e4461ac1fefc9d5029322",
"type":"text"
},
{
"fragments":[
{
"text":"In general, to modify a program written in a compiled language, its source code and a compiler is needed. Modifying the program is a matter of modifying the source code and compiling it:",
"type":"text"
}
],
"id":"e0a64299fcfa4b19ab466704dee628e3",
"type":"text"
},
{
"fragments":[],
"id":"890219b4ed2642b9b5cd65f16e965cc0",
"image_base64":"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",
"type":"image"
},
{
"fragments":[],
"id":"ed5d9cd8afce4af8bff1229d516c88bf",
"image_base64":"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",
"type":"image"
},
{
"fragments":[
{
"text":"In the case of a metacompiler, the compiler and the executable is the same. However, if the source code is modified, the executable might not be the metacompiler itself:",
"type":"text"
}
],
"id":"5e43207a89814de58fe844c511df67f9",
"type":"text"
},
{
"fragments":[],
"id":"3f6b2be2bc824534a298bad799f9182d",
"image_base64":"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",
"type":"image"
},
{
"fragments":[],
"id":"6cc52d10c9e44955943140a331e085b8",
"image_base64":"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",
"type":"image"
},
{
"fragments":[
{
"text":"At this point, the metacompiler is needed to keep maintaining the modified executable. But the source code for the metacompiler itself is \"lost\" because the metacompiler can not be reproduced from the modified source code:",
"type":"text"
}
],
"id":"9aca2d8b77714269915348220a80b2f3",
"type":"text"
},
{
"fragments":[],
"id":"c1a9074398614804a3b71baaa8fe3733",
"image_base64":"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",
"type":"image"
},
{
"fragments":[
{
"text":"Because there is no source code, the original metacompiler can not be modified either.",
"type":"text"
}
],
"id":"52e85832ecd94b3cac6f44a322e61e51",
"type":"text"
},
{
"fragments":[
{
"text":"When modifying a metacompiler, care has to be taken to ensure that, in the end, the executable is still a metacompiler. Otherwise the metacompiler can not be modified further. This is a key difference from modifying a regular program. (Similar care has to be taken when modifying a self-hosting compiler.)",
"type":"text"
}
],
"id":"c363ade479ef4a0cb62a455a36b802c5",
"type":"text"
}
],
"title":"Modifying a metacompiler"
},
{
"children":[],
"id":"bf2e6a99e41f478f884dd15ea243c111",
"paragraphs":[
{
"fragments":[
{
"text":"How is RLMeta compiled?",
"type":"text"
}
],
"id":"b00554ebf7144e7dbadc042c76ba8217",
"type":"text"
},
{
"fragments":[
{
"text":"RLMeta is compiled with the ",
"type":"text"
},
{
"text":"compile.sh",
"type":"code"
},
{
"text":" script. It takes one argument which is the path to the RLMeta compiler. The script uses that compiler to compile the source code and then assemble the output to a Python file that looks like this:",
"type":"text"
}
],
"id":"22f617b9696f41d68c4ddeb7889d94c5",
"type":"text"
},
{
"chunkpath":[
"rlmeta template"
],
"filepath":[
"compile.sh"
],
"fragments":[
{
"text":"import sys\n\nSUPPORT = $support_py_string\n\n$support_py\n\n$parser_py\n\n$codegenerator_py\n\njoin = \"\".join\n\ndef compile_grammar(grammar):\n    parser = Parser()\n    code_generator = CodeGenerator()\n    return code_generator.run(\"ast\", parser.run(\"grammar\", grammar))\n\nif __name__ == \"__main__\":\n    if \"--support\" in sys.argv:\n        sys.stdout.write(SUPPORT)\n    else:\n        try:\n            sys.stdout.write(compile_grammar(sys.stdin.read()))\n        except _MatchError as e:\n            sys.stderr.write(e.describe())\n            sys.exit(1)\n",
"type":"code"
}
],
"id":"cab1f5d6d3c0412696419fd2f8c0ab88",
"language":"python",
"type":"code"
},
{
"fragments":[
{
"text":"The variables ",
"type":"text"
},
{
"text":"$support_py",
"type":"code"
},
{
"text":", ",
"type":"text"
},
{
"text":"$parser_py",
"type":"code"
},
{
"text":", and ",
"type":"text"
},
{
"text":"$codegenerator_py",
"type":"code"
},
{
"text":" are produced by the RLMeta compiler. The variable ",
"type":"text"
},
{
"text":"$support_py_string",
"type":"code"
},
{
"text":" is produced by converting the support library to a Python string. Here is the rest of the ",
"type":"text"
},
{
"text":"compile.sh",
"type":"code"
},
{
"text":" script:",
"type":"text"
}
],
"id":"ac4e4f2a863f48e4a82eddbc322b4d54",
"type":"text"
},
{
"chunkpath":[],
"filepath":[
"compile.sh"
],
"fragments":[
{
"text":"#!/bin/bash\n\nset -e\n\nrlmeta_compiler=\"$(pwd)/$1\"\n\ncd \"$(dirname \"$0\")\"\n\nto_python_string() {\n    python -c 'import sys; sys.stdout.write(repr(sys.stdin.read()))'\n}\n\nsupport_py_string=$(to_python_string < support.py)\nsupport_py=$(python \"$rlmeta_compiler\" --support)\nparser_py=$(python \"$rlmeta_compiler\" < parser.rlmeta)\ncodegenerator_py=$(python \"$rlmeta_compiler\" < codegenerator.rlmeta)\n\ncat <<EOF\n",
"type":"code"
},
{
"blank_lines_before":0,
"path":[
"rlmeta template"
],
"prefix":"",
"type":"chunk"
},
{
"text":"EOF\n",
"type":"code"
}
],
"id":"ef234944361c48eeb16387d8014a4c9b",
"type":"code"
}
],
"title":"Compiling RLMeta"
},
{
"children":[],
"id":"75ad82923a2142789d01ca5be1d11942",
"paragraphs":[
{
"fragments":[
{
"text":"How can it be verified that RLMeta is a metacompiler?",
"type":"text"
}
],
"id":"43602c24f0d84fd88646b7905798510a",
"type":"text"
},
{
"fragments":[
{
"text":"The ",
"type":"text"
},
{
"text":"is_metacompiler.sh",
"type":"code"
},
{
"text":" script checks if a given file is a metacompiler. It does so by comparing the file to the file generated by the ",
"type":"text"
},
{
"text":"compile.sh",
"type":"code"
},
{
"text":" script. If they are equal, the file is a metacompiler because it reproduced itself exactly. Otherwise the two files differ.",
"type":"text"
}
],
"id":"734c020ee59a4446a84baeeab3e5c655",
"type":"text"
},
{
"chunkpath":[],
"filepath":[
"is_metacompiler.sh"
],
"fragments":[
{
"text":"#!/bin/bash\n\nif diff \"$1\" <(./compile.sh \"$1\"); then\n    echo \"$1 is a metacompiler!\"\nelse\n    echo \"$1 is not a metacompiler. See diff above.\"\nfi\n",
"type":"code"
}
],
"id":"51c75af0347d416181ffec8cab1f0c51",
"type":"code"
},
{
"fragments":[
{
"text":"RLMeta is a metacompiler because its source code is written in a metalanguage and it is able to reproduce itself:",
"type":"text"
}
],
"id":"d86dd49a17e94d2694bedd68c178a028",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"$ ./is_metacompiler.sh rlmeta.py\nrlmeta.py is a metacompiler!\n",
"type":"code"
}
],
"id":"8e96b580ce5c4ed2bc67997925bc1117",
"type":"code"
},
{
"fragments":[
{
"text":"The following sections show examples of how to make modifications to RLMeta that ensure that the modified version is still a metacompiler.",
"type":"text"
}
],
"id":"d21afc4f5e604e78b978a9ff65b73c3f",
"type":"text"
}
],
"title":"Verifying metacompiler"
},
{
"children":[],
"id":"5f6a1c91143146dbb3b865ac42562135",
"paragraphs":[
{
"fragments":[
{
"text":"The code generator in RLMeta generates lambda expressions with newlines and indentation:",
"type":"text"
}
],
"id":"c5cf0946f71647f687176d66e5e4fb2f",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"(lambda:\n    ...\n)\n",
"type":"code"
}
],
"id":"cc11caffc9884033bff44020b3fa3632",
"language":"python",
"type":"code"
},
{
"fragments":[
{
"text":"This example shows how to modify RLMeta to generate equivalent lambda expressions without the additional punctuation like this:",
"type":"text"
}
],
"id":"504e071b965142959a63827bcac79645",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"(lambda: ...)\n",
"type":"code"
}
],
"id":"b7c19d3dc91340c5aa0de1cb3ccd3c86",
"language":"python",
"type":"code"
},
{
"fragments":[
{
"text":"The following line in the code generator is changed from",
"type":"text"
}
],
"id":"c73514c15f9749a29e5d070423aee716",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"| astFnBody:x -> { \"(lambda:\\n\" > x < \"\\n)\" }\n",
"type":"code"
}
],
"id":"75962a34bc124422840c608c5ce11574",
"language":"rlmeta",
"type":"code"
},
{
"fragments":[
{
"text":"to",
"type":"text"
}
],
"id":"971eabd00f6143428fe06553074e4cb8",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"| astFnBody:x -> { \"(lambda: \" x \")\" }\n",
"type":"code"
}
],
"id":"00aa8eafb77042e58c86e630149b9d27",
"language":"rlmeta",
"type":"code"
},
{
"fragments":[
{
"text":"The modified source code describes a metacompiler whose code generator generates lambda expressions without the additional punctuation.",
"type":"text"
}
],
"id":"aef5814858194975a5121743ad87519b",
"type":"text"
},
{
"fragments":[
{
"text":"Compiling the modified source code gives a new executable:",
"type":"text"
}
],
"id":"0be1c52082a54085a0e9f0e94702a4e7",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"$ ./compile.sh rlmeta.py > rlmeta1.py\n",
"type":"code"
}
],
"id":"7a6b856affa54cc4bdb62fd5a0b4f137",
"type":"code"
},
{
"fragments":[],
"id":"43e3cf9387794a2aba1ea4d1a298d7ac",
"image_base64":"iVBORw0KGgoAAAANSUhEUgAAAXwAAAA5CAYAAAA1BZChAAAABHNCSVQICAgIfAhkiAAADIxJREFUeJzt3X9M1PUfB/An4N2hHAcB8mNAfDyCw8TL5VBO+kGuYNSGq4YIsebWXE2jxmj2C50z/hC30miSpusfJAFTljWw4g+0ET9SM5vAKIgkFWikCCgcHK/vH8Vn3xPuwx1wfO74vB4bk/v8eH9eHz8vXhzv+9zrPIiIwNg0hoaG4OvrK3cYzEGpqak4e/as3GEw13PWU+4ImGvTarUgIv5yk6/Gxkbcvn1b7rRhLooLPmOMKQQXfMYYUwgu+IwxphBc8BljTCG44DPGmEJwwWeMMYXggs8YYwrBBZ8xxhSCCz5jjCkEF3zGGFMILviMMaYQXPAZY0whuOAzxphCcMFnjDGF4ILPGGMKwQWfMcYUggs+Y4wpBBd8xhhTCC74jDGmEIuq4Ht7e+Ovv/6asnzNmjWora2ddp/Dhw8jODgY/v7+aGxstHu/ucTDpN25cweCICA4OBjJyclyh8NkxvkwfxZVwbfl3XffRVxc3JTlFosF+fn5aGpqwu3bt5GYmGjXfsy5dDodurq6UFJS4pTxCwsL8dprrzllbDb/XDEfysvLsW7dOqhUKrfKJUUU/MzMTERERExZ/vfff8NisWDFihUO7bdYFBcX48yZM3KHwRaBK1euYNeuXRgeHpY7lAURGBiIgoICbNmyRe5QHCJ7wT9+/DjWrl2LyMhIZGdnIyMjA6Ghobh06RIAoLOzExs3boS/vz+MRiPOnTsn7nvp0iWsWbMGOp0Oe/bsmTL2wYMHIQgC1Gr1lKmZ5ORkJCQkYHR0FIIgQBAEXLhwYcb9ent7kZGRgaCgIMTExKCqqsrueFzNb7/9hk2bNiEpKQktLS2yxCAIAkpKSmA0GhEWFobs7GzJ7WfKF8D2Nbpw4QIEQcCHH36IsrIy8brfvXsXALB//37o9XrodDo8+uijqKurs/s8IiIisH37dphMJsTHx6OiogIA0NTUhNDQUFgsFnHbvLw8vPHGG3aP7Q5GRkZQWFiIyMhIlJWVgYhmNY675MMzzzyD9PR0+Pn5OXyOsuYKyay0tJQ2bNhAg4ODtGzZMqqurqZ9+/ZRfn4+ERGZTCbauXMnmc1mOn36NAUEBNDAwABZLBaKiYmhgwcP0ujoKOXn5xMA6u7unnKMRx55hL7//vspy7u7u0mj0diMbbr9kpOTafv27TQyMkK//PILBQUF0Z9//ulQPK7i9ddfJwDk5eVFGo2Gtm7dSn19feL6wcFB0mq1To0hKiqKTCaTeNy2tjZx3cmTJ+nJJ5+02n6mfCGyfY0mffDBB/Tqq69OieWzzz6jtrY2slgsdOrUKfL19aWhoSG7ziM8PJyysrKIiKirq4v8/Pzoxo0bREQUHR1NtbW1REQ0MTFBERER9OOPP9o1rqMaGxtp/fr1ThlbSlNTE2m1WgJAPj4+tGrVKqqvr3d4HHfLhx07dky7rxQZc6VG9mf4AKDX66HVahEcHIzY2FgIgoDe3l709fWhoaEBb7/9NlQqFZ5//nmEhITg/PnzaGtrw/Xr17Fjxw6o1Wq89dZbTo+zs7MT9fX12L9/PzQaDYxGI1JSUnD27FlZ4pkvFosFo6OjOHHiBARBwIEDBzA+Pr5gx8/NzcXy5csBAAaDYcbtbeULIH2NZrJt2zYYDAZ4enrihRdegEajQUdHh93nkZOTAwCIiopCQkKCeMzs7GyUl5cDABoaGrBkyRKYTCa7x3U3w8PDaGlpwVNPPYVNmzahu7vbof0XSz5IkStXlszbSHPg5eUl/jv5NT4+jr6+PqhUKgQEBIjbhoaGoqenB1qtFkFBQViyZIm43NPTub+/JhN37dq14rLh4WEYjUb09fXNKZ6amho0NTXNb8AzaG5utno8OjoKACgoKMAnn3yC4uLiBYlDr9c7tL2tfAGkr9FMqqqqUFRUhJ6eHgDArVu3MDY2ZndcDzzwgPh9QECAWHSys7ORlJSEkpISVFZWIisry+4xZ8NsNi/4lOL169dhNpvFx0QEs9mMb7/9FrGxsdi1axfy8/Oh0WhmHGux5IMUuXLFJQr+dIgIwcHBGBsbwz///CMW/Z6eHoSEhCAkJAQDAwPi9gMDA5iYmHBqTJGRkfD19UVrays8PDys1rW2ti54PM50//k50+QP7P3UarXVfKYU+m/OWOoaTfL09Jwyx9zb24ucnBzU1dUhISEBwL8/iPdvJ+XmzZtW36empgIA4uLiEBUVhe+++w6nTp1CdXW13WMq0WLJByly5YrLFnwACA4Oxvr161FUVITCwkJ88803uHHjBh5//HHodDqEhISguroazz77LEpLS50ej16vR3x8PHbv3o333nsPXl5eOH/+PFasWAGDwTCneNLS0pCWluakyKfX399v9Sxfo9HAy8sLhYWFyM3NxcjIyILGcz+DwYCWlhb09/cjMDDQrn2krlF0dDQAICwsDDU1NbBYLGJxGRoagkqlwsqVKwEAlZWVuHXrltXY165dw8aNG/Hxxx/jueeem3LsQ4cOISUlBb/++isuXryIEydOiOteeukl7Ny5E35+fli9evWs/j/spVarF/wZfnNzM8rLy8Vn+R4eHlCpVEhPT0dxcTFCQ0PnfAxXygeLxYKxsTFYLBZYLBaMjIxApVJZ/bKSyhe5csUl5vCllJaWorm5GUFBQdi9eze+/PJL+Pv7w9PTExUVFdizZw9MJhPa29uhVqut9l21ahUEQUBLSwtycnIgCALKyspmPKbUfhUVFWhvb0dUVBRCQkJQVFQEAHbF46q8vLyg0WiQlZWFrq4u5OXliVNTcjIYDNi2bRuio6Oh1Wqt/oKSYusaTXrxxRehVqsRHh6OiIgI3L17F9HR0cjLy8O6deuQkpKCy5cvIzIy0mo/s9mMjo4ODA4OTnvcxMRE6PV6ZGZm4tixYwgPDxfXbdmyBW1tbW53G99s+Pj44OGHH0ZdXR0qKyvnpdgDrpUPn376KZYuXYrDhw/j2LFjWLp0KY4ePWo1rlS+yJYr8/XyL3M/k3fpJCUl0dWrV6esX4i7dBaL8PBw+umnn2yuv3fvHmm1Wmpvb3dqHHLepQOAAgIC6Pjx4zQxMbHgMbgLGXOlRv6ncUw2MTEx+Oqrr5Ceni53KIve0aNHYTQaERMTI3coTuHt7Y2CggK888478PHxkTsct+bMXOGCr2CL7c0/rkqv10OlUtk1neiujEajXXe+MGnOzhUu+IzNA6kmeZ2dnQsYCXN1cuaKy79oyxhjbH5wwZ8jboHMGHMXXPAZY0whuOAzxphCOFTwOzo68MQTTyAgIAChoaHYu3evuE6qjTEAPPTQQ1afKBUUFIS2tjbxsVRb1CNHjiAuLg46nQ4bNmwQp1CkWhXbw9a4s23JPNd4GGPMqRy5az8nJ4fy8/NpYmKC7ty5Qz/88IO4zlYb40nR0dHU0NAgPg4MDKTW1lbxsa22qJWVlfTggw/S5cuXaXx8nM6dO0ednZ1ENHPbUylS4862JfNc4nFF/MYr9yPXG6+YW6hxqOC//PLLlJmZOaXHe29vLwGg/v5+cdnKlSvp66+/Fh/bU/C/+OKLKcdMS0ujAwcOTFne0dFBKpXKqj91dnY2HTlyxK5zsTWu1LlcvXqVli1bRmNjY0REdPPmTbHgzzUeV8QF3/1wwWcSHHun7b59+/D+++8jISEB3t7eKCoqwubNmyXbGDtiurao3d3dEARh2uXA7NqeSo0725bMc42HMcaczaGCHxYWhs8//xwAcPLkSbzyyivIyMiQbGM8ydvbW+xRTUTTNhSari1qZGQkurq6pl0+U9tTKbbGnW1L5rnGwxhjzubQi7ZnzpwR+zirVCpotVp4eHhYtTEeGxtDVVWV2MZ4UkxMDBoaGgAAp0+ftvqwBClbt27FRx99hCtXrmBiYgL19fX4448/rNqe3rt3D2azGbW1tXZ/Io2tcaXO5f9bIAOwaoE813gYY8zpHJkAKigooLCwMNLpdLR69WrxsxeJiNrb2yk5OZl0Oh3Fx8dP+SzYixcvksFgoMcee4z27t077Ry+rQ5yhw4dotjYWNJqtWQymejatWtE9O8c+ubNm2n58uXk7+9PTz/9NP3+++92n4+tcaXO5eeff6aEhARKTEyk3NxcUqvV4msac43H1fAcvvvhOXwmocaDaJ4+woUtOkNDQwgLC7PZ/525nqamJrz55ptWt0Az9p+z/MYrxhhTCC74jDGmEFzwGWNMIbjgM8aYQnDBZ4wxheCCzxhjCsEFnzHGFIILPmOMKQR/iDmzSaVSgYi4N5CbSU1NlTsExhhjjMnpfw/ZtnfHYdmAAAAAAElFTkSuQmCC",
"type":"image"
},
{
"fragments":[
{
"text":"With this modification, ",
"type":"text"
},
{
"text":"rlmeta.py",
"type":"code"
},
{
"text":" is no longer a metacompiler because it differs from ",
"type":"text"
},
{
"text":"rlmeta1.py",
"type":"code"
},
{
"text":":",
"type":"text"
}
],
"id":"c16df5bc53fc422796deaf081c25ae8b",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"$ ./is_metacompiler.sh rlmeta.py\n1685,1686c1685\n<                                         '(lambda:\\n',\n<                                         _IndentBuilder(),\n---\n>                                         '(lambda:',\n1688,1689c1687\n<                                         _DedentBuilder(),\n<                                         '\\n)',\n---\n>                                         ')',\nrlmeta.py is not a metacompiler. See diff above.\n",
"type":"code"
}
],
"id":"90cf5d9eca604cd8becd3e9feca345dc",
"language":"",
"type":"code"
},
{
"fragments":[
{
"text":"The difference is that the code for generating lambda expressions is different. ",
"type":"text"
},
{
"text":"rlmeta1.py",
"type":"code"
},
{
"text":" should still be a compiler that recognizes the same source language so it can be used to compile the modified source code again, giving yet another executable:",
"type":"text"
}
],
"id":"fde362e72d364e7a8698cca2495fadfe",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"$ ./compile.sh rlmeta1.py > rlmeta2.py\n",
"type":"code"
}
],
"id":"d9e1b2a1b8484b6ba4122794a3df0e20",
"type":"code"
},
{
"fragments":[],
"id":"dfc634f527234ed0be4e5c6b84df0ba5",
"image_base64":"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",
"type":"image"
},
{
"fragments":[
{
"text":"rlmeta1.py",
"type":"code"
},
{
"text":" is not a metacompiler either because it differs from ",
"type":"text"
},
{
"text":"rlmeta2.py",
"type":"code"
},
{
"text":":",
"type":"text"
}
],
"id":"b65b2d835c0448d7a63e36fef48de55a",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"$ ./is_metacompiler.sh rlmeta1.py\n287,325c287,299\n<         return (lambda:\n<             self._or([\n<                 (lambda:\n<                     (lambda _vars:\n<                         (lambda:\n<                             self._and([\n<                                 (lambda:\n<                                     _vars.bind('x', (lambda:\n<                                         self._match_rule('name')\n<                                     )())\n<                                 ),\n<                                 (lambda:\n<                                     self._match_rule('space')\n<                                 ),\n<                                 (lambda:\n<                                     self._match_charseq('{')\n<                                 ),\n<                                 (lambda:\n<                                     _vars.bind('ys', (lambda:\n<                                         self._star((lambda:\n<                                             self._match_rule('rule')\n<                                         ))\n<                                     )())\n<                                 ),\n<                                 (lambda:\n<                                     self._match_rule('space')\n<                                 ),\n<                                 (lambda:\n<                                     self._match_charseq('}')\n<                                 ),\n<                                 (lambda:\n<                                     _SemanticAction(lambda: (['Grammar']+[_vars.lookup('x').eval()]+_vars.lookup('ys').eval()+[]))\n<                                 ),\n<                             ])\n<                         )()\n<                     )(_Vars())\n<                 ),\n<             ])\n<         )()\n---\n>         return (lambda: self._or([\n>             (lambda: (lambda _vars:\n>                 (lambda: self._and([\n>                     (lambda: _vars.bind('x', (lambda: self._match_rule('name'))())),\n>                     (lambda: self._match_rule('space')),\n>                     (lambda: self._match_charseq('{')),\n>                     (lambda: _vars.bind('ys', (lambda: self._star((lambda: self._match_rule('rule'))))())),\n>                     (lambda: self._match_rule('space')),\n>                     (lambda: self._match_charseq('}')),\n>                     (lambda: _SemanticAction(lambda: (['Grammar']+[_vars.lookup('x').eval()]+_vars.lookup('ys').eval()+[]))),\n>                 ]))()\n>             )(_Vars())),\n>         ]))()\n...\nrlmeta1.py is not a metacompiler. See diff above.\n",
"type":"code"
}
],
"id":"27880ff33fae4aafa40bd977cc4cd0c4",
"language":"",
"type":"code"
},
{
"fragments":[
{
"text":"This time the difference is only in formatting. The two programs should be semantically equivalent. The original modification set out to remove additional punctuation in lambda expressions and this can now be seen in the generated code. ",
"type":"text"
},
{
"text":"rlmeta2.py",
"type":"code"
},
{
"text":" can be used to compile the modified source code again, giving yet another executable:",
"type":"text"
}
],
"id":"8719ed6b7ab14ef59c9f71e6dc80059a",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"$ ./compile.sh rlmeta2.py > rlmeta3.py\n",
"type":"code"
}
],
"id":"220782c1b04d44718525cae19adfc70b",
"type":"code"
},
{
"fragments":[],
"id":"6e99cc0748aa4ac681121004906bcd8f",
"image_base64":"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",
"type":"image"
},
{
"fragments":[
{
"text":"rlmeta2.py",
"type":"code"
},
{
"text":" is now a metacompiler because it is the same as ",
"type":"text"
},
{
"text":"rlmeta3.py",
"type":"code"
},
{
"text":":",
"type":"text"
}
],
"id":"a1d45d6b69964c9ea979858cad95ae98",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"$ ./is_metacompiler.sh rlmeta2.py\nrlmeta2.py is a metacompiler!\n",
"type":"code"
}
],
"id":"02c659d8ee7e4f9797fb9ca93a1fa1a4",
"type":"code"
},
{
"fragments":[
{
"text":"rlmeta2.py",
"type":"code"
},
{
"text":" together with the modified source become the next version of the metacompiler. All other intermediate compilers can be discarded.",
"type":"text"
}
],
"id":"6b890adad1964ae9b928a7531d2c1793",
"type":"text"
},
{
"fragments":[],
"id":"17ba8e9bb9704dd9a5a7386156ce7661",
"image_base64":"",
"type":"image"
},
{
"fragments":[
{
"text":"A new version of RLMeta has been created that generates code slightly different. Intermediate compilers had to be created to produce the new metacompiler.",
"type":"text"
}
],
"id":"13f5b9ccbb0844468d99fbb40212672d",
"type":"text"
}
],
"title":"Format of generated code"
},
{
"children":[],
"id":"d54bbeda3d9846bca027f2c2995775a5",
"paragraphs":[
{
"fragments":[
{
"text":"The steps to create the next version of RLMeta can be scripted like this:",
"type":"text"
}
],
"id":"4e9ba6518d91445b8c170031e52bbe42",
"type":"text"
},
{
"chunkpath":[],
"filepath":[
"meta_compile.sh"
],
"fragments":[
{
"text":"#!/bin/bash\n\nset -e\n\ncd \"$(dirname \"$0\")\"\n\n./compile.sh rlmeta.py > rlmeta1.py\n\n./compile.sh rlmeta1.py > rlmeta2.py\n\n./compile.sh rlmeta2.py > rlmeta3.py\n\ndiff rlmeta2.py rlmeta3.py\n\ndiff support.py <(python rlmeta3.py --support)\n\nmv rlmeta3.py rlmeta2.py\n\nmv rlmeta2.py rlmeta1.py\n\nmv rlmeta1.py rlmeta.py\n\necho OK\n",
"type":"code"
}
],
"id":"bd7e31bf3ea7456f975830d5bf2ef05c",
"type":"code"
},
{
"fragments":[
{
"text":"It starts with a ",
"type":"text"
},
{
"text":"set -e",
"type":"code"
},
{
"text":" directive that makes the script stop immediately if any command fails. Then it changes directory to the same directory as the script itself is in. That directory is assumed to also contain the ",
"type":"text"
},
{
"text":"compile.sh",
"type":"code"
},
{
"text":" script. It then uses the ",
"type":"text"
},
{
"text":"compile.sh",
"type":"code"
},
{
"text":" script to create the intermediate compilers. If all compile commands succeed, the two last compilers are compared. If they differ, it was not possible to create a metacompiler. The ",
"type":"text"
},
{
"text":"diff",
"type":"code"
},
{
"text":" command then fails and the script fails. The intermediate compilers are left on disk for inspection. If the two last compilers are the same, a sanity check that the support libraries are the same is done. Then intermediate compilers are removed. At the end, an 'OK' is printed, signifying that a new version of the metacompiler was successfully created.",
"type":"text"
}
],
"id":"ff35e9f8a7b846ed856d0b2a75e52d55",
"type":"text"
},
{
"fragments":[
{
"text":"This script will be used in the following examples.",
"type":"text"
}
],
"id":"6a233942a36749dfb08eb2dc41d52ce7",
"type":"text"
}
],
"title":"Meta compile script"
},
{
"children":[],
"id":"6bfdc073cd4041238b169caa671c9652",
"paragraphs":[
{
"fragments":[
{
"text":"This example shows what happens if the source code is modified so that it no longer correctly describes a metacompiler.",
"type":"text"
}
],
"id":"2d9fa3e9ffe34f7cbaa940362be99669",
"type":"text"
},
{
"fragments":[
{
"text":"A dummy modification that should break things is changing the following line that generates code for rules",
"type":"text"
}
],
"id":"24958db22ee14ffdb45c2ec86165dd6e",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"| [\"Rule\" .:x ast:y] -> { \"\\ndef _rule_\" x \"(self):\\n\" > \"return \" y \"()\\n\" < }\n",
"type":"code"
}
],
"id":"7f71cf97492c4e44a86fdf80802f2ccd",
"language":"rlmeta",
"type":"code"
},
{
"fragments":[
{
"text":"to",
"type":"text"
}
],
"id":"09c0ad337870423ab7a8cbabcef78427",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"| [\"Rule\" .:x ast:y] -> { \"\\ndef _rule_\" x \"(self):\\n\" > \"pass\\n\" < }\n",
"type":"code"
}
],
"id":"55cec80cf6cc4328b9d09901ae162c3c",
"language":"rlmeta",
"type":"code"
},
{
"fragments":[
{
"text":"Instead of generating code, the ",
"type":"text"
},
{
"text":"y",
"type":"code"
},
{
"text":" ast node is ignored and a ",
"type":"text"
},
{
"text":"pass",
"type":"code"
},
{
"text":" statement is generated.",
"type":"text"
}
],
"id":"a515f10cf88d4a61904a5480f52b3063",
"type":"text"
},
{
"fragments":[
{
"text":"Running the meta compile script on the modified source code indeed gives an error:",
"type":"text"
}
],
"id":"9260da643b3a4d5799dc6bb3bcf003c6",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"$ ./meta_compile.sh\nTraceback (most recent call last):\n  File \"rlmeta2.py\", line 375, in <module>\n    sys.stdout.write(compile_grammar(sys.stdin.read()))\n  File \"rlmeta2.py\", line 368, in compile_grammar\n    return code_generator.run(\"ast\", parser.run(\"grammar\", grammar))\n  File \"rlmeta2.py\", line 102, in run\n    result = self._match_rule(rule_name).eval()\nAttributeError: 'NoneType' object has no attribute 'eval'\n",
"type":"code"
}
],
"id":"d069bf8775194225a483fffef3be8526",
"type":"code"
},
{
"fragments":[
{
"text":"This means that a new metacompiler could not be created. Why?",
"type":"text"
}
],
"id":"c617edf3bda7486d842c123e90e2e971",
"type":"text"
},
{
"fragments":[
{
"text":"The error happens in ",
"type":"text"
},
{
"text":"rlmeta2.py",
"type":"code"
},
{
"text":" when the following compilation step is run:",
"type":"text"
}
],
"id":"1ad2ad00ce734a3a8d6776781256721e",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"./compile.sh rlmeta2.py > rlmeta3.py\n",
"type":"code"
}
],
"id":"05076600aefb4489904a00c344fd8233",
"language":"bash",
"type":"code"
},
{
"fragments":[
{
"text":"It means that both ",
"type":"text"
},
{
"text":"rlmeta1.py",
"type":"code"
},
{
"text":" and ",
"type":"text"
},
{
"text":"rlmeta2.py",
"type":"code"
},
{
"text":" were successfully created, but it failed to create ",
"type":"text"
},
{
"text":"rlmeta3.py",
"type":"code"
},
{
"text":". The difference between ",
"type":"text"
},
{
"text":"rlmeta.py",
"type":"code"
},
{
"text":" and ",
"type":"text"
},
{
"text":"rlmeta1.py",
"type":"code"
},
{
"text":" is that the code for generating code for rules is different:",
"type":"text"
}
],
"id":"1eb2cd9057594a9fb1aaf22acf576831",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"$ diff rlmeta.py rlmeta1.py\n1453,1455c1453\n<                                         'return ',\n<                                         _vars.lookup('y').eval(),\n<                                         '()\\n',\n---\n>                                         'pass\\n',\n",
"type":"code"
}
],
"id":"6d174aabc6874462aea28601c49c6e1d",
"type":"code"
},
{
"fragments":[
{
"text":"rlmeta1.py",
"type":"code"
},
{
"text":" is still a compiler that recognizes the same source language so it was successfully used to create ",
"type":"text"
},
{
"text":"rlmeta2.py",
"type":"code"
},
{
"text":". The difference between ",
"type":"text"
},
{
"text":"rlmeta1.py",
"type":"code"
},
{
"text":" and ",
"type":"text"
},
{
"text":"rlmeta2.py",
"type":"code"
},
{
"text":" is that the code for rules just have a ",
"type":"text"
},
{
"text":"pass",
"type":"code"
},
{
"text":" statement instead of code for doing matching and returning results:",
"type":"text"
}
],
"id":"a75dd09d6bf845d1afaaf499352b66ef",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"$ diff rlmeta1.py rlmeta2.py \n287,325c287\n<         return (lambda:\n<             self._or([\n...\n<             ])\n<         )()\n---\n>         pass\n...\n",
"type":"code"
}
],
"id":"3e131a12b0994e3ba2b2de66589bd859",
"type":"code"
},
{
"fragments":[
{
"text":"So ",
"type":"text"
},
{
"text":"rlmeta2.py",
"type":"code"
},
{
"text":" will not work because all rules just return ",
"type":"text"
},
{
"text":"None",
"type":"code"
},
{
"text":". When ",
"type":"text"
},
{
"text":"_match_rule",
"type":"code"
},
{
"text":" is called it will get ",
"type":"text"
},
{
"text":"None",
"type":"code"
},
{
"text":" back but expect a semantic action. When ",
"type":"text"
},
{
"text":"eval",
"type":"code"
},
{
"text":" is run it will fail because the result is not a semantic action, but instead ",
"type":"text"
},
{
"text":"None",
"type":"code"
},
{
"text":".",
"type":"text"
}
],
"id":"3b77b267e9da41cc840b80df19085462",
"type":"text"
},
{
"fragments":[
{
"text":"Because the modified source code does not correctly describe how code for rules should be generated, it does not describe a metacompiler, and it can never be used to create a metacompiler.",
"type":"text"
}
],
"id":"df2c1bcf67b44373894a46e7f61a2a6b",
"type":"text"
}
],
"title":"Breaking modification"
},
{
"children":[],
"id":"0130b76cb3d24f458bb47debb6fc2780",
"paragraphs":[
{
"fragments":[
{
"text":"This example shows how to make a modification that requires modifying both the support library and the code generator. It shows how the arguments to the ",
"type":"text"
},
{
"text":"bind",
"type":"code"
},
{
"text":" function can be swapped.",
"type":"text"
}
],
"id":"096ed4f9a0a34453ad30c7c1623451c2",
"type":"text"
},
{
"fragments":[
{
"text":"In the support library, the following line that defines the ",
"type":"text"
},
{
"text":"bind",
"type":"code"
},
{
"text":" functions is changed from",
"type":"text"
}
],
"id":"a6436a9788b349d9b44645a0965e743e",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"def bind(self, name, value):\n",
"type":"code"
}
],
"id":"bafc978d667e49dd95683e06e4d46d47",
"language":"python",
"type":"code"
},
{
"fragments":[
{
"text":"to",
"type":"text"
}
],
"id":"154ccbc55dc34a3fa794da5a839cf28e",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"def bind(self, value, name):\n",
"type":"code"
}
],
"id":"080bdff00dd74ac1a3dd24692e843573",
"language":"python",
"type":"code"
},
{
"fragments":[
{
"text":"In the code generator, the following line that generates calls to ",
"type":"text"
},
{
"text":"bind",
"type":"code"
},
{
"text":" is changed from",
"type":"text"
}
],
"id":"482d8aab246e48a880197b77a87338ec",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"| [\"Bind\" .:x ast:y] -> { \"_vars.bind(\" repr(x) \", \" y \"())\" }\n",
"type":"code"
}
],
"id":"201252047e654a31a94adfd76b1c969a",
"language":"rlmeta",
"type":"code"
},
{
"fragments":[
{
"text":"to",
"type":"text"
}
],
"id":"68f8a4bd475544cabc0b0b99d23710fa",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"| [\"Bind\" .:x ast:y] -> { \"_vars.bind(\" y \"(), \" repr(x) \")\" }\n",
"type":"code"
}
],
"id":"1394565425e644e5a24c3efe1faa6adb",
"language":"rlmeta",
"type":"code"
},
{
"fragments":[
{
"text":"Running the meta compile script on the modified source code gives a new metacompiler:",
"type":"text"
}
],
"id":"dd10a3cd9b58422aa7436b0b9e9b45bd",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"$ ./meta_compile.sh\nOK\n",
"type":"code"
}
],
"id":"c7607d5b0a6e459b814c988493667c97",
"type":"code"
},
{
"fragments":[
{
"text":"The difference between the two metacompilers is that the two versions of the support library are modified, all ",
"type":"text"
},
{
"text":"bind",
"type":"code"
},
{
"text":" calls have swapped arguments, and code that generates calls to ",
"type":"text"
},
{
"text":"bind",
"type":"code"
},
{
"text":" have swapped arguments:",
"type":"text"
}
],
"id":"e5567479169a44efb49161c3d5a22a0e",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"$ diff rlmeta.py.orig rlmeta.py\n3c3\n< SUPPORT = ...\n---\n> SUPPORT = ...\n110c110\n<     def bind(self, name, value):\n---\n>     def bind(self, value, name):\n294c294\n<                                     _vars.bind('x', (lambda:\n---\n>                                     _vars.bind((lambda:\n296c296\n<                                     )())\n---\n>                                     )(), 'x')\n1814a1815,1816\n>                                         _vars.lookup('y').eval(),\n>                                         '(), ',\n1818,1820c1820\n<                                         ', ',\n<                                         _vars.lookup('y').eval(),\n<                                         '())',\n---\n>                                         ')',\n...\n",
"type":"code"
}
],
"id":"a926657a73694781b76551fbb3d83b7d",
"language":"",
"type":"code"
},
{
"fragments":[
{
"text":"This creates a new version that works exactly the same as the previous version, but internally, the ",
"type":"text"
},
{
"text":"bind",
"type":"code"
},
{
"text":" function has a different signature.",
"type":"text"
}
],
"id":"09c111a53e1045608448c32940c8f7ac",
"type":"text"
},
{
"fragments":[
{
"text":"These compilation steps were not possible in the first version of RLMeta because the ",
"type":"text"
},
{
"text":"compile.sh",
"type":"code"
},
{
"text":" script generated the support library incorrectly. All RLMeta compilers have two versions of the support library: the one that it generates (stored in the ",
"type":"text"
},
{
"text":"SUPPORT",
"type":"code"
},
{
"text":" variable), and the one it uses itself. If the compiler is a metacompiler, the two versions are the same, but in intermediate compilers they might differ.",
"type":"text"
}
],
"id":"f159ab372dfa4963933f83b562dbeaaa",
"type":"text"
},
{
"fragments":[
{
"text":"The first version of RLMeta generated the support library like this:",
"type":"text"
}
],
"id":"fc12edcf75974eb1bb5e0b7431e0b4b8",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"support_py=$(cat support.py)\n",
"type":"code"
}
],
"id":"f8b7a99762b94e3d9eb6514380294f79",
"language":"bash",
"type":"code"
},
{
"fragments":[
{
"text":"It meant that the intermediate compilers always had the latest support library, and the two versions of the support library were always the same.",
"type":"text"
}
],
"id":"4bd2d41f68e34d9ead322984c6f73b85",
"type":"text"
},
{
"fragments":[
{
"text":"Running the meta compile script on the modified source code with the old version of ",
"type":"text"
},
{
"text":"compile.sh",
"type":"code"
},
{
"text":" gives an error:",
"type":"text"
}
],
"id":"8019705c315f42ffabb6582b662944ca",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"$ ./meta_compile.sh\nTraceback (most recent call last):\n  File \"rlmeta1.py\", line 2217, in <module>\n    sys.stdout.write(compile_grammar(sys.stdin.read()))\n  File \"rlmeta1.py\", line 2210, in compile_grammar\n    return code_generator.run(\"ast\", parser.run(\"grammar\", grammar))\n  File \"rlmeta1.py\", line 102, in run\n    result = self._match_rule(rule_name).eval()\n  File \"rlmeta1.py\", line 123, in eval\n    return self.fn()\n  File \"rlmeta1.py\", line 318, in <lambda>\n    _SemanticAction(lambda: (['Grammar']+[_vars.lookup('x').eval()]+_vars.lookup('ys').eval()+[]))\n  File \"rlmeta1.py\", line 115, in lookup\n    return self[name]\nKeyError: 'x'\n",
"type":"code"
}
],
"id":"6f0bbe403e654b269ab14c20249907ec",
"type":"code"
},
{
"fragments":[
{
"text":"Now ",
"type":"text"
},
{
"text":"rlmeta1.py",
"type":"code"
},
{
"text":" has swapped arguments in the support library, but the generated code (generated by ",
"type":"text"
},
{
"text":"rlmeta.py",
"type":"code"
},
{
"text":") still expect not swapped arguments:",
"type":"text"
}
],
"id":"44b91f05b5dd439e97b33a542f968957",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"$ diff rlmeta.py rlmeta1.py\n3c3\n< SUPPORT = ...\n---\n> SUPPORT = ...\n110c110\n<     def bind(self, name, value):\n---\n>     def bind(self, value, name):\n1814a1815,1816\n>                                         _vars.lookup('y').eval(),\n>                                         '(), ',\n1818,1820c1820\n<                                         ', ',\n<                                         _vars.lookup('y').eval(),\n<                                         '())',\n---\n>                                         ')',\n",
"type":"code"
}
],
"id":"59957f0f204246cda36163580870ef35",
"type":"code"
},
{
"fragments":[
{
"text":"This in turn leads to ",
"type":"text"
},
{
"text":"rlmeta1.py",
"type":"code"
},
{
"text":" not functioning because its ",
"type":"text"
},
{
"text":"bind",
"type":"code"
},
{
"text":" calls have not stored the name as key, but the value. Hence the key error.",
"type":"text"
}
],
"id":"bb42b23bb0c040f19816c8c95a375d61",
"type":"text"
},
{
"fragments":[
{
"text":"The version of RLMeta in this article fixes the generation of the ",
"type":"text"
},
{
"text":"$support_py",
"type":"code"
},
{
"text":" variable like this:",
"type":"text"
}
],
"id":"7dae87609400493c87a72721cf297424",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"support_py=$(python \"$rlmeta_compiler\" --support)\n",
"type":"code"
}
],
"id":"e0f589f3b4534c1db7e683e1ce3f895e",
"language":"bash",
"type":"code"
},
{
"fragments":[
{
"text":"This ensures that the code that the code generator generates is always in sync with the support library.",
"type":"text"
}
],
"id":"a87cb57a477a4bda9aa234c18f099c01",
"type":"text"
}
],
"title":"Modifying support library"
},
{
"children":[],
"id":"1a090bb868154140a167968d8b4b15dc",
"paragraphs":[
{
"fragments":[
{
"text":"The escape codes possible in strings in RLMeta are '",
"type":"text"
},
{
"text":"\\\\",
"type":"code"
},
{
"text":"', '",
"type":"text"
},
{
"text":"\\'",
"type":"code"
},
{
"text":"', '",
"type":"text"
},
{
"text":"\\\"",
"type":"code"
},
{
"text":"', and '",
"type":"text"
},
{
"text":"\\n",
"type":"code"
},
{
"text":"':",
"type":"text"
}
],
"id":"3752ee44334c4b9ca7c1e832a365f0cd",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"escape = '\\\\' -> \"\\\\\" | '\\'' -> \"'\"\n       | '\"'  -> \"\\\"\" | 'n'  -> \"\\n\"\n",
"type":"code"
}
],
"id":"0eace03d4c884263974ce5f845ba40b0",
"language":"rlmeta",
"type":"code"
},
{
"fragments":[
{
"text":"This example shows how a new escape code, '",
"type":"text"
},
{
"text":"\\t",
"type":"code"
},
{
"text":"', can be added.",
"type":"text"
}
],
"id":"a83410c86d4e46fe921a76839ca1a893",
"type":"text"
},
{
"fragments":[
{
"text":"A first attempt might be to extend the ",
"type":"text"
},
{
"text":"escape",
"type":"code"
},
{
"text":" rule in the parser like this:",
"type":"text"
}
],
"id":"ed6d78514ecc475aa4832a05757e2bda",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"escape = '\\\\' -> \"\\\\\" | '\\'' -> \"'\"\n       | '\"'  -> \"\\\"\" | 'n'  -> \"\\n\"\n       | 't'  -> \"\\t\"\n",
"type":"code"
}
],
"id":"2be56ecfeac141b9a7b384a93c14da43",
"language":"rlmeta",
"type":"code"
},
{
"fragments":[
{
"text":"Running the meta compile script on the modified source code gives a new metacompiler:",
"type":"text"
}
],
"id":"b081578826cd4251988dfbd124a693ab",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"$ ./meta_compile.sh\nOK\n",
"type":"code"
}
],
"id":"a6c7487784b14357b6e364747d148d77",
"type":"code"
},
{
"fragments":[
{
"text":"The code generated for the tab case looks like this:",
"type":"text"
}
],
"id":"bda6c32d41814781b1d752a48f9e9c9c",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"(lambda:\n    (lambda _vars:\n        (lambda:\n            self._and([\n                (lambda:\n                    self._match_charseq('t')\n                ),\n                (lambda:\n                    _SemanticAction(lambda: '\\\\t')\n                ),\n            ])\n        )()\n    )(_Vars())\n),\n",
"type":"code"
}
],
"id":"f7ebd9cde05041dd83e33bacd3bf2d0e",
"language":"python",
"type":"code"
},
{
"fragments":[
{
"text":"The semantic action does not return a tab character but rather two characters: '",
"type":"text"
},
{
"text":"\\",
"type":"code"
},
{
"text":"' and '",
"type":"text"
},
{
"text":"t",
"type":"code"
},
{
"text":"'. The reason for this is that the modified source code tries to use the new escape code before the parser understands it. Since the parser does not recognize the new escape code, it will treat it as two separate characters.",
"type":"text"
}
],
"id":"82a056abf1f845d598e345933ec326bc",
"type":"text"
},
{
"fragments":[
{
"text":"How can the semantic action be made to return a tab character? The escape code can not be used until it is implemented, so the only solution is to call a function that returns a tab character:",
"type":"text"
}
],
"id":"dcee60e01ed44ef09ae428ddc4cf4bab",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"escape = '\\\\' -> \"\\\\\" | '\\'' -> \"'\"\n       | '\"'  -> \"\\\"\" | 'n'  -> \"\\n\"\n       | 't'  -> tab()\n",
"type":"code"
}
],
"id":"0b15794e6edb40e2ab156155efcfb688",
"language":"rlmeta",
"type":"code"
},
{
"fragments":[
{
"text":"The ",
"type":"text"
},
{
"text":"tab",
"type":"code"
},
{
"text":" function is added to the Python template to give generated code access to it:",
"type":"text"
}
],
"id":"cd062d599a9a4ccba2a125313deeeb7d",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"tab = lambda: \"\\t\"\n",
"type":"code"
}
],
"id":"1a43c1ff6fb84e989507f0368235a00d",
"language":"python",
"type":"code"
},
{
"fragments":[
{
"text":"Running the meta compile script on the modified source code gives a new metacompiler:",
"type":"text"
}
],
"id":"fd7da17eb8174729858f0490dcadde65",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"$ ./meta_compile.sh\nOK\n",
"type":"code"
}
],
"id":"a074bca6bd3441aeb22b187f2c1939dd",
"type":"code"
},
{
"fragments":[
{
"text":"The code generated for the tab case now looks like this:",
"type":"text"
}
],
"id":"e7ca3979a4a740f09f614d1846d9537b",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"(lambda:\n    (lambda _vars:\n        (lambda:\n            self._and([\n                (lambda:\n                    self._match_charseq('t')\n                ),\n                (lambda:\n                    _SemanticAction(lambda: tab(\n                    ))\n                ),\n            ])\n        )()\n    )(_Vars())\n),\n",
"type":"code"
}
],
"id":"883aa54c39e94bbaad439939e0f5b926",
"language":"python",
"type":"code"
},
{
"fragments":[
{
"text":"The semantic action correctly generates a tab character by calling the ",
"type":"text"
},
{
"text":"tab",
"type":"code"
},
{
"text":" function.",
"type":"text"
}
],
"id":"82b9d4a3e9304a40ae632a7de85d6554",
"type":"text"
},
{
"fragments":[
{
"text":"Now the new escape code can be used inside strings and the ",
"type":"text"
},
{
"text":"tab",
"type":"code"
},
{
"text":" function discarded:",
"type":"text"
}
],
"id":"288a7dca0e0a441c86e15445126d3870",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"escape = '\\\\' -> \"\\\\\" | '\\'' -> \"'\"\n       | '\"'  -> \"\\\"\" | 'n'  -> \"\\n\"\n       | 't'  -> \"\\t\"\n",
"type":"code"
}
],
"id":"920ef986ed9541cc8ac8fa3f42df4199",
"language":"rlmeta",
"type":"code"
},
{
"fragments":[
{
"text":"Running the meta compile script on the modified source code gives a new metacompiler:",
"type":"text"
}
],
"id":"88910f9342ba412f85529e2aaf450246",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"$ ./meta_compile.sh\nOK\n",
"type":"code"
}
],
"id":"565991516f3244979d33aa4e1103053d",
"type":"code"
},
{
"fragments":[
{
"text":"The code generated for the tab case now looks like this:",
"type":"text"
}
],
"id":"0b7bba4d90284d53a7f5772f4275f21e",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"(lambda:\n    (lambda _vars:\n        (lambda:\n            self._and([\n                (lambda:\n                    self._match_charseq('t')\n                ),\n                (lambda:\n                    _SemanticAction(lambda: '\\t')\n                ),\n            ])\n        )()\n    )(_Vars())\n),\n",
"type":"code"
}
],
"id":"1d5d027c53e04af8953e529629cdaf8e",
"language":"python",
"type":"code"
},
{
"fragments":[
{
"text":"Adding the tab escape code required two passes: one to recognize it and one to actually use it.",
"type":"text"
}
],
"id":"3eebfda49d064c088d05b8fe29d1a17b",
"type":"text"
}
],
"title":"Adding a new escape code"
},
{
"children":[],
"id":"22e574102e394218b874f03bb879c92f",
"paragraphs":[
{
"fragments":[
{
"text":"The syntax for introducing a semantic action in RLMeta is ",
"type":"text"
},
{
"text":"->",
"type":"code"
},
{
"text":". This example shows how it can be changed to ",
"type":"text"
},
{
"text":"=>",
"type":"code"
},
{
"text":"? A first attempt might be to change the following line in the parser",
"type":"text"
}
],
"id":"0e6aee95f12d497a9b442328f1625d1a",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"| space '->' hostExpr:x -> [\"SemanticAction\" x]\n",
"type":"code"
}
],
"id":"319fe18be3be4c3f9e94281f5d4d819d",
"language":"rlmeta",
"type":"code"
},
{
"fragments":[
{
"text":"to",
"type":"text"
}
],
"id":"6fd47122d55846e7a64002d2d9a8b3c8",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"| space '=>' hostExpr:x -> [\"SemanticAction\" x]\n",
"type":"code"
}
],
"id":"abcc91d58d4c4f529d9a0eae6654ca5f",
"language":"rlmeta",
"type":"code"
},
{
"fragments":[
{
"text":"Running the meta compile script on the modified source code gives an error:",
"type":"text"
}
],
"id":"084e55e470dd4ce78c29bf03af6b551c",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"$ ./meta_compile.sh\n...\nERROR: L003:C048: expected '}' but found '-'\n",
"type":"code"
}
],
"id":"db17992a334f4a18a2ae2023ba783d60",
"type":"code"
},
{
"fragments":[
{
"text":"What happened? The first compiler generated by the meta compile script (",
"type":"text"
},
{
"text":"rlmeta1.py",
"type":"code"
},
{
"text":") has a parser that expects the syntax to be ",
"type":"text"
},
{
"text":"=>",
"type":"code"
},
{
"text":" for semantic actions. When the meta compile script tries to run that compiler on the modified source code it fails because the modified source code is still using the old ",
"type":"text"
},
{
"text":"->",
"type":"code"
},
{
"text":" syntax. The source code can not be changed to the new syntax before the parser recognizes it, so the meta compile script does not work for this change.",
"type":"text"
}
],
"id":"f769c4e316fa441d8880b645f239757d",
"type":"text"
},
{
"fragments":[
{
"text":"This can be solved in two ways. Either the parser can be changed to allow both syntaxes:",
"type":"text"
}
],
"id":"98d47194afe6453fb7ea05fb612a8dca",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"| space ('-'|'=')'>' hostExpr:x -> [\"SemanticAction\" x]\n",
"type":"code"
}
],
"id":"0bc595d2076f4d3383eb82a802e73eec",
"language":"rlmeta",
"type":"code"
},
{
"fragments":[
{
"text":"Once a new metacompiler has been created, the source code can be changed to use ",
"type":"text"
},
{
"text":"=>",
"type":"code"
},
{
"text":", and then the choice in the parser can be removed to only allow ",
"type":"text"
},
{
"text":"=>",
"type":"code"
},
{
"text":".",
"type":"text"
}
],
"id":"36354d3967f74412aee9c15d33406ee6",
"type":"text"
},
{
"fragments":[
{
"text":"Or the source code must be changed in between:",
"type":"text"
}
],
"id":"e7e71bf0125640a98129a4b1e60a90b7",
"type":"text"
},
{
"chunkpath":[],
"filepath":[],
"fragments":[
{
"text":"$ # make parser change\n$ ./compile.sh rlmeta.py > rlmeta1.py\n$ # change syntax from `->` to `=>`\n$ ./compile.sh rlmeta1.py > rlmeta2.py\n$ ./is_metacompiler.sh rlmeta2.py\nrlmeta2.py is a metacompiler!\n",
"type":"code"
}
],
"id":"0dbc72b4908843908de96ef6446d3de2",
"type":"code"
},
{
"fragments":[],
"id":"188307933ff34ea1a621175edb71bb55",
"image_base64":"",
"type":"image"
},
{
"fragments":[
{
"text":"The meta compile script does not support changing the source code in between compilations.",
"type":"text"
}
],
"id":"1490aa1f0585459fa6dbc0a1fc9de0ff",
"type":"text"
},
{
"fragments":[
{
"text":"I have shown some examples that I hope help understanding how RLMeta can be modified. Happy hacking! This was the last example. I hope them make it easier for you to understand how to modify RLMeta.",
"type":"text"
}
],
"id":"4c4bbcb7b0c243179c2a4092c03ed707",
"type":"text"
}
],
"title":"Modifying grammar syntax"
},
{
"children":[
{
"children":[],
"id":"df676d8cca604142bd1049c5e86c68a2",
"paragraphs":[
{
"code_id":"ef234944361c48eeb16387d8014a4c9b",
"id":"8f508048c2074e7694a93b1182126307",
"type":"expanded_code"
}
],
"title":"compile.sh"
},
{
"children":[],
"id":"38ee00b5ef7c40f79d24fa61f052368f",
"paragraphs":[
{
"code_id":"bd7e31bf3ea7456f975830d5bf2ef05c",
"id":"7c615378b9b64ca3b811bc614095b4ed",
"type":"expanded_code"
}
],
"title":"meta_compile.sh"
},
{
"children":[],
"id":"596acbaab3614dc787158be918bd9d32",
"paragraphs":[
{
"code_id":"51c75af0347d416181ffec8cab1f0c51",
"id":"ed0f143e1fab4bdb89513699489e362a",
"type":"expanded_code"
}
],
"title":"is_metacompiler.sh"
}
],
"id":"60cb5d0ff4ca4d94920bfe635ffd2142",
"paragraphs":[
{
"fragments":[
{
"text":"The only modifications from the original ",
"type":"text"
},
{
"text":"RLMeta",
"type":"link",
"url":"../rlmeta/index.html#388bb1e8ccbd4d55b89b391c08452c33"
},
{
"text":" are the tweaked ",
"type":"text"
},
{
"text":"compile.sh",
"type":"code"
},
{
"text":" script and the additional ",
"type":"text"
},
{
"text":"meta_compile.sh",
"type":"code"
},
{
"text":" and ",
"type":"text"
},
{
"text":"is_metacompiler.sh",
"type":"code"
},
{
"text":" scripts. They are shown fully here. For the rest of the source code, see the original article.",
"type":"text"
}
],
"id":"969153820b334d91838f46bfd52388ad",
"type":"text"
}
],
"title":"Code listings for RLMeta"
}
],
"id":"7b987f7cd685486da72bf77dcd0b3f29",
"paragraphs":[
{
"fragments":[
{
"text":"In the first article about ",
"type":"text"
},
{
"text":"RLMeta",
"type":"link",
"url":"/writing/rlmeta/index.html"
},
{
"text":" I wrote that its small implementation makes it feasible to understand and modify. But modifying the RLMeta metacompiler is different from modifying a regular program. In this article I explain how it differs and show examples of how different parts of RLMeta can be modified.",
"type":"text"
}
],
"id":"4d967f1bcd054206b4731c141ff9822a",
"type":"text"
}
],
"title":"Modifying RLMeta"
},
"variables":{}
}