compiler RLMeta {
  program      = {
                   "import re\n"
                   "import sys\n"
                   "\n"
                   "\n"
                   "class MaybeParseError(Exception):\n" >
                     "pass\n"
                   <
                   "\n"
                   "\n"
                   "class Compiler(object):\n"
                   "\n" >
                     "def compile(self, program):\n" >
                       "self._input = program\n"
                       "self._pos = 0\n"
                       "self._output = ''\n"
                       "self._level = 0\n"
                       "self.program()\n"
                       "return self._output\n"
                     <
                     "\n"
                     "def _re(self, pattern):\n" >
                       "match = re.match(r'\s*({})'.format(pattern), self._input[self._pos:])\n"
                       "if match:\n" >
                         "self._pos += len(match.group(0))\n"
                         "return match.group(1)\n"
                       <
                       "raise MaybeParseError('re not found')\n"
                     <
                     "\n"
                     "def _backup(self):\n"
                     > "return (self._pos, self._output, self._level)\n" <
                     "\n"
                     "def _restore(self, backup):\n"
                     > "self._pos, self._output, self._level = backup\n" <
                     "\n"
                     "def _write(self, text):\n"
                     >
                       "for ch in text:\n"
                       >
                         "if self._output and self._output[-1] == '\\n' and ch != '\\n':\n"
                         > "self._output += '    ' * self._level\n" <
                         "self._output += ch\n"
                       <
                     <
                     "\n"
                     "def _indent(self):\n"
                     > "self._level += 1\n" <
                     "\n"
                     "def _dedent(self):\n"
                     > "self._level -= 1\n" <
                     "\n"
                     "\n"
                   <
                 }
                 grammar
                 ;
  grammar      = "compiler" identifier:name "{"
                 { "class " name "(Compiler):\n" > }
                 rule *rule
                 {
                   <
                   "\n"
                   "\n"
                   "if __name__ == '__main__':\n" >
                     "sys.stdout.write(" name "().compile(sys.stdin.read()))\n"
                   <
                 }
                 "}"
               ;
  rule         = identifier:x
                 { "\ndef " x "(self):\n" > }
                 "="
                 choice *moreChoices
                 { "raise MaybeParseError('no choice found')\n" < }
                 ";"
               ;
  moreChoices  = "\\|" choice;
  choice       = { "try:\n" > "match = None\n" "backup = self._backup()\n" }
                 repetition *repetition
                 { "return match\n" < "except MaybeParseError:\n" > "self._restore(backup)\n" < }
               ;
  repetition   = "[*]"
                 {
                   "while True:\n" >
                     "try:\n" >
                       "backup = self._backup()\n"
                 }
                 part
                 {
                   <
                     "except MaybeParseError:\n" >
                       "self._restore(backup)\n"
                       "break\n"
                   <<
                 }
               | part
               ;
  part         = "{" output *output "}"
               | "\x22.*?\x22"                 { "match = self._re(" % ")\n" }
               | identifier:x ":" identifier:y { y " = self." x "()\n" }
               | identifier:x                  { "self." x "()\n" }
               ;
  output       = "\x22.*?\x22" { "self._write(" % ")\n" }
               | identifier:x  { "self._write(" x ")\n" }
               | "%"           { "self._write(match)\n" }
               | ">"           { "self._indent()\n" }
               | "<"           { "self._dedent()\n" }
               ;
  empty        = "";
  identifier   = "[a-zA-Z0-9]+";
}
