PRELUDE
<<<
compiler Prelude {
  space = /\s*/;
  empty = //;
}
>>>

RUNTIME
<<<
import re
import sys

PRELUDE = ''

class MaybeParseError(Exception):
    pass

class Compiler(object):

    def compile(self, program):
        self._input = PRELUDE + program
        self._pos = 0
        self._output = ''
        self._level = 0
        self.Program()
        return self._output

    def _re(self, pattern):
        match = re.match(pattern, self._input[self._pos:])
        if match:
            self._pos += len(match.group(0))
            return match.group(0)
        raise MaybeParseError('re not found')

    def _backup(self):
        return (self._pos, self._output, self._level)

    def _restore(self, backup):
        self._pos, self._output, self._level = backup

    def _write(self, text):
        for ch in text:
            if self._output and self._output[-1] == '\n' and ch != '\n':
                self._output += '    ' * self._level
            self._output += ch

    def _indent(self):
        self._level += 1

    def _dedent(self):
        self._level -= 1
>>>

compiler RLMeta {

  Program      = { RUNTIME .. } Compiler *Compiler {
                   "if __name__ == '__main__':" .>
                     "sys.stdout.write(_last_grammar().compile(sys.stdin.read()))" .<
                 }
                 ;
  Compiler     = /compiler/ space CompilerName:name space /{/
                 Rule *Rule { <. "_last_grammar = " name .. } space /}/
               | Constant
               ;
  Constant     = Identifier:name space /<<<\n/
                 constatIn:x { name " = " x .. }
                 /\n>>>\n/
               ;
  constatIn    = /(.|\n)*?(?=\n>>>\n)/ -> repr(match)
               ;
  CompilerName = /Prelude/       { "class Prelude(Compiler):" .> } -> "Prelude"
               | Identifier:name { "class " name "(Prelude):" .> } -> name
               ;
  Rule         = Identifier:x {
                   "\n"
                   "def " x "(self):" .>
                     "if '" x "'[0].isupper():" .>
                       "self.space()" .<
                 } space /=/ Choice *MoreChoices {
                     "raise MaybeParseError('no choice found')" . <
                 } space /;/
               ;
  MoreChoices  = /\|/ Choice;
  Choice       = {
                   "try:" .>
                     "match = None" .
                     "backup = self._backup()" .
                 } Repetition *Repetition ChoiceReturn { <
                   "except MaybeParseError:" .>
                     "self._restore(backup)" .<
                 }
               ;
  ChoiceReturn = /->/ space /.*?(?=\n)/ { "return " % . } /\n/
               |                        { "return match" . }
               ;
  Repetition   = /[*]/ {
                   "while True:" .>
                     "try:" .>
                       "backup = self._backup()" .
                 } Part { <
                     "except MaybeParseError:" .>
                       "self._restore(backup)" .
                       "break" .<<
                 }
               | Part
               ;
  Part         = /{/ Output *Output space /}/
               | slashString:x /:/ Identifier:y  { y " = self._re(" x ")" . }
               | slashString:x                   { "match = self._re(" x ")" . }
               | Identifier:x /:/ Identifier:y   { y " = self." x "()" . }
               | Identifier:x                    { "self." x "()" . }
               ;
  slashString  = /\/.*?\/(?<!\\\/)/ -> repr(match[1:-1].replace("\\/", "/"))
               ;
  Output       = /".*?"/       { "self._write(" % ")" . }
               | Identifier:x  { "self._write(" x ")" . }
               | /[.]/         { "self._write('\\n')" . }
               | /%/           { "self._write(match)" . }
               | />/           { "self._indent()" . }
               | /</           { "self._dedent()" . }
               ;
  Identifier   = /[a-zA-Z0-9]+/;
}
