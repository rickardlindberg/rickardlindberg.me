<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>Rickard's personal homepage: latest posts</title>
        <link>http://rickardlindberg.me</link>
        <description><![CDATA[Rickard's personal homepage: latest posts]]></description>
        <atom:link href="http://rickardlindberg.me/rss.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Sat, 29 Jul 2023 00:00:00 UT</lastBuildDate>
        <item>
    <title>DevLog 002: Change mix strategy for cuts in GUI</title>
    <link>http://rickardlindberg.me/writing/devlog-002-selecting-cut-type-in-gui/</link>
    <description><![CDATA[<h1>DevLog 002: Change mix strategy for cuts in GUI</h1>

<p><em>Published on 29 July 2023.</em></p>

<p>In the <a href="/writing/devlog-001-jcut-lcut/index.html">previous devlog</a> we worked on adding the concept of a cut type to a clip in the <a href="/projects/rlvideo/index.html">video editor</a>. That is, how should two overlapping clips be mixed together? Which one should be on top? Should it be a <a href="https://en.wikipedia.org/wiki/J_cut">J-cut</a>?</p>
<p>I’ve since added support for two types of cuts: over and under. So we can (programmatically) set this property on clips and they will render in the correct order.</p>
<p>The default cut is under so that later clips will be mixed under the previous clips:</p>
<p>
<center>
<img src="under.png" title="fig:" alt="Default under cut." />
</center>
</p>
<p>There is not yet a way to change this default from the GUI, so that’s what we will work on in this episode.</p>
<h2 id="aside-clips-and-cuts">Aside: clips and cuts</h2>
<p>When writing about this and when looking at the source code, I’m a bit confused by the terminology. I write about clips och cuts, but in the source code there is no concept of a clip, only a cut and a source.</p>
<p>A source represents a file on disk or some generator of frames. A cut represents a region of a source.</p>
<p>A cut has a property called <code>cut</code> which is how to mix this cut with the previous cut on the timeline. That confuses things further.</p>
<p>Let’s rename it to <code>mix_strategy</code> to lessen the confusion.</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m <span class="s1">&#39;Rename Cut.cut to Cut.mix_strategy.&#39;</span>
...............................................
----------------------------------------------------------------------
Ran <span class="m">47</span> tests <span class="k">in</span> <span class="m">1</span>.918s

OK
<span class="o">[</span>main 425909a<span class="o">]</span> Rename Cut.cut to Cut.mix_strategy.
 <span class="m">1</span> file changed, <span class="m">11</span> insertions<span class="o">(</span>+<span class="o">)</span>, <span class="m">11</span> deletions<span class="o">(</span>-<span class="o">)</span>
</pre>
</div>
</div>
</div>
<p>That’s better.</p>
<h2 id="two-possible-ways">Two possible ways</h2>
<p>I can think of two possible ways to set the mix strategy for a cut in the GUI. Either we can right click on a cut and have a context menu pop up where we can select the mix strategy. Or we can select a clip and have a “set mix strategy” operation applied to the selected clip.</p>
<p>Currently, there is no concept of a selected clip. You can’t select anything. But there is a concept of clicking and dragging a clip. Therefore I think a context menu is easier to get started with.</p>
<h2 id="reviewing-mouse-click-code">Reviewing mouse click code</h2>
<p>Let’s look at how click and drag is handled today.</p>
<p>I see this GTK event is connected:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="n">timeline</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s2">&quot;button-press-event&quot;</span><span class="p">,</span> <span class="n">timeline_button</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>And <code>timeline_button</code> is defined like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">timeline_button</span><span class="p">(</span><span class="n">widget</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">timeline</span><span class="o">.</span><span class="n">mouse_down</span><span class="p">(</span><span class="o">*</span><span class="n">timeline</span><span class="o">.</span><span class="n">translate_coordinates</span><span class="p">(</span>
        <span class="n">main_window</span><span class="p">,</span>
        <span class="n">event</span><span class="o">.</span><span class="n">x</span><span class="p">,</span>
        <span class="n">event</span><span class="o">.</span><span class="n">y</span>
    <span class="p">))</span>
</pre>
</div>
</div>
</div>
<p>This code does not seem to distinguish between left and right mouse button click. Interesting.</p>
<p>Does that mean that we can move a cut on the timeline by clicking and dragging with the right mouse button? I try it in the application. And it indeed works. That was really not my intention. Let’s see if we can fix that.</p>
<p>I add a debug print to see what properties of the event might indicate the button:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">timeline_button</span><span class="p">(</span><span class="n">widget</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>
    <span class="nb">print</span><span class="p">(</span><span class="nb">dir</span><span class="p">(</span><span class="n">event</span><span class="p">))</span>
    <span class="o">...</span>
</pre>
</div>
</div>
</div>
<p>I find this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>[..., &#39;button&#39;, ..., &#39;get_button&#39;, ...]
</pre>
</div>
</div>
</div>
<p>Let’s try this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">timeline_button</span><span class="p">(</span><span class="n">widget</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">event</span><span class="o">.</span><span class="n">button</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>When I press the left button, it prints 1, and when I press the right button, it prints 3. There must be some constants for these. I search the GTK documentation and find <a href="https://docs.gtk.org/gdk3/struct.EventButton.html">this</a>:</p>
<blockquote>
<p>The button which was pressed or released, numbered from 1 to 5. Normally button 1 is the left mouse button, 2 is the middle button, and 3 is the right button.</p>
</blockquote>
<p>Maybe there are no constants?</p>
<p>Let’s codify our new knowledge like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">timeline_button</span><span class="p">(</span><span class="n">widget</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">event</span><span class="o">.</span><span class="n">button</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">timeline</span><span class="o">.</span><span class="n">left_mouse_down</span><span class="p">(</span><span class="o">*</span><span class="n">timeline</span><span class="o">.</span><span class="n">translate_coordinates</span><span class="p">(</span>
            <span class="n">main_window</span><span class="p">,</span>
            <span class="n">event</span><span class="o">.</span><span class="n">x</span><span class="p">,</span>
            <span class="n">event</span><span class="o">.</span><span class="n">y</span>
        <span class="p">))</span>
    <span class="k">elif</span> <span class="n">event</span><span class="o">.</span><span class="n">button</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">timeline</span><span class="o">.</span><span class="n">right_mouse_down</span><span class="p">(</span><span class="o">*</span><span class="n">timeline</span><span class="o">.</span><span class="n">translate_coordinates</span><span class="p">(</span>
            <span class="n">main_window</span><span class="p">,</span>
            <span class="n">event</span><span class="o">.</span><span class="n">x</span><span class="p">,</span>
            <span class="n">event</span><span class="o">.</span><span class="n">y</span>
        <span class="p">))</span>
</pre>
</div>
</div>
</div>
<p>We rename the previous <code>mouse_down</code> to <code>left_mouse_down</code> and add a new empty method for <code>right_mouse_down</code>.</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m <span class="s1">&#39;Timeline receives both left and right mouse down events.&#39;</span>
...............................................
----------------------------------------------------------------------
Ran <span class="m">47</span> tests <span class="k">in</span> <span class="m">1</span>.923s

OK
<span class="o">[</span>main 0fc6fb1<span class="o">]</span> Timeline receives both left and right mouse down events.
 <span class="m">1</span> file changed, <span class="m">17</span> insertions<span class="o">(</span>+<span class="o">)</span>, <span class="m">7</span> deletions<span class="o">(</span>-<span class="o">)</span>
</pre>
</div>
</div>
</div>
<h2 id="review">Review</h2>
<p>It’s a little unnclear to me what the translation of coordinates are doing. I think the coordinates received in the event are relative to the whole GTK window and the timeline expects coordinates relative to itself.</p>
<p>I don’t really want to focus on this now, but I add a TODO in the code that I should clarify this.</p>
<p>In this project I’ve tried to keep my “backlog” in the source code in the form of TODO comments. Some I will probably never get back to, and others will serve as a reminder. But so far I kind of like this approach.</p>
<h2 id="separation-of-timeline-and-gtk">Separation of timeline and GTK</h2>
<p>The timeline component is unaware of GTK. So when it receives the right mouse down event, it can find the cut that we clicked on, but it doesn’t have the ability to show a context menu, because it needs to use GTK for that.</p>
<p>This separation is intentional. I’ve tried to isolate GTK code to the outermost layer to keep the inner layers free from those details and make them easier to test.</p>
<p>But this presents a problem now.</p>
<p>The only solution that comes to mind if we want to maintain this separation is to create some kind of abstraction. Something like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">GtkGuiAbstraction</span><span class="p">:</span>

    <span class="k">def</span> <span class="nf">show_context_menu</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">generic_menu_description</span><span class="p">):</span>
        <span class="c1"># Create GTK context menu from generic_menu_description</span>
</pre>
</div>
</div>
</div>
<p>And then pass that to the timeline so that it can do something like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">right_mouse_down</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">gui</span><span class="o">.</span><span class="n">show_context_menu</span><span class="p">([</span>
        <span class="n">MenuItem</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="s2">&quot;over&quot;</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="k">lambda</span><span class="p">:</span> <span class="o">...</span><span class="p">),</span>
        <span class="n">MenuItem</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="s2">&quot;under&quot;</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="k">lambda</span><span class="p">:</span> <span class="o">...</span><span class="p">),</span>
    <span class="p">])</span>
</pre>
</div>
</div>
</div>
<p>I’m not sure what I think about this. On the one hand it feels like a complex extra layer. On the other hand I really want to isolate GTK code. My experience tells me that GUI code can easily leak in to every part of the application and it just makes everything more messy.</p>
<p>I will try to create the simplest possible solution of this design and see what it feels like.</p>
<h2 id="gtk-gui-abstraction">GTK GUI abstraction</h2>
<p>Let’s start with a test:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">GtkGui</span><span class="p">:</span>

    <span class="k">def</span> <span class="nf">show_context_menu</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">menu</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">        &gt;&gt;&gt; GtkGui().show_context_menu([</span>
<span class="sd">        ...     MenuItem(label=&quot;over&quot;, action=lambda: print(&quot;over&quot;)),</span>
<span class="sd">        ...     MenuItem(label=&quot;under&quot;, action=lambda: print(&quot;under&quot;)),</span>
<span class="sd">        ... ])</span>
<span class="sd">        &quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<p>This fails with</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>NameError: name &#39;MenuItem&#39; is not defined
</pre>
</div>
</div>
</div>
<p>I define <code>MenuItem</code> and we are green:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">MenuItem</span><span class="p">(</span><span class="n">namedtuple</span><span class="p">(</span><span class="s2">&quot;MenuItem&quot;</span><span class="p">,</span> <span class="s2">&quot;label,action&quot;</span><span class="p">)):</span>
    <span class="k">pass</span>
</pre>
</div>
</div>
</div>
<p>Let’s commit:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m <span class="s1">&#39;The start of GtkGui and its show_context_menu method.&#39;</span>
................................................
----------------------------------------------------------------------
Ran <span class="m">48</span> tests <span class="k">in</span> <span class="m">1</span>.923s

OK
<span class="o">[</span>main e64b93e<span class="o">]</span> The start of GtkGui and its show_context_menu method.
 <span class="m">1</span> file changed, <span class="m">13</span> insertions<span class="o">(</span>+<span class="o">)</span>
</pre>
</div>
</div>
</div>
<p>The test so far does not assert anything. It just checks that the code does not crash. But that is enough to experiment with the GTK API. Let’s try to create the menu and the test will tell is if we use the GKT API wrong.</p>
<p>I try this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="n">menu</span> <span class="o">=</span> <span class="n">gtk</span><span class="o">.</span><span class="n">Menu</span><span class="p">()</span>
</pre>
</div>
</div>
</div>
<p>Test immediately fails:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>NameError: name &#39;gtk&#39; is not defined
</pre>
</div>
</div>
</div>
<p>Ah, it should be <code>Gtk</code> I see in the imports at the top of the file. Thank you test.</p>
<p>I search the web for examples how to show a context menu in GTK. After a bit of reading and trying, I end up with this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">show_context_menu</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">menu</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">    &gt;&gt;&gt; event = namedtuple(&quot;FakeEvent&quot;, &quot;button,time&quot;)(3, 0)</span>
<span class="sd">    &gt;&gt;&gt; GtkGui(event).show_context_menu([</span>
<span class="sd">    ...     MenuItem(label=&quot;over&quot;, action=lambda: print(&quot;over&quot;)),</span>
<span class="sd">    ...     MenuItem(label=&quot;under&quot;, action=lambda: print(&quot;under&quot;)),</span>
<span class="sd">    ... ])</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="k">def</span> <span class="nf">create_gtk_handler</span><span class="p">(</span><span class="n">menu_item</span><span class="p">):</span>
        <span class="k">def</span> <span class="nf">handler</span><span class="p">(</span><span class="n">widget</span><span class="p">):</span>
            <span class="n">menu_item</span><span class="o">.</span><span class="n">action</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">handler</span>
    <span class="n">gtk_menu</span> <span class="o">=</span> <span class="n">Gtk</span><span class="o">.</span><span class="n">Menu</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">menu_item</span> <span class="ow">in</span> <span class="n">menu</span><span class="p">:</span>
        <span class="n">gtk_menu_item</span> <span class="o">=</span> <span class="n">Gtk</span><span class="o">.</span><span class="n">MenuItem</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="n">menu_item</span><span class="o">.</span><span class="n">label</span><span class="p">)</span>
        <span class="n">gtk_menu_item</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s2">&quot;activate&quot;</span><span class="p">,</span> <span class="n">create_gtk_handler</span><span class="p">(</span><span class="n">menu_item</span><span class="p">))</span>
        <span class="n">gtk_menu_item</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
        <span class="n">gtk_menu</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">gtk_menu_item</span><span class="p">)</span>
    <span class="n">gtk_menu</span><span class="o">.</span><span class="n">popup</span><span class="p">(</span><span class="kc">None</span><span class="p">,</span> <span class="kc">None</span><span class="p">,</span> <span class="kc">None</span><span class="p">,</span> <span class="kc">None</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">event</span><span class="o">.</span><span class="n">button</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">event</span><span class="o">.</span><span class="n">time</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>The <code>Gtk.Menu</code> seems to need an event to show itself according to examples. So I pass that along to <code>GtkGui</code> and use a fake one in the test. The event handler looks like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">right_mouse_down</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">gui</span><span class="p">):</span>
    <span class="n">gui</span><span class="o">.</span><span class="n">show_context_menu</span><span class="p">([</span>
        <span class="n">MenuItem</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="s2">&quot;over&quot;</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="k">lambda</span><span class="p">:</span> <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;over&quot;</span><span class="p">)),</span>
        <span class="n">MenuItem</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="s2">&quot;under&quot;</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="k">lambda</span><span class="p">:</span> <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;under&quot;</span><span class="p">)),</span>
    <span class="p">])</span>
</pre>
</div>
</div>
</div>
<p>I decide to pass the <code>gui</code> along in the method call. That way, it can more easily be constructed with the right click event in the outer layer:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">elif</span> <span class="n">event</span><span class="o">.</span><span class="n">button</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">timeline</span><span class="o">.</span><span class="n">right_mouse_down</span><span class="p">(</span><span class="o">*</span><span class="n">timeline</span><span class="o">.</span><span class="n">translate_coordinates</span><span class="p">(</span>
        <span class="n">main_window</span><span class="p">,</span>
        <span class="n">event</span><span class="o">.</span><span class="n">x</span><span class="p">,</span>
        <span class="n">event</span><span class="o">.</span><span class="n">y</span>
    <span class="p">),</span> <span class="n">GtkGui</span><span class="p">(</span><span class="n">event</span><span class="p">))</span>
</pre>
</div>
</div>
</div>
<p>This works fine and when I click the menu items, the corresponding text is shown in the console:</p>
<p>
<center>
<img src="popup.png" title="fig:" alt="Context menu popup." />
</center>
</p>
<p>Let’s commit:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m <span class="s1">&#39;Show a context menu when right clicking in timeline.&#39;</span>
................................................
----------------------------------------------------------------------
Ran <span class="m">48</span> tests <span class="k">in</span> <span class="m">1</span>.954s

OK
<span class="o">[</span>main <span class="m">4201621</span><span class="o">]</span> Show a context menu when right clicking <span class="k">in</span> timeline.
 <span class="m">1</span> file changed, <span class="m">22</span> insertions<span class="o">(</span>+<span class="o">)</span>, <span class="m">4</span> deletions<span class="o">(</span>-<span class="o">)</span>
</pre>
</div>
</div>
</div>
<h2 id="modify-cut">Modify cut</h2>
<p>I continue to modify <code>right_mouse_down</code> to this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">right_mouse_down</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">gui</span><span class="p">):</span>
    <span class="n">cut</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">rectangle_map</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
    <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">cut</span><span class="p">,</span> <span class="n">Cut</span><span class="p">):</span>
        <span class="n">gui</span><span class="o">.</span><span class="n">show_context_menu</span><span class="p">([</span>
            <span class="n">MenuItem</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="s2">&quot;over&quot;</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="k">lambda</span><span class="p">:</span> <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;over&quot;</span><span class="p">)),</span>
            <span class="n">MenuItem</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="s2">&quot;under&quot;</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="k">lambda</span><span class="p">:</span> <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;under&quot;</span><span class="p">)),</span>
        <span class="p">])</span>
</pre>
</div>
</div>
</div>
<p>I want to show the context menu only if we right click on a cut. We can use the rectangle map for that.</p>
<p>All tests pass, but when I try this in the application, it fails with this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>NameError: name &#39;Cut&#39; is not defined
</pre>
</div>
</div>
</div>
<p>I should have started with a test. Let’s move a little slower.</p>
<p>I add this line in a larger timeline test where we have some objects setup:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">&gt;&gt;&gt; timeline.right_mouse_down(5, 25, FakeGui(click_context_menu=&quot;over&quot;))</span>
<span class="sd">&quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<p>And here comes one benefit of the GUI abstraction: easier testing. In the test we can pass a <code>FakeGui</code> that will simulate that we click a context menu item. We implement it like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">FakeGui</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">click_context_menu</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">click_context_menu</span> <span class="o">=</span> <span class="n">click_context_menu</span>

    <span class="k">def</span> <span class="nf">show_context_menu</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">menu</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">menu_item</span> <span class="ow">in</span> <span class="n">menu</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">menu</span><span class="o">.</span><span class="n">label</span> <span class="o">==</span> <span class="bp">self</span><span class="o">.</span><span class="n">click_context_menu</span><span class="p">:</span>
                <span class="n">menu</span><span class="o">.</span><span class="n">action</span><span class="p">()</span>
                <span class="k">return</span>
</pre>
</div>
</div>
</div>
<p>Now we get the same error about <code>Cut</code> not being defined. But this time, we get it when running the test suite. Success!</p>
<p>I import <code>Cut</code> and get an error that ‘list’ object has no attribute ‘label’. Ah. I made a mistake in the fake GUI. <code>label</code> and <code>action</code> should be accessed on the item, not the menu.</p>
<p>The current context menu just prints its label, so to make the test pass, let’s assert on that:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">&gt;&gt;&gt; timeline.right_mouse_down(5, 25, FakeGui(click_context_menu=&quot;over&quot;))</span>
<span class="sd">over</span>
<span class="sd">&quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<p>And we are back to green. Let’s commit:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m <span class="s1">&#39;Test right clicking a cut.&#39;</span>
................................................
----------------------------------------------------------------------
Ran <span class="m">48</span> tests <span class="k">in</span> <span class="m">1</span>.957s

OK
<span class="o">[</span>main 7bf3e14<span class="o">]</span> Test right clicking a cut.
 <span class="m">1</span> file changed, <span class="m">33</span> insertions<span class="o">(</span>+<span class="o">)</span>, <span class="m">7</span> deletions<span class="o">(</span>-<span class="o">)</span>
</pre>
</div>
</div>
</div>
<p>But we don’t want to print the menu item label. We want to change the <code>mix_strategy</code> of the clicked cut. Let’s assert on that instead:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">&gt;&gt;&gt; timeline.right_mouse_down(5, 25, FakeGui(click_context_menu=&quot;over&quot;))</span>
<span class="sd">&gt;&gt;&gt; timeline.get_cut(cut_id).mix_strategy</span>
<span class="sd">&#39;over&#39;</span>
<span class="sd">&quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<p>This fails because <code>right_mouse_down</code> still prints its label. I remove the print and it now fails because <code>Timeline.get_cut</code> is not defined. I add it and get the correct failure:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>Failed example:
    timeline.get_cut(cut_id).mix_strategy
Differences (ndiff with -expected +actual):
    - &#39;over&#39;
    + &#39;under&#39;
</pre>
</div>
</div>
</div>
<p>The original mix strategy is <code>over</code> and this test should have changed it to <code>under</code>, but it didn’t. Let’s fix that. As I try to get this test to pass, I get many test failures. The failures guide me what to do next. This method is not defined. Define it. This name does not exist. Fix spell error. I eventually end up with this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">right_mouse_down</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">gui</span><span class="p">):</span>
    <span class="n">cut</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">rectangle_map</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
    <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">cut</span><span class="p">,</span> <span class="n">Cut</span><span class="p">):</span>
        <span class="k">def</span> <span class="nf">mix_strategy_updater</span><span class="p">(</span><span class="n">value</span><span class="p">):</span>
            <span class="k">def</span> <span class="nf">update</span><span class="p">():</span>
                <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">project</span><span class="o">.</span><span class="n">new_transaction</span><span class="p">()</span> <span class="k">as</span> <span class="n">transaction</span><span class="p">:</span>
                    <span class="n">transaction</span><span class="o">.</span><span class="n">modify</span><span class="p">(</span><span class="n">cut</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="k">lambda</span> <span class="n">cut</span><span class="p">:</span>
                        <span class="n">cut</span><span class="o">.</span><span class="n">with_mix_strategy</span><span class="p">(</span><span class="n">value</span><span class="p">))</span>
            <span class="k">return</span> <span class="n">update</span>
        <span class="n">gui</span><span class="o">.</span><span class="n">show_context_menu</span><span class="p">([</span>
            <span class="n">MenuItem</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="s2">&quot;over&quot;</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="n">mix_strategy_updater</span><span class="p">(</span><span class="s2">&quot;over&quot;</span><span class="p">)),</span>
            <span class="n">MenuItem</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="s2">&quot;under&quot;</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="n">mix_strategy_updater</span><span class="p">(</span><span class="s2">&quot;under&quot;</span><span class="p">)),</span>
        <span class="p">])</span>
</pre>
</div>
</div>
</div>
<p>This makes the test pass and also works beautifully in the application. Let’s commit:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m <span class="s1">&#39;Can change mix strategy of clip with context menu.&#39;</span>
................................................
----------------------------------------------------------------------
Ran <span class="m">48</span> tests <span class="k">in</span> <span class="m">1</span>.956s

OK
<span class="o">[</span>main 776171a<span class="o">]</span> Can change mix strategy of clip with context menu.
 <span class="m">3</span> files changed, <span class="m">26</span> insertions<span class="o">(</span>+<span class="o">)</span>, <span class="m">4</span> deletions<span class="o">(</span>-<span class="o">)</span>
</pre>
</div>
</div>
</div>
<h2 id="summary">Summary</h2>
<p>We now have a way to change the mix strategy of a cut in the GUI. The application is a little more useful now.</p>
<p>Working with third party frameworks, like GTK, I find often slows you down. You need to learn the details of it and it is often difficult to write tests. Therefore I’m quite happy with the abstraction that we created. I want to keep as many classes as possible away from messy GTK code.</p>
]]></description>
    <pubDate>Sat, 29 Jul 2023 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/devlog-002-selecting-cut-type-in-gui/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>Writing my own video editor</title>
    <link>http://rickardlindberg.me/writing/writing-my-own-video-editor/</link>
    <description><![CDATA[<h1>Writing my own video editor</h1>

<p><em>Published on 28 July 2023.</em></p>

<p>On May 28 I write <a href="https://hachyderm.io/@rickardlindberg/110447282439624451">this</a>:</p>
<blockquote>
<p>Got the urge to write my own video editor. Tired of kdenlive’s instability. And I don’t need something that advanced. Reading a bit about the MLT framework makes me think that it might actually be possible to do in a reasonable time.</p>
<p>Sometimes I feel bad for starting more projects than i finish. On the other hand, every project I do teach me something. And I do this (believe it or not) for my enjoyment.</p>
</blockquote>
<p>It happens to me from time to time. I get an idea for something that I want to build. Sometimes the urge goes away. This time it doesn’t.</p>
<h2 id="why-write-a-video-editor">Why write a video editor?</h2>
<p>I like to build things. In particular I like to build things that I have a use for myself.</p>
<p>Currently, I use <a href="https://kdenlive.org/en/">Kdenlive</a> as my video editor. It has served me well. However, every time I work with it, I get a little frustrated. It often crashes on me, it often feels slow, and there are certain things that I want to do that I don’t know how.</p>
<p>The normal way of solving those problems I think would include</p>
<ul>
<li>Trying the latest version of Kdenlive (would require me to upgrade Fedora version as well)</li>
<li>Buying a faster computer</li>
<li>Learning Kdenlive better</li>
</ul>
<p>But I can program, and I like to build things. So from that point of view, the obvious solution is to build my own video editor specifically for my needs.</p>
<p>Even if it ends up being unusable as my video editor, I will have had a good time working on it and most likely learned a thing or two.</p>
<h2 id="more-ideas">More ideas</h2>
<p>On June 16 I sketch the following in my notebook:</p>
<p>
<center>
<img src="sketch-initial.png" title="fig:" alt="Initial sketch of a timeline." />
</center>
</p>
<p>I think about how to represent clips on a timeline in my ideal video editor. This sketch also tells me that the urge has not gone away.</p>
<h2 id="researching-mlt">Researching MLT</h2>
<p>Writing a video editor seems like a daunting task. The only reason that I think it will be possible is with help from <a href="https://www.mltframework.org/">MLT</a>. From their website:</p>
<blockquote>
<p>MLT is an open source multimedia framework, designed and developed for television broadcasting. It provides a toolkit for broadcasters, video editors, media players, transcoders, web streamers and many more types of applications.</p>
</blockquote>
<p>So a lot of the heavy lifting of a video editor can be done by MLT. That is my guess and hope anyway. What I can focus on is writing a nice frontend for it.</p>
<p>Instead of speculating, I do some spikes to learn how to use MLT from Python.</p>
<p>Here is one example how to put two clips next to each other on a timeline and preview the result:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="kn">import</span> <span class="nn">time</span>
<span class="kn">import</span> <span class="nn">mlt</span>

<span class="n">mlt</span><span class="o">.</span><span class="n">Factory</span><span class="p">()</span><span class="o">.</span><span class="n">init</span><span class="p">()</span>
<span class="n">profile</span> <span class="o">=</span> <span class="n">mlt</span><span class="o">.</span><span class="n">Profile</span><span class="p">()</span>
<span class="n">playlist</span> <span class="o">=</span> <span class="n">mlt</span><span class="o">.</span><span class="n">Playlist</span><span class="p">()</span>
<span class="n">playlist</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">mlt</span><span class="o">.</span><span class="n">Producer</span><span class="p">(</span><span class="n">profile</span><span class="p">,</span> <span class="s2">&quot;VID_20230611_120041.mp4&quot;</span><span class="p">))</span>
<span class="n">playlist</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">mlt</span><span class="o">.</span><span class="n">Producer</span><span class="p">(</span><span class="n">profile</span><span class="p">,</span> <span class="s2">&quot;VID_20230611_115932.mp4&quot;</span><span class="p">))</span>
<span class="n">consumer</span> <span class="o">=</span> <span class="n">mlt</span><span class="o">.</span><span class="n">Consumer</span><span class="p">(</span><span class="n">profile</span><span class="p">,</span> <span class="s2">&quot;sdl&quot;</span><span class="p">)</span>
<span class="n">consumer</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;rescale&quot;</span><span class="p">,</span> <span class="s2">&quot;none&quot;</span><span class="p">)</span>
<span class="n">consumer</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">playlist</span><span class="p">)</span>
<span class="n">consumer</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
<span class="k">while</span> <span class="n">consumer</span><span class="o">.</span><span class="n">is_stopped</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>More examples from my spikes can be found <a href="https://github.com/rickardlindberg/rlvideo/blob/91dd25a0d39cbe25e8ce85157115d023b4d2c78c/spikes/mlt_hello_world.py">here</a>.</p>
<p>To help me do the spikes, I use the following resources:</p>
<ul>
<li><p><a href="https://www.mltframework.org/docs/framework/">MLT Framework Design</a>: A good introduction to how MLT works.</p></li>
<li><p><a href="https://github.com/mltframework/mlt/tree/master/src/swig/python">Python examples</a>: Examples how to use MLT from Python. They are quite limited, but give you a good starting point.</p></li>
<li><p><a href="https://www.mltframework.org/doxygen/annotated.html">MLT API documentation</a>: The C API documentation. Translating this to Python has been mostly straight forward.</p></li>
<li><p><a href="https://github.com/jliljebl/flowblade">Flowblade</a>: Another video editor that is written in Python and MLT.</p></li>
</ul>
<h2 id="design-idea">Design idea</h2>
<p>By doing the spikes, I have a basic understanding of how to use MLT and how it could be used to build a video editor.</p>
<p>The design I have in mind for the video editor looks something like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">Timeline</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">clips</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">clip</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">clips</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">clip</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">to_mlt_producer</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">...</span><span class="p">):</span>
        <span class="o">...</span>

    <span class="k">def</span> <span class="nf">draw</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">...</span><span class="p">):</span>
        <span class="o">...</span>
</pre>
</div>
</div>
</div>
<p>That is, I want to use custom data structures for representing clips on a timeline. I think that will give us a design which is clean and easy to work with. We can design those structures to be good for the kinds of operations that we want to perform.</p>
<p>However, somehow those structures must be turned into an MLT producer. That is what <code>to_mlt_producer</code> is for. Transforming from our world into the MLT world. When we have an MLT producer, we can preview the composition and render a final result. But all the edit operations will be done on our custom data structures.</p>
<h2 id="timeline-representation">Timeline representation</h2>
<p>So what representation of clips is best? It depends on how it’s going to be used. How do I want to work with clips on a timeline in my ideal video editor?</p>
<p>On June 28 I sketch this:</p>
<p>
<center>
<img src="sketch-timeline-visualization.png" title="fig:" alt="Sketch of a timeline visualization of overlap." />
</center>
</p>
<p>And on June 30 I sketch this:</p>
<p>
<center>
<img src="sketch-split-sections.png" title="fig:" alt="Sketch of a timeline splits." />
</center>
</p>
<p>I don’t think that I want to have multiple tracks in the timeline. There should only be one track. When clips overlap, multiple tracks might be created in the background, but the user should not need to create tracks manually.</p>
<p>The sketches help me figure this out.</p>
<p>I think that we can have one structure with all the clips and their positions. Then we can split those up into sections. One type of section has no overlaps, and the other do. Overlaps must be handled differently. They both render differently (stacked on top of each other) and they must produce multiple MLT tracks in the background.</p>
<p>I work on this section splitting code and end up with this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">&gt;&gt;&gt; a = Source(&quot;A&quot;).create_cut(0, 20).at(0)</span>
<span class="sd">&gt;&gt;&gt; b = Source(&quot;b&quot;).create_cut(0, 20).at(10)</span>
<span class="sd">&gt;&gt;&gt; cuts = Cuts()</span>
<span class="sd">&gt;&gt;&gt; cuts = cuts.add(a)</span>
<span class="sd">&gt;&gt;&gt; cuts = cuts.add(b)</span>
<span class="sd">&gt;&gt;&gt; cuts.split_into_sections().to_ascii_canvas()</span>
<span class="sd">|&lt;-A0------|--A10----&gt;|--b10----&gt;|</span>
<span class="sd">|          |&lt;-b0------|          |</span>
<span class="sd">&gt;&gt;&gt; cuts.modify(b, lambda cut: cut.move(1)).split_into_sections().to_ascii_canvas()</span>
<span class="sd">|&lt;-A0-------|--A11---&gt;|--b9------&gt;|</span>
<span class="sd">|           |&lt;-b0-----|           |</span>
<span class="sd">&quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<p>The <code>to_ascii_canvas</code> is only used in tests to give me faster feedback on the splitting code. It also documents quite nicely what the timeline would look like in different situations.</p>
<h2 id="putting-it-together">Putting it together</h2>
<p>I spend quite some time getting the splitting of cuts to work. Even before I know if this design will work out. (Not very smart.) We know if it will work out when we put everything together.</p>
<p>I first try to put everything together in a Pygame application, but it gives me all kinds of problems, so I decide to try GTK instead.</p>
<p>The application has two parts: one that shows the timeline, and one that shows the preview window.</p>
<p>The timeline is created something like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">timeline_draw</span><span class="p">(</span><span class="n">widget</span><span class="p">,</span> <span class="n">context</span><span class="p">):</span>
    <span class="n">sections</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="o">...</span><span class="p">)</span>
<span class="n">timeline</span> <span class="o">=</span> <span class="n">Gtk</span><span class="o">.</span><span class="n">DrawingArea</span><span class="p">()</span>
<span class="n">timeline</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s2">&quot;draw&quot;</span><span class="p">,</span> <span class="n">timeline_draw</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>It hooks up the draw event and lets the sections (created by <code>split_into_sections</code>) do all the drawing.</p>
<p>The preview window is created something like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="n">preview</span> <span class="o">=</span> <span class="n">Gtk</span><span class="o">.</span><span class="n">DrawingArea</span><span class="p">()</span>
<span class="n">os</span><span class="o">.</span><span class="n">putenv</span><span class="p">(</span><span class="s2">&quot;SDL_WINDOWID&quot;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">preview</span><span class="o">.</span><span class="n">get_window</span><span class="p">()</span><span class="o">.</span><span class="n">get_xid</span><span class="p">()))</span>
<span class="n">consumer</span> <span class="o">=</span> <span class="n">mlt</span><span class="o">.</span><span class="n">Consumer</span><span class="p">(</span><span class="n">profile</span><span class="p">,</span> <span class="s2">&quot;sdl&quot;</span><span class="p">)</span>
<span class="n">consumer</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
<span class="n">consumer</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">sections</span><span class="o">.</span><span class="n">to_mlt_producer</span><span class="p">(</span><span class="n">profile</span><span class="p">))</span>
</pre>
</div>
</div>
</div>
<p>It connects the SDL consumer to the preview window and the producer (created by <code>to_mlt_producer</code>) to the consumer. I learn how to make the SDL consumer draw its output inside a GTK window by looking at the Flowblade source code.</p>
<p>I get a basic version of <code>Sections.draw</code> and <code>Sections.to_mlt_producer</code> and end up with this on July 3:</p>
<p>
<center>
<img src="current-status.png" title="fig:" alt="Current look of application." />
</center>
</p>
<h2 id="future">Future</h2>
<p>At this point we have a sort of proof of concept of the design. We can now</p>
<ul>
<li>Programmaticlly load clips into a timeline data structure.</li>
<li>This structure can draw itself onto a Cairo context which we can use to render it inside a GTK application.</li>
<li>This structure can also generate an MLT producer which we can use to preview the composition using the SDL consumer and have the output shown in a window in our GTK application via <code>SDL_WINDOWID</code>.</li>
</ul>
<p>One thing that I worry about with this design is performance. Every time we modify the timeline, we have to generate a new sections object and from that generate a new MLT producer. That might take time. My hope and guess is that we can do smart things to get good enough performance. But it is worth looking into to quite soon to ensure that this design will hold even for larger projects.</p>
<p>There for sure are many, many more details to flesh out before we have a functioning video editor. But I’m quite pleased that we have gotten this far in this quite short amount of time.</p>
<p>You can find the source code on <a href="https://github.com/rickardlindberg/rlvideo">GitHub</a>.</p>
]]></description>
    <pubDate>Fri, 28 Jul 2023 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/writing-my-own-video-editor/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>How to get fast feedback on graphical code?</title>
    <link>http://rickardlindberg.me/writing/fast-feedback-on-graphical-code/</link>
    <description><![CDATA[<h1>How to get fast feedback on graphical code?</h1>

<p><em>Published on 28 July 2023.</em></p>

<p>I am working on <a href="/writing/writing-my-own-video-editor/index.html">my own video editor</a>. It currently looks like this:</p>
<p>
<center>
<img src="rlvideo.png" title="fig:" alt="Current state of video editor." />
</center>
</p>
<p>The bottom pane shows the timeline with all the clips. It is a <code>Gtk.DrawingArea</code> where all the drawing is done using Cairo.</p>
<p>When I work on the drawing code, I want fast feedback on it. Does it look good? Does it draw as intended?</p>
<p>Usually I use TDD for this kind of feedback, but graphical output it hard to test.</p>
<p>In the beginning, I used to run the application after every change. This was quite fast because the application is still small and I can start it up with a sample timeline quite quickly. However, it still takes a few seconds and a couple of keystrokes.</p>
<p>Then I came up with a much better workflow.</p>
<p>I added a (doc)test to my test suite that does something like this (some details removed):</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">&gt;&gt;&gt; surface = cairo.ImageSurface(cairo.FORMAT_ARGB32, width, height)</span>
<span class="sd">&gt;&gt;&gt; context = cairo.Context(surface)</span>
<span class="sd">&gt;&gt;&gt; project = Project.new()</span>
<span class="sd">&gt;&gt;&gt; with project.new_transaction() as transaction:</span>
<span class="sd">...     _ = transaction.add_text_clip(&quot;hello&quot;, length=30)</span>
<span class="sd">...     x = transaction.add_text_clip(&quot;world&quot;, length=35)</span>
<span class="sd">...     _ = transaction.add_text_clip(&quot;end&quot;, length=20)</span>
<span class="sd">...     _ = transaction.add_text_clip(&quot;end&quot;, length=20)</span>
<span class="sd">...     transaction.modify(x, lambda cut: cut.move(-10))</span>
<span class="sd">&gt;&gt;&gt; timeline = Timeline(project)</span>
<span class="sd">&gt;&gt;&gt; timeline.draw_cairo(</span>
<span class="sd">...     context=context,</span>
<span class="sd">...     playhead_position=40,</span>
<span class="sd">...     width=width,</span>
<span class="sd">...     height=height</span>
<span class="sd">... )</span>
<span class="sd">&gt;&gt;&gt; surface.write_to_png(&quot;timeline.png&quot;)</span>
<span class="sd">&quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<p>The <code>Timeline</code> class is what does the drawing of the timeline. Fortunately, it is separated from the GTK component onto which it is drawn. This allows us to create our own Cairo surface, let the timeline draw itself on that, and in the end, write that surface to a file.</p>
<p>Every time we run the test suite (which I like to do automatically on every save) we get a new <code>timeline.png</code> file where the example clips that we populated in the test are drawn. If we open this file in the GNOME image viewer (<code>eog timeline.png</code>) it will automatically reload the image when it changes.</p>
<p>In this workflow, this is my typical setup:</p>
<p>
<center>
<img src="workflow1.png" title="fig:" alt="Workflow setup." />
</center>
</p>
<p>I have my editor to the right, the automatic test suite runner in the top left, and the timeline image in the bottom left.</p>
<p>In this example I draw two timelines with different zoom levels so that I can quickly see how that looks.</p>
<p>Then I can make a change to some color for example, and within a second or two, my test suite has automatically run and my desktop looks like this:</p>
<p>
<center>
<img src="workflow2.png" title="fig:" alt="Workflow after a change." />
</center>
</p>
<p>I can tweak numbers until I think it looks good and I never have to leave my editor.</p>
]]></description>
    <pubDate>Fri, 28 Jul 2023 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/fast-feedback-on-graphical-code/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>DevLog 001: J-cuts and L-cuts in my video editor?</title>
    <link>http://rickardlindberg.me/writing/devlog-001-jcut-lcut/</link>
    <description><![CDATA[<h1>DevLog 001: J-cuts and L-cuts in my video editor?</h1>

<p><em>Published on 28 July 2023.</em></p>

<h2 id="about-devlogs">About DevLogs</h2>
<p>DevLogs is an experiment to try to document development that I do on various projects. I will try to write what is going on in my head as I do various development tasks.</p>
<h2 id="todays-problem">Today’s problem</h2>
<p>In my video editor, there is a problem with overlapping clips. How they overlap appears to be almost random.</p>
<p>In this edit, the <code>two.mp4</code> clip is rendered below:</p>
<p>
<center>
<img src="edit1.png" title="fig:" alt="Alternative text." />
</center>
</p>
<p>If we edit the <code>one.mp4</code> clip, then the two switch order.</p>
<p>
<center>
<img src="edit2.png" title="fig:" alt="Alternative text." />
</center>
</p>
<p>So the order depends on the modification times of clips.</p>
<p>That is not very good.</p>
<h2 id="plan">Plan</h2>
<p>My idea for how to solve this is that each clip can specify how it should be cut into the previous one.</p>
<p>I imagine a library of cuts such as:</p>
<ul>
<li>over</li>
<li>under</li>
<li>j-cut</li>
<li>l-cut</li>
<li>overlay (with priority)</li>
<li>background (with priority)</li>
</ul>
<p>To make progress on this, we can probably assume a default cut (maybe under) and make sure it works. Then we can extend the library of cuts.</p>
<h2 id="writing-a-test">Writing a test</h2>
<p>The relevant code for this is mostly here:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">extract_mix_section</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">region</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">    &gt;&gt;&gt; cuts = Cuts.from_list([</span>
<span class="sd">    ...     Cut.test_instance(name=&quot;A&quot;, start=0, end=8, position=1),</span>
<span class="sd">    ...     Cut.test_instance(name=&quot;B&quot;, start=0, end=8, position=5),</span>
<span class="sd">    ... ])</span>
<span class="sd">    &gt;&gt;&gt; cuts.to_ascii_canvas()</span>
<span class="sd">    | &lt;-A0---&gt;    |</span>
<span class="sd">    |     &lt;-B0---&gt;|</span>
<span class="sd">    &gt;&gt;&gt; cuts.extract_mix_section(Region(start=0, end=15)).to_ascii_canvas()</span>
<span class="sd">    %&lt;-A0---&gt;%%%%%%</span>
<span class="sd">    %%%%%&lt;-B0---&gt;%%</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="c1"># TODO: sort based on cut (j-cut, l-cut, overlay, background).</span>
    <span class="n">playlists</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">cut</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">create_cut</span><span class="p">(</span><span class="n">region</span><span class="p">)</span><span class="o">.</span><span class="n">cut_map</span><span class="o">.</span><span class="n">values</span><span class="p">():</span>
        <span class="n">playlists</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">Cuts</span><span class="o">.</span><span class="n">empty</span><span class="p">()</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">cut</span><span class="p">)</span><span class="o">.</span><span class="n">extract_playlist_section</span><span class="p">(</span><span class="n">region</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">MixSection</span><span class="p">(</span><span class="n">length</span><span class="o">=</span><span class="n">region</span><span class="o">.</span><span class="n">length</span><span class="p">,</span> <span class="n">playlists</span><span class="o">=</span><span class="n">playlists</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>Let’s write a test that shows the current behavior first:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">&gt;&gt;&gt; region = Region(start=0, end=15)</span>
<span class="sd">&gt;&gt;&gt; a_cut = Cut.test_instance(name=&quot;A&quot;, start=0, end=8, position=1)</span>
<span class="sd">&gt;&gt;&gt; b_cut = Cut.test_instance(name=&quot;B&quot;, start=0, end=8, position=5)</span>

<span class="sd">&gt;&gt;&gt; Cuts.from_list([</span>
<span class="sd">...     a_cut,</span>
<span class="sd">...     b_cut,</span>
<span class="sd">... ]).extract_mix_section(region).to_ascii_canvas()</span>
<span class="sd">%&lt;-A0---&gt;%%%%%%</span>
<span class="sd">%%%%%&lt;-B0---&gt;%%</span>

<span class="sd">&gt;&gt;&gt; Cuts.from_list([</span>
<span class="sd">...     b_cut,</span>
<span class="sd">...     a_cut,</span>
<span class="sd">... ]).extract_mix_section(region).to_ascii_canvas()</span>
<span class="sd">%%%%%&lt;-B0---&gt;%%</span>
<span class="sd">%&lt;-A0---&gt;%%%%%%</span>
<span class="sd">&quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<p>So depending on the order in which cuts are added, they mix differently. This is exactly the behavior that we want to change. We want them to mix the same no matter what order they are added in.</p>
<p>Let’s commit this as a baseline:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m <span class="s1">&#39;Pinpoint current behavior of mixing cuts.&#39;</span>
</pre>
</div>
</div>
</div>
<p>The <code>./make.py commit</code> script is a wrapper around <code>git commit</code> that also runs the tests and makes sure there are no untracked files. A real handy tool to make sure we don’t commit “bad” code.</p>
<h2 id="cut-the-same">Cut the same</h2>
<p>I modify the test above to assert that the same mix is created even when the cuts are in the reverse order.</p>
<p>I make it pass by sorting the clips by start time, making “later” clips appear below which would be the equivalent of having the cut on the second b clip set to “under”:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">sort_cuts</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">cuts</span><span class="p">):</span>
    <span class="k">return</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">cuts</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">cut</span><span class="p">:</span> <span class="n">cut</span><span class="o">.</span><span class="n">get_source_cut</span><span class="p">()</span><span class="o">.</span><span class="n">start</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>That works as intended in the application as well. Let’s commit:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m <span class="s1">&#39;Always mix cuts below previous cut.&#39;</span>
</pre>
</div>
</div>
</div>
<h2 id="clips-with-the-same-start">Clips with the same start</h2>
<p>If two cuts have the same start, the sorting will have no effect and we still have the same problem.</p>
<p>First of all, I don’t think this scenario will be that common in a real situation.</p>
<p>I’m thinking we can handle it with a warning. If such situation appears, the user has to resolve the issue by hinting how the mix should be done.</p>
<p>We can also take the end position into account. Then only cuts with the same start and end has the problem. In which case the user must explicitly tell which should be on top somehow.</p>
<h2 id="summary">Summary</h2>
<p>We made progress towards mixing cuts in a better way. Next step in this area I think is to allow the type of cut to be specified per clip and take that into account when sorting cuts. I think it should be quite easy to write tests for this and we should be able to move steady and carefully using TDD.</p>
]]></description>
    <pubDate>Fri, 28 Jul 2023 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/devlog-001-jcut-lcut/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>June 2023 Update</title>
    <link>http://rickardlindberg.me/writing/newsletter/june-2023/</link>
    <description><![CDATA[<h1>June 2023 Update</h1>

<p><em>Published on  4 July 2023.</em></p>

<p>This is what I’ve been up to in June 2023:</p>
<ul>
<li><p>I continued writing about the development of the <a href="/projects/agdpp/index.html">balloon shooter game</a>. The actual development is already done, and I’m still playing catch up with the articles. Here are the ones that I wrote this month:</p>
<ul>
<li><a href="/writing/agdpp-tdd-and-games/index.html">Does TDD work when building a game?</a></li>
<li><a href="/writing/agdpp-spawn-multiple-balloons/index.html">Spawn multiple balloons</a></li>
<li><a href="/writing/agdpp-multiplayer/index.html">Multiplayer</a></li>
</ul></li>
<li><p>I had a discussion with <a href="https://www.ronjeffries.com/">Ron</a> about high-level vs micro-tests. I wrote about it in <a href="/writing/high-level-low-level-ron-reply/index.html">High-level or micro-tests? A discussion with Ron.</a></p></li>
<li><p>I couldn’t resist the <a href="https://hachyderm.io/@rickardlindberg/110447282439624451">urge</a> to start working on my own video editor software. I will write a blog post (or maybe a new series?) about it. In the meantime, the code is on <a href="https://github.com/rickardlindberg/rlvideo">GitHub</a>. I am really not that good at naming my projects. They all start with “rl” plus the general function of the software:</p>
<ul>
<li><code>rlvideo</code>: My video editor.</li>
<li><a href="/projects/rlmeta/index.html">rlmeta</a>: My meta compiler.</li>
<li><a href="/projects/rliterate/index.html">rliterate</a>: My literate programming tool.</li>
<li><a href="/projects/rlselect/index.html">rlselect</a>: My interactive line searcher tool.</li>
<li>…</li>
</ul></li>
<li><p><a href="/writing/newsletter/may-2023/index.html">Last month</a> I wrote about that I started a new project: animation studio. I have since successfully used it to create some animations for a video. Now that I’ve started working on my own video editor, I’m thinking that I want to integrate that functionality into the video editor instead of developing it further. We’ll see.</p></li>
<li><p>I published one programming video on my <a href="https://www.youtube.com/channel/UC4XI09URnsM_YYTSizAMliA">Youtube channel</a>:</p>
<ul>
<li><a href="https://youtu.be/unYD_bPyadc">Spawn multiple balloons | Agile Game Development with Python and Pygame (part 5)</a></li>
</ul></li>
</ul>
]]></description>
    <pubDate>Tue, 04 Jul 2023 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/newsletter/june-2023/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>Multiplayer</title>
    <link>http://rickardlindberg.me/writing/agdpp-multiplayer/</link>
    <description><![CDATA[<h1>Multiplayer</h1>

<p><em>Published on 29 June 2023 in <a href="/projects/agdpp/index.html">Agile Game Development with Python and Pygame</a>.</em></p>

<p>For every story that we work on, the balloon shooter feels more and more like a real game. The initial goal of this project was to create a game that me and my son will enjoy playing <em>together</em>. At this point, I think the most valuable thing we can work on towards that goal is adding support for multiplayer. So that’s the topic for this episode.</p>
<h2 id="a-new-layer">A new layer</h2>
<p>The entry point for the balloon shooter looks like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&quot;__main__&quot;</span><span class="p">:</span>
    <span class="n">BalloonShooter</span><span class="o">.</span><span class="n">create</span><span class="p">()</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</pre>
</div>
</div>
</div>
<p>The balloon shooter class instantiates a game scene which implements the logic of our game:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">BalloonShooter</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">loop</span><span class="p">):</span>
        <span class="o">...</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">game_scene</span> <span class="o">=</span> <span class="n">GameScene</span><span class="p">(</span><span class="n">Rectangle</span><span class="o">.</span><span class="n">from_size</span><span class="p">(</span><span class="o">*</span><span class="bp">self</span><span class="o">.</span><span class="n">resolution</span><span class="p">))</span>

    <span class="k">def</span> <span class="nf">tick</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">game_scene</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">dt</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">loop</span><span class="o">.</span><span class="n">clear_screen</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">game_scene</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">loop</span><span class="p">)</span>

    <span class="o">...</span>
</pre>
</div>
</div>
</div>
<p>This means that as soon as we start the game, we enter the gameplay mode and can start playing right away.</p>
<p>I imagine that multiplayer mode works by first selecting which players should participate in shooting balloons, and after that, the gameplay mode is entered and each player gets their own bow to shoot with.</p>
<p>We want to go from this structure:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>BalloonShooter
    GameScene
</pre>
</div>
</div>
</div>
<p>To something like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>BalloonShooter
    NewGameScene
        StartScene
        GameScene
</pre>
</div>
</div>
</div>
<p>We want to add another level that first directs calls to a start scene (or player select scene) and once players are selected, initializes the game scene and directs call to that.</p>
<p>The current tests for <code>GameScene</code> should pass unchanged, but tests for <code>BalloonShooter</code> will need some modifications. I imagine that those tests need to select a player before asserting something from the gameplay mode. We’ll see later.</p>
<h2 id="refactor-to-new-structure">Refactor to new structure</h2>
<p>Let’s start by slowly and carefully refactor towards this new structure, using our tests as a safety net to give us feedback about how we’re doing.</p>
<p>I want to call the new layer <code>GameScene</code>, but that name is already taken. The current game scene is really the gameplay scene, so we rename it to that. Then we create the new game scene which just forwards its calls to the gameplay scene:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">GameScene</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">screen_area</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">gameplay</span> <span class="o">=</span> <span class="n">GameplayScene</span><span class="p">(</span><span class="n">screen_area</span><span class="o">=</span><span class="n">screen_area</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">event</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">gameplay</span><span class="o">.</span><span class="n">event</span><span class="p">(</span><span class="n">event</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">gameplay</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">dt</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">draw</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">loop</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">gameplay</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="n">loop</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>We insert this new layer in <code>BalloonShooter</code> like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="gu">@@ -113,7 +113,7 @@ class BalloonShooter:</span>
     def __init__(self, loop):
         self.loop = loop
         self.resolution = (1280, 720)
<span class="gd">-        self.game_scene = GameplayScene(Rectangle.from_size(*self.resolution))</span>
<span class="gi">+        self.game_scene = GameScene(screen_area=Rectangle.from_size(*self.resolution))</span>
</pre>
</div>
</div>
</div>
<p>The new layer is now added, all tests are passing, and we have a point in our code (<code>GameScene</code>) where we can put functionality to choose between a start scene and a gameplay scene.</p>
<p>Before we can work on that behavior, we need a start scene.</p>
<h2 id="start-scene">Start scene</h2>
<p>We write the initial version of the start scene like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">StartScene</span><span class="p">(</span><span class="n">SpriteGroup</span><span class="p">):</span>

    <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">    I report players when on player has shot twice:</span>

<span class="sd">    &gt;&gt;&gt; start = StartScene(screen_area=Rectangle.from_size(500, 500))</span>
<span class="sd">    &gt;&gt;&gt; start.get_players() is None</span>
<span class="sd">    True</span>

<span class="sd">    &gt;&gt;&gt; start.event(GameLoop.create_event_joystick_down(XBOX_A))</span>
<span class="sd">    &gt;&gt;&gt; start.update(0)</span>
<span class="sd">    &gt;&gt;&gt; start.get_players() is None</span>
<span class="sd">    True</span>

<span class="sd">    &gt;&gt;&gt; start.event(GameLoop.create_event_joystick_down(XBOX_A))</span>
<span class="sd">    &gt;&gt;&gt; start.update(0)</span>
<span class="sd">    &gt;&gt;&gt; start.get_players()</span>
<span class="sd">    [&#39;one&#39;]</span>
<span class="sd">    &quot;&quot;&quot;</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">screen_area</span><span class="p">):</span>
        <span class="n">SpriteGroup</span><span class="o">.</span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">input_handler</span> <span class="o">=</span> <span class="n">InputHandler</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">shots</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">def</span> <span class="nf">event</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">input_handler</span><span class="o">.</span><span class="n">action</span><span class="p">(</span><span class="n">event</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">):</span>
        <span class="n">SpriteGroup</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">shots</span> <span class="o">+=</span> <span class="mi">1</span>

    <span class="k">def</span> <span class="nf">get_players</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">shots</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">[</span><span class="s2">&quot;one&quot;</span><span class="p">]</span>
</pre>
</div>
</div>
</div>
<p>The idea is that a player (keyboard or gamepad) selects to be part of the game by shooting. When all players have entered, one of them can shoot again to start the game. This functionality is not yet fully implemented above. But this will do for now.</p>
<p>When writing this blog post and looking at the code, I notice two problems. First of all “on” should be “one” in the test description. Second of all, the implementation does not check events at all, so if the test does not simulate any events, it will still pass. If we were to take this start scene into play now, we just need to wait for two iterations (2/60th of a second) and it would report players <code>['one']</code>. That does not seem correct.</p>
<p>Let’s fix that. We modify the test to do two updates and the assertions should be the same:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">&gt;&gt;&gt; start.event(GameLoop.create_event_joystick_down(XBOX_A))</span>
<span class="sd">&gt;&gt;&gt; start.update(0)</span>
<span class="sd">&gt;&gt;&gt; start.update(0)</span>
<span class="sd">&gt;&gt;&gt; start.get_players() is None</span>
<span class="sd">True</span>

<span class="sd">&gt;&gt;&gt; start.event(GameLoop.create_event_joystick_down(XBOX_A))</span>
<span class="sd">&gt;&gt;&gt; start.update(0)</span>
<span class="sd">&gt;&gt;&gt; start.update(0)</span>
<span class="sd">&gt;&gt;&gt; start.get_players()</span>
<span class="sd">[&#39;one&#39;]</span>
<span class="sd">&quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<p>I wonder how common the event + update pattern is in our tests. Perhaps we can benefit from a test helper something like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">cycle</span><span class="p">(</span><span class="n">sprite</span><span class="p">,</span> <span class="n">events</span><span class="o">=</span><span class="p">[],</span> <span class="n">dt</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">events</span><span class="p">:</span>
        <span class="n">sprite</span><span class="o">.</span><span class="n">event</span><span class="p">(</span><span class="n">event</span><span class="p">)</span>
    <span class="n">sprite</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">dt</span><span class="p">)</span>
    <span class="n">sprite</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">dt</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>We might try it in a few places and see if the tests read better. But not now. The modification to the tests forces us to check events. We do it like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">StartScene</span><span class="p">(</span><span class="n">SpriteGroup</span><span class="p">):</span>

    <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">):</span>
        <span class="n">SpriteGroup</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">input_handler</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">dt</span><span class="p">)</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">input_handler</span><span class="o">.</span><span class="n">get_shoot</span><span class="p">():</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">shots</span> <span class="o">+=</span> <span class="mi">1</span>

    <span class="o">...</span>
</pre>
</div>
</div>
</div>
<p>With that fix out of the way, let’s work on integrating the start scene.</p>
<h2 id="take-start-scene-into-play">Take start scene into play</h2>
<p>The game scene currently forwards all calls to the gameplay scene. To take the start scene into play, we first want the start scene to be active, and have the game scene forward calls to it. Once players have been selected, we want the game scene to switch the active scene to the gameplay scene.</p>
<p>We express that in the following test:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">GameScene</span><span class="p">:</span>

    <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">    Initially, I draw the start scene:</span>

<span class="sd">    &gt;&gt;&gt; game = GameScene(screen_area=Rectangle.from_size(500, 500))</span>
<span class="sd">    &gt;&gt;&gt; isinstance(game.active_scene, StartScene)</span>
<span class="sd">    True</span>

<span class="sd">    When players have been selected, I draw the gameplay scene:</span>

<span class="sd">    &gt;&gt;&gt; game.event(GameLoop.create_event_keydown(KEY_SPACE))</span>
<span class="sd">    &gt;&gt;&gt; game.update(0)</span>
<span class="sd">    &gt;&gt;&gt; isinstance(game.active_scene, StartScene)</span>
<span class="sd">    True</span>

<span class="sd">    &gt;&gt;&gt; game.event(GameLoop.create_event_keydown(KEY_SPACE))</span>
<span class="sd">    &gt;&gt;&gt; game.update(0)</span>
<span class="sd">    &gt;&gt;&gt; isinstance(game.active_scene, StartScene)</span>
<span class="sd">    False</span>
<span class="sd">    &quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<p>This is an example of an overlapping, sociable test. To make the scene switch happen, we need <code>StartScene.get_players</code> to return something. Since the game scene uses the real start scene, and not a mock, the only way to make it return something is to perform the same actions as we did in the start scene tests.</p>
<p>To make this test pass, we initialize an active scene variable to the start scene and switch it to the gameplay scene once we have selected players:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">GameScene</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">screen_area</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">screen_area</span> <span class="o">=</span> <span class="n">screen_area</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">active_scene</span> <span class="o">=</span> <span class="n">StartScene</span><span class="p">(</span><span class="n">screen_area</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">screen_area</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">active_scene</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">dt</span><span class="p">)</span>
        <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">active_scene</span><span class="p">,</span> <span class="n">StartScene</span><span class="p">):</span>
            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">active_scene</span><span class="o">.</span><span class="n">get_players</span><span class="p">():</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">active_scene</span> <span class="o">=</span> <span class="n">GameplayScene</span><span class="p">(</span><span class="n">screen_area</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">screen_area</span><span class="p">)</span>

    <span class="o">...</span>
</pre>
</div>
</div>
</div>
<p>The test talks about switching to a gameplay scene, but it only asserts that the start scene is <em>not</em> active anymore. We could probably clarify that.</p>
<p>I’m also not sure how I feel about the assertions that checks the type of the active scene. But I don’t have any ideas for a better way to express that. If you do, please let me know.</p>
<p>When we run the game now, it shows a blank purple screen. If we shoot twice we enter the gameplay scene and the game starts as before. Perfect!</p>
<p>We do not yet take players into account and we can still not have multiple players. What we do have is a skeleton with a few more places where this new functionality can be added.</p>
<p>The game works fine now (if we know that we have to shoot twice to get passed the start scene), but a test fails. It is the test for the balloon shooter. Here it is:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">BalloonShooter</span><span class="p">:</span>

    <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">    We run the game for a few frames, then quit:</span>

<span class="sd">    &gt;&gt;&gt; events = BalloonShooter.run_in_test_mode(</span>
<span class="sd">    ...     events=[</span>
<span class="sd">    ...         [],</span>
<span class="sd">    ...         [],</span>
<span class="sd">    ...         [],</span>
<span class="sd">    ...         [],</span>
<span class="sd">    ...         [],</span>
<span class="sd">    ...         [],</span>
<span class="sd">    ...         [GameLoop.create_event_user_closed_window()],</span>
<span class="sd">    ...     ]</span>
<span class="sd">    ... )</span>

<span class="sd">    The game loop is initialized and cleaned up:</span>

<span class="sd">    &gt;&gt;&gt; events.filter(&quot;GAMELOOP_INIT&quot;, &quot;GAMELOOP_QUIT&quot;)</span>
<span class="sd">    GAMELOOP_INIT =&gt;</span>
<span class="sd">        resolution: (1280, 720)</span>
<span class="sd">        fps: 60</span>
<span class="sd">    GAMELOOP_QUIT =&gt;</span>

<span class="sd">    ...</span>
<span class="sd">    &quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<p>This test is at the outermost level, so it includes all objects. Before, the gameplay scene received the events from the test, but now the start scene receives them. The start scene does not handle the user closed window event which results in this test just hanging.</p>
<p>That failure teaches us that we can’t quit the application when we are in the start scene, only when we are in the gameplay scene. That is probably not correct. Thank you test for pointing that out. However, the assertions that follow check for example that a balloon is drawn, so the test expects to be in the gameplay mode. We modify the test to include two shoot events so that we end up in the gameplay scene:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">&gt;&gt;&gt; events = BalloonShooter.run_in_test_mode(</span>
<span class="sd">...     events=[</span>
<span class="sd">...         [GameLoop.create_event_keydown(KEY_SPACE)],</span>
<span class="sd">...         [GameLoop.create_event_keydown(KEY_SPACE)],</span>
<span class="sd">...         [],</span>
<span class="sd">...         [],</span>
<span class="sd">...         [],</span>
<span class="sd">...         [],</span>
<span class="sd">...         [],</span>
<span class="sd">...         [],</span>
<span class="sd">...         [GameLoop.create_event_user_closed_window()],</span>
<span class="sd">...     ]</span>
<span class="sd">... )</span>
<span class="sd">&quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<p>And, we are back to green!</p>
<p>Here is yet another example of overlapping, sociable testing. We yet again have to simulate two shoot events to select players.</p>
<p>One downside of this approach is that if we were to change the logic for selecting players, say that we first need to shoot and then turn left, then we would have to modify three test I think. One way to make that less of a problem in this particular situation is to create a test helper something like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">events_to_select_one_player</span><span class="p">():</span>
    <span class="k">return</span> <span class="p">[</span>
        <span class="n">GameLoop</span><span class="o">.</span><span class="n">create_event_keydown</span><span class="p">(</span><span class="n">KEY_SPACE</span><span class="p">),</span>
        <span class="n">GameLoop</span><span class="o">.</span><span class="n">create_event_keydown</span><span class="p">(</span><span class="n">KEY_SPACE</span><span class="p">),</span>
    <span class="p">]</span>
</pre>
</div>
</div>
</div>
<p>We could use that test helper in all tests (with some modification) and now there is only one place in the tests that knows about what events that gets us from the start scene to the gameplay scene with one player.</p>
<h2 id="pass-players-to-game-scene">Pass players to game scene</h2>
<p>Our skeleton for the new feature is not quite complete. The gameplay scene does not know about players. Let’s fix that by passing the players from the start scene to the gameplay scene like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="gu">@@ -162,7 +162,10 @@ class GameScene:</span>
         self.active_scene.update(dt)
         if isinstance(self.active_scene, StartScene):
             if self.active_scene.get_players():
<span class="gd">-                self.active_scene = GameplayScene(screen_area=self.screen_area)</span>
<span class="gi">+                self.active_scene = GameplayScene(</span>
<span class="gi">+                    screen_area=self.screen_area,</span>
<span class="gi">+                    players=self.active_scene.get_players()</span>
<span class="gi">+                )</span>
</pre>
</div>
</div>
</div>
<p>To make this work we also add that argument to the constructor of the gameplay scene:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="gu">@@ -333,11 +336,13 @@ class GameplayScene(SpriteGroup):</span>
     []
     &quot;&quot;&quot;

<span class="gd">-    def __init__(self, screen_area, balloons=[], arrows=[]):</span>
<span class="gi">+    def __init__(self, screen_area, balloons=[], arrows=[], players=[&quot;default&quot;]):</span>
</pre>
</div>
</div>
</div>
<p>Now, I think our skeleton is complete. What do I mean by that? I mean that all the pieces are connected they way we think they should be. Now we can work individually on the start scene and the gameplay scene. The start scene needs to be able to select multiple players and should return those players in the list. The gameplay scene should take players into account and create one bow per player that it can control.</p>
<h2 id="make-input-handler-player-aware">Make input handler player aware</h2>
<p>The start scene uses the input handler’s <code>get_shoot</code> to detect shots:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">StartScene</span><span class="p">(</span><span class="n">SpriteGroup</span><span class="p">):</span>

    <span class="o">...</span>

    <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">):</span>
        <span class="n">SpriteGroup</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">input_handler</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">dt</span><span class="p">)</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">input_handler</span><span class="o">.</span><span class="n">get_shoot</span><span class="p">():</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">shots</span> <span class="o">+=</span> <span class="mi">1</span>
</pre>
</div>
</div>
</div>
<p>However, to select multiple players, the start scene must know <em>who</em> shot. Let’s modify the input handler to support that. We write this test:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">&gt;&gt;&gt; i = InputHandler()</span>

<span class="sd">&gt;&gt;&gt; i.update(0)</span>
<span class="sd">&gt;&gt;&gt; i.get_shots()</span>
<span class="sd">[]</span>

<span class="sd">&gt;&gt;&gt; i.event(GameLoop.create_event_keydown(KEY_SPACE))</span>
<span class="sd">&gt;&gt;&gt; i.event(GameLoop.create_event_joystick_down(XBOX_A, instance_id=7))</span>
<span class="sd">&gt;&gt;&gt; i.update(0)</span>
<span class="sd">&gt;&gt;&gt; i.get_shots()</span>
<span class="sd">[&#39;keyboard&#39;, &#39;joystick7&#39;]</span>

<span class="sd">&gt;&gt;&gt; i.update(0)</span>
<span class="sd">&gt;&gt;&gt; i.get_shots()</span>
<span class="sd">[]</span>
<span class="sd">&quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<p>We create a new <code>get_shots</code> method that returns a list of player/input identifiers. If the shot is triggered by the keyboard, the player identifier is <code>keyboard</code>. If the shot is triggered by a gamepad, the player identifier is <code>joystick</code> plus the unique id of that joystick. We implement it like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">InputHandler</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">shots_triggered</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="o">...</span>

    <span class="k">def</span> <span class="nf">event</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">event</span><span class="o">.</span><span class="n">is_keydown</span><span class="p">(</span><span class="n">KEY_SPACE</span><span class="p">):</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">shots_triggered</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s2">&quot;keyboard&quot;</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">event</span><span class="o">.</span><span class="n">is_joystick_down</span><span class="p">(</span><span class="n">XBOX_A</span><span class="p">):</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">shots_triggered</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">joystick_id</span><span class="p">(</span><span class="n">event</span><span class="p">))</span>
        <span class="o">...</span>

    <span class="k">def</span> <span class="nf">joystick_id</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>
        <span class="k">return</span> <span class="sa">f</span><span class="s2">&quot;joystick</span><span class="si">{</span><span class="n">event</span><span class="o">.</span><span class="n">get_instance_id</span><span class="p">()</span><span class="si">}</span><span class="s2">&quot;</span>

    <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">shots</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">shots_triggered</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">shots_triggered</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="o">...</span>

    <span class="k">def</span> <span class="nf">get_shots</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">shots</span>

    <span class="o">...</span>
</pre>
</div>
</div>
</div>
<h2 id="start-scene-returns-players">Start scene returns players</h2>
<p>Now, let’s see if we can make <code>StartScene.get_players</code> to return actual player identifiers instead of hard coded <code>['one']</code>. As usual, we start with a test:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">&gt;&gt;&gt; start = StartScene(screen_area=Rectangle.from_size(500, 500))</span>
<span class="sd">&gt;&gt;&gt; start.get_players() is None</span>
<span class="sd">True</span>
<span class="sd">&gt;&gt;&gt; start.event(GameLoop.create_event_joystick_down(XBOX_A, instance_id=7))</span>
<span class="sd">&gt;&gt;&gt; start.event(GameLoop.create_event_joystick_down(XBOX_A, instance_id=7))</span>
<span class="sd">&gt;&gt;&gt; start.update(0)</span>
<span class="sd">&gt;&gt;&gt; start.get_players()</span>
<span class="sd">[&#39;joystick7&#39;]</span>
<span class="sd">&quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<p>We make the test pass like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">StartScene</span><span class="p">(</span><span class="n">SpriteGroup</span><span class="p">):</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">screen_area</span><span class="p">):</span>
        <span class="o">...</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">pending_players</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">players</span> <span class="o">=</span> <span class="kc">None</span>

    <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">):</span>
        <span class="o">...</span>
        <span class="k">for</span> <span class="n">player</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">input_handler</span><span class="o">.</span><span class="n">get_shots</span><span class="p">():</span>
            <span class="k">if</span> <span class="n">player</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">pending_players</span><span class="p">:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">players</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">pending_players</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">pending_players</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">player</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">get_players</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">players</span>

    <span class="o">...</span>
</pre>
</div>
</div>
</div>
<h2 id="multiple-bows-in-game-scene">Multiple bows in game scene</h2>
<p>At this point, the start scene returns a correct list of players selected and the only piece missing is for the gameplay scene to create multiple bows and direct events to the correct bow.</p>
<p>Instead of having just a single bow, we create multiple bows like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="gd">-        self.bow = self.add(Bow())</span>
<span class="gi">+        self.bows = {}</span>
<span class="gi">+        bow_position = self.screen_area.bottomleft.move(dy=-120)</span>
<span class="gi">+        bow_increment = self.screen_area.width / (len(players)+1)</span>
<span class="gi">+        for player in players:</span>
<span class="gi">+            bow_position = bow_position.move(dx=bow_increment)</span>
<span class="gi">+            self.bows[player] = self.add(Bow(position=bow_position))</span>
</pre>
</div>
</div>
</div>
<p>Then we forward events to the correct bow like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="gd">-        if self.input_handler.get_shoot():</span>
<span class="gd">-            self.flying_arrows.add(self.bow.shoot())</span>
<span class="gd">-        self.bow.turn(self.input_handler.get_turn_angle())</span>
<span class="gi">+        for player in self.input_handler.get_shots():</span>
<span class="gi">+            self.flying_arrows.add(self.bow_for_player(player).shoot())</span>
<span class="gi">+        for player, turn_angle in self.input_handler.get_turn_angles().items():</span>
<span class="gi">+            self.bow_for_player(player).turn(turn_angle)</span>
</pre>
</div>
</div>
</div>
<p>Here we use <code>InputHandler.get_turn_angles</code> to get turn angles per player. It is implemented similarly to how we implemented <code>InputHandler.get_shots</code>.</p>
<p>To get the correct bow, we use this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">bow_for_player</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">player</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">input_id</span><span class="p">,</span> <span class="n">bow</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">bows</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
        <span class="k">if</span> <span class="n">input_id</span> <span class="o">==</span> <span class="n">player</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">bow</span>
    <span class="k">return</span> <span class="n">bow</span>
</pre>
</div>
</div>
</div>
<p>If no player is found, the last bow is returned. So if you attach another gamepad after the gameplay mode has entered, it will control the last bow. Not sure if that is right. We’ll have to ask our product owner.</p>
<p>We didn’t write any tests for this new behavior. We do have tests that check that a single player can shoot and turn. That gives us confidence that the new for loops work. There could be an error in <code>bow_for_player</code> so that an input event controls the wrong bow. The tests would not catch that. But I find that unlikely, and I’m not worried about it happening.</p>
<h2 id="end-result">End result</h2>
<p>If we start the game now, we are greeted, again, with a blank purple screen:</p>
<p>
<center>
<img src="empty-start.png" title="fig:" alt="Empty start scene." />
</center>
</p>
<p>If we shoot once with the keyboard, then twice with the gamepad, we are taken to this scene where the keyboard and the gamepad can control their own bow:</p>
<p>
<center>
<img src="multiplayer-first.png" title="fig:" alt="First version of multiplayer." />
</center>
</p>
<p>And we have the first version of a working multiplayer mode!</p>
<h2 id="polishing">Polishing</h2>
<p>An empty start scene does not feel polished. Let’s add some instructions to inform players how to get passed it. It mostly involves doing <code>loop.draw_text</code> in the draw method. Not very interesting. However, let’s also add some animated balloons in the background to make the scene a little more interesting. Thanks to the extraction of <code>Balloons</code> that we did in the <a href="/writing/agdpp-spawn-multiple-balloons/index.html">previous</a> episode, we can do this with the following lines:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">StartScene</span><span class="p">(</span><span class="n">SpriteGroup</span><span class="p">):</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">screen_area</span><span class="p">):</span>
        <span class="n">SpriteGroup</span><span class="o">.</span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
        <span class="n">positions</span> <span class="o">=</span> <span class="p">[</span>
            <span class="n">Point</span><span class="p">(</span>
                <span class="n">x</span><span class="o">=</span><span class="n">screen_area</span><span class="o">.</span><span class="n">get_random_x</span><span class="p">(),</span>
                <span class="n">y</span><span class="o">=</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="n">screen_area</span><span class="o">.</span><span class="n">topleft</span><span class="o">.</span><span class="n">y</span><span class="p">,</span> <span class="n">screen_area</span><span class="o">.</span><span class="n">bottomright</span><span class="o">.</span><span class="n">y</span><span class="p">)</span>
            <span class="p">)</span>
            <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">15</span><span class="p">)</span>
        <span class="p">]</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Balloons</span><span class="p">(</span>
            <span class="n">positions</span><span class="o">=</span><span class="n">positions</span><span class="p">,</span>
            <span class="n">number_of_balloons</span><span class="o">=</span><span class="nb">len</span><span class="p">(</span><span class="n">positions</span><span class="p">),</span>
            <span class="n">screen_area</span><span class="o">=</span><span class="n">screen_area</span>
        <span class="p">))</span>
        <span class="o">...</span>

    <span class="o">...</span>
</pre>
</div>
</div>
</div>
<p>I really should have created <code>screen_area.get_random_x()</code> or even <code>screen_area.get_random_position()</code>. But I got carried away and wanted a result quickly. We add a note about that and might address it in a future refactoring.</p>
<p>Anyway, here is the final result of the start scene:</p>
<p>
<center>
<img src="start-instructions.png" title="fig:" alt="Start scene with instructions." />
</center>
</p>
<p>Here we have selected two players: one with the keyboard and one with a gamepad. If any of them shoot again, we enter the gameplay mode, or we can continue to add players by shooting with a different gamepad.</p>
<p>As a final polish we will make different players have different colors. The result:</p>
<p>
<center>
<img src="multiplayer-colors.png" title="fig:" alt="Players with different colors." />
</center>
</p>
<h2 id="a-reflection-on-stories">A reflection on stories</h2>
<p>How many stories have we worked on in this episode?</p>
<p>Well, we have added support for multiplayer, isn’t that just one story?</p>
<p>But we also did some polishing. Polishing could easily be its own story. Polish adds value to the players of the game.</p>
<p>So the stories might be</p>
<ul>
<li>Add multiplayer support</li>
<li>Nicer looking, more informative start scene</li>
<li>Different player colors</li>
</ul>
<p>The first one is a lot bigger than the others. Is it possible to split it so that all stories that we work on have roughly the same size? I’m not sure. Let’s think about it.</p>
<p>Let’s think about the state that the game was in when we had a start scene but the players could not be selected. We had visible change in behavior. There was now a start scene that wasn’t there before. But had we added value? Players expecting multiplayer would be disappointed. Other players would have to shoot a couple of times extra before they can play the game. That doesn’t seem like value. However, players could see this new start scene and ask questions like “what is this?” and “what am I supposed to do here?” We can tell them our idea and they can give us feedback if we are on the right track. Perhaps they want to start a multiplayer session in a different way? Perhaps they think a descriptive text on the start scene is more important? That feedback has value.</p>
<p>So we could at least split the first story into two:</p>
<ul>
<li>Player selection start scene</li>
<li>One bow per player</li>
</ul>
<p>As long as we can show visible progress, I think the story has value.</p>
<h2 id="summary">Summary</h2>
<p>With the new start scene and multiplayer mode, the balloon shooter feels even more like a real game. I find myself wanting to go play the game and enjoy what we have created. That is a really nice feeling.</p>
<p>I am a bit surprised what you can achieve with the only graphics primitives being circles and text. I mean, the look of the game is pretty bad, the colors are horrible, and yet the idea comes across nicely and game mechanics can be felt anyway. I wonder how much of an improvement it would be to improve graphics. Probably a lot. But I am still surprised how far circles and text have taken us.</p>
<p>See you in the next episode!</p>
]]></description>
    <pubDate>Thu, 29 Jun 2023 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/agdpp-multiplayer/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>High-level or micro-tests? A discussion with Ron.</title>
    <link>http://rickardlindberg.me/writing/high-level-low-level-ron-reply/</link>
    <description><![CDATA[<h1>High-level or micro-tests? A discussion with Ron.</h1>

<p><em>Published on 18 June 2023.</em></p>

<p>Ron and I have been discussing on Mastodon high-level vs micro-tests. Ron has summarized the discussion <a href="https://ronjeffries.com/articles/-y023/python/-m130/139/">here</a> and also expanded his thoughts on it. In this blog post, I want to expand my thoughts as well.</p>
<h1 id="how-it-started">How it started</h1>
<p>In <a href="https://ronjeffries.com/articles/-y023/python/-m130/136/">Python 136</a>, Ron discusses a possible drawback with the decentralized design:</p>
<blockquote>
<p>Now, many of my objects interact with missiles, the ship and saucer and asteroids at least, perhaps others. And so when I implemented the SaucerMissile, saucer missiles stopped interacting via <code>interact_with_missile</code> and started calling <code>interact_with_saucermissile</code>.</p>
<p>And that method is explicitly ignored unless the object implements it, i.e. unless the programmer, i.e. yours truly, remembers to implement the new method where it’s needed.</p>
<p>And I didn’t remember them all. I spent most of my article yesterday discovering another case that I had forgotten, and I was relying too much on my tests. They did help me at first but after a while, things were broken but no tests existed to show the problem.</p>
</blockquote>
<p>I interpret that (hopefully correctly) to mean something like this:</p>
<ol type="1">
<li><p>There are tests that call <code>asteroid.interact_with_missile</code> to verify behavior for asteroids colliding with missiles.</p></li>
<li><p>When the new missile subclass was added <code>interact_with_missile</code> was actually never called for real, but <code>interact_with_saucermissile</code> was called instead.</p></li>
<li><p>The tests that called <code>asteroids.interact_with_missile</code> continued to pass, but they tested something that never happened in reality.</p></li>
<li><p>All tests passed. The game was broken.</p></li>
</ol>
<p>To this, I <a href="https://hachyderm.io/@rickardlindberg/110549123416204580">replied</a>:</p>
<blockquote>
<p>What about writing domain/“game rule” tests at a higher level? That is, you put a bunch of flyers in the collection, call update (or whatever it was called), have the collection do all the interact_with_, and assert something on the collection.</p>
<p>Then you could more easily trust your tests and you are free to implement it however you want (implementation inheritance, events, etc).</p>
<p>I think such tests might even read quite well as descriptions of the game rules.</p>
</blockquote>
<p>Ron <a href="https://mastodon.social/@RonJeffries/110549805294230736">replied</a>:</p>
<blockquote>
<p>a good idea … with a centralized test there’s at least a place to look. Unfortunately such tests have to involve a lot of time stuff due to all the timers.</p>
</blockquote>
<p>And so the discussion about high-level tests vs micro-tests began.</p>
<h1 id="rons-arguments-for-micro-tests">Ron’s arguments for micro-tests</h1>
<p>Ron seems in favour of writing more micro-tests and fewer high-level tests. He argues that</p>
<blockquote>
<p>Certainly it must be true that if every object does the right thing at the right time, the program must work. This is the root reason why micro-testing works.</p>
</blockquote>
<p>I agree with this, and at the same time, I sometimes find it difficult to convince myself that every object does the right thing at the right time. Let me try to explain why.</p>
<h1 id="mocking">Mocking</h1>
<p>Mocking and micro-testing have something in common. (At least if you squint.) And that is that they are solitary-ish tests that focus on a very specific, isolated part of the code.</p>
<p>I will illustrate what I think is problematic with that with a calculator example that show the total on a display:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">Calculator</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">display</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">display</span> <span class="o">=</span> <span class="n">display</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">amount</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">total</span> <span class="o">+=</span> <span class="n">amount</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">display</span><span class="o">.</span><span class="n">show</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Total = </span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">total</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Display</span><span class="p">:</span>

    <span class="k">def</span> <span class="nf">show</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">text</span><span class="p">):</span>
        <span class="c1"># gui stuff to show something on the screen</span>
</pre>
</div>
</div>
</div>
<p>To test this, we might write one solitary test per class:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">test_calculator</span><span class="p">():</span>
    <span class="n">mock_display</span> <span class="o">=</span> <span class="n">Mock</span><span class="p">(</span><span class="n">Display</span><span class="p">)</span>
    <span class="n">calculator</span> <span class="o">=</span> <span class="n">Calculator</span><span class="p">(</span><span class="n">mock_display</span><span class="p">)</span>
    <span class="n">calculator</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
    <span class="n">calculator</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
    <span class="k">assert</span> <span class="n">mock_display</span><span class="o">.</span><span class="n">show</span><span class="o">.</span><span class="n">calls</span> <span class="o">=</span> <span class="p">[</span>
        <span class="s2">&quot;Total = 3&quot;</span><span class="p">,</span>
        <span class="s2">&quot;Total = 5&quot;</span><span class="p">,</span>
    <span class="p">]</span>

<span class="k">def</span> <span class="nf">test_display</span><span class="p">():</span>
    <span class="n">display</span> <span class="o">=</span> <span class="n">Display</span><span class="p">()</span>
    <span class="n">display</span><span class="o">.</span><span class="n">show</span><span class="p">(</span><span class="s2">&quot;hello&quot;</span><span class="p">)</span>
    <span class="c1"># assert that gui shows with text &#39;hello&#39;</span>
</pre>
</div>
</div>
</div>
<p>These two tests prove that the whole works. But I find them a bit fragile. Especially in a dynamically typed language like Python.</p>
<p>What if we changed the signature of <code>show</code> to something like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">show</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span> <span class="n">color</span><span class="p">):</span>
    <span class="o">...</span>
</pre>
</div>
</div>
</div>
<p><code>test_display</code> would break, but what about <code>test_calculator</code>? At least in Python, I don’t think the type checking is able to catch that the signature has changed. So <code>test_calculator</code> will continue to pass. But the application will not work.</p>
<p>The same thing is true for micro-testing. Your micro-tests can continue to pass, but the methods they are calling are actually not called for real.</p>
<p>This aspect of mocking and micro-testing makes me less confident that my code actually works.</p>
<h1 id="move-example">Move example</h1>
<p>Ron continues to discuss asteroid movement:</p>
<blockquote>
<p>… but I would argue that we don’t need a larger scale test to verify how they move.</p>
</blockquote>
<p>I don’t think so either. Movement is completely contained within an asteroid. It does not depend on interactions with other flyers. We could test it by instantiating an asteroid, calling its update method, and assert that it moved.</p>
<h1 id="missile-vs-asteroid-example">Missile vs asteroid example</h1>
<p>Ron continues to discuss another example where asteroids collide with missiles. He wish he had a test for scoring in that situation and writes this test:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">test_missile_vs_asteroid_scoring</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="n">fleets</span> <span class="o">=</span> <span class="n">Fleets</span><span class="p">()</span>
    <span class="n">fi</span> <span class="o">=</span> <span class="n">FI</span><span class="p">(</span><span class="n">fleets</span><span class="p">)</span>
    <span class="n">pos</span> <span class="o">=</span> <span class="n">Vector2</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
    <span class="n">vel</span> <span class="o">=</span> <span class="n">Vector2</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
    <span class="n">asteroid</span> <span class="o">=</span> <span class="n">Asteroid</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">pos</span><span class="p">)</span>
    <span class="n">missile</span> <span class="o">=</span> <span class="n">Missile</span><span class="o">.</span><span class="n">from_ship</span><span class="p">(</span><span class="n">pos</span><span class="p">,</span> <span class="n">vel</span><span class="p">)</span>
    <span class="n">asteroid</span><span class="o">.</span><span class="n">interact_with_missile</span><span class="p">(</span><span class="n">missile</span><span class="p">,</span> <span class="n">fleets</span><span class="p">)</span>
    <span class="n">scores</span> <span class="o">=</span> <span class="n">fi</span><span class="o">.</span><span class="n">scores</span>
    <span class="k">assert</span> <span class="n">scores</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">score</span> <span class="o">==</span> <span class="n">u</span><span class="o">.</span><span class="n">MISSILE_SCORE_LIST</span><span class="p">[</span><span class="n">asteroid</span><span class="o">.</span><span class="n">size</span><span class="p">]</span>
    <span class="n">asteroid</span><span class="o">.</span><span class="n">size</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="n">asteroid</span><span class="o">.</span><span class="n">interact_with_missile</span><span class="p">(</span><span class="n">missile</span><span class="p">,</span> <span class="n">fleets</span><span class="p">)</span>
    <span class="n">scores</span> <span class="o">=</span> <span class="n">fi</span><span class="o">.</span><span class="n">scores</span>
    <span class="k">assert</span> <span class="n">scores</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">score</span> <span class="o">==</span> <span class="n">u</span><span class="o">.</span><span class="n">MISSILE_SCORE_LIST</span><span class="p">[</span><span class="n">asteroid</span><span class="o">.</span><span class="n">size</span><span class="p">]</span>
    <span class="n">asteroid</span><span class="o">.</span><span class="n">size</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">asteroid</span><span class="o">.</span><span class="n">interact_with_missile</span><span class="p">(</span><span class="n">missile</span><span class="p">,</span> <span class="n">fleets</span><span class="p">)</span>
    <span class="n">scores</span> <span class="o">=</span> <span class="n">fi</span><span class="o">.</span><span class="n">scores</span>
    <span class="k">assert</span> <span class="n">scores</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">.</span><span class="n">score</span> <span class="o">==</span> <span class="n">u</span><span class="o">.</span><span class="n">MISSILE_SCORE_LIST</span><span class="p">[</span><span class="n">asteroid</span><span class="o">.</span><span class="n">size</span><span class="p">]</span>
</pre>
</div>
</div>
</div>
<p>And notes that</p>
<blockquote>
<p>Now, since Rickard specifically mentions using interact_with in the tests he’s talking about, perhaps this is an example of just what he means. If that’s the case, we probably don’t have any real disagreement at all. That would be nice.</p>
</blockquote>
<p>I’m not sure I explained myself clearly enough on Mastodon. I will do another attempt here.</p>
<p>I would not call <code>interact_with_*</code> in tests. I would write the test above like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">test_missile_vs_asteroid_scoring_rickard</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">asteroid_size</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">]:</span>
        <span class="n">position</span> <span class="o">=</span> <span class="n">Vector2</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
        <span class="n">fleets</span> <span class="o">=</span> <span class="n">Fleets</span><span class="p">()</span>
        <span class="n">fleets</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">Asteroid</span><span class="p">(</span>
            <span class="n">size</span><span class="o">=</span><span class="n">asteroid_size</span><span class="p">,</span>
            <span class="n">position</span><span class="o">=</span><span class="n">position</span>
        <span class="p">))</span>
        <span class="n">fleets</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">Missile</span><span class="o">.</span><span class="n">from_ship</span><span class="p">(</span>
            <span class="n">position</span><span class="o">=</span><span class="n">position</span><span class="p">,</span>
            <span class="n">velocity</span><span class="o">=</span><span class="n">Vector2</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
        <span class="p">))</span>
        <span class="n">fleets</span><span class="o">.</span><span class="n">perform_interactions</span><span class="p">()</span>
        <span class="p">(</span><span class="n">score</span><span class="p">,)</span> <span class="o">=</span> <span class="n">FI</span><span class="p">(</span><span class="n">fleets</span><span class="p">)</span><span class="o">.</span><span class="n">scores</span>
        <span class="k">assert</span> <span class="n">score</span><span class="o">.</span><span class="n">score</span> <span class="o">==</span> <span class="n">u</span><span class="o">.</span><span class="n">MISSILE_SCORE_LIST</span><span class="p">[</span><span class="n">asteroid_size</span><span class="p">]</span>
</pre>
</div>
</div>
</div>
<p>To be able to test scoring, we have to include both an asteroid and a missile in the test. To also make sure that they interact correctly, I would write the test by putting them in <code>Fleets</code> and have fleets <code>perform_interactions</code>.</p>
<blockquote>
<p>At this moment, I would ask Rickard whether he agrees that we can be sure that ship missile vs asteroid collisions score correctly. And if he said we cannot be sure, I’d try to devise another low-level test to help him be sure.</p>
</blockquote>
<p>With my version of the test above, I would be certain that scoring works. With Ron’s version, I would worry about the test calling the wrong <code>interact_with_*</code>. I would not worry that much, just a little. But I don’t think my version of the test has any drawbacks compared to Ron’s version. And it has the upside of verifying that interactions work properly.</p>
<p>I believe that the weakness of this implementation of a decentralized design is that it is difficult to know if you implemented the correct <code>interact_with_*</code> methods.</p>
<p>In Ron’s test, <code>interact_with_missile</code> is called explicitly. So it will not catch errors if the method should have been <code>interact_with_saucermissile</code> for example.</p>
<p>My version of the test is at a higher level. It puts an asteroid and a missile in the fleets and have them interact and assert that scoring happens correctly. Had we implemented the wrong <code>interact_with_*</code>, this test would have failed.</p>
<p>If I were to take a more micro-test approach to this, I would write multiple tests. First this one:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">test_missile_vs_asteroid_scoring_rickard_micro_high</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="n">position</span> <span class="o">=</span> <span class="n">Vector2</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
    <span class="n">fleets</span> <span class="o">=</span> <span class="n">Fleets</span><span class="p">()</span>
    <span class="n">fleets</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">Asteroid</span><span class="p">(</span>
        <span class="n">size</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span>
        <span class="n">position</span><span class="o">=</span><span class="n">position</span>
    <span class="p">))</span>
    <span class="n">fleets</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">Missile</span><span class="o">.</span><span class="n">from_ship</span><span class="p">(</span>
        <span class="n">position</span><span class="o">=</span><span class="n">position</span><span class="p">,</span>
        <span class="n">velocity</span><span class="o">=</span><span class="n">Vector2</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">))</span>
    <span class="n">fleets</span><span class="o">.</span><span class="n">perform_interactions</span><span class="p">()</span>
    <span class="p">(</span><span class="n">score</span><span class="p">,)</span> <span class="o">=</span> <span class="n">FI</span><span class="p">(</span><span class="n">fleets</span><span class="p">)</span><span class="o">.</span><span class="n">scores</span>
    <span class="k">assert</span> <span class="n">score</span><span class="o">.</span><span class="n">score</span> <span class="o">==</span> <span class="n">u</span><span class="o">.</span><span class="n">MISSILE_SCORE_LIST</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
</pre>
</div>
</div>
</div>
<p>This test ensures that the interactions work with regards to scoring. But it is only testing one score.</p>
<p>With that test in place, I feel pretty certain that <code>score_for_hitting</code> is called. I can read the code and see that the only way the score would be correct in the first test is if <code>score_for_hitting</code> is called.</p>
<p>To test that we get correct scores back, I therefore don’t think we need to test that via interactions, we can test it with a more lower-level, micro-test:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">test_missile_vs_asteroid_scoring_rickard_micro_low</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">asteroid_size</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">]:</span>
        <span class="n">position</span> <span class="o">=</span> <span class="n">Vector2</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
        <span class="k">assert</span> <span class="n">Asteroid</span><span class="p">(</span>
            <span class="n">size</span><span class="o">=</span><span class="n">asteroid_size</span><span class="p">,</span>
            <span class="n">position</span><span class="o">=</span><span class="n">position</span>
        <span class="p">)</span><span class="o">.</span><span class="n">score_for_hitting</span><span class="p">(</span>
            <span class="n">Missile</span><span class="o">.</span><span class="n">from_ship</span><span class="p">(</span>
                <span class="n">position</span><span class="o">=</span><span class="n">position</span><span class="p">,</span>
                <span class="n">velocity</span><span class="o">=</span><span class="n">Vector2</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
            <span class="p">)</span>
        <span class="p">)</span> <span class="o">==</span> <span class="n">u</span><span class="o">.</span><span class="n">MISSILE_SCORE_LIST</span><span class="p">[</span><span class="n">asteroid_size</span><span class="p">]</span>
</pre>
</div>
</div>
</div>
<p>This test has lots of irrelevant details though. The positions and velocity don’t matter, so it’s annoying to have to specify them. It makes the test harder to read. I would think about how I could refactor the code so that the test could read something like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">test_missile_vs_asteroid_scoring_rickard_micro_low</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">asteroid_size</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">]:</span>
        <span class="k">assert</span> <span class="n">Asteroid</span><span class="p">(</span><span class="n">size</span><span class="o">=</span><span class="n">asteroid_size</span><span class="p">)</span><span class="o">.</span><span class="n">score_for_hitting</span><span class="p">(</span><span class="n">Missile</span><span class="o">.</span><span class="n">from_ship</span><span class="p">())</span> \
            <span class="o">==</span> <span class="n">u</span><span class="o">.</span><span class="n">MISSILE_SCORE_LIST</span><span class="p">[</span><span class="n">asteroid_size</span><span class="p">]</span>
</pre>
</div>
</div>
</div>
<p>This is overlapping, sociable testing. An approach I’ve started appreciating more and more over the last year or so.</p>
<p>The score for size 2 is tested in both tests. This might feel wrong to some people. It certainly did to me in the beginning. But what it gives me (and perhaps you as well) is greater confidence that stuff actually works. And that trade-off is something that I’ve started to appreciate.</p>
<h1 id="did-this-bring-clarity">Did this bring clarity?</h1>
<p>Ron writes:</p>
<blockquote>
<p>I should say right off the bat that you’ve seen everything that Rickard and I have shared on the subject, so there’s no reason to be certain that we’re even talking about the same kind of tests. I’m thinking that he means a big story test with all the objects in it and a long series of time ticks and checks on the game state throughout. He might be thinking of tests like the one I just wrote, or even simpler ones, with just a few objects and a few interactions, but more than one test. We may not disagree at all on that.</p>
</blockquote>
<p>I was thinking of a test like <code>test_missile_vs_asteroid_scoring_rickard</code>. You only put the objects that are needed for a particular interaction into fleets and have them interact.</p>
<p>I hope I managed to explain my thinking a bit more in this blog post. If it sounds like I say “you should do this because it is better” I apologize. My intention was to explain my current thinking and what I would do if I did it now. And as Ron pointed out, if we actually did this together, the end result would probably be something different.</p>
<h1 id="so-high-level-or-micro">So high-level or micro?</h1>
<blockquote>
<p>And if we got the code expressing each micro rule very clearly … would we still wonder about the bigger picture?</p>
</blockquote>
<p>I think the game rules will be quite clear with micro-tests only.</p>
<p>My concern with this implementation is mainly that it is difficult to write those correctly. (You have to implement and call the correct <code>interact_with_*</code>.) I think that my suggestion to write a higher-lever tests for interactions partly solves that problem.</p>
<p>If we can come up with a better scheme for this mechanism in Python, I might be less inclined to write high-level test.</p>
<p>But currently, I think I still like higher-level tests. At least some. I like overlapping, sociable tests. That means tests at many different levels. And if testing at a higher level is not inconvenient (it quickly becomes), I <em>think</em> I prefer that. First of all because it gives me greater confidence that the code works, and second because it allows refactoring without changing tests.</p>
]]></description>
    <pubDate>Sun, 18 Jun 2023 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/high-level-low-level-ron-reply/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>Spawn multiple balloons</title>
    <link>http://rickardlindberg.me/writing/agdpp-spawn-multiple-balloons/</link>
    <description><![CDATA[<h1>Spawn multiple balloons</h1>

<p><em>Published on 17 June 2023 in <a href="/projects/agdpp/index.html">Agile Game Development with Python and Pygame</a>.</em></p>

<p>We <a href="/writing/agdpp-game-over/index.html">previously</a> had a story about balloons moving downwards. We scratched that because other stories were more important for the first version of the balloon shooter. With those stories done, I think a more realistic balloon spawning and movement pattern is the most valuable thing we can work on.</p>
<h2 id="video-version">Video version</h2>
<p>The video version of this episode:</p>
<center>
<iframe width="560" height="315" src="https://www.youtube.com/embed/unYD_bPyadc" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write;
encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen>
</iframe>
</center>
<h2 id="code-review">Code review</h2>
<p>Let’s review our code and look at how balloons are managed.</p>
<p>Our game scene has a sprite group for balloons which by default contains only one balloon:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">GameScene</span><span class="p">(</span><span class="n">SpriteGroup</span><span class="p">):</span>

    <span class="o">...</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">balloons</span><span class="o">=</span><span class="p">[(</span><span class="mi">50</span><span class="p">,</span> <span class="mi">50</span><span class="p">)],</span> <span class="o">...</span><span class="p">):</span>
        <span class="o">...</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">balloons</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">SpriteGroup</span><span class="p">([</span>
            <span class="n">Balloon</span><span class="p">(</span><span class="n">Point</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="n">y</span><span class="p">))</span> <span class="k">for</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="ow">in</span> <span class="n">balloons</span>
        <span class="p">]))</span>
</pre>
</div>
</div>
</div>
<p>This sprite group is modified in the <code>update</code> method if an arrows hits a balloon:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">GameScene</span><span class="p">(</span><span class="n">SpriteGroup</span><span class="p">):</span>

    <span class="o">...</span>

    <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">):</span>
        <span class="o">...</span>
        <span class="k">for</span> <span class="n">arrow</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">flying_arrows</span><span class="o">.</span><span class="n">get_sprites</span><span class="p">():</span>
            <span class="o">...</span>
            <span class="k">for</span> <span class="n">balloon</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">balloons</span><span class="o">.</span><span class="n">get_sprites</span><span class="p">():</span>
                <span class="k">if</span> <span class="n">arrow</span><span class="o">.</span><span class="n">hits_baloon</span><span class="p">(</span><span class="n">balloon</span><span class="p">):</span>
                    <span class="bp">self</span><span class="o">.</span><span class="n">balloons</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">balloon</span><span class="p">)</span>
                    <span class="bp">self</span><span class="o">.</span><span class="n">balloons</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Balloon</span><span class="p">(</span><span class="n">position</span><span class="o">=</span><span class="n">Point</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">50</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mi">50</span><span class="p">)))</span>
                    <span class="o">...</span>
</pre>
</div>
</div>
</div>
<p>So the hit balloon is removed, and a new one is added.</p>
<p>How do balloons move?</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">Balloon</span><span class="p">:</span>

    <span class="o">...</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">position</span><span class="p">,</span> <span class="n">radius</span><span class="o">=</span><span class="mi">40</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">position</span> <span class="o">=</span> <span class="n">position</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">radius</span> <span class="o">=</span> <span class="n">radius</span>

    <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">):</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">position</span><span class="o">.</span><span class="n">x</span> <span class="o">&gt;</span> <span class="mi">1200</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">position</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">position</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">50</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">position</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">position</span><span class="o">.</span><span class="n">move</span><span class="p">(</span><span class="n">dx</span><span class="o">=</span><span class="n">dt</span><span class="o">*</span><span class="mf">0.3</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>They move from left to right and wrap around at x=1200.</p>
<h2 id="strategy">Strategy</h2>
<p>To be able to write more isolated tests for balloon behavior, I want to start with a few refactorings. I want to extract a <code>Balloons</code> class which contains most logic related to balloons. Then I want to write tests for new behavior. This is also known as make the change easy, then make the easy change.</p>
<p>We begin by creating the class and using it like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="gd">-        self.balloons = self.add(SpriteGroup([</span>
<span class="gd">-            Balloon(Point(x=x, y=y)) for (x, y) in balloons</span>
<span class="gd">-        ]))</span>
<span class="gi">+        self.balloons = self.add(Balloons(balloons))</span>
</pre>
</div>
</div>
</div>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">Balloons</span><span class="p">(</span><span class="n">SpriteGroup</span><span class="p">):</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">positions</span><span class="p">):</span>
        <span class="n">SpriteGroup</span><span class="o">.</span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="p">[</span>
            <span class="n">Balloon</span><span class="p">(</span><span class="n">Point</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="n">y</span><span class="p">))</span> <span class="k">for</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="ow">in</span> <span class="n">positions</span>
        <span class="p">])</span>
</pre>
</div>
</div>
</div>
<p>We continue to move some behavior into this new class:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">Balloons</span><span class="p">(</span><span class="n">SpriteGroup</span><span class="p">):</span>

    <span class="o">...</span>

    <span class="k">def</span> <span class="nf">get_balloon_hit_by_arrow</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">arrow</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">balloon</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_sprites</span><span class="p">():</span>
            <span class="k">if</span> <span class="n">arrow</span><span class="o">.</span><span class="n">hits_baloon</span><span class="p">(</span><span class="n">balloon</span><span class="p">):</span>
                <span class="k">return</span> <span class="n">balloon</span>

    <span class="k">def</span> <span class="nf">spawn_new</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Balloon</span><span class="p">(</span><span class="n">position</span><span class="o">=</span><span class="n">Point</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">50</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mi">50</span><span class="p">)))</span>
</pre>
</div>
</div>
</div>
<p>With that in place, we can simplify the update code like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="gd">-            for balloon in self.balloons.get_sprites():</span>
<span class="gd">-                if arrow.hits_baloon(balloon):</span>
<span class="gd">-                    self.balloons.remove(balloon)</span>
<span class="gd">-                    self.balloons.add(Balloon(position=Point(x=50, y=50)))</span>
<span class="gd">-                    self.score.add(1)</span>
<span class="gi">+            hit_balloon = self.balloons.get_balloon_hit_by_arrow(arrow)</span>
<span class="gi">+            if hit_balloon:</span>
<span class="gi">+                self.balloons.remove(hit_balloon)</span>
<span class="gi">+                self.balloons.spawn_new()</span>
<span class="gi">+                self.score.add(1)</span>
</pre>
</div>
</div>
</div>
<p>There is probably some more functionality that we can move into the new balloons class, but let’s stop here for now and focus on the new behavior.</p>
<p>(If you want to see this refactoring happening in smaller steps and in real time, check out the video version.)</p>
<h2 id="stories">Stories</h2>
<p>Here is some new behavior that we would like to have:</p>
<ul>
<li>balloons move downwards</li>
<li>balloons appear at different x positions</li>
<li>multiple balloons are in the air at the same time</li>
</ul>
<p>Let’s start with the first one and write a test for the new movement pattern:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">Balloons</span><span class="p">(</span><span class="n">SpriteGroup</span><span class="p">):</span>

    <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">    &gt;&gt;&gt; balloons = Balloons([(50, 50)])</span>
<span class="sd">    &gt;&gt;&gt; balloons.get_sprites()[0].get_position()</span>
<span class="sd">    (50, 50)</span>
<span class="sd">    &gt;&gt;&gt; balloons.update(5)</span>
<span class="sd">    &gt;&gt;&gt; x, y = balloons.get_sprites()[0].get_position()</span>
<span class="sd">    &gt;&gt;&gt; x</span>
<span class="sd">    50</span>
<span class="sd">    &gt;&gt;&gt; y &gt; 50</span>
<span class="sd">    True</span>
<span class="sd">    &quot;&quot;&quot;</span>

    <span class="o">...</span>
</pre>
</div>
</div>
</div>
<p>First we make sure that the first balloon in the sprite group is at the initial position that we gave it. Then we assert that it has moved downward after an update.</p>
<p>To make this test pass, we make this change:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span> class Balloon:

     ...

     def update(self, dt):
<span class="gd">-       if self.position.x &gt; 1200:</span>
<span class="gd">-           self.position = self.position.set(x=50)</span>
<span class="gd">-       else:</span>
<span class="gd">-           self.position = self.position.move(dx=dt*0.3)</span>
<span class="gi">+       self.position = self.position.move(dy=dt*self.speed)</span>
</pre>
</div>
</div>
</div>
<p>We only needed to modify the <code>Balloon</code> class. Does that mean that we should put the test in this class instead? I don’t know. For now, I think it’s nice if we can keep all balloon related tests in the same place.</p>
<p>If we run the game now, a single balloon will move downwards and then disappear at the bottom of the screen. That’s no fun. No more balloon to shoot down. Let’s fix that.</p>
<p>Here is a test that checks that there are always 3 balloons in the air:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">&gt;&gt;&gt; balloons = Balloons([(50, 50)], space)</span>
<span class="sd">&gt;&gt;&gt; len(balloons.get_sprites())</span>
<span class="sd">1</span>
<span class="sd">&gt;&gt;&gt; balloons.update(5)</span>
<span class="sd">&gt;&gt;&gt; len(balloons.get_sprites())</span>
<span class="sd">3</span>
<span class="sd">&quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<p>We make this pass by adding spawn logic in the update method:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">Balloons</span><span class="p">(</span><span class="n">SpriteGroup</span><span class="p">):</span>

    <span class="o">...</span>

    <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">):</span>
        <span class="n">SpriteGroup</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">)</span>
        <span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">get_sprites</span><span class="p">())</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">spawn_new</span><span class="p">()</span>
</pre>
</div>
</div>
</div>
<p>As long as we shoot down balloons, new ones will be spawned. But if we miss three balloons, they will continue to move downwards outside the screen, and no new balloons will be spawned. Let’s work on removing balloons outside the screen.</p>
<p>Here is a test describing this behavior:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">&gt;&gt;&gt; space = OutsideScreenSpace(500, 500)</span>
<span class="sd">&gt;&gt;&gt; balloons = Balloons([(1000, 1000)], space)</span>
<span class="sd">&gt;&gt;&gt; (balloon,) = balloons.get_sprites()</span>
<span class="sd">&gt;&gt;&gt; balloons.update(5)</span>
<span class="sd">&gt;&gt;&gt; balloon in balloons.get_sprites()</span>
<span class="sd">False</span>
<span class="sd">&quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<p>The idea is that we place a balloon outside the screen. Then we call update and make sure that it is no longer in the sprite group.</p>
<p>We have used the <code>OutsideScreenSpace</code> before to remove arrows that are outside the screen. When we add it here to <code>Balloons</code> we have to update all instantiations of it to include it. Once that is done, we make the test pass like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span> class Balloons(SpriteGroup):

     ...

     def update(self, dt):
         SpriteGroup.update(self, dt)
<span class="gi">+        for balloon in self.get_sprites():</span>
<span class="gi">+            if self.space.hits(Point(*balloon.get_position()), 10):</span>
<span class="gi">+                self.remove(balloon)</span>
         while len(self.get_sprites()) &lt; 3:
             self.spawn_new()
</pre>
</div>
</div>
</div>
<p>The game now plays without problems, however, it’s a little boring that balloons are always spawned at the same position.</p>
<p>We modify the spawning code like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span> class Balloons(SpriteGroup):

     ...

     def spawn_new(self):
<span class="gd">-        self.add(Balloon(position=Point(x=50, y=50)))</span>
<span class="gi">+        self.add(Balloon(position=Point(x=self.space.get_random_x(50), y=50)))</span>
</pre>
</div>
</div>
</div>
<p>And add the corresponding method in <code>OutsideScreenSpace</code>:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">OutsideScreenSpace</span><span class="p">:</span>

    <span class="o">...</span>

    <span class="k">def</span> <span class="nf">get_random_x</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">margin</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="n">margin</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">width</span><span class="o">-</span><span class="n">margin</span><span class="o">*</span><span class="mi">2</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>We don’t write any tests for this. Why? I guess because I feel confident that this will work. And maybe because testing random is not straight forward. Perhaps we should add a test for <code>get_random_x</code> that checks that the x we get back is within the width minus margin. We make a note of that.</p>
<p>Here is what the game looks like now:</p>
<p>
<center>
<img src="multiple-balloons.png" title="fig:" alt="Multiple balloons." />
</center>
</p>
<p>We have accomplished what we set out to do. I think the game is a little more fun to play now. Success!</p>
<h2 id="summary">Summary</h2>
<p>We began by doing some refactoring to make the new behavior easy to add. It was easy to add and it went smoothly. However, after adding new functionality and working with an area of the code, we have probably noticed things that can improve. We might even have ignored it to focus on adding the new behavior.</p>
<p>What I like to do in those situations is to take a break and come back and review the code a little later.</p>
<p>This time I came up with many small changes to improve the clarity of the code. Here are some examples from that session:</p>
<ul>
<li><a href="https://github.com/rickardlindberg/agdpp/commit/782cda7032896b15d89058b0fe3bc4ccbb54da8c">Replace (x, y) with position in Arrow and Balloon.</a></li>
<li><a href="https://github.com/rickardlindberg/agdpp/commit/7d6c884d727bef96b1efcc524e4c8956cfd41c72">Move balloon space hit check to balloon where radius can be used for better hit test.</a></li>
<li><a href="https://github.com/rickardlindberg/agdpp/commit/fe4b477a7ad4c89a56af58dceac84cfc100b2f8f">Replace OutsideScreenSpace with a more generic Rectangle.</a></li>
<li><a href="https://github.com/rickardlindberg/agdpp/commit/c4f8ff4924f1ee4a83ece0d0360ed44e512af194">Make spawning unaware of where its region is (no hard coded y=50).</a></li>
<li><a href="https://github.com/rickardlindberg/agdpp/commit/7faddca9ad82c1bde8d6ea0d00bbbc8cfb5d6fbf">No need to spawn balloon when shot down since it happens anyway.</a></li>
<li><a href="https://github.com/rickardlindberg/agdpp/commit/19e51efe110e81e398a5f9a7401608f870afb4ff">Balloons positions are points instead of tuples.</a></li>
<li><a href="https://github.com/rickardlindberg/agdpp/commit/18a9a5af49966f9b2c7e8841495687181e7fedfb">Clean up shooting arrow tests.</a></li>
</ul>
<p>Making these tiny improvements feels so good. They are all quite small changes, but they make a huge impact. Ok, maybe not huge, but the improvements compound. The point is that if you keep making tiny improvements, the code base gets easier and easier to work with.</p>
<p>See you in the next episode!</p>
]]></description>
    <pubDate>Sat, 17 Jun 2023 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/agdpp-spawn-multiple-balloons/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>Does TDD work when building a game?</title>
    <link>http://rickardlindberg.me/writing/agdpp-tdd-and-games/</link>
    <description><![CDATA[<h1>Does TDD work when building a game?</h1>

<p><em>Published on 12 June 2023 in <a href="/projects/agdpp/index.html">Agile Game Development with Python and Pygame</a>.</em></p>

<p>When I <a href="/writing/agdpp-introduction/index.html">started</a> this series, one of the areas that I wanted to explore was how well TDD works when building a game.</p>
<p>The short answer is that I find that it works equally well as on any other project I’ve done.</p>
<p>The longer answer is that TDD might not be enough. There are some things which are hard to test in a game. That’s what I want to talk about in this blog post and also how we can overcome the limits of TDD in those situations.</p>
<h2 id="example-joystick-movement">Example: joystick movement</h2>
<p>What is hard to test with TDD? Here is an example.</p>
<p>A <a href="/writing/agdpp-logitech-gamepad-f310/index.html">few episodes ago</a>, we worked on controlling the game with a gamepad. The gamepad has a little joystick (correct name?) and when we push it to the left, we want the arrow to turn left, and likewise for right. That logic works well to implement with TDD, however, that is not enough. It is also important that it “feels good” to turn the arrow. That it responds fast enough, that it turns with an appropriate speed, and so on. That part, I think, is impossible to work out with TDD since we don’t know the correct answer. The only way to get the correct answer is to experiment. Try turning with different parameters and see which ones feel better.</p>
<p>We can still use TDD for the first part if we relax the assertions. For example, we can’t assert that the arrow is turned by a specific amount, but we can assert that it is turned more to the left than before. Here is an example of that:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">&gt;&gt;&gt; initial_angle = game.get_arrow_angle()</span>
<span class="sd">&gt;&gt;&gt; game.event(GameLoop.create_event_joystick_motion(axis=0, value=-0.5))</span>
<span class="sd">&gt;&gt;&gt; game.update(1)</span>
<span class="sd">&gt;&gt;&gt; game.get_arrow_angle() &lt; initial_angle</span>
<span class="sd">True</span>
<span class="sd">&quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<p>We assert the basic functionality in the test, and then we can play the game and adjust parameters for turning until it feels good, and this test will continue to work without modification.</p>
<h2 id="testing-in-game">Testing in-game?</h2>
<p>What are you saying Rickard? That we can’t verify the behavior of the game with tests and that we need to play the game to make sure it works? And do this repeatedly? That sounds like a very long feedback loop. What about if we have to tweak numbers for an effect that only happens after you score 100 points? Should we play the game, score 100 points, look at the effect, tweak a parameter, and do it all over again?</p>
<p>You certainly need to play the game to be able to get some details right. But we should not need to play “unnecessary parts” over and over again until we reach the point in the game that we are interested in testing.</p>
<p>So far, the balloon shooter is not that complex. If we want to test turn speed for example, we can start the game and start turning. No additional steps needed. However, when the game becomes more complex (start screen, player selection, etc) and requires more interaction to get to where we want to go, I think we should approach it differently.</p>
<h2 id="test-applications">Test applications</h2>
<p>The idea that I have, that I have not yet tested, is to create small test applications or sub-games that can only be run in development.</p>
<p>For the case with the effect after 100 points, perhaps we can create a custom game that starts immediately with 99 points. We can shoot down one more balloon and observe the effect. That is a faster feedback loop.</p>
<p>This approach might require our design to change a bit. It must be easy to start the game with a particular scene and configuration for example.</p>
<h2 id="applications-outside-games">Applications outside games</h2>
<p>I have used this approach in <a href="/projects/timeline/index.html">Timeline</a>. Timeline is a GUI application, so a different domain than games. But the GUI elements have the same problem: you can’t assert in tests that they “look good”.</p>
<p>Instead of running the application and opening the correct dialog, we implemented a <code>--halt-gui</code> flag in our test runner. When that flag is present, the tests will open GUI dialogs with mock data and you can visually inspect that they look good:</p>
<p>
<center>
<img src="timeline-halt-gui.png" title="fig:" alt="Timeline halt GUI." />
</center>
</p>
<p>Your workflow for modifying a dialog can than be</p>
<ol type="1">
<li>run test suite with specific test and <code>--halt-gui</code> flag</li>
<li>inspect the dialog</li>
<li>tweak layout</li>
<li>repeat</li>
</ol>
<p>This makes the feedback loop a little faster. There is no need to constantly run the application and click your way to the correct dialog.</p>
<h2 id="what-about-real-application-testing">What about real application testing?</h2>
<p>Should we never run our application for real? Should we only get feedback from tests and test applications?</p>
<p>No, I believe it is also important to use the application to get a sense of what needs improving.</p>
<p>In <a href="https://ronjeffries.com/articles/-y023/python/-o110/110/">Python 110 - Now Fleets?</a>, Ron writes</p>
<blockquote>
<p>And it seems to me that with a video-oriented game, we always wind up needing to watch it run, both for confidence and because, every now and then, we discover a problem.</p>
</blockquote>
<p>My goal is to not have to run the game for confidence. I want faster feedback for confidence.</p>
<p>However, I do agree that you will discover problems when running the game. But I think that is true for any kind of application, not just games.</p>
<h2 id="summary">Summary</h2>
<p>Those are my reflections on using TDD for a game so far. Do you believe that creating test applications for faster feedback is a good idea? Please <a href="/contact/index.html">let me know</a>.</p>
<p>See you in the next episode!</p>
]]></description>
    <pubDate>Mon, 12 Jun 2023 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/agdpp-tdd-and-games/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>May 2023 Update</title>
    <link>http://rickardlindberg.me/writing/newsletter/may-2023/</link>
    <description><![CDATA[<h1>May 2023 Update</h1>

<p><em>Published on  6 June 2023.</em></p>

<p>This is what I’ve been up to in May 2023:</p>
<ul>
<li><p>I continued working on the Balloon shooter game in my <a href="/projects/agdpp/index.html">Agile Game Development with Python and Pygame</a> series. I wrote 6 blog posts about it! The blog posts are a bit behind development. I still have some catch up to do. One thing that I will probably cover later is how we recorded sound effects for shooting a balloon. Here are the blog posts I wrote this month:</p>
<ul>
<li><a href="/writing/agdpp-game-over/index.html">Game over?</a></li>
<li><a href="/writing/agdpp-hit-balloon-and-score-points/index.html">Hit balloon and score points</a></li>
<li><a href="/writing/agdpp-turning-arrow/index.html">Turning arrow</a></li>
<li><a href="/writing/agdpp-wrapper-pygame-draw-circle-bug/index.html">A case for the infrastructure wrapper</a></li>
<li><a href="/writing/agdpp-logitech-gamepad-f310/index.html">Programming a Logitech Gamepad F310</a></li>
<li><a href="/writing/agdpp-score-as-text/index.html">Score as text</a></li>
</ul></li>
<li><p>I started a new project: animation studio. The purpose is to be able to create animations programmatically for use in my videos. Things like text appearing and animating away. It has a preview mode where I can work on an animation, and when I am happy with the result, I can press a key to export a set of images that I can then import as a video in my video editor. I think the version I have now can actually be usable for some things. I will probably write more about it later. In the meantime, here is the project on <a href="https://github.com/rickardlindberg/animate">GitHub</a>.</p></li>
<li><p>I wrote about <a href="/writing/how-to-test-a-router/index.html">how to test a router</a>. This is an example of how writing things down clarified my thinking and provided me with an answer. I’m glad I did it.</p></li>
<li><p>I published no videos on my <a href="https://www.youtube.com/channel/UC4XI09URnsM_YYTSizAMliA">Youtube channel</a>. Recently I’ve found it more valuable to blog. It is easier for me to write blogs and I think that I also find more value in going back to blogs (which are easily searchable). I think I will keep trying to make videos and find a good balance with blogging, but for now, I focus more on blogging.</p></li>
</ul>
]]></description>
    <pubDate>Tue, 06 Jun 2023 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/newsletter/may-2023/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>Score as text</title>
    <link>http://rickardlindberg.me/writing/agdpp-score-as-text/</link>
    <description><![CDATA[<h1>Score as text</h1>

<p><em>Published on 24 May 2023 in <a href="/projects/agdpp/index.html">Agile Game Development with Python and Pygame</a>.</em></p>

<p>Currently, the game keeps track of the score by drawing yellow point markers. One for each point:</p>
<p>
<center>
<img src="points.png" title="fig:" alt="Point markers." />
</center>
</p>
<p>I find it tedious to count them when my son wants to know the score, and I think he also expressed that he wants to have the score as a number in the upper right corner.</p>
<p>That’s what we will work on in this episode. The end result will look like this:</p>
<p>
<center>
<img src="score-text.png" title="fig:" alt="Score text." />
</center>
</p>
<h2 id="drawing-text">Drawing text</h2>
<p>The reason that we implemented score display with point markers was that it was quicker. There was no way to draw text and it was therefore quicker to use point markers. But that has to change now. Let’s see if we can draw some text.</p>
<p>We start by adding a test case to the top-level, initial state test that asserts that the text ‘0’ is drawn on the screen:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">BalloonShooter</span><span class="p">:</span>

    <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">    I am a balloon shooter game!</span>

<span class="sd">    Initial state</span>
<span class="sd">    =============</span>

<span class="sd">    We run the game for a few frames, then quit:</span>

<span class="sd">    &gt;&gt;&gt; events = BalloonShooter.run_in_test_mode(</span>
<span class="sd">    ...     events=[</span>
<span class="sd">    ...         [],</span>
<span class="sd">    ...         [],</span>
<span class="sd">    ...         [],</span>
<span class="sd">    ...         [],</span>
<span class="sd">    ...         [],</span>
<span class="sd">    ...         [],</span>
<span class="sd">    ...         [GameLoop.create_event_user_closed_window()],</span>
<span class="sd">    ...     ]</span>
<span class="sd">    ... )</span>

<span class="sd">    ...</span>

<span class="sd">    The score is drawn:</span>

<span class="sd">    &gt;&gt;&gt; set(events.filter(&quot;DRAW_TEXT&quot;).collect(&quot;text&quot;))</span>
<span class="sd">    {(&#39;0&#39;,)}</span>
<span class="sd">    &quot;&quot;&quot;</span>

    <span class="o">...</span>
</pre>
</div>
</div>
</div>
<p>This fails because there is no event <code>DRAW_TEXT</code> yet.</p>
<p>We add a method to draw text and have it emit a <code>DRAW_TEXT</code> event like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">GameLoop</span><span class="p">(</span><span class="n">Observable</span><span class="p">):</span>

    <span class="o">...</span>

    <span class="k">def</span> <span class="nf">draw_text</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">position</span><span class="p">,</span> <span class="n">text</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">notify</span><span class="p">(</span><span class="s2">&quot;DRAW_TEXT&quot;</span><span class="p">,</span> <span class="p">{</span>
            <span class="s2">&quot;x&quot;</span><span class="p">:</span> <span class="n">position</span><span class="o">.</span><span class="n">x</span><span class="p">,</span>
            <span class="s2">&quot;y&quot;</span><span class="p">:</span> <span class="n">position</span><span class="o">.</span><span class="n">y</span><span class="p">,</span>
            <span class="s2">&quot;text&quot;</span><span class="p">:</span> <span class="n">text</span><span class="p">,</span>
        <span class="p">})</span>
        <span class="n">f</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">pygame</span><span class="o">.</span><span class="n">font</span><span class="o">.</span><span class="n">Font</span><span class="p">(</span><span class="n">size</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
        <span class="n">surface</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="kc">True</span><span class="p">,</span> <span class="s2">&quot;black&quot;</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">screen</span><span class="o">.</span><span class="n">blit</span><span class="p">(</span><span class="n">surface</span><span class="p">,</span> <span class="p">(</span><span class="n">position</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">position</span><span class="o">.</span><span class="n">y</span><span class="p">))</span>
</pre>
</div>
</div>
</div>
<p>We test the pygame code manually to ensure that we use the text drawing api correctly and that text appears on the screen.</p>
<h2 id="keeping-track-of-score-to-draw">Keeping track of score to draw</h2>
<p>Before we kept track of the score by adding point markers to a sprite group. We replace this sprite group with a new <code>Score</code> object:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="gd">-        self.points = self.add(SpriteGroup())</span>
<span class="gi">+        self.score = self.add(Score())</span>
</pre>
</div>
</div>
</div>
<p>Instead of adding point markers, we just add a number to increase the score:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="gd">-                    self.points.add(PointMarker(position=Point(</span>
<span class="gd">-                        x=20+len(self.points.get_sprites())*12,</span>
<span class="gd">-                        y=700</span>
<span class="gd">-                    )))</span>
<span class="gi">+                    self.score.add(1)</span>
</pre>
</div>
</div>
</div>
<p>The <code>Score</code> class looks like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">Score</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">score</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">points</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">score</span> <span class="o">+=</span> <span class="n">points</span>

    <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">):</span>
        <span class="k">pass</span>

    <span class="k">def</span> <span class="nf">draw</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">loop</span><span class="p">):</span>
        <span class="n">loop</span><span class="o">.</span><span class="n">draw_text</span><span class="p">(</span><span class="n">position</span><span class="o">=</span><span class="n">Point</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">1100</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mi">20</span><span class="p">),</span> <span class="n">text</span><span class="o">=</span><span class="nb">str</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">score</span><span class="p">))</span>
</pre>
</div>
</div>
</div>
<h2 id="adapting-tests">Adapting tests</h2>
<p>We already have tests that make sure that we count the score correctly. We have to modify them slightly to look at the score number instead of counting point markers in the sprite group. We change them like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="gd">-    &gt;&gt;&gt; game.get_points()</span>
<span class="gd">-    []</span>
<span class="gi">+    &gt;&gt;&gt; game.get_score()</span>
<span class="gi">+    0</span>
</pre>
</div>
</div>
</div>
<p>Now all tests pass and the score is displayed with text instead of point markers. Success!</p>
<h2 id="summary">Summary</h2>
<p>This change went rather smoothly. Adding functionality to draw text was not that much work. Perhaps we could just as well have done that from the start. But point markers felt easier at the time.</p>
<p>Our customer is happy with the new score display. When we play the game, we sometimes decide to go for 100 points, then stop. Perhaps that could become a competitive aspect? How fast can you get to 100 points? And the time will be the “final” score? We’ll see.</p>
<p>See you in the next episode!</p>
]]></description>
    <pubDate>Wed, 24 May 2023 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/agdpp-score-as-text/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>How to test a router?</title>
    <link>http://rickardlindberg.me/writing/how-to-test-a-router/</link>
    <description><![CDATA[<h1>How to test a router?</h1>

<p><em>Published on 20 May 2023.</em></p>

<p>I’ve been practicing <a href="https://www.jamesshore.com/v2/projects/nullables/testing-without-mocks">Testing Without Mocks</a> for a while now. It describes a way of doing overlapping, sociable testing, which include infrastructure, without having side effects occur in your tests.</p>
<p>Recently I’ve been wondering how to test a “router” using this pattern. By router I mean an entry level function that looks at a url or command line arguments or whatever and dispatches to the relevant “controller”. Something like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">MyWebApp</span><span class="p">:</span>

    <span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">url</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">url</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s2">&quot;/home&quot;</span><span class="p">):</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">home_controller</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="o">...</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">url</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s2">&quot;/about&quot;</span><span class="p">):</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">about_controller</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="o">...</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>I <a href="https://hachyderm.io/@rickardlindberg/110379826738876668">asked</a> James if he had any examples of this, and he <a href="https://github.com/jamesshore/testing-without-mocks-complex/tree/javascript/src/www">had</a>. Let’s explore.</p>
<h2 id="james-example">James’ example</h2>
<p>Overly simplified, to only highlight the parts that I’m interested in, James’ example looks like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">WwwRouter</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">home_page_controller</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">home_page_controller</span> <span class="o">=</span> <span class="n">home_page_controller</span>

    <span class="k">def</span> <span class="nf">route</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">url</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">url</span> <span class="o">==</span> <span class="s2">&quot;/&quot;</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">home_page_controller</span><span class="o">.</span><span class="n">get</span><span class="p">()</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="s2">&quot;FAIL&quot;</span>

<span class="k">class</span> <span class="nc">HomePageController</span><span class="p">:</span>

    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">create</span><span class="p">():</span>
        <span class="k">return</span> <span class="n">HomePageController</span><span class="p">(</span><span class="n">SomeInfrastructure</span><span class="o">.</span><span class="n">create</span><span class="p">())</span>

    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">create_null</span><span class="p">():</span>
        <span class="k">return</span> <span class="n">HomePageController</span><span class="p">(</span><span class="n">SomeInfrastructure</span><span class="o">.</span><span class="n">create_null</span><span class="p">())</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">some_infrastructure</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">some_infrastructure</span> <span class="o">=</span> <span class="n">some_infrastructure</span>

    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="o">...</span>
        <span class="k">return</span> <span class="s2">&quot;Home Page&quot;</span>
</pre>
</div>
</div>
</div>
<p>The question I had was, how to test the <code>WwwRouter</code>? James does it like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">test_routes_home_page</span><span class="p">():</span>
    <span class="n">router</span> <span class="o">=</span> <span class="n">WwwRouter</span><span class="p">(</span><span class="n">HomePageController</span><span class="o">.</span><span class="n">create_null</span><span class="p">())</span>
    <span class="n">response</span> <span class="o">=</span> <span class="n">router</span><span class="o">.</span><span class="n">route</span><span class="p">(</span><span class="s2">&quot;/&quot;</span><span class="p">)</span>
    <span class="k">assert</span> <span class="n">response</span> <span class="o">==</span> <span class="n">HomePageController</span><span class="o">.</span><span class="n">create_null</span><span class="p">()</span><span class="o">.</span><span class="n">get</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">test_routes_errors</span><span class="p">():</span>
    <span class="n">router</span> <span class="o">=</span> <span class="n">WwwRouter</span><span class="p">(</span><span class="n">HomePageController</span><span class="o">.</span><span class="n">create_null</span><span class="p">())</span>
    <span class="n">response</span> <span class="o">=</span> <span class="n">router</span><span class="o">.</span><span class="n">route</span><span class="p">(</span><span class="s2">&quot;/no-such-url&quot;</span><span class="p">)</span>
    <span class="k">assert</span> <span class="n">response</span> <span class="o">==</span> <span class="s2">&quot;FAIL&quot;</span>
</pre>
</div>
</div>
</div>
<p>Some characteristics of this test setup:</p>
<ul>
<li><p>The router takes all the controllers as dependencies.</p></li>
<li><p>The null version of the controllers are used.</p></li>
<li><p>The test uses <a href="https://www.jamesshore.com/v2/projects/nullables/testing-without-mocks#isolation">collaborator-based isolation</a>. (The test doesn’t care what <code>HomePageController</code> returns as long as it is the same as the router returns.)</p></li>
</ul>
<h2 id="what-if-return-value-is-missing">What if return value is missing?</h2>
<p>How about a router or dispatcher where the controllers don’t return anything. How to we test that?</p>
<p>Example:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">CliDispatcher</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">add_command</span><span class="p">,</span> <span class="n">remove_command</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">add_command</span> <span class="o">=</span> <span class="n">add_command</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">remove_command</span> <span class="o">=</span> <span class="n">remove_command</span>

    <span class="k">def</span> <span class="nf">dispatch</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">arguments</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">arguments</span><span class="p">[:</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="p">[</span><span class="s2">&quot;add&quot;</span><span class="p">]:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">add_command</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">arguments</span><span class="p">[</span><span class="mi">1</span><span class="p">:])</span>
        <span class="k">elif</span> <span class="n">arguments</span><span class="p">[:</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="p">[</span><span class="s2">&quot;remove&quot;</span><span class="p">]:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">remove_command</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">arguments</span><span class="p">[</span><span class="mi">1</span><span class="p">:])</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="s2">&quot;Unknown command.&quot;</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>We start out the same:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">test_dispatches_to_add</span><span class="p">():</span>
    <span class="n">add_command</span> <span class="o">=</span> <span class="n">AddCommand</span><span class="o">.</span><span class="n">create_null</span><span class="p">()</span>
    <span class="n">remove_command</span> <span class="o">=</span> <span class="n">RemoveCommand</span><span class="o">.</span><span class="n">create_null</span><span class="p">()</span>
    <span class="n">cli</span> <span class="o">=</span> <span class="n">CliDispatcher</span><span class="p">(</span><span class="n">add_command</span><span class="p">,</span> <span class="n">remove_command</span><span class="p">)</span>
    <span class="n">cli</span><span class="o">.</span><span class="n">dispatch</span><span class="p">([</span><span class="s2">&quot;add&quot;</span><span class="p">,</span> <span class="s2">&quot;item name&quot;</span><span class="p">])</span>
</pre>
</div>
</div>
</div>
<p>But <code>dispatch</code> does not return anything, so we can’t check any return value. What to do?</p>
<p>We want to test that the function of <code>AddCommand</code> was performed, and nothing else. We could introduce queries on commands to see if they have been run. Then we can write the asserts like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">assert</span> <span class="n">add_command</span><span class="o">.</span><span class="n">get_last_arguments</span><span class="p">()</span> <span class="o">==</span> <span class="p">[</span><span class="s2">&quot;item name&quot;</span><span class="p">]</span>
<span class="k">assert</span> <span class="n">remove_command</span><span class="o">.</span><span class="n">get_last_arguments</span><span class="p">()</span> <span class="o">==</span> <span class="kc">None</span>
</pre>
</div>
</div>
</div>
<p>So we want to assert that the add command was run with the given arguments and that all the other (only one in the example) commands were not run.</p>
<p>I think this is in the spirit of testing without mocks. Here is what it says about state-based testing:</p>
<blockquote>
<p>Use state-based tests instead of interaction-based tests. A state-based test checks the output or state of the code under test, without any awareness of its implementation.</p>
</blockquote>
<p>An it goes on to say</p>
<blockquote>
<p>For mutable objects, provide a way for changes in state to be observed, either with a getter method or an event.</p>
</blockquote>
<h2 id="events-instead">Events instead</h2>
<p>I am not a fan of the <code>get_last_*</code> pattern. Our code could call <code>command.run(...)</code> twice, and the test would not catch the error. I prefer an events approach instead.</p>
<p>Assuming that commands are observable and that they emit events when run (we can test that separately), the test can be written like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">test_dispatches_to_add</span><span class="p">():</span>
    <span class="n">events</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">add_command</span> <span class="o">=</span> <span class="n">AddCommand</span><span class="o">.</span><span class="n">create_null</span><span class="p">()</span>
    <span class="n">add_command</span><span class="o">.</span><span class="n">on_event</span><span class="p">(</span><span class="n">events</span><span class="o">.</span><span class="n">append</span><span class="p">)</span>
    <span class="n">remove_command</span> <span class="o">=</span> <span class="n">RemoveCommand</span><span class="o">.</span><span class="n">create_null</span><span class="p">()</span>
    <span class="n">remove_command</span><span class="o">.</span><span class="n">on_event</span><span class="p">(</span><span class="n">events</span><span class="o">.</span><span class="n">append</span><span class="p">)</span>
    <span class="n">cli</span> <span class="o">=</span> <span class="n">CliDispatcher</span><span class="p">(</span><span class="n">add_command</span><span class="p">,</span> <span class="n">remove_command</span><span class="p">)</span>
    <span class="n">cli</span><span class="o">.</span><span class="n">dispatch</span><span class="p">([</span><span class="s2">&quot;add&quot;</span><span class="p">,</span> <span class="s2">&quot;item name&quot;</span><span class="p">])</span>
    <span class="k">assert</span> <span class="n">events</span> <span class="o">==</span> <span class="p">[</span>
        <span class="p">{</span><span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;AddCommand&quot;</span><span class="p">,</span> <span class="s2">&quot;arguments&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;item name&quot;</span><span class="p">]},</span>
    <span class="p">]</span>
</pre>
</div>
</div>
</div>
<p>This test ensures that exactly one command was run and that it was run only once. Exactly what we wanted to test, but now expressed with a single assert.</p>
<h2 id="better-test-setup">Better test setup</h2>
<p>This test setup becomes tedious to do for every command. We can extract it to a factory method:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">create_cli</span><span class="p">():</span>
    <span class="n">events</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">add_command</span> <span class="o">=</span> <span class="n">AddCommand</span><span class="o">.</span><span class="n">create_null</span><span class="p">()</span>
    <span class="n">add_command</span><span class="o">.</span><span class="n">on_event</span><span class="p">(</span><span class="n">events</span><span class="o">.</span><span class="n">append</span><span class="p">)</span>
    <span class="n">remove_command</span> <span class="o">=</span> <span class="n">RemoveCommand</span><span class="o">.</span><span class="n">create_null</span><span class="p">()</span>
    <span class="n">remove_command</span><span class="o">.</span><span class="n">on_event</span><span class="p">(</span><span class="n">events</span><span class="o">.</span><span class="n">append</span><span class="p">)</span>
    <span class="n">cli</span> <span class="o">=</span> <span class="n">CliDispatcher</span><span class="p">(</span><span class="n">add_command</span><span class="p">,</span> <span class="n">remove_command</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">cli</span><span class="p">,</span> <span class="n">events</span>

<span class="k">def</span> <span class="nf">test_dispatches_to_add</span><span class="p">():</span>
    <span class="n">cli</span><span class="p">,</span> <span class="n">events</span> <span class="o">=</span> <span class="n">create_cli</span><span class="p">()</span>
    <span class="n">cli</span><span class="o">.</span><span class="n">dispatch</span><span class="p">([</span><span class="s2">&quot;add&quot;</span><span class="p">,</span> <span class="s2">&quot;item name&quot;</span><span class="p">])</span>
    <span class="k">assert</span> <span class="n">events</span> <span class="o">==</span> <span class="p">[</span>
        <span class="p">{</span><span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;AddCommand&quot;</span><span class="p">,</span> <span class="s2">&quot;arguments&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;item name&quot;</span><span class="p">]},</span>
    <span class="p">]</span>

<span class="k">def</span> <span class="nf">test_dispatches_to_remove</span><span class="p">():</span>
    <span class="n">cli</span><span class="p">,</span> <span class="n">events</span> <span class="o">=</span> <span class="n">create_cli</span><span class="p">()</span>
    <span class="n">cli</span><span class="o">.</span><span class="n">dispatch</span><span class="p">([</span><span class="s2">&quot;remove&quot;</span><span class="p">,</span> <span class="s2">&quot;item name&quot;</span><span class="p">])</span>
    <span class="k">assert</span> <span class="n">events</span> <span class="o">==</span> <span class="p">[</span>
        <span class="p">{</span><span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;RemoveCommand&quot;</span><span class="p">,</span> <span class="s2">&quot;arguments&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;item name&quot;</span><span class="p">]},</span>
    <span class="p">]</span>
</pre>
</div>
</div>
</div>
<p>Or even better:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">run_in_test_mode</span><span class="p">(</span><span class="n">arguments</span><span class="p">):</span>
    <span class="n">events</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">add_command</span> <span class="o">=</span> <span class="n">AddCommand</span><span class="o">.</span><span class="n">create_null</span><span class="p">()</span>
    <span class="n">add_command</span><span class="o">.</span><span class="n">on_event</span><span class="p">(</span><span class="n">events</span><span class="o">.</span><span class="n">append</span><span class="p">)</span>
    <span class="n">remove_command</span> <span class="o">=</span> <span class="n">RemoveCommand</span><span class="o">.</span><span class="n">create_null</span><span class="p">()</span>
    <span class="n">remove_command</span><span class="o">.</span><span class="n">on_event</span><span class="p">(</span><span class="n">events</span><span class="o">.</span><span class="n">append</span><span class="p">)</span>
    <span class="n">cli</span> <span class="o">=</span> <span class="n">CliDispatcher</span><span class="p">(</span><span class="n">add_command</span><span class="p">,</span> <span class="n">remove_command</span><span class="p">)</span>
    <span class="n">cli</span><span class="o">.</span><span class="n">dispatch</span><span class="p">(</span><span class="n">arguments</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">events</span>

<span class="k">def</span> <span class="nf">test_dispatches_to_add</span><span class="p">():</span>
    <span class="k">assert</span> <span class="n">run_in_test_mode</span><span class="p">([</span><span class="s2">&quot;add&quot;</span><span class="p">,</span> <span class="s2">&quot;item name&quot;</span><span class="p">])</span> <span class="o">==</span> <span class="p">[</span>
        <span class="p">{</span><span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;AddCommand&quot;</span><span class="p">,</span> <span class="s2">&quot;arguments&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;item name&quot;</span><span class="p">]},</span>
    <span class="p">]</span>

<span class="k">def</span> <span class="nf">test_dispatches_to_remove</span><span class="p">():</span>
    <span class="k">assert</span> <span class="n">run_in_test_mode</span><span class="p">([</span><span class="s2">&quot;remove&quot;</span><span class="p">,</span> <span class="s2">&quot;item name&quot;</span><span class="p">])</span> <span class="o">==</span> <span class="p">[</span>
        <span class="p">{</span><span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;RemoveCommand&quot;</span><span class="p">,</span> <span class="s2">&quot;arguments&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;item name&quot;</span><span class="p">]},</span>
    <span class="p">]</span>
</pre>
</div>
</div>
</div>
<h2 id="summary">Summary</h2>
<p>In hindsight, this seems quite obvious to me. I’m not sure what I had a hard time understanding. But the example from James helped. Thanks! And writing this blog post helped me clarify my thinking on the subject.</p>
]]></description>
    <pubDate>Sat, 20 May 2023 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/how-to-test-a-router/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>Programming a Logitech Gamepad F310</title>
    <link>http://rickardlindberg.me/writing/agdpp-logitech-gamepad-f310/</link>
    <description><![CDATA[<h1>Programming a Logitech Gamepad F310</h1>

<p><em>Published on 19 May 2023 in <a href="/projects/agdpp/index.html">Agile Game Development with Python and Pygame</a>.</em></p>

<p>I recently bought a pair of Logitech gamepads that me and my son use when playing <a href="https://supertuxkart.net/Main_Page">SuperTuxKart</a>.</p>
<p>
<center>
<img src="logitech-gamepad-f310.png" title="fig:" alt="Logitech Gamepad F310." />
</center>
</p>
<p>I want to be able to use those gamepads in the balloon shooter as well. My suspicion is that the balloon shooter will feel many times more like a “real” game if we can control it using “real” game controllers. Even though we are all about having fun here and learning, we still want this to feel like a real game, not some toy example. So let’s get started.</p>
<h2 id="learning-about-events">Learning about events</h2>
<p>How do we capture events from a Logitech gamepad?</p>
<p>One way to find out is to print all the events that pygame generates. We can for example do that in the <code>tick</code> method:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">BalloonShooter</span><span class="p">:</span>

    <span class="o">...</span>

    <span class="k">def</span> <span class="nf">tick</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">,</span> <span class="n">events</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">events</span><span class="p">:</span>
            <span class="nb">print</span><span class="p">(</span><span class="n">event</span><span class="p">)</span>
            <span class="o">...</span>
</pre>
</div>
</div>
</div>
<p>This makes the test suite fail since the print statement is outputting event information that the tests do not expect to find.</p>
<p>This might be a downside of doctest, that it captures stdout and asserts on it. Normally a print statement should not affect the function of the code, so it should be fine.</p>
<p>On the other hand, if we use print statements for debugging, maybe it’s a good thing that our test suite fails so that we are remembered to keep the debug session short and remove it once we are done.</p>
<p>Anyway, if we run the game now and press keys on the keyboard we can see things like this in the output:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>&lt;Event(771-TextInput {&#39;text&#39;: &#39; &#39;, &#39;window&#39;: None})&gt;
&lt;Event(769-KeyUp {&#39;unicode&#39;: &#39; &#39;, &#39;key&#39;: 32, &#39;mod&#39;: 0, &#39;scancode&#39;: 44, &#39;window&#39;: None})&gt;
&lt;Event(768-KeyDown {&#39;unicode&#39;: &#39;&#39;, &#39;key&#39;: 1073742049, &#39;mod&#39;: 1, &#39;scancode&#39;: 225, &#39;window&#39;: None})&gt;
&lt;Event(768-KeyDown {&#39;unicode&#39;: &#39;&#39;, &#39;key&#39;: 1073742050, &#39;mod&#39;: 257, &#39;scancode&#39;: 226, &#39;window&#39;: None})&gt;
</pre>
</div>
</div>
</div>
<p>But when we press keys on the Logitech gamepad, nothing happens.</p>
<p>However, if we look at the beginning of the event log, we see this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>&lt;Event(1541-JoyDeviceAdded {&#39;device_index&#39;: 0, &#39;guid&#39;: &#39;030000006d0400001dc2000014400000&#39;})&gt;
</pre>
</div>
</div>
</div>
<p>Is this our Logitech gamepad?</p>
<h2 id="initializing-joysticks">Initializing joysticks</h2>
<p>We read about joysticks in the <a href="https://www.pygame.org/docs/ref/joystick.html">pygame documentation</a>. It seems like they must be initialized before events are generated for them.</p>
<blockquote>
<p>Joysticks are initialised on creation and are shut down when deallocated. Once the device is initialized the pygame event queue will start receiving events about its input.</p>
</blockquote>
<p>We try to mimic the example in the documentation to initialize joysticks:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">GameLoop</span><span class="p">(</span><span class="n">Observable</span><span class="p">):</span>

    <span class="o">...</span>

    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">game</span><span class="p">,</span> <span class="n">resolution</span><span class="o">=</span><span class="p">(</span><span class="mi">1280</span><span class="p">,</span> <span class="mi">720</span><span class="p">),</span> <span class="n">fps</span><span class="o">=</span><span class="mi">60</span><span class="p">):</span>
        <span class="o">...</span>
        <span class="n">joysticks</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
                <span class="n">pygame_events</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">pygame</span><span class="o">.</span><span class="n">event</span><span class="o">.</span><span class="n">get</span><span class="p">()</span>
                <span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">pygame_events</span><span class="p">:</span>
                    <span class="k">if</span> <span class="n">event</span><span class="o">.</span><span class="n">type</span> <span class="o">==</span> <span class="n">pygame</span><span class="o">.</span><span class="n">JOYDEVICEADDED</span><span class="p">:</span>
                        <span class="n">joy</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">pygame</span><span class="o">.</span><span class="n">joystick</span><span class="o">.</span><span class="n">Joystick</span><span class="p">(</span><span class="n">event</span><span class="o">.</span><span class="n">device_index</span><span class="p">)</span>
                        <span class="n">joysticks</span><span class="p">[</span><span class="n">joy</span><span class="o">.</span><span class="n">get_instance_id</span><span class="p">()]</span> <span class="o">=</span> <span class="n">joy</span>
                    <span class="k">else</span><span class="p">:</span>
                        <span class="n">game</span><span class="o">.</span><span class="n">event</span><span class="p">(</span><span class="n">Event</span><span class="p">(</span><span class="n">event</span><span class="p">))</span>
                <span class="o">...</span>
</pre>
</div>
</div>
</div>
<p>We don’t handle <code>JOYDEVICEREMOVED</code> yet. We probably should, but unless we unplug the gamepad while running the game, we should be fine I think.</p>
<p>This change passes all the tests. However, we are never simulating the <code>JOYDEVICEADDED</code> event, so the code is never executed.</p>
<p>I think we will get faster feedback by just testing this thing for real. We can come back and describe the joystick handling code in the form of tests later on if we feel the need. And maybe test the <code>JOYDEVICEREMOVED</code> as well.</p>
<p>Anyway, if we run the game now and press keys on the gamepad, we see events like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>&lt;Event(1536-JoyAxisMotion {&#39;joy&#39;: 0, &#39;instance_id&#39;: 0, &#39;axis&#39;: 0, &#39;value&#39;: 0.003906369212927641})&gt;
&lt;Event(1539-JoyButtonDown {&#39;joy&#39;: 0, &#39;instance_id&#39;: 0, &#39;button&#39;: 0})&gt;
&lt;Event(1540-JoyButtonUp {&#39;joy&#39;: 0, &#39;instance_id&#39;: 0, &#39;button&#39;: 0})&gt;
</pre>
</div>
</div>
</div>
<p>I feel a disproportional sense of excitement and joy over this. We can now get input from the Logitech gamepad. We are real game developers now! Thanks pygame for making this relatively straight forward. Now it’s a matter of mapping events to actions in our game.</p>
<h2 id="isolating-input-handling">Isolating input handling</h2>
<p>We want to be able to play our game with both the keyboard and the Logitech gamepad. I will most likely use the gamepad 99% of the time, but if you don’t have it, we still want you to be able to play the game.</p>
<p>Input handling is therefore something that is starting to become a little complicated. It’s not just a matter of mapping one event to one action.</p>
<p>Now, we have this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">GameScene</span><span class="p">(</span><span class="n">SpriteGroup</span><span class="p">):</span>

    <span class="o">...</span>

    <span class="k">def</span> <span class="nf">event</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>
        <span class="o">...</span>
        <span class="k">elif</span> <span class="n">event</span><span class="o">.</span><span class="n">is_keydown_space</span><span class="p">():</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">flying_arrows</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">arrow</span><span class="o">.</span><span class="n">clone_shooting</span><span class="p">())</span>
        <span class="k">elif</span> <span class="n">event</span><span class="o">.</span><span class="n">is_keydown_left</span><span class="p">():</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">arrow</span><span class="o">.</span><span class="n">angle_left</span><span class="p">()</span>
        <span class="k">elif</span> <span class="n">event</span><span class="o">.</span><span class="n">is_keydown_right</span><span class="p">():</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">arrow</span><span class="o">.</span><span class="n">angle_right</span><span class="p">()</span>
</pre>
</div>
</div>
</div>
<p>That is a one to one mapping between events and actions.</p>
<p>We still want this code to look similar but allow multiple events to generate the same action.</p>
<p>Here is what we come up with:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">GameScene</span><span class="p">(</span><span class="n">SpriteGroup</span><span class="p">):</span>

    <span class="o">...</span>

    <span class="k">def</span> <span class="nf">event</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">input_handler</span><span class="o">.</span><span class="n">action</span><span class="p">(</span><span class="n">event</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">input_handler</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">dt</span><span class="p">)</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">input_handler</span><span class="o">.</span><span class="n">get_shoot</span><span class="p">():</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">flying_arrows</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">bow</span><span class="o">.</span><span class="n">clone_shooting</span><span class="p">())</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">bow</span><span class="o">.</span><span class="n">turn</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">input_handler</span><span class="o">.</span><span class="n">get_turn_angle</span><span class="p">())</span>
</pre>
</div>
</div>
</div>
<p>So we pass along events to an input handler, then we query it in the <code>update</code> method, asking it if a shot action was triggered (from either input device), and if so, modify <code>flying_arrows</code> as before. We do something similar for turning the arrow. But instead of asking the input handler if a left/right action was triggered, we ask it for an angle that we should turn the arrow. Since the arrow can be turned with variable speed with the Logitech gamepad, this makes more sense.</p>
<p>Before we look at the input handler, I want to discuss another thing that is new here: the bow.</p>
<h2 id="bow">Bow</h2>
<p>Instead of doing <code>arrow.angle_left/right()</code> we do <code>bow.turn(angle)</code>. We have extracted a concept called bow.</p>
<p>Right now it is a wrapper around an arrow, but the idea is that you might want to draw more graphics for the bow.</p>
<p>Here is what it looks like:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">Bow</span><span class="p">(</span><span class="n">SpriteGroup</span><span class="p">):</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">SpriteGroup</span><span class="o">.</span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">arrow</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Arrow</span><span class="p">())</span>

    <span class="k">def</span> <span class="nf">turn</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">angle</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">arrow</span><span class="o">.</span><span class="n">set_angle</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">arrow</span><span class="o">.</span><span class="n">angle</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">angle</span><span class="p">))</span>

    <span class="k">def</span> <span class="nf">clone_shooting</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">arrow</span><span class="o">.</span><span class="n">clone_shooting</span><span class="p">()</span>

    <span class="o">...</span>
</pre>
</div>
</div>
</div>
<p>I’m not sure that bow is the right name. Do we shoot arrows with a bow in our game? Or is it some kind of cannon? I think we need to ask our product owner.</p>
<p>At the moment we are not doing any drawing except the arrow, so the bow just acts as a placeholder to attract new functionality. But the concept of a bow makes sense. You need to shoot the arrow with something. And when you shoot, the arrow leaves the bow and goes into the list of flying arrows.</p>
<h2 id="input-handler">Input handler</h2>
<p>Ok, on to the input handler.</p>
<p>It is responsible for handling events and keeping some state of what those events should result in.</p>
<p>Let’s look at how it handles shooting:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">InputHandler</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="o">...</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">shoot_down</span> <span class="o">=</span> <span class="n">ResettableValue</span><span class="p">(</span><span class="kc">False</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">get_shoot</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">shoot</span>

    <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">shoot</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">shoot_down</span><span class="o">.</span><span class="n">get_and_reset</span><span class="p">()</span>
        <span class="o">...</span>

    <span class="k">def</span> <span class="nf">action</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">event</span><span class="o">.</span><span class="n">is_keydown</span><span class="p">(</span><span class="n">KEY_SPACE</span><span class="p">)</span> <span class="ow">or</span> <span class="n">event</span><span class="o">.</span><span class="n">is_joystick_down</span><span class="p">(</span><span class="n">XBOX_A</span><span class="p">):</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">shoot_down</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="kc">True</span><span class="p">)</span>
        <span class="o">...</span>
</pre>
</div>
</div>
</div>
<p>It will be called by the game scene like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="bp">self</span><span class="o">.</span><span class="n">input_handler</span><span class="o">.</span><span class="n">action</span><span class="p">(</span><span class="n">event</span><span class="p">)</span>
<span class="bp">self</span><span class="o">.</span><span class="n">input_handler</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">dt</span><span class="p">)</span>
<span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">input_handler</span><span class="o">.</span><span class="n">get_shoot</span><span class="p">():</span>
    <span class="o">...</span>
</pre>
</div>
</div>
</div>
<p>The <code>shoot_down</code> variable remembers if a shoot key/button has been pressed since the last call to <code>update</code>. We only want <code>get_shoot</code> to return true one time when we press a shoot key/button. That’s why we use a resettable value, which looks like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">ResettableValue</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">default</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">default</span> <span class="o">=</span> <span class="n">default</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="n">default</span>

    <span class="k">def</span> <span class="nf">get_and_reset</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">x</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">reset</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">x</span>

    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">value</span>

    <span class="k">def</span> <span class="nf">set</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="n">value</span>

    <span class="k">def</span> <span class="nf">reset</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">default</span>
</pre>
</div>
</div>
</div>
<p>The <code>is_joystick_down</code> method on the event is new. We have added wrappers for new events <a href="/writing/agdpp-shooting-arrow/index.html">before</a>, and this is done the same way.</p>
<p>The logic for the turn angle is a little more complicated. The input handler remembers what state the keyboard and gamepad is in. For the keyboard, it is if a turn key is currently pressed or not. For the gamepad, it is the current x position of the joystick. We store that state in <code>arrow_turn_factor</code>. It is a value between -1 and 1. -1 means turn full speed to the left. 1 means turn full speed to the right. The keyboard can only turn with full speed but the gamepad can turn with variable speed by moving the joystick into different x positions. (We could imagine that the turn factor for the keyboard increase over time. So the speed increases the longer you have held a turn button down. That kind of logic would go in here and the game would still only query for the turn angle.)</p>
<p>Here is the implementation:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">InputHandler</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">arrow_turn_factor</span> <span class="o">=</span> <span class="n">ResettableValue</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
        <span class="o">...</span>

    <span class="k">def</span> <span class="nf">get_turn_angle</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">turn_angle</span>

    <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">):</span>
        <span class="o">...</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">turn_angle</span> <span class="o">=</span> <span class="n">Angle</span><span class="o">.</span><span class="n">fraction_of_whole</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">arrow_turn_factor</span><span class="o">.</span><span class="n">get</span><span class="p">()</span><span class="o">*</span><span class="n">dt</span><span class="o">*</span><span class="mi">1</span><span class="o">/</span><span class="mi">2000</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">action</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>
        <span class="o">...</span>
        <span class="k">elif</span> <span class="n">event</span><span class="o">.</span><span class="n">is_keydown</span><span class="p">(</span><span class="n">KEY_LEFT</span><span class="p">):</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">arrow_turn_factor</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">event</span><span class="o">.</span><span class="n">is_keyup</span><span class="p">(</span><span class="n">KEY_LEFT</span><span class="p">):</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">arrow_turn_factor</span><span class="o">.</span><span class="n">reset</span><span class="p">()</span>
        <span class="k">elif</span> <span class="n">event</span><span class="o">.</span><span class="n">is_keydown</span><span class="p">(</span><span class="n">KEY_RIGHT</span><span class="p">):</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">arrow_turn_factor</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">event</span><span class="o">.</span><span class="n">is_keyup</span><span class="p">(</span><span class="n">KEY_RIGHT</span><span class="p">):</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">arrow_turn_factor</span><span class="o">.</span><span class="n">reset</span><span class="p">()</span>
        <span class="k">elif</span> <span class="n">event</span><span class="o">.</span><span class="n">is_joystick_motion</span><span class="p">()</span> <span class="ow">and</span> <span class="n">event</span><span class="o">.</span><span class="n">get_axis</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">if</span> <span class="nb">abs</span><span class="p">(</span><span class="n">event</span><span class="o">.</span><span class="n">get_value</span><span class="p">())</span> <span class="o">&gt;</span> <span class="mf">0.01</span><span class="p">:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">arrow_turn_factor</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="n">event</span><span class="o">.</span><span class="n">get_value</span><span class="p">())</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">arrow_turn_factor</span><span class="o">.</span><span class="n">reset</span><span class="p">()</span>
</pre>
</div>
</div>
</div>
<p>We can test the details of this in isolation. The only thing we need to test in the game scene is that it turns the arrow by the amount that it gets from the input handler.</p>
<p>Also notice the new <code>Angle</code> class. We continue down the path of eliminating primitive obsession. I’m sure it will attract some functions.</p>
<h2 id="design-discussion">Design discussion</h2>
<p>Let’s have a look at the game scene again:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">GameScene</span><span class="p">(</span><span class="n">SpriteGroup</span><span class="p">):</span>

    <span class="o">...</span>

    <span class="k">def</span> <span class="nf">event</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">input_handler</span><span class="o">.</span><span class="n">action</span><span class="p">(</span><span class="n">event</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">input_handler</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">dt</span><span class="p">)</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">input_handler</span><span class="o">.</span><span class="n">get_shoot</span><span class="p">():</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">flying_arrows</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">bow</span><span class="o">.</span><span class="n">clone_shooting</span><span class="p">())</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">bow</span><span class="o">.</span><span class="n">turn</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">input_handler</span><span class="o">.</span><span class="n">get_turn_angle</span><span class="p">())</span>
</pre>
</div>
</div>
</div>
<p>How do we test this? What is the behavior?</p>
<p>This is what I think of:</p>
<ul>
<li>Flying arrows stays the same if no shoot key is pressed</li>
<li>Flying arrows increment if shoot key is pressed</li>
<li>Bow turns with an angle indicated by input</li>
</ul>
<p>In order to test this, we need to simulate real events. But now that we allow multiple events for shooting for example, do we need to test them all? No. We can select any of them.</p>
<p>This is overlapping, sociable testing. (I think.)</p>
<p>Then we can write specific tests for the input handler that tests that all shoot keys result in <code>get_shoot</code> being true:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">Space shoots and resets:</span>

<span class="sd">&gt;&gt;&gt; i = InputHandler()</span>
<span class="sd">&gt;&gt;&gt; i.action(GameLoop.create_event_keydown(KEY_SPACE))</span>
<span class="sd">&gt;&gt;&gt; i.update(1)</span>
<span class="sd">&gt;&gt;&gt; i.get_shoot()</span>
<span class="sd">True</span>
<span class="sd">&gt;&gt;&gt; i.update(1)</span>
<span class="sd">&gt;&gt;&gt; i.get_shoot()</span>
<span class="sd">False</span>

<span class="sd">Xbox A shoots and resets:</span>

<span class="sd">&gt;&gt;&gt; i = InputHandler()</span>
<span class="sd">&gt;&gt;&gt; i.action(GameLoop.create_event_joystick_down(XBOX_A))</span>
<span class="sd">&gt;&gt;&gt; i.update(1)</span>
<span class="sd">&gt;&gt;&gt; i.get_shoot()</span>
<span class="sd">True</span>
<span class="sd">&gt;&gt;&gt; i.update(1)</span>
<span class="sd">&gt;&gt;&gt; i.get_shoot()</span>
<span class="sd">False</span>
<span class="sd">&quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<p>The process to get to this design was a squiggly one with many refactorings. I initially had a different approach that I want to mention and talk about. It looked like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">GameScene</span><span class="p">(</span><span class="n">SpriteGroup</span><span class="p">):</span>

    <span class="o">...</span>

    <span class="k">def</span> <span class="nf">event</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>
        <span class="k">def</span> <span class="nf">quit</span><span class="p">():</span>
            <span class="k">raise</span> <span class="n">ExitGameLoop</span><span class="p">()</span>
        <span class="n">actions</span> <span class="o">=</span> <span class="p">{</span>
            <span class="s2">&quot;quit&quot;</span><span class="p">:</span> <span class="n">quit</span><span class="p">,</span>
            <span class="s2">&quot;shoot&quot;</span><span class="p">:</span> <span class="k">lambda</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">flying_arrows</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">arrow</span><span class="o">.</span><span class="n">clone_shooting</span><span class="p">()),</span>
            <span class="s2">&quot;turn_left&quot;</span><span class="p">:</span> <span class="k">lambda</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">arrow</span><span class="o">.</span><span class="n">angle_left</span><span class="p">(),</span>
            <span class="s2">&quot;turn_right&quot;</span><span class="p">:</span> <span class="k">lambda</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">arrow</span><span class="o">.</span><span class="n">angle_right</span><span class="p">(),</span>
        <span class="p">}</span>
        <span class="n">action</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">input_handler</span><span class="o">.</span><span class="n">action</span><span class="p">(</span><span class="n">event</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">action</span><span class="p">:</span>
            <span class="n">actions</span><span class="p">[</span><span class="n">action</span><span class="p">[</span><span class="mi">0</span><span class="p">]]()</span>

<span class="k">class</span> <span class="nc">InputHandler</span><span class="p">:</span>

    <span class="k">def</span> <span class="nf">action</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">event</span><span class="o">.</span><span class="n">is_user_closed_window</span><span class="p">():</span>
            <span class="k">return</span> <span class="p">(</span><span class="s1">&#39;quit&#39;</span><span class="p">,)</span>
        <span class="k">elif</span> <span class="n">event</span><span class="o">.</span><span class="n">is_keydown_space</span><span class="p">()</span> <span class="ow">or</span> <span class="n">event</span><span class="o">.</span><span class="n">is_joystick_down</span><span class="p">(</span><span class="mi">0</span><span class="p">):</span>
            <span class="k">return</span> <span class="p">(</span><span class="s1">&#39;shoot&#39;</span><span class="p">,)</span>
        <span class="k">elif</span> <span class="n">event</span><span class="o">.</span><span class="n">is_keydown_left</span><span class="p">():</span>
            <span class="k">return</span> <span class="p">(</span><span class="s1">&#39;turn_left&#39;</span><span class="p">,)</span>
        <span class="k">elif</span> <span class="n">event</span><span class="o">.</span><span class="n">is_keydown_right</span><span class="p">():</span>
            <span class="k">return</span> <span class="p">(</span><span class="s1">&#39;turn_right&#39;</span><span class="p">,)</span>
</pre>
</div>
</div>
</div>
<p>In this design, the input handler returns the name of the action to perform. Then the game scene looks up that action, and if it finds it, runs it.</p>
<p>This makes the input handler easy to test, which was my goal.</p>
<p>The question is what to test in the game scene. I think I would like to test all cases here as well to make sure the right action names are used. So simulate any shooting event and make sure that flying arrows are added, and so on.</p>
<p>However, what if we use the keyboard event for that test, and then write our input handler like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">InputHandler</span><span class="p">:</span>

    <span class="k">def</span> <span class="nf">action</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">event</span><span class="o">.</span><span class="n">is_keydown_space</span><span class="p">():</span>
            <span class="k">return</span> <span class="p">(</span><span class="s1">&#39;shoot&#39;</span><span class="p">,)</span>
        <span class="k">elif</span> <span class="n">event</span><span class="o">.</span><span class="n">is_joystick_down</span><span class="p">(</span><span class="mi">0</span><span class="p">):</span>
            <span class="k">return</span> <span class="p">(</span><span class="s1">&#39;shot&#39;</span><span class="p">,)</span>
        <span class="o">...</span>
</pre>
</div>
</div>
</div>
<p>That is, we misspell the action name for the joystick case. We even misspell it in the input handler test. All tests will pass, but the arrow will not shoot when using the joystick.</p>
<p>Do we need to test all cases in the game scene to ensure that? I really don’t want to do that. The whole point of the input handler was to be able to test details of input handling in isolation.</p>
<p>That’s when I slowly moved in the direction that I presented first:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">GameScene</span><span class="p">(</span><span class="n">SpriteGroup</span><span class="p">):</span>

    <span class="o">...</span>

    <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">):</span>
        <span class="o">...</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">input_handler</span><span class="o">.</span><span class="n">get_shoot</span><span class="p">():</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">flying_arrows</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">bow</span><span class="o">.</span><span class="n">clone_shooting</span><span class="p">())</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">bow</span><span class="o">.</span><span class="n">turn</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">input_handler</span><span class="o">.</span><span class="n">get_turn_angle</span><span class="p">())</span>
</pre>
</div>
</div>
</div>
<p>In this design it is still possible for <code>get_shoot</code> to return an incorrect boolean value for the joystick. But the likelihood of that happening, I think, is much less than we misspell an action.</p>
<p>This design is also cleaner I think. No need for an “action language” where strings are mapped to actions to do.</p>
<h2 id="summary">Summary</h2>
<p>Testing is hard. You don’t want to test everything from the outside since that gives difficult to read tests. But you <em>do</em> want to test from the outside to make sure things actually work for real. So you need to make a tradeoff. I suspect there is no “right” answer. One measure you can use is this: are you worried that things are not working? Test more or test smarter.</p>
<p>With the first design of the input handler, I was worried that the input handler returned “invalid” actions. Instead of testing more from the outside, I modified the design to reduce my worry. I’m no longer worried that the input handler returns the wrong things. I feel better.</p>
<p>See you in the next episode!</p>
]]></description>
    <pubDate>Fri, 19 May 2023 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/agdpp-logitech-gamepad-f310/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>A case for the infrastructure wrapper</title>
    <link>http://rickardlindberg.me/writing/agdpp-wrapper-pygame-draw-circle-bug/</link>
    <description><![CDATA[<h1>A case for the infrastructure wrapper</h1>

<p><em>Published on 14 May 2023 in <a href="/projects/agdpp/index.html">Agile Game Development with Python and Pygame</a>.</em></p>

<p>I noticed something strange when playing the game.</p>
<p>When shooting arrows out the left side of the screen, a blue horizontal line is drawn. It looks something like this:</p>
<center>
<img src="negative-x-draw-bug.png" title="fig:" alt="Bug with drawing circles on negative x positions." />
</center>
<p>But it only shows for a split second and then disappears. What’s going on?</p>
<h2 id="troubleshooting">Troubleshooting</h2>
<p>We troubleshoot by playing the game and shooting wildly in different directions.</p>
<p>It seems like the blue horizontal line only appears when we shoot arrows to the left–not when we shoot up or to the right.</p>
<p>So why does it only show for a split second? Most likely because arrows outside the screen are removed. But they are only removed if they are far enough outside the screen. The idea is that arrows are only removed if they are completely outside the screen. However, I don’t think it’s working quite like that at the moment. But arrows can be partially outside the screen before being removed.</p>
<p>We modify the code to draw a static arrow just outside the screen to the left, and indeed the blue horizontal line stays on the screen forever. (That’s how I managed to get the screenshot. It was not timing.)</p>
<p>The problem can now be consistently reproduced. Good!</p>
<h2 id="bug-in-pygame">Bug in Pygame?</h2>
<p>At first I thought we might use Pygame wrong in some way. But now I’m starting to think that there might actually be an issue with Pygame.</p>
<p>Let’s ask DuckDuckGo.</p>
<p>It came back with this: <a href="https://github.com/pygame/pygame/issues/3778">Circles drawn using pygame.draw.circle with negative x positions are drawn as a horizontal line across the whole screen.</a></p>
<p>Ha! A bug in Pygame. It all makes sense now. And we are not at fault.</p>
<p>However, we still have an ugly, annoying graphics artifact in our game that we want to get rid of. How?</p>
<h2 id="infrastructure-to-the-rescue">Infrastructure to the rescue</h2>
<p>Any place in the code where we draw a circle we have to modify it to handle negative x values.</p>
<p>Let’s see how.</p>
<p>We have used the <a href="https://www.jamesshore.com/v2/projects/nullables/testing-without-mocks#infrastructure-wrappers">infrastructure wrapper</a> pattern in our game. That means that every time our code interacts with the outside world, it does so via an infrastructure wrapper.</p>
<p>Anytime we draw something on the screen, we do it via the game loop infrastructure wrapper. Here is how the arrow draws itself:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">Arrow</span><span class="p">:</span>

    <span class="o">...</span>

    <span class="k">def</span> <span class="nf">draw</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">loop</span><span class="p">):</span>
        <span class="n">v</span> <span class="o">=</span> <span class="n">Point</span><span class="o">.</span><span class="n">from_angle</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">angle</span> <span class="o">+</span> <span class="mi">180</span><span class="p">)</span>
        <span class="n">loop</span><span class="o">.</span><span class="n">draw_circle</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">position</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s2">&quot;blue&quot;</span><span class="p">,</span> <span class="n">radius</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
        <span class="n">loop</span><span class="o">.</span><span class="n">draw_circle</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">position</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">v</span><span class="o">.</span><span class="n">times</span><span class="p">(</span><span class="mi">20</span><span class="p">)),</span> <span class="n">color</span><span class="o">=</span><span class="s2">&quot;blue&quot;</span><span class="p">,</span> <span class="n">radius</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
        <span class="n">loop</span><span class="o">.</span><span class="n">draw_circle</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">position</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">v</span><span class="o">.</span><span class="n">times</span><span class="p">(</span><span class="mi">40</span><span class="p">)),</span> <span class="n">color</span><span class="o">=</span><span class="s2">&quot;blue&quot;</span><span class="p">,</span> <span class="n">radius</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p><code>draw_circle</code> above is part of the infrastructure wrapper. In code that we control. It in turn makes calls to Pygame like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">GameLoop</span><span class="p">(</span><span class="n">Observable</span><span class="p">):</span>

    <span class="o">...</span>

    <span class="k">def</span> <span class="nf">draw_circle</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">position</span><span class="p">,</span> <span class="n">radius</span><span class="o">=</span><span class="mi">40</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s2">&quot;red&quot;</span><span class="p">):</span>
        <span class="o">...</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">pygame</span><span class="o">.</span><span class="n">draw</span><span class="o">.</span><span class="n">circle</span><span class="p">(</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">screen</span><span class="p">,</span>
            <span class="n">color</span><span class="p">,</span>
            <span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">position</span><span class="o">.</span><span class="n">x</span><span class="p">),</span> <span class="nb">int</span><span class="p">(</span><span class="n">position</span><span class="o">.</span><span class="n">y</span><span class="p">)),</span>
            <span class="n">radius</span>
        <span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>So we are actually only calling Pygame’s <code>draw_circle</code> in one place in our code.</p>
<p>We patch it like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">GameLoop</span><span class="p">(</span><span class="n">Observable</span><span class="p">):</span>

    <span class="o">...</span>

    <span class="k">def</span> <span class="nf">draw_circle</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">position</span><span class="p">,</span> <span class="n">radius</span><span class="o">=</span><span class="mi">40</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s2">&quot;red&quot;</span><span class="p">):</span>
        <span class="o">...</span>
        <span class="k">if</span> <span class="n">position</span><span class="o">.</span><span class="n">x</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">:</span>
            <span class="c1"># https://github.com/pygame/pygame/issues/3778</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">pygame</span><span class="o">.</span><span class="n">draw</span><span class="o">.</span><span class="n">circle</span><span class="p">(</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">screen</span><span class="p">,</span>
                <span class="n">color</span><span class="p">,</span>
                <span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">position</span><span class="o">.</span><span class="n">x</span><span class="p">),</span> <span class="nb">int</span><span class="p">(</span><span class="n">position</span><span class="o">.</span><span class="n">y</span><span class="p">)),</span>
                <span class="n">radius</span>
            <span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>This means that circles drawn partially outside the screen to the left will not be drawn at all. Not ideal. But I very much prefer that to an annoying blue horizontal line.</p>
<p>And when I play the game, I don’t notice circles of the arrow disappearing a little to early. They move so fast anyway.</p>
<p>We could do something more fancy like checking for specific versions of Pygame where we know this bug exists. But this will do for now.</p>
<h2 id="summary">Summary</h2>
<p>We were able to fix an annoying graphics artifact by adding a single if-statement to our infrastructure wrapper.</p>
<p>Wrapping third party libraries might seem like unnecessary overhead sometimes, but the benefit shown in this episode makes me think that we should do it more often.</p>
<p>See you in the next episode!</p>
]]></description>
    <pubDate>Sun, 14 May 2023 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/agdpp-wrapper-pygame-draw-circle-bug/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>Turning arrow</title>
    <link>http://rickardlindberg.me/writing/agdpp-turning-arrow/</link>
    <description><![CDATA[<h1>Turning arrow</h1>

<p><em>Published on 12 May 2023 in <a href="/projects/agdpp/index.html">Agile Game Development with Python and Pygame</a>.</em></p>

<p>We have a basic version of a balloon shooter in place. We have a balloon moving across the screen and an arrow that can be shot and hit the balloon to score a point.</p>
<center>
<img src="points.png" title="fig:" alt="Arrow shooting straight." />
</center>
<p>When I play the game now, I want to turn the arrow. I think that will make the game a little more fun. Then you have to control both angle and timing instead of just timing to hit a balloon. (If we implement that balloons fall downwards instead, turning will also be necessary to hit balloons that are not straight above the arrow.)</p>
<h2 id="how-does-arrow-movement-work">How does arrow movement work?</h2>
<p>Arrows move first when we press the space key to shoot. Then we create a new arrow and set its shooting attribute to true:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">GameScene</span><span class="p">(</span><span class="n">SpriteGroup</span><span class="p">):</span>

    <span class="o">...</span>

    <span class="k">def</span> <span class="nf">event</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>
        <span class="o">...</span>
        <span class="k">elif</span> <span class="n">event</span><span class="o">.</span><span class="n">is_keydown_space</span><span class="p">():</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">flying_arrows</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Arrow</span><span class="p">(</span><span class="n">shooting</span><span class="o">=</span><span class="kc">True</span><span class="p">))</span>
</pre>
</div>
</div>
</div>
<p>An arrow that has the shooting attribute set to true moves like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">Arrow</span><span class="p">:</span>

    <span class="o">...</span>

    <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">):</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">shooting</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">position</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">position</span><span class="o">.</span><span class="n">move</span><span class="p">(</span><span class="n">dy</span><span class="o">=-</span><span class="n">dt</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>That is, it moves straight up in increments of <code>dt</code>. There is no concept of direction yet.</p>
<p>What we would like to have is some kind of direction attribute on the arrow that we can change. When we shoot, the arrow that we create should get that direction attribute so that it flies in the same direction that we aimed.</p>
<p>Let’s see if we can refactor towards that.</p>
<h2 id="clone-shooting">Clone shooting</h2>
<p>We start by creating a method <code>clone_shooting</code> on the arrow that should return a copy of itself (including all attributes) and have the shooting attribute set to true:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">Arrow</span><span class="p">:</span>

    <span class="o">...</span>

    <span class="k">def</span> <span class="nf">clone_shooting</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">Arrow</span><span class="p">(</span><span class="n">shooting</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">position</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">position</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>We modify how a flying arrow is added like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="gd">- self.flying_arrows.add(Arrow(shooting=True))</span>
<span class="gi">+ self.flying_arrows.add(self.arrow.clone_shooting())</span>
</pre>
</div>
</div>
</div>
<p>One change here is that we also clone the arrow’s position attribute. The position of the arrow is always the same. Only when we shoot it, it changes. But should we choose to move the arrow to a different start position, the code now takes that into account and places shooting arrows at the right start positions.</p>
<p>I think this is still a pure refactoring. There is no change in visible behavior, but the code is more robust because we can now change the start position of the arrow, and it will shoot from the right position without we having to modify any other piece of code. The design is better.</p>
<h2 id="work-towards-arrow-velocity">Work towards arrow velocity</h2>
<p>Next we take a small step towards having an arrow velocity. We change the update method to this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">Arrow</span><span class="p">:</span>

    <span class="o">...</span>

    <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">):</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">shooting</span><span class="p">:</span>
            <span class="n">velocity</span> <span class="o">=</span> <span class="n">Point</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">y</span><span class="o">=-</span><span class="n">dt</span><span class="p">)</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">position</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">position</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">velocity</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>Our relatively new <code>Point</code> class attracts more and more behavior. Here we added the <code>add</code> method:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">Point</span><span class="p">:</span>

    <span class="o">...</span>

    <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">point</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">        &gt;&gt;&gt; Point(0, 5).add(Point(1, 1))</span>
<span class="sd">        Point(1, 6)</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">move</span><span class="p">(</span><span class="n">dx</span><span class="o">=</span><span class="n">point</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">dy</span><span class="o">=</span><span class="n">point</span><span class="o">.</span><span class="n">y</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<h2 id="derive-velocity-from-angle">Derive velocity from angle</h2>
<p>Now we could modify the velocity of the arrow and the update method would move it in the right direction.</p>
<p>However, I think it is better if we have a concept of an arrow angle that we can adjust left and right. That would fit our use case better.</p>
<p>We add and angle attribute to the arrow and derive the velocity vector from it:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">Arrow</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">shooting</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span> <span class="n">position</span><span class="o">=</span><span class="n">Point</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">500</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mi">500</span><span class="p">)):</span>
        <span class="o">...</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">angle</span> <span class="o">=</span> <span class="o">-</span><span class="mi">90</span>

    <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">):</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">shooting</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">position</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">position</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Point</span><span class="o">.</span><span class="n">from_angle</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">angle</span><span class="p">)</span><span class="o">.</span><span class="n">times</span><span class="p">(</span><span class="n">dt</span><span class="p">))</span>

    <span class="o">...</span>
</pre>
</div>
</div>
</div>
<p>The <code>Point</code> class again attracts functionality. This time for converting angles to unit vectors (vectors of length one) and for magnifying vectors:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">Point</span><span class="p">:</span>

    <span class="o">...</span>

    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">from_angle</span><span class="p">(</span><span class="n">degrees</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">        &gt;&gt;&gt; p = Point.from_angle(-90)</span>
<span class="sd">        &gt;&gt;&gt; int(p.x)</span>
<span class="sd">        0</span>
<span class="sd">        &gt;&gt;&gt; int(p.y)</span>
<span class="sd">        -1</span>

<span class="sd">        &gt;&gt;&gt; p = Point.from_angle(0)</span>
<span class="sd">        &gt;&gt;&gt; int(p.x)</span>
<span class="sd">        1</span>
<span class="sd">        &gt;&gt;&gt; int(p.y)</span>
<span class="sd">        0</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="k">return</span> <span class="n">Point</span><span class="p">(</span>
            <span class="n">x</span><span class="o">=</span><span class="n">math</span><span class="o">.</span><span class="n">cos</span><span class="p">(</span><span class="n">math</span><span class="o">.</span><span class="n">radians</span><span class="p">(</span><span class="n">degrees</span><span class="p">)),</span>
            <span class="n">y</span><span class="o">=</span><span class="n">math</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="n">math</span><span class="o">.</span><span class="n">radians</span><span class="p">(</span><span class="n">degrees</span><span class="p">))</span>
        <span class="p">)</span>

    <span class="k">def</span> <span class="nf">times</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">magnification</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">        &gt;&gt;&gt; Point(1, 5).times(2)</span>
<span class="sd">        Point(2, 10)</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="k">return</span> <span class="n">Point</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">x</span><span class="o">*</span><span class="n">magnification</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">y</span><span class="o">*</span><span class="n">magnification</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<h2 id="base-drawing-on-angle">Base drawing on angle</h2>
<p>The arrow now moves correctly based on the angle, but it doesn’t draw its three circles correctly. It looks like this now:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">Arrow</span><span class="p">:</span>

    <span class="o">...</span>

    <span class="k">def</span> <span class="nf">draw</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">loop</span><span class="p">):</span>
        <span class="n">loop</span><span class="o">.</span><span class="n">draw_circle</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">position</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s2">&quot;blue&quot;</span><span class="p">,</span> <span class="n">radius</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
        <span class="n">loop</span><span class="o">.</span><span class="n">draw_circle</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">position</span><span class="o">.</span><span class="n">move</span><span class="p">(</span><span class="n">dy</span><span class="o">=</span><span class="mi">20</span><span class="p">),</span> <span class="n">color</span><span class="o">=</span><span class="s2">&quot;blue&quot;</span><span class="p">,</span> <span class="n">radius</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
        <span class="n">loop</span><span class="o">.</span><span class="n">draw_circle</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">position</span><span class="o">.</span><span class="n">move</span><span class="p">(</span><span class="n">dy</span><span class="o">=</span><span class="mi">40</span><span class="p">),</span> <span class="n">color</span><span class="o">=</span><span class="s2">&quot;blue&quot;</span><span class="p">,</span> <span class="n">radius</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>That is, it draws the second two circles by moving them downwards, assuming that the arrow is pointing up.</p>
<p>Let’s instead draw them offset by the opposite direction of what the arrow points:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">Arrow</span><span class="p">:</span>

    <span class="o">...</span>

    <span class="k">def</span> <span class="nf">draw</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">loop</span><span class="p">):</span>
        <span class="n">v</span> <span class="o">=</span> <span class="n">Point</span><span class="o">.</span><span class="n">from_angle</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">angle</span> <span class="o">+</span> <span class="mi">180</span><span class="p">)</span>
        <span class="n">loop</span><span class="o">.</span><span class="n">draw_circle</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">position</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s2">&quot;blue&quot;</span><span class="p">,</span> <span class="n">radius</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
        <span class="n">loop</span><span class="o">.</span><span class="n">draw_circle</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">position</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">v</span><span class="o">.</span><span class="n">times</span><span class="p">(</span><span class="mi">20</span><span class="p">)),</span> <span class="n">color</span><span class="o">=</span><span class="s2">&quot;blue&quot;</span><span class="p">,</span> <span class="n">radius</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
        <span class="n">loop</span><span class="o">.</span><span class="n">draw_circle</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">position</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">v</span><span class="o">.</span><span class="n">times</span><span class="p">(</span><span class="mi">40</span><span class="p">)),</span> <span class="n">color</span><span class="o">=</span><span class="s2">&quot;blue&quot;</span><span class="p">,</span> <span class="n">radius</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>We get the reverse angle by turning it 180 degrees.</p>
<p>Perhaps angle is another case of primitive obsession. If we had an angle class, we could have a <code>reverse</code> method that did this and we would no longer be required to know about degrees (the angle could be implemented with radians instead for example). We make a note about that.</p>
<p>Anyway, we can change the angle attribute of the arrow and it will fly in the right direction and draw correctly. Now there is only one thing left: control the angle with arrow keys.</p>
<h2 id="changing-angle-with-leftright">Changing angle with left/right</h2>
<p>Here is the test we write for changing arrow angle:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">&gt;&gt;&gt; game = GameScene(space)</span>
<span class="sd">&gt;&gt;&gt; game.get_arrow_angle()</span>
<span class="sd">-90</span>
<span class="sd">&gt;&gt;&gt; game.event(GameLoop.create_event_keydown_left())</span>
<span class="sd">&gt;&gt;&gt; game.get_arrow_angle()</span>
<span class="sd">-95</span>
<span class="sd">&gt;&gt;&gt; game.event(GameLoop.create_event_keydown_right())</span>
<span class="sd">&gt;&gt;&gt; game.get_arrow_angle()</span>
<span class="sd">-90</span>
<span class="sd">&quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<p>For this to work we need to create new event wrappers for keydown left/right and add a getter to expose the arrow angle. We have done similar things before. Same procedure this time.</p>
<p>We make it pass by handling the events and changing the angle:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">GameScene</span><span class="p">(</span><span class="n">SpriteGroup</span><span class="p">):</span>

    <span class="o">...</span>

    <span class="k">def</span> <span class="nf">event</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>
        <span class="o">...</span>
        <span class="k">elif</span> <span class="n">event</span><span class="o">.</span><span class="n">is_keydown_left</span><span class="p">():</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">arrow</span><span class="o">.</span><span class="n">angle_left</span><span class="p">()</span>
        <span class="k">elif</span> <span class="n">event</span><span class="o">.</span><span class="n">is_keydown_right</span><span class="p">():</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">arrow</span><span class="o">.</span><span class="n">angle_right</span><span class="p">()</span>
</pre>
</div>
</div>
</div>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">Arrow</span><span class="p">:</span>

    <span class="o">...</span>

    <span class="k">def</span> <span class="nf">angle_left</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">angle</span> <span class="o">-=</span> <span class="mi">5</span>

    <span class="k">def</span> <span class="nf">angle_right</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">angle</span> <span class="o">+=</span> <span class="mi">5</span>
</pre>
</div>
</div>
</div>
<p>This almost works, but when we turn and arrow and shoot it, it still goes straight up. We need to fix the <code>clone_shooting</code> method to also clone the angle.</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">Arrow</span><span class="p">:</span>

    <span class="o">...</span>

    <span class="k">def</span> <span class="nf">clone_shooting</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">        It preserves position and angle and set it to shooting:</span>

<span class="sd">        &gt;&gt;&gt; arrow = Arrow(position=Point(x=5, y=5), angle=-45)</span>
<span class="sd">        &gt;&gt;&gt; new_arrow = arrow.clone_shooting()</span>
<span class="sd">        &gt;&gt;&gt; new_arrow.get_position()</span>
<span class="sd">        (5, 5)</span>
<span class="sd">        &gt;&gt;&gt; new_arrow.angle</span>
<span class="sd">        -45</span>
<span class="sd">        &gt;&gt;&gt; new_arrow.shooting</span>
<span class="sd">        True</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="k">return</span> <span class="n">Arrow</span><span class="p">(</span><span class="n">shooting</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">position</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">position</span><span class="p">,</span> <span class="n">angle</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">angle</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<h2 id="result">Result</h2>
<p>Now we can turn the arrow with left/right keys and shoot it in different directions. It looks like this:</p>
<center>
<img src="turning-arrow.png" title="fig:" alt="Turning arrow." />
</center>
<p>If you want to try it out, the full source code from this episode on <a href="https://github.com/rickardlindberg/agdpp/tree/turning-arrow">GitHub</a>.</p>
<h2 id="summary">Summary</h2>
<p>Testing continues to go smooth with state based testing and getters to expose internal state.</p>
<p>What I like to do after implementing a feature is to take a break and then come back later to review to code for possible improvements. Often times it is small things like renaming a variable to make it more clear. In this episode we also noted that angle might benefit being wrapped in an abstraction. Not sure they are too interesting to write about. Let me know if you think otherwise.</p>
<p>See you in the next episode!</p>
]]></description>
    <pubDate>Fri, 12 May 2023 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/agdpp-turning-arrow/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>

    </channel>
</rss>
