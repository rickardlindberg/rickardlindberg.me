<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>Rickard's personal homepage: latest posts</title>
        <link>http://rickardlindberg.me</link>
        <description><![CDATA[Rickard's personal homepage: latest posts]]></description>
        <atom:link href="http://rickardlindberg.me/rss.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Thu, 01 Aug 2024 00:00:00 UT</lastBuildDate>
        <item>
    <title>Newsletter July 2024: Note Making Re-Visited</title>
    <link>http://rickardlindberg.me/writing/newsletter/july-2024/</link>
    <description><![CDATA[<h1>Newsletter July 2024: Note Making Re-Visited</h1>

<p><em>Published on  1 August 2024.</em></p>

<p>July means vacation. Vacation means more time for recreational activities and working on things I enjoy.</p>
<p>For the recreational part, I’ve spend a lot of time away from the computer. One thing I’ve been doing quite a lot more is running. Here I am participating in a trail race:</p>
<center>
<p>
<img src="/writing/newsletter/july-2024/kolmarden.jpg">
</p>
</center>
<p>For the working on things I enjoy part, I’ve done some development on my note taking application and practiced taking better notes. I also managed to finish up an old blog post.</p>
<h2 id="note-taking-application">Note Taking Application</h2>
<p>In 2020 I read the book <em>How to Take Smart Notes</em> by Sönke Ahrens. It describes a specific way to take notes with the intent to turn those notes into new texts. I wanted a program that closely mimicked this method but couldn’t find one. So I set out to create my own. You can see a demo of it in this video that I made in 2021:</p>
<center>
<iframe width="560" height="315" src="https://www.youtube.com/embed/Xh2bik1cOl0" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write;
encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen>
</iframe>
</center>
<p>This month my interest for smart notes resurfaced. I use the program regularly, but I find that I mostly collect notes, and don’t do much with them. I read more about the approach in the book and in articles I found online. And in my own notes. I made some small improvements to my program to better support the smart notes workflow. I made text rendering more pretty and added the ability to color notes differently depending on the kind of note.</p>
<h2 id="literate-programming">Literate Programming</h2>
<p>Then I thought I should practice actually producing some text from my notes. One area of interest to me is literate programming. I started collecting notes on the topic, organizing them in my program, reading more articles about literate programming, and taking more notes. Here is a current snapshot:</p>
<center>
<p>
<img
src="/writing/newsletter/july-2024/smartnotes.png">
</p>
</center>
<p>I though I would write a blog post about literate programming. So I started to build a table of contents out of my different notes. But when I did that, I found that I couldn’t piece together a narrative. But I did find another possible narrative that includes topics from literate programming.</p>
<p>I hope this process will eventually generate a few blog posts as output.</p>
<h2 id="one-file-programs">One-File Programs</h2>
<p>One idea that came from the literate programming research is what I call one-file programs. I asked myself what makes programs easier to read and understand. I though of these characteristics:</p>
<ul>
<li><p>Small: Fits in a single file</p></li>
<li><p>Standalone: With as few dependencies as possible</p></li>
<li><p>Custom for me: fork and make changes for yourself</p></li>
</ul>
<p>I’m currently experimenting with writing such programs, and you can find the repo here: <a href="https://github.com/rickardlindberg/one-file-programs">one-file-programs repo</a>.</p>
<p>This style of programming is also inspired by <a href="https://akkartik.name/freewheeling/">freewheeling apps</a> that I wrote about in the <a href="/writing/newsletter/june-2024/index.html">June newsletter</a>.</p>
<h2 id="output-tracking-vs-mocks">Output Tracking vs Mocks</h2>
<p>I also finished the blog post about <a href="/writing/output-tracking-vs-mocks/index.html">Output Tracking vs Mocks</a>. I started writing it many months ago, and then my motivation dropped, so I’m glad I managed to finish it.</p>
<p>As most of the times, writing about the topic helped me clarify my thinking about it and I learned something new. That’s the main reason that I write.</p>
<p>I also got some <a href="https://discord.com/channels/897648912851173408/1266778182934073365">feedback</a> on Discord.</p>
<h2 id="inventing-on-principle">Inventing on Principle</h2>
<p>I re-watched parts of <a href="https://www.youtube.com/watch?v=PUv66718DII">Inventing on Principle</a> by Bret Victor.</p>
<p>I was reminded that creators need to be able to see what they are doing without any mental mapping.</p>
<p>That is why one problem with literate programming is the mental burden of double compilation. You can’t run your debugger on the literate source, so you have to first compile it, and then do the mental mapping in the debugger.</p>
<p>This mental burden of course exists for regular programs as well. You have to imagine what the source code instructions would do.</p>
<p>A live system, like Smalltalk, is better in this regard. I want to explore more how to incorporate liveness in programming.</p>
]]></description>
    <pubDate>Thu, 01 Aug 2024 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/newsletter/july-2024/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>Output Tracking vs Mocks</title>
    <link>http://rickardlindberg.me/writing/output-tracking-vs-mocks/</link>
    <description><![CDATA[<h1>Output Tracking vs Mocks</h1>

<p><em>Published on 26 July 2024.</em></p>

<p>In this blog post we’re going to explore how to write and test a Git client using the <a href="https://www.jamesshore.com/v2/projects/nullables/testing-without-mocks">Testing Without Mocks</a> approach. Specifically we’re going to explore how to apply <a href="https://www.jamesshore.com/v2/projects/nullables/testing-without-mocks#output-tracking">Output Tracking</a> to this example and also contrast it with mocks. All details about the example are not explained, but the full source code is included at the end. Check out James’ article for more details about the testing without mocks approach.</p>
<h2 id="example-git-client">Example Git client</h2>
<p>The example Git client is a CLI-application that provides a simplified interface to Git. This represents a <a href="https://gut-cli.dev/">real world scenario</a> yet can be made small enough for an example.</p>
<p>The application implements two commands:</p>
<pre><code>myscm save  -&gt; git commit

myscm share -&gt; git push</code></pre>
<h2 id="architecture">Architecture</h2>
<p>The application consists of the following classes:</p>
<pre><code>App --+--&gt; SaveCommand ---&gt; Process
      |
      +--&gt; ShareCommand --&gt; Process
      |
      +--&gt; Args
      |
      +--&gt; Terminal</code></pre>
<ul>
<li><p><code>Process</code>, <code>Args</code>, and <code>Terminal</code> are low-level <a href="https://www.jamesshore.com/v2/projects/nullables/testing-without-mocks#infrastructure-wrappers">infrastructure wrappers</a> that are made <a href="https://www.jamesshore.com/v2/projects/nullables/testing-without-mocks#nullables">nullable</a> using <a href="https://www.jamesshore.com/v2/projects/nullables/testing-without-mocks#embedded-stub">embedded stubs</a>.</p>
<ul>
<li><code>Process</code> is for running external processes. (<code>git</code> in this example.)</li>
<li><code>Args</code> is for reading command line arguments.</li>
<li><code>Terminal</code> is for writing text to the terminal.</li>
</ul></li>
<li><p><code>SaveCommand</code> and <code>ShareCommand</code> are application code that perform a function in the domain of a Git client. They are made nullable using <a href="https://www.jamesshore.com/v2/projects/nullables/testing-without-mocks#fake-it">fake it once you make it</a>.</p></li>
<li><p><code>App</code> is also application code that routes commands to the correct sub-command. It is also made nullable using “fake it once you make it”.</p></li>
</ul>
<h2 id="how-to-test-app">How to test <code>App</code>?</h2>
<p>We want to write sociable, state-based test.</p>
<p>What does that mean in the context of testing <code>App</code>?</p>
<p>Sociable means that we should use its real dependencies. That is, we should inject a real <code>SaveCommand</code>, <code>ShareCommand</code>, <code>Args</code>, and <code>Terminal</code>. We should not inject test doubles like mocks or stubs.</p>
<p>So the test setup will look something like this:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; app = App(</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a><span class="co">...     save_command=SaveCommand(...),</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a><span class="co">...     share_command=ShareCommand(...),</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a><span class="co">...     terminal=Terminal(...),</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true"></a><span class="co">...     args=Args(...),</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true"></a><span class="co">... )</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>However, if we were to invoke methods on <code>app</code> now, it would interact with the outside world. It would read command line arguments, execute <code>git</code> commands, and write to the terminal.</p>
<p>We don’t want to do that. It takes a long time and is brittle. We therefore inject null versions of dependencies like this:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; app = App(</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a><span class="co">...     save_command=SaveCommand.create_null(),</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a><span class="co">...     share_command=ShareCommand.create_null(),</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true"></a><span class="co">...     terminal=Terminal.create_null(),</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true"></a><span class="co">...     args=Args.create_null(),</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true"></a><span class="co">... )</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>Creating a null version is exactly like creating a real version except that at the very edge of the application boundary, the communication with the outside world is turned off. We put this in a factory-method:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="kw">class</span> App:</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a>    <span class="at">@classmethod</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true"></a>    <span class="kw">def</span> create_null(cls):</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true"></a>        <span class="cf">return</span> cls(</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true"></a>            save_command<span class="op">=</span>SaveCommand.create_null(),</span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true"></a>            share_command<span class="op">=</span>ShareCommand.create_null(),</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true"></a>            terminal<span class="op">=</span>Terminal.create_null(),</span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true"></a>            args<span class="op">=</span>Args.create_null(),</span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true"></a>        )</span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true"></a></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true"></a>    ...</span></code></pre></div>
<p><code>App</code> has only one method, and that is <code>run</code>:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="kw">def</span> run(<span class="va">self</span>):</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a>    ...</span></code></pre></div>
<p>So the only test we can write is this:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; app = App.create_null()</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; app.run()</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>There is no way to control what the command line arguments are, and there is no way to observe what the application is doing.</p>
<p>Here are two scenarios that would be useful to test:</p>
<ul>
<li><p>When the application is called with <code>["save", "message"]</code>, then git commit is performed.</p></li>
<li><p>When the application is called with <code>["share"]</code>, then git push is performed.</p></li>
</ul>
<p>In order to write those test, we need a way to control the outside world to simulate that a given set of command line arguments are present. We also need a way to observe what commands are run.</p>
<p>We can solve the first part by passing simulated command line arguments to <code>create_null</code>. The test then becomes this:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; app = App.create_null(args=[&quot;save&quot;, &quot;message&quot;])</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; app.run()</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p><code>App.create_null</code> is modified to this:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true"></a><span class="kw">class</span> App:</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true"></a></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true"></a>    <span class="at">@classmethod</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true"></a>    <span class="kw">def</span> create_null(cls, args):</span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true"></a>        <span class="cf">return</span> cls(</span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true"></a>            save_command<span class="op">=</span>SaveCommand.create_null(),</span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true"></a>            share_command<span class="op">=</span>ShareCommand.create_null(),</span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true"></a>            terminal<span class="op">=</span>Terminal.create_null(),</span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true"></a>            args<span class="op">=</span>Args.create_null(args<span class="op">=</span>args),</span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true"></a>        )</span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true"></a></span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true"></a>    ...</span></code></pre></div>
<p><code>Args</code> supports <a href="https://www.jamesshore.com/v2/projects/nullables/testing-without-mocks#configurable-responses">configuring responses</a> when creating the null version. In that case it would return the configured command line arguments instead of the real ones. The communication with the outside world has been turned off, and we simulate the part of the outside world that reads command line arguments from the environment.</p>
<p>Now we can write our two scenarios like this:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; app = App.create_null(args=[&quot;save&quot;, &quot;message&quot;])</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; app.run()</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true"></a><span class="co"># How to assert that git commit was called?</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true"></a></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; app = App.create_null(args=[&quot;share&quot;])</span></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; app.run()</span></span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true"></a><span class="co"># How to assert that git push was called?</span></span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>And now we come to the main topic of this blog post: output tracking.</p>
<p><code>App</code> performs actions by delegating to <code>SaveCommand</code> and <code>ShareCommand</code>. Both of them take the rest of the command line arguments and perform an action without returning anything. To observe that with output tracking, we introduce state in the commands so that we can query them and see if they were run. A slightly more elegant solution, instead of introducing state, is to fire events. Here is how we implement it in <code>SaveCommand</code>:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true"></a><span class="kw">class</span> SaveCommand(Trackable):</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true"></a></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true"></a>    <span class="kw">def</span> run(<span class="va">self</span>, args):</span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true"></a>        <span class="va">self</span>.notify(<span class="ss">f&quot;SAVE_COMMAND </span><span class="sc">{</span>args<span class="sc">!r}</span><span class="ss">&quot;</span>)</span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true"></a>        ...</span></code></pre></div>
<p>To track events, we can do this:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; events = Events()</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; SaveCommand.create_null().track_events(events).run([&quot;message&quot;])</span></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; events</span></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true"></a><span class="co">SAVE_COMMAND [&#39;message&#39;]</span></span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>We use the event tracking pattern for both commands and the terminal like this:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true"></a><span class="kw">class</span> App:</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true"></a></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true"></a>    <span class="at">@classmethod</span></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true"></a>    <span class="kw">def</span> create_null(cls, events, args):</span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true"></a>        <span class="cf">return</span> cls(</span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true"></a>            save_command<span class="op">=</span>SaveCommand.create_null().track_events(events),</span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true"></a>            share_command<span class="op">=</span>ShareCommand.create_null().track_events(events),</span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true"></a>            terminal<span class="op">=</span>Terminal.create_null().track_events(events),</span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true"></a>            args<span class="op">=</span>Args.create_null(args<span class="op">=</span>args),</span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true"></a>        )</span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true"></a></span>
<span id="cb13-12"><a href="#cb13-12" aria-hidden="true"></a>    ...</span></code></pre></div>
<p>And now we can write our tests like this:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; events = Events()</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; App.create_null(events, args=[&quot;save&quot;, &quot;message&quot;]).run()</span></span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; events</span></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true"></a><span class="co">SAVE_COMMAND [&#39;message&#39;]</span></span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true"></a></span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; events = Events()</span></span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; App.create_null(events, args=[&quot;share&quot;]).run()</span></span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; events</span></span>
<span id="cb14-10"><a href="#cb14-10" aria-hidden="true"></a><span class="co">SHARE_COMMAND []</span></span>
<span id="cb14-11"><a href="#cb14-11" aria-hidden="true"></a></span>
<span id="cb14-12"><a href="#cb14-12" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; events = Events()</span></span>
<span id="cb14-13"><a href="#cb14-13" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; App.create_null(events, args=[&quot;unknown&quot;, &quot;sub&quot;, &quot;command&quot;]).run()</span></span>
<span id="cb14-14"><a href="#cb14-14" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; events</span></span>
<span id="cb14-15"><a href="#cb14-15" aria-hidden="true"></a><span class="co">TERMINAL_WRITE &#39;Unknown command.&#39;</span></span>
<span id="cb14-16"><a href="#cb14-16" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>The implementation looks like this:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true"></a><span class="kw">def</span> run(<span class="va">self</span>):</span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true"></a>    args <span class="op">=</span> <span class="va">self</span>.args.get()</span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true"></a>    <span class="cf">if</span> args[<span class="dv">0</span>:<span class="dv">1</span>] <span class="op">==</span> [<span class="st">&quot;save&quot;</span>]:</span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true"></a>        <span class="va">self</span>.save_command.run(args[<span class="dv">1</span>:])</span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true"></a>    <span class="cf">elif</span> args[<span class="dv">0</span>:<span class="dv">1</span>] <span class="op">==</span> [<span class="st">&quot;share&quot;</span>]:</span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true"></a>        <span class="va">self</span>.share_command.run([])</span>
<span id="cb15-7"><a href="#cb15-7" aria-hidden="true"></a>    <span class="cf">else</span>:</span>
<span id="cb15-8"><a href="#cb15-8" aria-hidden="true"></a>        <span class="va">self</span>.terminal.write(<span class="st">&quot;Unknown command.&quot;</span>)</span></code></pre></div>
<h2 id="reflections">Reflections</h2>
<p>The tests for <code>App</code> are similar to end-to-end-test in that the whole stack is executed. Except right at the application boundary. So if we supply incorrect arguments to the save command for example, this test will blow up:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; App.create_null(Events(), args=[&quot;save&quot;]).run()</span></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true"></a><span class="co">Traceback (most recent call last):</span></span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true"></a><span class="co">  ...</span></span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true"></a><span class="co">ValueError: Expected one argument as the message, but got [].</span></span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>This is overlapping, sociable testing. We are actually testing that <code>App</code> calls <code>SaveCommand</code> correctly. However, the behavior of the save command is not tested here. We only test that application parses command line arguments correctly and calls the appropriate sub-command.</p>
<h2 id="the-mock-version">The Mock version</h2>
<p>Let’s contrast how the first test can be written using mocks and stubs instead. Here it is again:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; events = Events()</span></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; App.create_null(events, args=[&quot;save&quot;, &quot;message&quot;]).run()</span></span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; events</span></span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true"></a><span class="co">SAVE_COMMAND [&#39;message&#39;]</span></span>
<span id="cb17-6"><a href="#cb17-6" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>And here is the mock/stub version:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; save_command_mock = Mock()</span></span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; App(</span></span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true"></a><span class="co">...     save_command=save_command_mock,</span></span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true"></a><span class="co">...     share_command=None,</span></span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true"></a><span class="co">...     terminal=None,</span></span>
<span id="cb18-7"><a href="#cb18-7" aria-hidden="true"></a><span class="co">...     args=Mock(**{&quot;get.return_value&quot;: [&quot;save&quot;, &quot;message&quot;]})</span></span>
<span id="cb18-8"><a href="#cb18-8" aria-hidden="true"></a><span class="co">... ).run()</span></span>
<span id="cb18-9"><a href="#cb18-9" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; save_command_mock.run.call_args_list</span></span>
<span id="cb18-10"><a href="#cb18-10" aria-hidden="true"></a><span class="co">[call([&#39;message&#39;])]</span></span>
<span id="cb18-11"><a href="#cb18-11" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>The share command and terminal are not exercised in this test, so we inject <code>None</code>. For <code>args</code> we inject a stub that is configured to return <code>["save", "message"]</code> when its <code>get</code> method is called. For the <code>save_command</code>, we inject a mock. After we call the <code>run</code> method on the application, we assert that the <code>run</code> method was called on the mock with the <code>['message']</code> argument.</p>
<p>Let’s contrast the two assertions:</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; events</span></span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true"></a><span class="co">SAVE_COMMAND [&#39;message&#39;]</span></span>
<span id="cb19-4"><a href="#cb19-4" aria-hidden="true"></a></span>
<span id="cb19-5"><a href="#cb19-5" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; save_command_mock.run.call_args_list</span></span>
<span id="cb19-6"><a href="#cb19-6" aria-hidden="true"></a><span class="co">[call([&#39;message&#39;])]</span></span>
<span id="cb19-7"><a href="#cb19-7" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>They look very similar. Almost to the point that output tracking feels like mocking.</p>
<p>But there is one crucial difference:</p>
<p><strong>The mock version creates isolated tests whereas the output tracking version creates sociable tests.</strong></p>
<p>We have already seen what happens in the output tracking version when we call the save command with incorrect arguments. What happens in the mock based version? It happily passes:</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; save_command_mock = Mock()</span></span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; App(</span></span>
<span id="cb20-4"><a href="#cb20-4" aria-hidden="true"></a><span class="co">...     save_command=save_command_mock,</span></span>
<span id="cb20-5"><a href="#cb20-5" aria-hidden="true"></a><span class="co">...     share_command=None,</span></span>
<span id="cb20-6"><a href="#cb20-6" aria-hidden="true"></a><span class="co">...     terminal=None,</span></span>
<span id="cb20-7"><a href="#cb20-7" aria-hidden="true"></a><span class="co">...     args=Mock(**{&quot;get.return_value&quot;: [&quot;save&quot;]})</span></span>
<span id="cb20-8"><a href="#cb20-8" aria-hidden="true"></a><span class="co">... ).run()</span></span>
<span id="cb20-9"><a href="#cb20-9" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; save_command_mock.run.call_args_list</span></span>
<span id="cb20-10"><a href="#cb20-10" aria-hidden="true"></a><span class="co">[call([])]</span></span>
<span id="cb20-11"><a href="#cb20-11" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>To make the mock based test suite “equivalently powerful” we need to augment it with “contract tests”. In this case we need a test saying something like when the save command is called with no arguments, it does not blow up. And we have to write such tests for every example in our test suite. When we assert that a dependency is called in a certain way or returns a certain thing under certain conditions, we also have to write a “contract test” that checks that the dependency can actually accept those arguments and return those things under said conditions. That seems like a whole lot more work to me. (I think the term “contract test” is mostly used in the context of external services, but I think the reasoning is the same for two classes where one is a dependency. That’s how J.B. Rainsberger uses the term in <a href="https://youtu.be/VDfX44fZoMc?si=aqwG_mTe_ZPmu-kk&amp;t=2315">J B Rainsberger Integrated Tests Are A Scam HD</a> and <a href="https://blog.thecodewhisperer.com/permalink/getting-started-with-contract-tests">Getting Started with Contract Tests</a>.)</p>
<h2 id="recording-function-calls-vs-actions">Recording function calls vs actions</h2>
<p>Another more subtle difference between output tracking and mocks is that output tracking tracks the action that was performed whereas mocks record function calls.</p>
<p>Here are the two assertions again:</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; events</span></span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true"></a><span class="co">SAVE_COMMAND [&#39;message&#39;]</span></span>
<span id="cb21-4"><a href="#cb21-4" aria-hidden="true"></a></span>
<span id="cb21-5"><a href="#cb21-5" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; save_command_mock.run.call_args_list</span></span>
<span id="cb21-6"><a href="#cb21-6" aria-hidden="true"></a><span class="co">[call([&#39;message&#39;])]</span></span>
<span id="cb21-7"><a href="#cb21-7" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>The save command emits an event that indicates that the save action was performed with the given arguments. We are free to rename individual functions and the test will still pass.</p>
<p>In the mock version we explicitly check that the <code>run</code> method was called. If we want to rename it, we have to update the test as well.</p>
<p>I struggle a bit with this difference. I think in most cases, the function call and the event should contain the same information.</p>
<p>I <a href="https://hachyderm.io/@rickardlindberg/112174367523991295">asked</a> James about this:</p>
<blockquote>
<p>I have a question regarding output tracking.</p>
<p>“Output Trackers should write objects that represent the action that was performed, not just the function that was called to perform it.”</p>
<p>Shouldn’t those in most cases be very similar? I mean, the name of a function should match what it does, right? Sure, you can refactor them separately, but wouldn’t you often want to rename the object written if you rename the function?</p>
</blockquote>
<p>He replied</p>
<blockquote>
<p>It’s really a prescription against treating the tracker as a Spy that records the function name and arguments. You should be able to refactor the API without feeling like you have to change the tracker, as long as behavior remains the same.</p>
</blockquote>
<p>I can see cases where tracking events can be a little more flexible. Take this logging class for example:</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true"></a><span class="kw">class</span> Logger:</span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true"></a></span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true"></a>    <span class="kw">def</span> info(<span class="va">self</span>, message):</span>
<span id="cb22-4"><a href="#cb22-4" aria-hidden="true"></a>        <span class="va">self</span>.log(<span class="st">&quot;INFO&quot;</span>, message)</span>
<span id="cb22-5"><a href="#cb22-5" aria-hidden="true"></a></span>
<span id="cb22-6"><a href="#cb22-6" aria-hidden="true"></a>    <span class="kw">def</span> error(<span class="va">self</span>, message):</span>
<span id="cb22-7"><a href="#cb22-7" aria-hidden="true"></a>        <span class="va">self</span>.log(<span class="st">&quot;ERROR&quot;</span>, message)</span>
<span id="cb22-8"><a href="#cb22-8" aria-hidden="true"></a></span>
<span id="cb22-9"><a href="#cb22-9" aria-hidden="true"></a>    <span class="kw">def</span> log(<span class="va">self</span>, level, message):</span>
<span id="cb22-10"><a href="#cb22-10" aria-hidden="true"></a>        <span class="va">self</span>.notify(<span class="ss">f&quot;LOG </span><span class="sc">{</span>level<span class="sc">}</span><span class="ss"> </span><span class="sc">{</span>message<span class="sc">}</span><span class="ss">&quot;</span>)</span>
<span id="cb22-11"><a href="#cb22-11" aria-hidden="true"></a>        ...</span></code></pre></div>
<p>In application code you call <code>info</code> and <code>error</code>. But in tests you don’t need to care about which exact method was called. Only that the relevant <code>LOG ...</code> event was emitted.</p>
<p>Perhaps the <code>SAVE_COMMAND</code> event should not include raw arguments? Here is the implementation:</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true"></a><span class="kw">def</span> run(<span class="va">self</span>, args):</span>
<span id="cb23-2"><a href="#cb23-2" aria-hidden="true"></a>    <span class="va">self</span>.notify(<span class="ss">f&quot;SAVE_COMMAND </span><span class="sc">{</span>args<span class="sc">!r}</span><span class="ss">&quot;</span>)</span>
<span id="cb23-3"><a href="#cb23-3" aria-hidden="true"></a>    <span class="cf">if</span> <span class="bu">len</span>(args) <span class="op">!=</span> <span class="dv">1</span>:</span>
<span id="cb23-4"><a href="#cb23-4" aria-hidden="true"></a>        <span class="cf">raise</span> <span class="pp">ValueError</span>(<span class="ss">f&quot;Expected one argument as the message, but got </span><span class="sc">{</span>args<span class="sc">!r}</span><span class="ss">.&quot;</span>)</span>
<span id="cb23-5"><a href="#cb23-5" aria-hidden="true"></a>    <span class="va">self</span>.process.run([<span class="st">&quot;git&quot;</span>, <span class="st">&quot;commit&quot;</span>, <span class="st">&quot;-a&quot;</span>, <span class="st">&quot;-m&quot;</span>, args[<span class="dv">0</span>]])</span></code></pre></div>
<p>Perhaps it makes more sense to record the event with an explicit message like this?</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true"></a><span class="kw">def</span> run(<span class="va">self</span>, args):</span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true"></a>    <span class="cf">if</span> <span class="bu">len</span>(args) <span class="op">!=</span> <span class="dv">1</span>:</span>
<span id="cb24-3"><a href="#cb24-3" aria-hidden="true"></a>        <span class="cf">raise</span> <span class="pp">ValueError</span>(<span class="ss">f&quot;Expected one argument as the message, but got </span><span class="sc">{</span>args<span class="sc">!r}</span><span class="ss">.&quot;</span>)</span>
<span id="cb24-4"><a href="#cb24-4" aria-hidden="true"></a>    message <span class="op">=</span> args[<span class="dv">0</span>]</span>
<span id="cb24-5"><a href="#cb24-5" aria-hidden="true"></a>    <span class="va">self</span>.notify(<span class="ss">f&quot;SAVE_COMMAND message=</span><span class="sc">{</span>message<span class="sc">}</span><span class="ss">&quot;</span>)</span>
<span id="cb24-6"><a href="#cb24-6" aria-hidden="true"></a>    <span class="va">self</span>.process.run([<span class="st">&quot;git&quot;</span>, <span class="st">&quot;commit&quot;</span>, <span class="st">&quot;-a&quot;</span>, <span class="st">&quot;-m&quot;</span>, message])</span></code></pre></div>
<p>An assertion would then look like this:</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb25-2"><a href="#cb25-2" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; events</span></span>
<span id="cb25-3"><a href="#cb25-3" aria-hidden="true"></a><span class="co">SAVE_COMMAND message=message</span></span>
<span id="cb25-4"><a href="#cb25-4" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>Is this event more relevant from the point of view of the caller? Maybe. In any case, the event approach is more flexible compared to the mock version.</p>
<h2 id="more-on-output-tracking">More on output tracking</h2>
<ul>
<li><p><a href="/writing/how-to-test-a-router/index.html">How to test a router?</a></p></li>
<li><p><a href="https://www.jamesshore.com/v2/projects/nullables/how-are-nullables-different-from-mocks">How Are Nullables Different From Mocks?</a></p></li>
</ul>
<h2 id="appendix-myscm.py">Appendix: myscm.py</h2>
<div class="sourceCode" id="cb26"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true"></a><span class="co">#!/usr/bin/env python</span></span>
<span id="cb26-2"><a href="#cb26-2" aria-hidden="true"></a></span>
<span id="cb26-3"><a href="#cb26-3" aria-hidden="true"></a><span class="im">from</span> unittest.mock <span class="im">import</span> Mock</span>
<span id="cb26-4"><a href="#cb26-4" aria-hidden="true"></a><span class="im">import</span> doctest</span>
<span id="cb26-5"><a href="#cb26-5" aria-hidden="true"></a><span class="im">import</span> subprocess</span>
<span id="cb26-6"><a href="#cb26-6" aria-hidden="true"></a><span class="im">import</span> sys</span>
<span id="cb26-7"><a href="#cb26-7" aria-hidden="true"></a></span>
<span id="cb26-8"><a href="#cb26-8" aria-hidden="true"></a><span class="kw">class</span> Trackable:</span>
<span id="cb26-9"><a href="#cb26-9" aria-hidden="true"></a></span>
<span id="cb26-10"><a href="#cb26-10" aria-hidden="true"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>):</span>
<span id="cb26-11"><a href="#cb26-11" aria-hidden="true"></a>        <span class="va">self</span>.events <span class="op">=</span> []</span>
<span id="cb26-12"><a href="#cb26-12" aria-hidden="true"></a></span>
<span id="cb26-13"><a href="#cb26-13" aria-hidden="true"></a>    <span class="kw">def</span> track_events(<span class="va">self</span>, events):</span>
<span id="cb26-14"><a href="#cb26-14" aria-hidden="true"></a>        <span class="cf">if</span> events:</span>
<span id="cb26-15"><a href="#cb26-15" aria-hidden="true"></a>            <span class="va">self</span>.events.append(events)</span>
<span id="cb26-16"><a href="#cb26-16" aria-hidden="true"></a>        <span class="cf">return</span> <span class="va">self</span></span>
<span id="cb26-17"><a href="#cb26-17" aria-hidden="true"></a></span>
<span id="cb26-18"><a href="#cb26-18" aria-hidden="true"></a>    <span class="kw">def</span> notify(<span class="va">self</span>, event):</span>
<span id="cb26-19"><a href="#cb26-19" aria-hidden="true"></a>        <span class="cf">for</span> events <span class="kw">in</span> <span class="va">self</span>.events:</span>
<span id="cb26-20"><a href="#cb26-20" aria-hidden="true"></a>            events.append(event)</span>
<span id="cb26-21"><a href="#cb26-21" aria-hidden="true"></a></span>
<span id="cb26-22"><a href="#cb26-22" aria-hidden="true"></a><span class="kw">class</span> Events:</span>
<span id="cb26-23"><a href="#cb26-23" aria-hidden="true"></a></span>
<span id="cb26-24"><a href="#cb26-24" aria-hidden="true"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>):</span>
<span id="cb26-25"><a href="#cb26-25" aria-hidden="true"></a>        <span class="va">self</span>.events <span class="op">=</span> []</span>
<span id="cb26-26"><a href="#cb26-26" aria-hidden="true"></a></span>
<span id="cb26-27"><a href="#cb26-27" aria-hidden="true"></a>    <span class="kw">def</span> append(<span class="va">self</span>, event):</span>
<span id="cb26-28"><a href="#cb26-28" aria-hidden="true"></a>        <span class="va">self</span>.events.append(event)</span>
<span id="cb26-29"><a href="#cb26-29" aria-hidden="true"></a></span>
<span id="cb26-30"><a href="#cb26-30" aria-hidden="true"></a>    <span class="kw">def</span> <span class="fu">__repr__</span>(<span class="va">self</span>):</span>
<span id="cb26-31"><a href="#cb26-31" aria-hidden="true"></a>        <span class="cf">return</span> <span class="st">&quot;</span><span class="ch">\n</span><span class="st">&quot;</span>.join(<span class="va">self</span>.events)</span>
<span id="cb26-32"><a href="#cb26-32" aria-hidden="true"></a></span>
<span id="cb26-33"><a href="#cb26-33" aria-hidden="true"></a><span class="kw">class</span> App:</span>
<span id="cb26-34"><a href="#cb26-34" aria-hidden="true"></a></span>
<span id="cb26-35"><a href="#cb26-35" aria-hidden="true"></a>    <span class="at">@classmethod</span></span>
<span id="cb26-36"><a href="#cb26-36" aria-hidden="true"></a>    <span class="kw">def</span> create(cls):</span>
<span id="cb26-37"><a href="#cb26-37" aria-hidden="true"></a>        <span class="co">&quot;&quot;&quot;</span></span>
<span id="cb26-38"><a href="#cb26-38" aria-hidden="true"></a><span class="co">        &gt;&gt;&gt; isinstance(App.create(), App)</span></span>
<span id="cb26-39"><a href="#cb26-39" aria-hidden="true"></a><span class="co">        True</span></span>
<span id="cb26-40"><a href="#cb26-40" aria-hidden="true"></a><span class="co">        &quot;&quot;&quot;</span></span>
<span id="cb26-41"><a href="#cb26-41" aria-hidden="true"></a>        <span class="cf">return</span> cls(</span>
<span id="cb26-42"><a href="#cb26-42" aria-hidden="true"></a>            save_command<span class="op">=</span>SaveCommand.create(),</span>
<span id="cb26-43"><a href="#cb26-43" aria-hidden="true"></a>            share_command<span class="op">=</span>ShareCommand.create(),</span>
<span id="cb26-44"><a href="#cb26-44" aria-hidden="true"></a>            terminal<span class="op">=</span>Terminal.create(),</span>
<span id="cb26-45"><a href="#cb26-45" aria-hidden="true"></a>            args<span class="op">=</span>Args.create(),</span>
<span id="cb26-46"><a href="#cb26-46" aria-hidden="true"></a>        )</span>
<span id="cb26-47"><a href="#cb26-47" aria-hidden="true"></a></span>
<span id="cb26-48"><a href="#cb26-48" aria-hidden="true"></a>    <span class="at">@classmethod</span></span>
<span id="cb26-49"><a href="#cb26-49" aria-hidden="true"></a>    <span class="kw">def</span> create_null(cls, events<span class="op">=</span><span class="va">None</span>, args<span class="op">=</span>[]):</span>
<span id="cb26-50"><a href="#cb26-50" aria-hidden="true"></a>        <span class="cf">return</span> cls(</span>
<span id="cb26-51"><a href="#cb26-51" aria-hidden="true"></a>            save_command<span class="op">=</span>SaveCommand.create_null().track_events(events),</span>
<span id="cb26-52"><a href="#cb26-52" aria-hidden="true"></a>            share_command<span class="op">=</span>ShareCommand.create_null().track_events(events),</span>
<span id="cb26-53"><a href="#cb26-53" aria-hidden="true"></a>            terminal<span class="op">=</span>Terminal.create_null().track_events(events),</span>
<span id="cb26-54"><a href="#cb26-54" aria-hidden="true"></a>            args<span class="op">=</span>Args.create_null(args<span class="op">=</span>args),</span>
<span id="cb26-55"><a href="#cb26-55" aria-hidden="true"></a>        )</span>
<span id="cb26-56"><a href="#cb26-56" aria-hidden="true"></a></span>
<span id="cb26-57"><a href="#cb26-57" aria-hidden="true"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, save_command, share_command, terminal, args):</span>
<span id="cb26-58"><a href="#cb26-58" aria-hidden="true"></a>        <span class="va">self</span>.save_command <span class="op">=</span> save_command</span>
<span id="cb26-59"><a href="#cb26-59" aria-hidden="true"></a>        <span class="va">self</span>.share_command  <span class="op">=</span> share_command</span>
<span id="cb26-60"><a href="#cb26-60" aria-hidden="true"></a>        <span class="va">self</span>.terminal <span class="op">=</span> terminal</span>
<span id="cb26-61"><a href="#cb26-61" aria-hidden="true"></a>        <span class="va">self</span>.args <span class="op">=</span> args</span>
<span id="cb26-62"><a href="#cb26-62" aria-hidden="true"></a></span>
<span id="cb26-63"><a href="#cb26-63" aria-hidden="true"></a>    <span class="kw">def</span> run(<span class="va">self</span>):</span>
<span id="cb26-64"><a href="#cb26-64" aria-hidden="true"></a>        <span class="co">&quot;&quot;&quot;</span></span>
<span id="cb26-65"><a href="#cb26-65" aria-hidden="true"></a><span class="co">        &gt;&gt;&gt; events = Events()</span></span>
<span id="cb26-66"><a href="#cb26-66" aria-hidden="true"></a><span class="co">        &gt;&gt;&gt; App.create_null(events, args=[&quot;save&quot;, &quot;message&quot;]).run()</span></span>
<span id="cb26-67"><a href="#cb26-67" aria-hidden="true"></a><span class="co">        &gt;&gt;&gt; events</span></span>
<span id="cb26-68"><a href="#cb26-68" aria-hidden="true"></a><span class="co">        SAVE_COMMAND [&#39;message&#39;]</span></span>
<span id="cb26-69"><a href="#cb26-69" aria-hidden="true"></a></span>
<span id="cb26-70"><a href="#cb26-70" aria-hidden="true"></a><span class="co">        &gt;&gt;&gt; save_command_mock = Mock()</span></span>
<span id="cb26-71"><a href="#cb26-71" aria-hidden="true"></a><span class="co">        &gt;&gt;&gt; App(</span></span>
<span id="cb26-72"><a href="#cb26-72" aria-hidden="true"></a><span class="co">        ...     save_command=save_command_mock,</span></span>
<span id="cb26-73"><a href="#cb26-73" aria-hidden="true"></a><span class="co">        ...     share_command=None,</span></span>
<span id="cb26-74"><a href="#cb26-74" aria-hidden="true"></a><span class="co">        ...     terminal=None,</span></span>
<span id="cb26-75"><a href="#cb26-75" aria-hidden="true"></a><span class="co">        ...     args=Mock(**{&quot;get.return_value&quot;: [&quot;save&quot;, &quot;message&quot;]})</span></span>
<span id="cb26-76"><a href="#cb26-76" aria-hidden="true"></a><span class="co">        ... ).run()</span></span>
<span id="cb26-77"><a href="#cb26-77" aria-hidden="true"></a><span class="co">        &gt;&gt;&gt; save_command_mock.run.call_args_list</span></span>
<span id="cb26-78"><a href="#cb26-78" aria-hidden="true"></a><span class="co">        [call([&#39;message&#39;])]</span></span>
<span id="cb26-79"><a href="#cb26-79" aria-hidden="true"></a></span>
<span id="cb26-80"><a href="#cb26-80" aria-hidden="true"></a><span class="co">        &gt;&gt;&gt; App.create_null(Events(), args=[&quot;save&quot;]).run()</span></span>
<span id="cb26-81"><a href="#cb26-81" aria-hidden="true"></a><span class="co">        Traceback (most recent call last):</span></span>
<span id="cb26-82"><a href="#cb26-82" aria-hidden="true"></a><span class="co">          ...</span></span>
<span id="cb26-83"><a href="#cb26-83" aria-hidden="true"></a><span class="co">        ValueError: Expected one argument as the message, but got [].</span></span>
<span id="cb26-84"><a href="#cb26-84" aria-hidden="true"></a></span>
<span id="cb26-85"><a href="#cb26-85" aria-hidden="true"></a><span class="co">        &gt;&gt;&gt; save_command_mock = Mock()</span></span>
<span id="cb26-86"><a href="#cb26-86" aria-hidden="true"></a><span class="co">        &gt;&gt;&gt; App(</span></span>
<span id="cb26-87"><a href="#cb26-87" aria-hidden="true"></a><span class="co">        ...     save_command=save_command_mock,</span></span>
<span id="cb26-88"><a href="#cb26-88" aria-hidden="true"></a><span class="co">        ...     share_command=None,</span></span>
<span id="cb26-89"><a href="#cb26-89" aria-hidden="true"></a><span class="co">        ...     terminal=None,</span></span>
<span id="cb26-90"><a href="#cb26-90" aria-hidden="true"></a><span class="co">        ...     args=Mock(**{&quot;get.return_value&quot;: [&quot;save&quot;]})</span></span>
<span id="cb26-91"><a href="#cb26-91" aria-hidden="true"></a><span class="co">        ... ).run()</span></span>
<span id="cb26-92"><a href="#cb26-92" aria-hidden="true"></a><span class="co">        &gt;&gt;&gt; save_command_mock.run.call_args_list</span></span>
<span id="cb26-93"><a href="#cb26-93" aria-hidden="true"></a><span class="co">        [call([])]</span></span>
<span id="cb26-94"><a href="#cb26-94" aria-hidden="true"></a></span>
<span id="cb26-95"><a href="#cb26-95" aria-hidden="true"></a><span class="co">        &gt;&gt;&gt; events = Events()</span></span>
<span id="cb26-96"><a href="#cb26-96" aria-hidden="true"></a><span class="co">        &gt;&gt;&gt; App.create_null(events, args=[&quot;share&quot;]).run()</span></span>
<span id="cb26-97"><a href="#cb26-97" aria-hidden="true"></a><span class="co">        &gt;&gt;&gt; events</span></span>
<span id="cb26-98"><a href="#cb26-98" aria-hidden="true"></a><span class="co">        SHARE_COMMAND []</span></span>
<span id="cb26-99"><a href="#cb26-99" aria-hidden="true"></a></span>
<span id="cb26-100"><a href="#cb26-100" aria-hidden="true"></a><span class="co">        &gt;&gt;&gt; events = Events()</span></span>
<span id="cb26-101"><a href="#cb26-101" aria-hidden="true"></a><span class="co">        &gt;&gt;&gt; App.create_null(events, args=[&quot;unknown&quot;, &quot;sub&quot;, &quot;command&quot;]).run()</span></span>
<span id="cb26-102"><a href="#cb26-102" aria-hidden="true"></a><span class="co">        &gt;&gt;&gt; events</span></span>
<span id="cb26-103"><a href="#cb26-103" aria-hidden="true"></a><span class="co">        TERMINAL_WRITE &#39;Unknown command.&#39;</span></span>
<span id="cb26-104"><a href="#cb26-104" aria-hidden="true"></a><span class="co">        &quot;&quot;&quot;</span></span>
<span id="cb26-105"><a href="#cb26-105" aria-hidden="true"></a>        args <span class="op">=</span> <span class="va">self</span>.args.get()</span>
<span id="cb26-106"><a href="#cb26-106" aria-hidden="true"></a>        <span class="cf">if</span> args[<span class="dv">0</span>:<span class="dv">1</span>] <span class="op">==</span> [<span class="st">&quot;save&quot;</span>]:</span>
<span id="cb26-107"><a href="#cb26-107" aria-hidden="true"></a>            <span class="va">self</span>.save_command.run(args[<span class="dv">1</span>:])</span>
<span id="cb26-108"><a href="#cb26-108" aria-hidden="true"></a>        <span class="cf">elif</span> args[<span class="dv">0</span>:<span class="dv">1</span>] <span class="op">==</span> [<span class="st">&quot;share&quot;</span>]:</span>
<span id="cb26-109"><a href="#cb26-109" aria-hidden="true"></a>            <span class="va">self</span>.share_command.run([])</span>
<span id="cb26-110"><a href="#cb26-110" aria-hidden="true"></a>        <span class="cf">else</span>:</span>
<span id="cb26-111"><a href="#cb26-111" aria-hidden="true"></a>            <span class="va">self</span>.terminal.write(<span class="st">&quot;Unknown command.&quot;</span>)</span>
<span id="cb26-112"><a href="#cb26-112" aria-hidden="true"></a></span>
<span id="cb26-113"><a href="#cb26-113" aria-hidden="true"></a><span class="kw">class</span> SaveCommand(Trackable):</span>
<span id="cb26-114"><a href="#cb26-114" aria-hidden="true"></a></span>
<span id="cb26-115"><a href="#cb26-115" aria-hidden="true"></a>    <span class="at">@classmethod</span></span>
<span id="cb26-116"><a href="#cb26-116" aria-hidden="true"></a>    <span class="kw">def</span> create(cls):</span>
<span id="cb26-117"><a href="#cb26-117" aria-hidden="true"></a>        <span class="cf">return</span> cls(</span>
<span id="cb26-118"><a href="#cb26-118" aria-hidden="true"></a>            process<span class="op">=</span>Process.create()</span>
<span id="cb26-119"><a href="#cb26-119" aria-hidden="true"></a>        )</span>
<span id="cb26-120"><a href="#cb26-120" aria-hidden="true"></a></span>
<span id="cb26-121"><a href="#cb26-121" aria-hidden="true"></a>    <span class="at">@classmethod</span></span>
<span id="cb26-122"><a href="#cb26-122" aria-hidden="true"></a>    <span class="kw">def</span> create_null(cls, events<span class="op">=</span><span class="va">None</span>):</span>
<span id="cb26-123"><a href="#cb26-123" aria-hidden="true"></a>        <span class="cf">return</span> cls(</span>
<span id="cb26-124"><a href="#cb26-124" aria-hidden="true"></a>            process<span class="op">=</span>Process.create_null().track_events(events)</span>
<span id="cb26-125"><a href="#cb26-125" aria-hidden="true"></a>        )</span>
<span id="cb26-126"><a href="#cb26-126" aria-hidden="true"></a></span>
<span id="cb26-127"><a href="#cb26-127" aria-hidden="true"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, process):</span>
<span id="cb26-128"><a href="#cb26-128" aria-hidden="true"></a>        Trackable.<span class="fu">__init__</span>(<span class="va">self</span>)</span>
<span id="cb26-129"><a href="#cb26-129" aria-hidden="true"></a>        <span class="va">self</span>.process <span class="op">=</span> process</span>
<span id="cb26-130"><a href="#cb26-130" aria-hidden="true"></a></span>
<span id="cb26-131"><a href="#cb26-131" aria-hidden="true"></a>    <span class="kw">def</span> run(<span class="va">self</span>, args):</span>
<span id="cb26-132"><a href="#cb26-132" aria-hidden="true"></a>        <span class="co">&quot;&quot;&quot;</span></span>
<span id="cb26-133"><a href="#cb26-133" aria-hidden="true"></a><span class="co">        &gt;&gt;&gt; events = Events()</span></span>
<span id="cb26-134"><a href="#cb26-134" aria-hidden="true"></a><span class="co">        &gt;&gt;&gt; SaveCommand.create_null().track_events(events).run([&quot;message&quot;])</span></span>
<span id="cb26-135"><a href="#cb26-135" aria-hidden="true"></a><span class="co">        &gt;&gt;&gt; events</span></span>
<span id="cb26-136"><a href="#cb26-136" aria-hidden="true"></a><span class="co">        SAVE_COMMAND [&#39;message&#39;]</span></span>
<span id="cb26-137"><a href="#cb26-137" aria-hidden="true"></a></span>
<span id="cb26-138"><a href="#cb26-138" aria-hidden="true"></a><span class="co">        &gt;&gt;&gt; events = Events()</span></span>
<span id="cb26-139"><a href="#cb26-139" aria-hidden="true"></a><span class="co">        &gt;&gt;&gt; SaveCommand.create_null(events=events).run([&#39;message&#39;])</span></span>
<span id="cb26-140"><a href="#cb26-140" aria-hidden="true"></a><span class="co">        &gt;&gt;&gt; events</span></span>
<span id="cb26-141"><a href="#cb26-141" aria-hidden="true"></a><span class="co">        PROCESS_RUN [&#39;git&#39;, &#39;commit&#39;, &#39;-a&#39;, &#39;-m&#39;, &#39;message&#39;]</span></span>
<span id="cb26-142"><a href="#cb26-142" aria-hidden="true"></a></span>
<span id="cb26-143"><a href="#cb26-143" aria-hidden="true"></a><span class="co">        &gt;&gt;&gt; SaveCommand.create_null().run([&#39;message&#39;, &#39;--force&#39;])</span></span>
<span id="cb26-144"><a href="#cb26-144" aria-hidden="true"></a><span class="co">        Traceback (most recent call last):</span></span>
<span id="cb26-145"><a href="#cb26-145" aria-hidden="true"></a><span class="co">          ...</span></span>
<span id="cb26-146"><a href="#cb26-146" aria-hidden="true"></a><span class="co">        ValueError: Expected one argument as the message, but got [&#39;message&#39;, &#39;--force&#39;].</span></span>
<span id="cb26-147"><a href="#cb26-147" aria-hidden="true"></a><span class="co">        &quot;&quot;&quot;</span></span>
<span id="cb26-148"><a href="#cb26-148" aria-hidden="true"></a>        <span class="va">self</span>.notify(<span class="ss">f&quot;SAVE_COMMAND </span><span class="sc">{</span>args<span class="sc">!r}</span><span class="ss">&quot;</span>)</span>
<span id="cb26-149"><a href="#cb26-149" aria-hidden="true"></a>        <span class="cf">if</span> <span class="bu">len</span>(args) <span class="op">!=</span> <span class="dv">1</span>:</span>
<span id="cb26-150"><a href="#cb26-150" aria-hidden="true"></a>            <span class="cf">raise</span> <span class="pp">ValueError</span>(<span class="ss">f&quot;Expected one argument as the message, but got </span><span class="sc">{</span>args<span class="sc">!r}</span><span class="ss">.&quot;</span>)</span>
<span id="cb26-151"><a href="#cb26-151" aria-hidden="true"></a>        <span class="va">self</span>.process.run([<span class="st">&quot;git&quot;</span>, <span class="st">&quot;commit&quot;</span>, <span class="st">&quot;-a&quot;</span>, <span class="st">&quot;-m&quot;</span>, args[<span class="dv">0</span>]])</span>
<span id="cb26-152"><a href="#cb26-152" aria-hidden="true"></a></span>
<span id="cb26-153"><a href="#cb26-153" aria-hidden="true"></a><span class="kw">class</span> ShareCommand(Trackable):</span>
<span id="cb26-154"><a href="#cb26-154" aria-hidden="true"></a></span>
<span id="cb26-155"><a href="#cb26-155" aria-hidden="true"></a>    <span class="at">@classmethod</span></span>
<span id="cb26-156"><a href="#cb26-156" aria-hidden="true"></a>    <span class="kw">def</span> create(cls):</span>
<span id="cb26-157"><a href="#cb26-157" aria-hidden="true"></a>        <span class="cf">return</span> cls(</span>
<span id="cb26-158"><a href="#cb26-158" aria-hidden="true"></a>            process<span class="op">=</span>Process.create()</span>
<span id="cb26-159"><a href="#cb26-159" aria-hidden="true"></a>        )</span>
<span id="cb26-160"><a href="#cb26-160" aria-hidden="true"></a></span>
<span id="cb26-161"><a href="#cb26-161" aria-hidden="true"></a>    <span class="at">@classmethod</span></span>
<span id="cb26-162"><a href="#cb26-162" aria-hidden="true"></a>    <span class="kw">def</span> create_null(cls, events<span class="op">=</span><span class="va">None</span>):</span>
<span id="cb26-163"><a href="#cb26-163" aria-hidden="true"></a>        <span class="cf">return</span> cls(</span>
<span id="cb26-164"><a href="#cb26-164" aria-hidden="true"></a>            process<span class="op">=</span>Process.create_null().track_events(events)</span>
<span id="cb26-165"><a href="#cb26-165" aria-hidden="true"></a>        )</span>
<span id="cb26-166"><a href="#cb26-166" aria-hidden="true"></a></span>
<span id="cb26-167"><a href="#cb26-167" aria-hidden="true"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, process):</span>
<span id="cb26-168"><a href="#cb26-168" aria-hidden="true"></a>        Trackable.<span class="fu">__init__</span>(<span class="va">self</span>)</span>
<span id="cb26-169"><a href="#cb26-169" aria-hidden="true"></a>        <span class="va">self</span>.process <span class="op">=</span> process</span>
<span id="cb26-170"><a href="#cb26-170" aria-hidden="true"></a></span>
<span id="cb26-171"><a href="#cb26-171" aria-hidden="true"></a>    <span class="kw">def</span> run(<span class="va">self</span>, args):</span>
<span id="cb26-172"><a href="#cb26-172" aria-hidden="true"></a>        <span class="co">&quot;&quot;&quot;</span></span>
<span id="cb26-173"><a href="#cb26-173" aria-hidden="true"></a><span class="co">        &gt;&gt;&gt; events = Events()</span></span>
<span id="cb26-174"><a href="#cb26-174" aria-hidden="true"></a><span class="co">        &gt;&gt;&gt; ShareCommand.create_null(events=events).run([])</span></span>
<span id="cb26-175"><a href="#cb26-175" aria-hidden="true"></a><span class="co">        &gt;&gt;&gt; events</span></span>
<span id="cb26-176"><a href="#cb26-176" aria-hidden="true"></a><span class="co">        PROCESS_RUN [&#39;git&#39;, &#39;push&#39;]</span></span>
<span id="cb26-177"><a href="#cb26-177" aria-hidden="true"></a><span class="co">        &quot;&quot;&quot;</span></span>
<span id="cb26-178"><a href="#cb26-178" aria-hidden="true"></a>        <span class="va">self</span>.notify(<span class="ss">f&quot;SHARE_COMMAND </span><span class="sc">{</span>args<span class="sc">!r}</span><span class="ss">&quot;</span>)</span>
<span id="cb26-179"><a href="#cb26-179" aria-hidden="true"></a>        <span class="va">self</span>.process.run([<span class="st">&quot;git&quot;</span>, <span class="st">&quot;push&quot;</span>])</span>
<span id="cb26-180"><a href="#cb26-180" aria-hidden="true"></a></span>
<span id="cb26-181"><a href="#cb26-181" aria-hidden="true"></a><span class="kw">class</span> Terminal(Trackable):</span>
<span id="cb26-182"><a href="#cb26-182" aria-hidden="true"></a></span>
<span id="cb26-183"><a href="#cb26-183" aria-hidden="true"></a>    <span class="at">@classmethod</span></span>
<span id="cb26-184"><a href="#cb26-184" aria-hidden="true"></a>    <span class="kw">def</span> create(cls):</span>
<span id="cb26-185"><a href="#cb26-185" aria-hidden="true"></a>        <span class="cf">return</span> cls(sys<span class="op">=</span>sys)</span>
<span id="cb26-186"><a href="#cb26-186" aria-hidden="true"></a></span>
<span id="cb26-187"><a href="#cb26-187" aria-hidden="true"></a>    <span class="at">@classmethod</span></span>
<span id="cb26-188"><a href="#cb26-188" aria-hidden="true"></a>    <span class="kw">def</span> create_null(cls):</span>
<span id="cb26-189"><a href="#cb26-189" aria-hidden="true"></a>        <span class="kw">class</span> NullStream:</span>
<span id="cb26-190"><a href="#cb26-190" aria-hidden="true"></a>            <span class="kw">def</span> write(<span class="va">self</span>, text):</span>
<span id="cb26-191"><a href="#cb26-191" aria-hidden="true"></a>                <span class="cf">pass</span></span>
<span id="cb26-192"><a href="#cb26-192" aria-hidden="true"></a>            <span class="kw">def</span> flush(<span class="va">self</span>):</span>
<span id="cb26-193"><a href="#cb26-193" aria-hidden="true"></a>                <span class="cf">pass</span></span>
<span id="cb26-194"><a href="#cb26-194" aria-hidden="true"></a>        <span class="kw">class</span> NullSysModule:</span>
<span id="cb26-195"><a href="#cb26-195" aria-hidden="true"></a>            stdout <span class="op">=</span> NullStream()</span>
<span id="cb26-196"><a href="#cb26-196" aria-hidden="true"></a>        <span class="cf">return</span> cls(sys<span class="op">=</span>NullSysModule())</span>
<span id="cb26-197"><a href="#cb26-197" aria-hidden="true"></a></span>
<span id="cb26-198"><a href="#cb26-198" aria-hidden="true"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, sys):</span>
<span id="cb26-199"><a href="#cb26-199" aria-hidden="true"></a>        Trackable.<span class="fu">__init__</span>(<span class="va">self</span>)</span>
<span id="cb26-200"><a href="#cb26-200" aria-hidden="true"></a>        <span class="va">self</span>.sys <span class="op">=</span> sys</span>
<span id="cb26-201"><a href="#cb26-201" aria-hidden="true"></a></span>
<span id="cb26-202"><a href="#cb26-202" aria-hidden="true"></a>    <span class="kw">def</span> write(<span class="va">self</span>, text):</span>
<span id="cb26-203"><a href="#cb26-203" aria-hidden="true"></a>        <span class="co">&quot;&quot;&quot;</span></span>
<span id="cb26-204"><a href="#cb26-204" aria-hidden="true"></a><span class="co">        &gt;&gt;&gt; events = Events()</span></span>
<span id="cb26-205"><a href="#cb26-205" aria-hidden="true"></a><span class="co">        &gt;&gt;&gt; Terminal.create().track_events(events).write(&quot;hello&quot;)</span></span>
<span id="cb26-206"><a href="#cb26-206" aria-hidden="true"></a><span class="co">        hello</span></span>
<span id="cb26-207"><a href="#cb26-207" aria-hidden="true"></a><span class="co">        &gt;&gt;&gt; events</span></span>
<span id="cb26-208"><a href="#cb26-208" aria-hidden="true"></a><span class="co">        TERMINAL_WRITE &#39;hello&#39;</span></span>
<span id="cb26-209"><a href="#cb26-209" aria-hidden="true"></a></span>
<span id="cb26-210"><a href="#cb26-210" aria-hidden="true"></a><span class="co">        &gt;&gt;&gt; Terminal.create_null().write(&quot;hello&quot;)</span></span>
<span id="cb26-211"><a href="#cb26-211" aria-hidden="true"></a><span class="co">        &quot;&quot;&quot;</span></span>
<span id="cb26-212"><a href="#cb26-212" aria-hidden="true"></a>        <span class="va">self</span>.notify(<span class="ss">f&quot;TERMINAL_WRITE </span><span class="sc">{</span>text<span class="sc">!r}</span><span class="ss">&quot;</span>)</span>
<span id="cb26-213"><a href="#cb26-213" aria-hidden="true"></a>        <span class="bu">print</span>(text, <span class="bu">file</span><span class="op">=</span><span class="va">self</span>.sys.stdout, flush<span class="op">=</span><span class="va">True</span>)</span>
<span id="cb26-214"><a href="#cb26-214" aria-hidden="true"></a></span>
<span id="cb26-215"><a href="#cb26-215" aria-hidden="true"></a><span class="kw">class</span> Args(Trackable):</span>
<span id="cb26-216"><a href="#cb26-216" aria-hidden="true"></a></span>
<span id="cb26-217"><a href="#cb26-217" aria-hidden="true"></a>    <span class="at">@classmethod</span></span>
<span id="cb26-218"><a href="#cb26-218" aria-hidden="true"></a>    <span class="kw">def</span> create(cls):</span>
<span id="cb26-219"><a href="#cb26-219" aria-hidden="true"></a>        <span class="cf">return</span> cls(sys<span class="op">=</span>sys)</span>
<span id="cb26-220"><a href="#cb26-220" aria-hidden="true"></a></span>
<span id="cb26-221"><a href="#cb26-221" aria-hidden="true"></a>    <span class="at">@classmethod</span></span>
<span id="cb26-222"><a href="#cb26-222" aria-hidden="true"></a>    <span class="kw">def</span> create_null(cls, args):</span>
<span id="cb26-223"><a href="#cb26-223" aria-hidden="true"></a>        <span class="kw">class</span> NullSysModule:</span>
<span id="cb26-224"><a href="#cb26-224" aria-hidden="true"></a>            argv <span class="op">=</span> [<span class="st">&quot;null program&quot;</span>]<span class="op">+</span>args</span>
<span id="cb26-225"><a href="#cb26-225" aria-hidden="true"></a>        <span class="cf">return</span> cls(sys<span class="op">=</span>NullSysModule())</span>
<span id="cb26-226"><a href="#cb26-226" aria-hidden="true"></a></span>
<span id="cb26-227"><a href="#cb26-227" aria-hidden="true"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, sys):</span>
<span id="cb26-228"><a href="#cb26-228" aria-hidden="true"></a>        Trackable.<span class="fu">__init__</span>(<span class="va">self</span>)</span>
<span id="cb26-229"><a href="#cb26-229" aria-hidden="true"></a>        <span class="va">self</span>.sys <span class="op">=</span> sys</span>
<span id="cb26-230"><a href="#cb26-230" aria-hidden="true"></a></span>
<span id="cb26-231"><a href="#cb26-231" aria-hidden="true"></a>    <span class="kw">def</span> get(<span class="va">self</span>):</span>
<span id="cb26-232"><a href="#cb26-232" aria-hidden="true"></a>        <span class="co">&quot;&quot;&quot;</span></span>
<span id="cb26-233"><a href="#cb26-233" aria-hidden="true"></a><span class="co">        &gt;&gt;&gt; Args.create().get()</span></span>
<span id="cb26-234"><a href="#cb26-234" aria-hidden="true"></a><span class="co">        [&#39;--test&#39;]</span></span>
<span id="cb26-235"><a href="#cb26-235" aria-hidden="true"></a></span>
<span id="cb26-236"><a href="#cb26-236" aria-hidden="true"></a><span class="co">        &gt;&gt;&gt; Args.create_null(args=[&quot;configured&quot;, &quot;args&quot;]).get()</span></span>
<span id="cb26-237"><a href="#cb26-237" aria-hidden="true"></a><span class="co">        [&#39;configured&#39;, &#39;args&#39;]</span></span>
<span id="cb26-238"><a href="#cb26-238" aria-hidden="true"></a><span class="co">        &quot;&quot;&quot;</span></span>
<span id="cb26-239"><a href="#cb26-239" aria-hidden="true"></a>        <span class="cf">return</span> <span class="va">self</span>.sys.argv[<span class="dv">1</span>:]</span>
<span id="cb26-240"><a href="#cb26-240" aria-hidden="true"></a></span>
<span id="cb26-241"><a href="#cb26-241" aria-hidden="true"></a><span class="kw">class</span> Process(Trackable):</span>
<span id="cb26-242"><a href="#cb26-242" aria-hidden="true"></a></span>
<span id="cb26-243"><a href="#cb26-243" aria-hidden="true"></a>    <span class="at">@classmethod</span></span>
<span id="cb26-244"><a href="#cb26-244" aria-hidden="true"></a>    <span class="kw">def</span> create(cls):</span>
<span id="cb26-245"><a href="#cb26-245" aria-hidden="true"></a>        <span class="cf">return</span> cls(subprocess<span class="op">=</span>subprocess)</span>
<span id="cb26-246"><a href="#cb26-246" aria-hidden="true"></a></span>
<span id="cb26-247"><a href="#cb26-247" aria-hidden="true"></a>    <span class="at">@classmethod</span></span>
<span id="cb26-248"><a href="#cb26-248" aria-hidden="true"></a>    <span class="kw">def</span> create_null(cls):</span>
<span id="cb26-249"><a href="#cb26-249" aria-hidden="true"></a>        <span class="kw">class</span> NullSubprocessModule:</span>
<span id="cb26-250"><a href="#cb26-250" aria-hidden="true"></a>            <span class="kw">def</span> call(<span class="va">self</span>, command):</span>
<span id="cb26-251"><a href="#cb26-251" aria-hidden="true"></a>                <span class="cf">pass</span></span>
<span id="cb26-252"><a href="#cb26-252" aria-hidden="true"></a>        <span class="cf">return</span> cls(subprocess<span class="op">=</span>NullSubprocessModule())</span>
<span id="cb26-253"><a href="#cb26-253" aria-hidden="true"></a></span>
<span id="cb26-254"><a href="#cb26-254" aria-hidden="true"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, subprocess):</span>
<span id="cb26-255"><a href="#cb26-255" aria-hidden="true"></a>        Trackable.<span class="fu">__init__</span>(<span class="va">self</span>)</span>
<span id="cb26-256"><a href="#cb26-256" aria-hidden="true"></a>        <span class="va">self</span>.subprocess <span class="op">=</span> subprocess</span>
<span id="cb26-257"><a href="#cb26-257" aria-hidden="true"></a></span>
<span id="cb26-258"><a href="#cb26-258" aria-hidden="true"></a>    <span class="kw">def</span> run(<span class="va">self</span>, command):</span>
<span id="cb26-259"><a href="#cb26-259" aria-hidden="true"></a>        <span class="co">&quot;&quot;&quot;</span></span>
<span id="cb26-260"><a href="#cb26-260" aria-hidden="true"></a><span class="co">        &gt;&gt;&gt; events = Events()</span></span>
<span id="cb26-261"><a href="#cb26-261" aria-hidden="true"></a><span class="co">        &gt;&gt;&gt; Process.create().track_events(events).run([&quot;echo&quot;, &quot;hello&quot;])</span></span>
<span id="cb26-262"><a href="#cb26-262" aria-hidden="true"></a><span class="co">        &gt;&gt;&gt; events</span></span>
<span id="cb26-263"><a href="#cb26-263" aria-hidden="true"></a><span class="co">        PROCESS_RUN [&#39;echo&#39;, &#39;hello&#39;]</span></span>
<span id="cb26-264"><a href="#cb26-264" aria-hidden="true"></a></span>
<span id="cb26-265"><a href="#cb26-265" aria-hidden="true"></a><span class="co">        &gt;&gt;&gt; Process.create_null().run([&quot;echo&quot;, &quot;hello&quot;])</span></span>
<span id="cb26-266"><a href="#cb26-266" aria-hidden="true"></a><span class="co">        &quot;&quot;&quot;</span></span>
<span id="cb26-267"><a href="#cb26-267" aria-hidden="true"></a>        <span class="va">self</span>.notify(<span class="ss">f&quot;PROCESS_RUN </span><span class="sc">{</span>command<span class="sc">!r}</span><span class="ss">&quot;</span>)</span>
<span id="cb26-268"><a href="#cb26-268" aria-hidden="true"></a>        <span class="va">self</span>.subprocess.call(command)</span>
<span id="cb26-269"><a href="#cb26-269" aria-hidden="true"></a></span>
<span id="cb26-270"><a href="#cb26-270" aria-hidden="true"></a><span class="cf">if</span> <span class="va">__name__</span> <span class="op">==</span> <span class="st">&quot;__main__&quot;</span>:</span>
<span id="cb26-271"><a href="#cb26-271" aria-hidden="true"></a>    <span class="cf">if</span> Args.create().get() <span class="op">==</span> [<span class="st">&quot;--test&quot;</span>]:</span>
<span id="cb26-272"><a href="#cb26-272" aria-hidden="true"></a>        doctest.testmod()</span>
<span id="cb26-273"><a href="#cb26-273" aria-hidden="true"></a>        <span class="bu">print</span>(<span class="st">&quot;OK&quot;</span>)</span>
<span id="cb26-274"><a href="#cb26-274" aria-hidden="true"></a>    <span class="cf">else</span>:</span>
<span id="cb26-275"><a href="#cb26-275" aria-hidden="true"></a>        App.create().run()</span></code></pre></div>
]]></description>
    <pubDate>Fri, 26 Jul 2024 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/output-tracking-vs-mocks/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>Newsletter June 2024: Quines and Smalltalk</title>
    <link>http://rickardlindberg.me/writing/newsletter/june-2024/</link>
    <description><![CDATA[<h1>Newsletter June 2024: Quines and Smalltalk</h1>

<p><em>Published on  2 July 2024.</em></p>

<p>I subscribe to <a href="https://avdi.codes/newsletters/">Avdi’s newsletter</a> because I find some of his writing and links interesting. I was clicking around on his site from one of the links in a newsletter and rediscovered <a href="https://avdi.codes/your-newsletter/">Your Newsletter (A Pattern Language of Banana Stands)</a>. This prompted me to try again to create a proper newsletter from these posts, and this one will be the first after a long break to also go out as en email.</p>
<h2 id="quine-wiki">Quine Wiki</h2>
<p>I came across <a href="https://merveilles.town/@m15o/112592228824944602">this toot</a> that says that the <a href="https://m15o.ichi.city/yon/">Yon</a> wiki is now implemented as a <a href="https://en.wikipedia.org/wiki/Quine_(computing)">quine</a> meaning that when you save a page in the wiki, it generates a new html file which is the new wiki, complete with source code for the wiki itself.</p>
<p>If you want to edit pages, you can do it through the user interface, but if you want to change other parts of the wiki, you have to to edit the source code (html file with Javascript).</p>
<p>That got me thinking. What would it take to make the whole wiki system editable from within itself? You would have to also embed the whole programming environment in the interface. Something like what Smalltalk did.</p>
<h2 id="view-source-code">View Source Code</h2>
<p>It also got be thinking of discoverable source code. If an application allowed modifications of itself from within itself, then source code must be present. “View source” in the browser was how I fist started learning programming. In Smalltalk you can “view source” for anything (almost). Wouldn’t that be a nicer (programming) world to live in?</p>
<h2 id="readable-code">Readable Code</h2>
<p>That led me to think about how to write code that is also easy to read. And I remembered <a href="https://viewsourcecode.org/snaptoken/kilo/">Build Your Own Text Editor</a> which is a sort of literate programming approach to explaining how to build a text editor. One problem with the literate programming approach is that is seems to take much more effort to create such programs and maintain them. Is there another way to make programs easier to understand?</p>
<p>One idea that came to mind was stripping features. Smaller programs are easier to read and understand than bigger ones. What if we can remove all but the most basic features? That would be a much smaller codebase to study. Then we can gradually add features once we understand the base.</p>
<p>One approach that I thought of to do this in practice is if test cases are somehow organized by feature. Then you can run the tests for the features that you are interested in, notice what code is covered, and delete all code which is not executed. Then you can study that.</p>
<p>Another thing that came to mind was how to organize code by features.</p>
<p>I might experiment with some of this for <a href="/projects/rlselect/index.html">rlselect</a>. I would like for people to know how this program works and be able to customize it to their needs. But I would like the customizations to be local to all users by forking instead of growing the code base for rlselect. This might be similar to what Kartik is doing with <a href="https://akkartik.name/freewheeling/">freewheeling apps</a>.</p>
]]></description>
    <pubDate>Tue, 02 Jul 2024 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/newsletter/june-2024/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>May 2024 Update</title>
    <link>http://rickardlindberg.me/writing/newsletter/may-2024/</link>
    <description><![CDATA[<h1>May 2024 Update</h1>

<p><em>Published on  8 June 2024.</em></p>

<p>This is what I’ve been up to in May 2024:</p>
<ul>
<li><p>I made a video and blog post about <a href="/writing/function-to-oop-refactoring/index.html">refactoring a function to 6 classes</a>.</p></li>
<li><p>I continued writing on the blog post about <a href="/writing/output-tracking-vs-mocks/index.html">output tracking vs mocks</a>.</p></li>
<li><p>I started working on a new project: <a href="https://github.com/rickardlindberg/ride/">RIDE</a>. The goal is to create an IDE that suites my needs. Most likely, the project will not be successful, but it’s fun trying. The firsts component I started working on was a file tree where the whole structure is always shown. If it doesn’t fit on the screen, the text get smaller, and you can magnify parts of the tree by hoovering it.</p>
<center>
<p><img src="ride.png" alt="RIDE" /></p>
</center></li>
<li><p>I watched <a href="https://youtu.be/eJm44LJDU44">Bootstrapping Research &amp; Dynamicland, Dec 2019</a>. The idea of physical programming intrigued me.</p></li>
</ul>
]]></description>
    <pubDate>Sat, 08 Jun 2024 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/newsletter/may-2024/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>Refactoring a function to 6 classes</title>
    <link>http://rickardlindberg.me/writing/function-to-oop-refactoring/</link>
    <description><![CDATA[<h1>Refactoring a function to 6 classes</h1>

<p><em>Published on  2 May 2024.</em></p>

<p>I made a video where I show how I refactor a single function, that does many things, to 6 classes that each does a single thing.</p>
<center>
<iframe width="560" height="315" src="https://www.youtube.com/embed/rubTUD0EdME" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write;
encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen>
</iframe>
</center>
<p>The resulting design is more object oriented.</p>
<p>I don’t want to argue which is better, but instead show you what an object oriented design can look like, because I feel like those examples are rare.</p>
<p>The example I’m refactoring is a function that returns the next version number given a set of existing versions numbers stored as git tags.</p>
<p>In the first example, we ask for the next release version in the 1.0 series given that no tags exist. We get the default version 1.0.0.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> nextversion(series<span class="op">=</span><span class="st">&quot;1.0&quot;</span>, pre_release<span class="op">=</span><span class="va">False</span>, tags<span class="op">=</span>[])</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a><span class="co">&#39;1.0.0&#39;</span></span></code></pre></div>
<p>In the second example, version 1.0.0 already exists, and we therefore get version 1.0.1.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> nextversion(series<span class="op">=</span><span class="st">&quot;1.0&quot;</span>, pre_release<span class="op">=</span><span class="va">False</span>, tags<span class="op">=</span>[<span class="st">&#39;1.0.0&#39;</span>])</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a><span class="co">&#39;1.0.1&#39;</span></span></code></pre></div>
<p>In the third example we ask for the next pre-release version. The next release version would be 1.0.2, and so the first pre-release version of that release is 1.0.2-1.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> nextversion(series<span class="op">=</span><span class="st">&quot;1.0&quot;</span>, pre_release<span class="op">=</span><span class="va">True</span>, tags<span class="op">=</span>[<span class="st">&#39;1.0.0&#39;</span>, <span class="st">&#39;1.0.1&#39;</span>])</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a><span class="co">&#39;1.0.2-1&#39;</span></span></code></pre></div>
<p>In the fourth example, pre-release 3 already exists, so the next pre-release is 1.0.2-4.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> nextversion(series<span class="op">=</span><span class="st">&quot;1.0&quot;</span>, pre_release<span class="op">=</span><span class="va">True</span>, tags<span class="op">=</span>[<span class="st">&#39;1.0.0&#39;</span>, <span class="st">&#39;1.0.1&#39;</span>, <span class="st">&#39;1.0.2-3&#39;</span>])</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a><span class="co">&#39;1.0.2-4&#39;</span></span></code></pre></div>
<p>The initial function looks like this:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="kw">def</span> nextversion(series, pre_release, tags):</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a>    version_pattern <span class="op">=</span> <span class="st">&quot;&quot;</span>.join([</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a>        <span class="vs">r&quot;^&quot;</span>,</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true"></a>        re.escape(series),</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true"></a>        re.escape(<span class="st">&quot;.&quot;</span>),</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true"></a>        <span class="vs">r&quot;(?P&lt;version&gt;\d+)&quot;</span>,</span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true"></a>        <span class="vs">r&quot;(?P&lt;pre_release&gt;-(?P&lt;pre_release_number&gt;(\d+)))?&quot;</span>,</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true"></a>        <span class="vs">r&quot;$&quot;</span>,</span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true"></a>    ])</span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true"></a>    versions <span class="op">=</span> []</span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true"></a>    pre_release_numbers <span class="op">=</span> {}</span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true"></a>    <span class="cf">for</span> tag <span class="kw">in</span> tags:</span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true"></a>        match <span class="op">=</span> re.match(version_pattern, tag)</span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true"></a>        <span class="cf">if</span> match:</span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true"></a>            version <span class="op">=</span> <span class="bu">int</span>(match[<span class="st">&quot;version&quot;</span>])</span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true"></a>            <span class="cf">if</span> match[<span class="st">&quot;pre_release&quot;</span>]:</span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true"></a>                <span class="cf">if</span> version <span class="kw">not</span> <span class="kw">in</span> pre_release_numbers:</span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true"></a>                    pre_release_numbers[version] <span class="op">=</span> []</span>
<span id="cb5-19"><a href="#cb5-19" aria-hidden="true"></a>                pre_release_numbers[version].append(<span class="bu">int</span>(match[<span class="st">&quot;pre_release_number&quot;</span>]))</span>
<span id="cb5-20"><a href="#cb5-20" aria-hidden="true"></a>            <span class="cf">else</span>:</span>
<span id="cb5-21"><a href="#cb5-21" aria-hidden="true"></a>                versions.append(version)</span>
<span id="cb5-22"><a href="#cb5-22" aria-hidden="true"></a>    next_version <span class="op">=</span> <span class="bu">max</span>(</span>
<span id="cb5-23"><a href="#cb5-23" aria-hidden="true"></a>        [<span class="dv">0</span>]</span>
<span id="cb5-24"><a href="#cb5-24" aria-hidden="true"></a>        <span class="op">+</span></span>
<span id="cb5-25"><a href="#cb5-25" aria-hidden="true"></a>        [<span class="dv">1</span><span class="op">+</span>version <span class="cf">for</span> version <span class="kw">in</span> versions]</span>
<span id="cb5-26"><a href="#cb5-26" aria-hidden="true"></a>        <span class="op">+</span></span>
<span id="cb5-27"><a href="#cb5-27" aria-hidden="true"></a>        <span class="bu">list</span>(pre_release_numbers.keys())</span>
<span id="cb5-28"><a href="#cb5-28" aria-hidden="true"></a>    )</span>
<span id="cb5-29"><a href="#cb5-29" aria-hidden="true"></a>    next_pre_release_number <span class="op">=</span> <span class="dv">1</span> <span class="op">+</span> <span class="bu">max</span>(pre_release_numbers.get(next_version, [<span class="dv">0</span>]))</span>
<span id="cb5-30"><a href="#cb5-30" aria-hidden="true"></a>    <span class="cf">if</span> pre_release:</span>
<span id="cb5-31"><a href="#cb5-31" aria-hidden="true"></a>        <span class="cf">return</span> <span class="ss">f&quot;</span><span class="sc">{</span>series<span class="sc">}</span><span class="ss">.</span><span class="sc">{</span>next_version<span class="sc">}</span><span class="ss">-</span><span class="sc">{</span>next_pre_release_number<span class="sc">}</span><span class="ss">&quot;</span></span>
<span id="cb5-32"><a href="#cb5-32" aria-hidden="true"></a>    <span class="cf">else</span>:</span>
<span id="cb5-33"><a href="#cb5-33" aria-hidden="true"></a>        <span class="cf">return</span> <span class="ss">f&quot;</span><span class="sc">{</span>series<span class="sc">}</span><span class="ss">.</span><span class="sc">{</span>next_version<span class="sc">}</span><span class="ss">&quot;</span></span></code></pre></div>
<p>I refactor it to this:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="kw">def</span> nextversion(series, pre_release, tags):</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a>    <span class="cf">return</span> Tags(tags).get_next_version(series, pre_release)</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true"></a><span class="kw">class</span> Tags:</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true"></a></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, tags):</span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true"></a>        <span class="va">self</span>.tags <span class="op">=</span> tags</span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true"></a></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true"></a>    <span class="kw">def</span> get_next_version(<span class="va">self</span>, series, pre_release):</span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true"></a>        series <span class="op">=</span> Series(series)</span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true"></a>        versions <span class="op">=</span> Versions()</span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true"></a>        <span class="cf">for</span> tag <span class="kw">in</span> <span class="va">self</span>.tags:</span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true"></a>            series.parse_version(tag).add_to(versions)</span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true"></a>        <span class="cf">return</span> versions.get_next_version(pre_release).<span class="bu">format</span>(series)</span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true"></a></span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true"></a><span class="kw">class</span> Release:</span>
<span id="cb6-17"><a href="#cb6-17" aria-hidden="true"></a></span>
<span id="cb6-18"><a href="#cb6-18" aria-hidden="true"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, version):</span>
<span id="cb6-19"><a href="#cb6-19" aria-hidden="true"></a>        <span class="va">self</span>.version <span class="op">=</span> version</span>
<span id="cb6-20"><a href="#cb6-20" aria-hidden="true"></a></span>
<span id="cb6-21"><a href="#cb6-21" aria-hidden="true"></a>    <span class="kw">def</span> add_to(<span class="va">self</span>, versions):</span>
<span id="cb6-22"><a href="#cb6-22" aria-hidden="true"></a>        versions.add_release(<span class="va">self</span>.version)</span>
<span id="cb6-23"><a href="#cb6-23" aria-hidden="true"></a></span>
<span id="cb6-24"><a href="#cb6-24" aria-hidden="true"></a>    <span class="kw">def</span> <span class="bu">format</span>(<span class="va">self</span>, series):</span>
<span id="cb6-25"><a href="#cb6-25" aria-hidden="true"></a>        <span class="cf">return</span> series.format_release(<span class="va">self</span>.version)</span>
<span id="cb6-26"><a href="#cb6-26" aria-hidden="true"></a></span>
<span id="cb6-27"><a href="#cb6-27" aria-hidden="true"></a><span class="kw">class</span> PreRelease:</span>
<span id="cb6-28"><a href="#cb6-28" aria-hidden="true"></a></span>
<span id="cb6-29"><a href="#cb6-29" aria-hidden="true"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, version, pre_release_number):</span>
<span id="cb6-30"><a href="#cb6-30" aria-hidden="true"></a>        <span class="va">self</span>.version <span class="op">=</span> version</span>
<span id="cb6-31"><a href="#cb6-31" aria-hidden="true"></a>        <span class="va">self</span>.pre_release_number <span class="op">=</span> pre_release_number</span>
<span id="cb6-32"><a href="#cb6-32" aria-hidden="true"></a></span>
<span id="cb6-33"><a href="#cb6-33" aria-hidden="true"></a>    <span class="kw">def</span> add_to(<span class="va">self</span>, versions):</span>
<span id="cb6-34"><a href="#cb6-34" aria-hidden="true"></a>        versions.add_pre_release(<span class="va">self</span>.version, <span class="va">self</span>.pre_release_number)</span>
<span id="cb6-35"><a href="#cb6-35" aria-hidden="true"></a></span>
<span id="cb6-36"><a href="#cb6-36" aria-hidden="true"></a>    <span class="kw">def</span> <span class="bu">format</span>(<span class="va">self</span>, series):</span>
<span id="cb6-37"><a href="#cb6-37" aria-hidden="true"></a>        <span class="cf">return</span> series.format_pre_release(<span class="va">self</span>.version, <span class="va">self</span>.pre_release_number)</span>
<span id="cb6-38"><a href="#cb6-38" aria-hidden="true"></a></span>
<span id="cb6-39"><a href="#cb6-39" aria-hidden="true"></a><span class="kw">class</span> NoMatchVersion:</span>
<span id="cb6-40"><a href="#cb6-40" aria-hidden="true"></a></span>
<span id="cb6-41"><a href="#cb6-41" aria-hidden="true"></a>    <span class="kw">def</span> add_to(<span class="va">self</span>, versions):</span>
<span id="cb6-42"><a href="#cb6-42" aria-hidden="true"></a>        <span class="cf">pass</span></span>
<span id="cb6-43"><a href="#cb6-43" aria-hidden="true"></a></span>
<span id="cb6-44"><a href="#cb6-44" aria-hidden="true"></a><span class="kw">class</span> Versions:</span>
<span id="cb6-45"><a href="#cb6-45" aria-hidden="true"></a></span>
<span id="cb6-46"><a href="#cb6-46" aria-hidden="true"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>):</span>
<span id="cb6-47"><a href="#cb6-47" aria-hidden="true"></a>        <span class="va">self</span>.versions <span class="op">=</span> []</span>
<span id="cb6-48"><a href="#cb6-48" aria-hidden="true"></a>        <span class="va">self</span>.pre_release_numbers <span class="op">=</span> {}</span>
<span id="cb6-49"><a href="#cb6-49" aria-hidden="true"></a></span>
<span id="cb6-50"><a href="#cb6-50" aria-hidden="true"></a>    <span class="kw">def</span> add_release(<span class="va">self</span>, version):</span>
<span id="cb6-51"><a href="#cb6-51" aria-hidden="true"></a>        <span class="va">self</span>.versions.append(version)</span>
<span id="cb6-52"><a href="#cb6-52" aria-hidden="true"></a></span>
<span id="cb6-53"><a href="#cb6-53" aria-hidden="true"></a>    <span class="kw">def</span> add_pre_release(<span class="va">self</span>, version, pre_release_number):</span>
<span id="cb6-54"><a href="#cb6-54" aria-hidden="true"></a>        <span class="cf">if</span> version <span class="kw">not</span> <span class="kw">in</span> <span class="va">self</span>.pre_release_numbers:</span>
<span id="cb6-55"><a href="#cb6-55" aria-hidden="true"></a>            <span class="va">self</span>.pre_release_numbers[version] <span class="op">=</span> []</span>
<span id="cb6-56"><a href="#cb6-56" aria-hidden="true"></a>        <span class="va">self</span>.pre_release_numbers[version].append(pre_release_number)</span>
<span id="cb6-57"><a href="#cb6-57" aria-hidden="true"></a></span>
<span id="cb6-58"><a href="#cb6-58" aria-hidden="true"></a>    <span class="kw">def</span> get_next_version(<span class="va">self</span>, pre_release):</span>
<span id="cb6-59"><a href="#cb6-59" aria-hidden="true"></a>        next_version <span class="op">=</span> <span class="bu">max</span>(</span>
<span id="cb6-60"><a href="#cb6-60" aria-hidden="true"></a>            [<span class="dv">0</span>]</span>
<span id="cb6-61"><a href="#cb6-61" aria-hidden="true"></a>            <span class="op">+</span></span>
<span id="cb6-62"><a href="#cb6-62" aria-hidden="true"></a>            [<span class="dv">1</span><span class="op">+</span>version <span class="cf">for</span> version <span class="kw">in</span> <span class="va">self</span>.versions]</span>
<span id="cb6-63"><a href="#cb6-63" aria-hidden="true"></a>            <span class="op">+</span></span>
<span id="cb6-64"><a href="#cb6-64" aria-hidden="true"></a>            <span class="bu">list</span>(<span class="va">self</span>.pre_release_numbers.keys())</span>
<span id="cb6-65"><a href="#cb6-65" aria-hidden="true"></a>        )</span>
<span id="cb6-66"><a href="#cb6-66" aria-hidden="true"></a>        next_pre_release_number <span class="op">=</span> <span class="dv">1</span> <span class="op">+</span> <span class="bu">max</span>(<span class="va">self</span>.pre_release_numbers.get(next_version, [<span class="dv">0</span>]))</span>
<span id="cb6-67"><a href="#cb6-67" aria-hidden="true"></a>        <span class="cf">if</span> pre_release:</span>
<span id="cb6-68"><a href="#cb6-68" aria-hidden="true"></a>            <span class="cf">return</span> PreRelease(next_version, next_pre_release_number)</span>
<span id="cb6-69"><a href="#cb6-69" aria-hidden="true"></a>        <span class="cf">else</span>:</span>
<span id="cb6-70"><a href="#cb6-70" aria-hidden="true"></a>            <span class="cf">return</span> Release(next_version)</span>
<span id="cb6-71"><a href="#cb6-71" aria-hidden="true"></a></span>
<span id="cb6-72"><a href="#cb6-72" aria-hidden="true"></a><span class="kw">class</span> Series:</span>
<span id="cb6-73"><a href="#cb6-73" aria-hidden="true"></a></span>
<span id="cb6-74"><a href="#cb6-74" aria-hidden="true"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, series):</span>
<span id="cb6-75"><a href="#cb6-75" aria-hidden="true"></a>        <span class="va">self</span>.series <span class="op">=</span> series</span>
<span id="cb6-76"><a href="#cb6-76" aria-hidden="true"></a>        <span class="va">self</span>.version_pattern <span class="op">=</span> <span class="st">&quot;&quot;</span>.join([</span>
<span id="cb6-77"><a href="#cb6-77" aria-hidden="true"></a>            <span class="vs">r&quot;^&quot;</span>,</span>
<span id="cb6-78"><a href="#cb6-78" aria-hidden="true"></a>            re.escape(series),</span>
<span id="cb6-79"><a href="#cb6-79" aria-hidden="true"></a>            re.escape(<span class="st">&quot;.&quot;</span>),</span>
<span id="cb6-80"><a href="#cb6-80" aria-hidden="true"></a>            <span class="vs">r&quot;(?P&lt;version&gt;\d+)&quot;</span>,</span>
<span id="cb6-81"><a href="#cb6-81" aria-hidden="true"></a>            <span class="vs">r&quot;(?P&lt;pre_release&gt;-(?P&lt;pre_release_number&gt;(\d+)))?&quot;</span>,</span>
<span id="cb6-82"><a href="#cb6-82" aria-hidden="true"></a>            <span class="vs">r&quot;$&quot;</span>,</span>
<span id="cb6-83"><a href="#cb6-83" aria-hidden="true"></a>        ])</span>
<span id="cb6-84"><a href="#cb6-84" aria-hidden="true"></a></span>
<span id="cb6-85"><a href="#cb6-85" aria-hidden="true"></a>    <span class="kw">def</span> parse_version(<span class="va">self</span>, tag):</span>
<span id="cb6-86"><a href="#cb6-86" aria-hidden="true"></a>        match <span class="op">=</span> re.match(<span class="va">self</span>.version_pattern, tag)</span>
<span id="cb6-87"><a href="#cb6-87" aria-hidden="true"></a>        <span class="cf">if</span> match:</span>
<span id="cb6-88"><a href="#cb6-88" aria-hidden="true"></a>            version <span class="op">=</span> <span class="bu">int</span>(match[<span class="st">&quot;version&quot;</span>])</span>
<span id="cb6-89"><a href="#cb6-89" aria-hidden="true"></a>            <span class="cf">if</span> match[<span class="st">&quot;pre_release&quot;</span>]:</span>
<span id="cb6-90"><a href="#cb6-90" aria-hidden="true"></a>                <span class="cf">return</span> PreRelease(version, <span class="bu">int</span>(match[<span class="st">&quot;pre_release_number&quot;</span>]))</span>
<span id="cb6-91"><a href="#cb6-91" aria-hidden="true"></a>            <span class="cf">else</span>:</span>
<span id="cb6-92"><a href="#cb6-92" aria-hidden="true"></a>                <span class="cf">return</span> Release(version)</span>
<span id="cb6-93"><a href="#cb6-93" aria-hidden="true"></a>        <span class="cf">return</span> NoMatchVersion()</span>
<span id="cb6-94"><a href="#cb6-94" aria-hidden="true"></a></span>
<span id="cb6-95"><a href="#cb6-95" aria-hidden="true"></a>    <span class="kw">def</span> format_release(<span class="va">self</span>, version):</span>
<span id="cb6-96"><a href="#cb6-96" aria-hidden="true"></a>        <span class="cf">return</span> <span class="ss">f&quot;</span><span class="sc">{</span><span class="va">self</span><span class="sc">.</span>series<span class="sc">}</span><span class="ss">.</span><span class="sc">{</span>version<span class="sc">}</span><span class="ss">&quot;</span></span>
<span id="cb6-97"><a href="#cb6-97" aria-hidden="true"></a></span>
<span id="cb6-98"><a href="#cb6-98" aria-hidden="true"></a>    <span class="kw">def</span> format_pre_release(<span class="va">self</span>, version, pre_release_number):</span>
<span id="cb6-99"><a href="#cb6-99" aria-hidden="true"></a>        <span class="cf">return</span> <span class="ss">f&quot;</span><span class="sc">{</span><span class="va">self</span><span class="sc">.</span>series<span class="sc">}</span><span class="ss">.</span><span class="sc">{</span>version<span class="sc">}</span><span class="ss">-</span><span class="sc">{</span>pre_release_number<span class="sc">}</span><span class="ss">&quot;</span></span></code></pre></div>
]]></description>
    <pubDate>Thu, 02 May 2024 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/function-to-oop-refactoring/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>April 2024 Update</title>
    <link>http://rickardlindberg.me/writing/newsletter/april-2024/</link>
    <description><![CDATA[<h1>April 2024 Update</h1>

<p><em>Published on  1 May 2024.</em></p>

<p>This is what I’ve been up to in April 2024:</p>
<ul>
<li><p>I started writing about <a href="/writing/output-tracking-vs-mocks/index.html">Output Tracking vs Mocks</a> (working title). I’m mainly writing it to refine my thinking on <a href="https://www.jamesshore.com/v2/projects/nullables/testing-without-mocks">Testing Without Mocks</a> patterns.</p></li>
<li><p>I watched <a href="https://youtu.be/P1vES9AgfC4">Moving IO to the edges of your app: Functional Core, Imperative Shell - Scott Wlaschin</a>. In it, Scott says that the functional core should return a decision that is then executed by the imperative shell. I want to explore that approach more. Perhaps in the above mentioned blog post.</p></li>
</ul>
]]></description>
    <pubDate>Wed, 01 May 2024 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/newsletter/april-2024/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>March 2024 Update</title>
    <link>http://rickardlindberg.me/writing/newsletter/march-2024/</link>
    <description><![CDATA[<h1>March 2024 Update</h1>

<p><em>Published on  2 April 2024.</em></p>

<p>This is what I’ve been up to in March 2024:</p>
<ul>
<li><p>I wanted to learn more about the roots of CI/CD (Continuous Integration/Delivery/Deployment).</p>
<ul>
<li><p>I read the chapter <a href="https://www.jamesshore.com/v2/books/aoad2/continuous_integration">Continuous Integration</a> from James Shore’s book The Art of Agile Development.</p></li>
<li><p>I read <a href="https://continuousdelivery.com/">Continuous Delivery</a> by Jez Humble and David Farley.</p></li>
<li><p>I learned from both sources, and I’m eager to start applying those ideas to various projects.</p></li>
</ul></li>
<li><p>I started reading <a href="https://samnewman.io/books/building_microservices_2nd_edition/">Building Microservices</a> by Sam Newman. I wanted to learn what microservices are all about. So far, my impression is that it is an exercise in building distributed systems, and many projects will be better of by not using it since distributed systems come with a cost.</p></li>
<li><p>I studied <a href="https://www.jamesshore.com/v2/projects/nullables/testing-without-mocks">Testing Without Mocks</a> more. In particular <a href="https://www.jamesshore.com/v2/projects/nullables/testing-without-mocks#output-tracking">Output Tracking</a>. Output Tracking is currently the most difficult aspect for me to know if I use correctly. I’ve previously touched on this subject in <a href="/writing/how-to-test-a-router/index.html">How to test a router?</a> I will probably write another blog post to refine my thinking.</p></li>
</ul>
]]></description>
    <pubDate>Tue, 02 Apr 2024 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/newsletter/march-2024/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>February 2024 Update</title>
    <link>http://rickardlindberg.me/writing/newsletter/february-2024/</link>
    <description><![CDATA[<h1>February 2024 Update</h1>

<p><em>Published on  1 March 2024.</em></p>

<p>This is what I’ve been up to in February 2024:</p>
<ul>
<li><p>For the first time since I started writing these newsletters in <a href="/writing/newsletter/june-2019/index.html">June 2019</a> I haven’t really got anything to write here. Even though I’ve been busy with other things in previous months as well, I’ve usually done something related to programming that is worth writing about. But not this month.</p></li>
<li><p>Oh, wait. I did actually browse through a book about Smalltalk and though about how it was way ahead of its time and that we still lack things in our development environments that were present in Smalltalk.</p></li>
</ul>
]]></description>
    <pubDate>Fri, 01 Mar 2024 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/newsletter/february-2024/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>January 2024 Update</title>
    <link>http://rickardlindberg.me/writing/newsletter/january-2024/</link>
    <description><![CDATA[<h1>January 2024 Update</h1>

<p><em>Published on  7 February 2024.</em></p>

<p>This is what I’ve been up to in January 2024:</p>
<ul>
<li>I tried to solve <a href="https://adventofcode.com/">Advent of Code</a> day 21, part 2, but failed. I decided to stop here for now. I will perhaps give it another try next year.</li>
</ul>
]]></description>
    <pubDate>Wed, 07 Feb 2024 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/newsletter/january-2024/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>December 2023 Update</title>
    <link>http://rickardlindberg.me/writing/newsletter/december-2023/</link>
    <description><![CDATA[<h1>December 2023 Update</h1>

<p><em>Published on  2 January 2024.</em></p>

<p>This is what I’ve been up to in December 2023:</p>
<ul>
<li><p>This month I’ve been all consumed by <a href="https://adventofcode.com/">Advent of Code</a>. This year was the first year that I tried to solve all puzzles from beginning to end. At the time of this writing, I have completely solved day 1-20 and part 1 of day 21.</p></li>
<li><p>I solved all puzzles in my <a href="https://github.com/rickardlindberg/linda-meta-oop">experimental programming language</a>. One reason I did that was to see how good a fit the language was and also get feedback on how the language could be improved to be a better fit for a broader range of problems.</p></li>
<li><p>The Advent of Code experience has been as expected: fun, challenging, frustrating, and stressful. The most fun thing I learned was an algorithm for <a href="https://en.wikipedia.org/wiki/Point_in_polygon">filling polygons</a>. It was useful for two problems, but only fast enough for one.</p></li>
<li><p>The experience of developing my language at the same time has also been fun, but the pressure of completing the puzzles has given me less focus on the language itself. But I managed to add some features to the language that were direct needs that came up when solving the puzzles. One was a simple, built-in test framework. Another was nicer syntax. Most of the time though, it was not limitations in the language that made solving the puzzles hard. However, sometimes the solution would have been more straightforward in a better suited language.</p></li>
</ul>
]]></description>
    <pubDate>Tue, 02 Jan 2024 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/newsletter/december-2023/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>November 2023 Update</title>
    <link>http://rickardlindberg.me/writing/newsletter/november-2023/</link>
    <description><![CDATA[<h1>November 2023 Update</h1>

<p><em>Published on 12 December 2023.</em></p>

<p>This is what I’ve been up to in November 2023:</p>
<ul>
<li><p>I continued work on my <a href="https://github.com/rickardlindberg/linda-meta-oop">experimental programming language</a> which is based on <a href="/writing/rlmeta/index.html">RLMeta</a>.</p>
<ul>
<li><p>I did more research on the paradigm of the <a href="https://en.wikipedia.org/wiki/Linda_(coordination_language)">Linda programming language</a> and how it would fit together with RLMeta.</p></li>
<li><p>I started evolving the RLMeta implementation to support the paradigm of Linda. I realized that RLMeta could itself be implemented in this paradigm and started to evolve the code base in that direction.</p></li>
<li><p>I plan on solving <a href="https://adventofcode.com/">Advent of Code</a> puzzles using this language to see how problems from different domains can be expressed.</p></li>
<li><p>I really should document this language and my work on it better.</p></li>
</ul></li>
</ul>
]]></description>
    <pubDate>Tue, 12 Dec 2023 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/newsletter/november-2023/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>October 2023 Update</title>
    <link>http://rickardlindberg.me/writing/newsletter/october-2023/</link>
    <description><![CDATA[<h1>October 2023 Update</h1>

<p><em>Published on  6 November 2023.</em></p>

<p>This is what I’ve been up to in October 2023:</p>
<ul>
<li><p>Somehow videos from <a href="https://computerhistory.org/">Computer History Museum</a> showed up in my Youtube feed and I once again got sucked into the world of <a href="/writing/alan-kay-notes/index.html">Alan Kay</a> and Smalltalk. Here are (some of?) the videos that I watched:</p>
<ul>
<li><a href="https://youtu.be/PaOMiNku1_M">CHM Live | Making Smalltalk</a></li>
<li><a href="https://youtu.be/loEREmEPEOY">CHM Live | Making Smalltalk: Member Event</a></li>
<li><a href="https://youtu.be/uknEhXyZgsg">Alto System Project: Dan Ingalls demonstrates Smalltalk</a></li>
</ul></li>
<li><p>I found the <a href="https://archive.org/details/byte-magazine-1981-08">Byte Magazine Volume 06 Number 08 - Smalltalk</a> online which covers many topics from Smalltalk. So interesting.</p></li>
<li><p>I played with some Smalltalks from <a href="https://smalltalkzoo.thechm.org/">the Smalltalk zoo</a>, and also with <a href="https://squeak.org/">Squeak</a>.</p></li>
<li><p>I played with RLMeta and worked on a <a href="https://github.com/rickardlindberg/rlmeta/tree/main/simpler_base">simpler base version</a>.</p></li>
<li><p>Revisiting Alan Kay, I once again was inspired by his ideas. What triggered it this time was re-watching <a href="https://www.youtube.com/watch?v=fhOHn9TClXY">Joe Armstrong &amp; Alan Kay - Joe Armstrong interviews Alan Kay</a>. In it, he mentions the <a href="https://en.wikipedia.org/wiki/Linda_(coordination_language)">Linda programming language</a> and how it relates to META II (which I’ve previously explored in <a href="/projects/rlmeta/index.html">RLMeta</a>). I decided to try to explore those ideas further in a new project: <a href="https://github.com/rickardlindberg/linda-meta-oop">https://github.com/rickardlindberg/linda-meta-oop</a>. Perhaps more to come there soon.</p></li>
<li><p>I watched <a href="https://youtu.be/CmIGPGPdxTI">Is Software Engineering Real Engineering? • Hillel Wayne • YOW! 2023</a>. What I remember from it now is that other engineering disciplines envy that software engineering has version control.</p></li>
<li><p>I had the realization that creating a DSL <em>might</em> be like science. You observe how a certain problem is solved or how a certain thing works. Then you try to <strong>describe</strong> that <strong>phenomena</strong> in a new language, the <strong>DSL</strong>. Then you make it run by <strong>writing a compiler</strong>. The new language allow people to solve problems that they might not have been able to do before. It allows them to think in a different way. The group of people who can <strong>create</strong> a DSL is most likely smaller than the group of people who can do useful work with one. Similar to how many people can use math today to solve useful problems, but might not have been able to invent math itself.</p></li>
</ul>
]]></description>
    <pubDate>Mon, 06 Nov 2023 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/newsletter/october-2023/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>September 2023 Update</title>
    <link>http://rickardlindberg.me/writing/newsletter/september-2023/</link>
    <description><![CDATA[<h1>September 2023 Update</h1>

<p><em>Published on 10 October 2023.</em></p>

<p>This is what I’ve been up to in September 2023:</p>
<ul>
<li><p>I wrote another devlog about my <a href="/writing/devlog-013-raspberrypi-game-console/index.html">Raspberry Pi game console</a>.</p></li>
<li><p>I watched <a href="https://www.youtube.com/watch?v=3gib0hKYjB0">Continued Learning: The Beauty of Maintenance - Kent Beck - DDD Europe 2020</a>. What stuck in my mind was the metaphor that software development is like a swan. You can watch the beauty as it moves across the water. That represents the behavior of the software system. The features. But to make that happen, lots of things is going on under the surface that you don’t see. The swan paddles its feet (?) to go forward, poop comes out, it is messy. That is the structural changes needed in software to make the features possible. Refactoring.</p></li>
<li><p>I started reading <a href="https://www.davefarley.net/?p=352">Modern Software Engineering</a> by Dave Farley. So far, I’ve gotten a few useful ideas out of it.</p></li>
<li><p>When I started reading about software engineering, <a href="/writing/alan-kay-notes/index.html">Alan Kay</a> came to mind again. I revisited some of his talks, trying to find things about science and engineering in particular. I admire Alan’s work, and I also like the Agile concepts that Dave talks about. I’m interested in figuring out if they contradict, or if I can happily continue to admire both.</p></li>
<li><p>When reading about Alan Kay again, Bret Victor came to mind, and I watched his talk <a href="https://www.youtube.com/watch?v=agOdP2Bmieg">The Humane Representation of Thought</a>. I feel like his and Kay’s work are worth revisiting from time to time. For inspiration for better ways of doing things. And for inspiration of things to try to do differently.</p></li>
</ul>
]]></description>
    <pubDate>Tue, 10 Oct 2023 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/newsletter/september-2023/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>DevLog 013: Raspberry Pi game console</title>
    <link>http://rickardlindberg.me/writing/devlog-013-raspberrypi-game-console/</link>
    <description><![CDATA[<h1>DevLog 013: Raspberry Pi game console</h1>

<p><em>Published on 10 September 2023.</em></p>

<p>It is time to revisit the <a href="/projects/agdpp/index.html">balloon shooter</a>. I’m interested in building a “game console PC” so that my son can more easily play the balloon shooter and other games. Until now we have played all games on my laptop.</p>
<p>This will involve two main steps I think. The first is to get a Raspberry Pi and install all games on it. The second involves auto starting a custom application that can be used to select which game to play by using the gamepad. Ideally, you should not need to use a mouse or a keyboard. My plan for this custom application is to build it using the framework that we have in the balloon shooter.</p>
<p>Let’s get started.</p>
<h2 id="the-raspberry-pi">The Raspberry Pi</h2>
<p>At first, I’m not sure what hardware to get for this game console PC. I look around a bit, and then eventually settle on a Raspberry Pi starter kit.</p>
<p>
<center>
<img src="pibox.png" title="fig:" alt="Raspberry Pi starter kit." />
</center>
</p>
<p>I am bit concerned that it will not be powerful enough to play games. But it is relatively cheap, and if it can’t play all games, perhaps my son (or me) can have some fun with it in another way.</p>
<h2 id="assembly">Assembly</h2>
<p>The starter kit comes with everything you need to get started. That’s also one reason that I went with it. I’m not that interested in selecting hardware. I’m more interested in quickly prototyping this game console PC. If it turns out the Pi is not powerful enough, but the game console PC concept is a hit, we can look for better hardware. However, if the game console PC is not a hit, we have not wasted that much time or money.</p>
<p>And look. Apparently Raspberry Pis need heat sinks and fans nowadays. When I last played with a Pi, many, many years ago, I don’t remember that being the case. Let’s hope that means that they are more powerful now.</p>
<p>
<center>
<img src="assembly.png" title="fig:" alt="Assembling the starter kit." />
</center>
</p>
<p>I assemble the kit in about 15 minutes. Then I boot it up and install the operating system that comes preconfigured. I let it do its thing, and come back once it is installed.</p>
<h2 id="setup">Setup</h2>
<p>I want to install <a href="https://www.supertux.org/">SuperTux</a> and the balloon shooter on the Pi.</p>
<p>It seems like the version of SuperTux is older than what I have on my laptop. And my laptop is old. Furthermore, Python 2 seems to be the default Python. I learn that when trying to install all requirements for the balloon shooter. I also have to install a newer version of Pygame and for that I need to install some SDL build dependencies. Perhaps getting a newer operating system would be nice.</p>
<p>Eventually, I get everything working:</p>
<p>
<center>
<img src="setup.png" title="fig:" alt="Setting up games." />
</center>
</p>
<p>The versions might be a little old. The performance might be so so. But we have something setup that we can experiment with.</p>
<h2 id="a-note-on-performance">A note on performance</h2>
<p>Me and my son try to play SuperTux on the setup. It feels a little different. Part of it might be that it is slightly different version of the game. Part of it might be that the Pi has worse performance. We try to run the game at a lower resolution, and it seems to help a bit. We can probably try different things to get better performance, but this is absolutely fine for now. My son is still having fun playing.</p>
<h2 id="autostart">Autostart</h2>
<p>To start SuperTux on the Pi you first have to start the Pi and then you have to select SuperTux from the menu with the mouse. The balloon shooter is even more complicated to start. First you need to open a terminal and then run a command.</p>
<p>I don’t think that is good enough for a game console PC. I want to be able to operate it using the gamepad only.</p>
<p>The first tiny step in that direction is to configure SuperTux as the startup application. If we can do that, then SuperTux can be started and played without using the keyboard or mouse.</p>
<p>Once we have that working, we can work on our own startup application that let us select the game, and then we can start that one instead.</p>
<p>I search the internet for how to configure a startup application for the Pi.</p>
<p>I find an article that says that you can put a file in the autostart directory. I try this:</p>
<pre><code>$ cat /etc/xdg/autostart/game_console_start.desktop
[Desktop Entry]
Name=Game console start
Exec=supertux2</code></pre>
<p>I restart the Pi, and SuperTux actually starts automatically and you can start playing it using the gamepad. Fantastic!</p>
<h2 id="startup-application-idea">Startup application idea</h2>
<p>Let’s move on to our custom startup application. Here is the idea that I have for it:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="cf">while</span> <span class="va">True</span>:</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a>    subprocess.call(StartupApplication.create().run())</span></code></pre></div>
<p>This code runs the startup application in a loop. Its <code>run</code> method should return the command to run. (The game to play or shutdown command.)</p>
<p>I think we can test drive the <code>StartupApplication</code> and then we can hook it up in the loop above.</p>
<p>Perhaps we should even test drive the loop.</p>
<p>We’ll see.</p>
<h2 id="test-driving-the-application">Test driving the application</h2>
<p>I start with this in a new file:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="kw">class</span> StartupApplication:</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a>    <span class="co">&quot;&quot;&quot;</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a><span class="co">    I draw an application select screen:</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true"></a><span class="co">    &gt;&gt;&gt; events = StartupApplication.run_in_test_mode(</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true"></a><span class="co">    ...     events=[</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true"></a><span class="co">    ...         [GameLoop.create_event_user_closed_window()],</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true"></a><span class="co">    ...     ]</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true"></a><span class="co">    ... )</span></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true"></a><span class="co">    &quot;&quot;&quot;</span></span></code></pre></div>
<p>I create the bare minimum that the test complains about and get this:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="kw">class</span> StartupApplication:</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a>    ...</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true"></a>    <span class="at">@staticmethod</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true"></a>    <span class="kw">def</span> run_in_test_mode(events<span class="op">=</span>[]):</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true"></a>        loop <span class="op">=</span> GameLoop.create_null(</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true"></a>            events<span class="op">=</span>events<span class="op">+</span>[</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true"></a>                [GameLoop.create_event_user_closed_window()],</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true"></a>            ]</span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true"></a>        )</span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true"></a>        events <span class="op">=</span> loop.track_events()</span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true"></a>        StartupApplication(loop).run()</span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true"></a>        <span class="cf">return</span> events</span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true"></a></span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, loop):</span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true"></a>        <span class="va">self</span>.loop <span class="op">=</span> loop</span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true"></a></span>
<span id="cb4-19"><a href="#cb4-19" aria-hidden="true"></a>    <span class="kw">def</span> run(<span class="va">self</span>):</span>
<span id="cb4-20"><a href="#cb4-20" aria-hidden="true"></a>        <span class="va">self</span>.loop.run(<span class="va">self</span>)</span>
<span id="cb4-21"><a href="#cb4-21" aria-hidden="true"></a></span>
<span id="cb4-22"><a href="#cb4-22" aria-hidden="true"></a>    <span class="kw">def</span> event(<span class="va">self</span>, event):</span>
<span id="cb4-23"><a href="#cb4-23" aria-hidden="true"></a>        <span class="cf">pass</span></span>
<span id="cb4-24"><a href="#cb4-24" aria-hidden="true"></a></span>
<span id="cb4-25"><a href="#cb4-25" aria-hidden="true"></a>    <span class="kw">def</span> tick(<span class="va">self</span>, dt):</span>
<span id="cb4-26"><a href="#cb4-26" aria-hidden="true"></a>        <span class="cf">pass</span></span></code></pre></div>
<p>Now it doesn’t complain, but it seems to hang in an infinite loop.</p>
<p>I modify <code>event</code> to this:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="kw">class</span> StartupApplication:</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a>    ...</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true"></a></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true"></a>    <span class="kw">def</span> event(<span class="va">self</span>, event):</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true"></a>        <span class="cf">if</span> event.is_user_closed_window():</span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true"></a>            <span class="cf">raise</span> ExitGameLoop()</span></code></pre></div>
<p>And we’re green. Let’s commit.</p>
<pre><code>$ git commit -a -m &#39;Emryo to new startup application.&#39;
[main a55d17e] Emryo to new startup application.
 2 files changed, 39 insertions(+)
 create mode 100644 startup.py</code></pre>
<p>The test is not yet fleshed out. It doesn’t test what it says it tests. But it drove out the skeleton of the application.</p>
<h2 id="reflecting-on-the-design">Reflecting on the design</h2>
<p>It’s been a while since I worked on the balloon shooter. What do I think when I work in this design again?</p>
<p>I got stuck in an infinite loop. That happens because we have a <code>while True:</code> in our game loop somewhere. I’ve always found testing infinite loops difficult. That’s one reason why I hesitated testing the loop for the startup application. But now I get another idea. What if we create the loop like this instead?</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a><span class="cf">while</span> <span class="va">self</span>.loop_condition.active():</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a>    ...</span></code></pre></div>
<p>Then we can create different versions of the loop condition maybe something like this:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a><span class="kw">class</span> InfiniteLoopCondition:</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true"></a></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true"></a>    <span class="kw">def</span> active(<span class="va">self</span>):</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true"></a>        <span class="cf">return</span> <span class="va">True</span></span></code></pre></div>
<div class="sourceCode" id="cb9"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true"></a><span class="kw">class</span> TestLoopCondition:</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true"></a></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, iterations):</span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true"></a>        <span class="va">self</span>.counter <span class="op">=</span> <span class="dv">0</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true"></a>        <span class="va">self</span>.iterations <span class="op">=</span> iterations</span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true"></a></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true"></a>    <span class="kw">def</span> active(<span class="va">self</span>):</span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true"></a>        flag <span class="op">=</span> <span class="va">self</span>.counter <span class="op">&gt;=</span> <span class="va">self</span>.iterations</span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true"></a>        <span class="va">self</span>.iterations <span class="op">+=</span> <span class="dv">1</span></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true"></a>        <span class="cf">return</span> flag</span></code></pre></div>
<p>Let’s see if we can try this out in the startup application. If it works out well, perhaps we can port it to the game loop as well?</p>
<h2 id="a-mistake">A mistake</h2>
<p>The test that we wrote does not assert anything on the events. Let’s fix that. I comment out the assignment of <code>events</code> and paste the expected test output:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true"></a><span class="co">I draw an application select screen:</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true"></a></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; StartupApplication.run_in_test_mode(</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true"></a><span class="co">...     events=[</span></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true"></a><span class="co">...         [GameLoop.create_event_user_closed_window()],</span></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true"></a><span class="co">...     ]</span></span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true"></a><span class="co">... )</span></span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true"></a><span class="co">GAMELOOP_INIT =&gt;</span></span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true"></a><span class="co">    resolution: (1280, 720)</span></span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true"></a><span class="co">    fps: 60</span></span>
<span id="cb10-12"><a href="#cb10-12" aria-hidden="true"></a><span class="co">GAMELOOP_QUIT =&gt;</span></span>
<span id="cb10-13"><a href="#cb10-13" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<h2 id="the-looping-concept">The looping concept</h2>
<p>This startup application should run in an infinite loop. In each iteration it should init the game loop and show the game selection screen. Once the selection has been made, it should quit the game loop and run the command. Then it starts all over.</p>
<p>Let’s try the looping thing.</p>
<p>I start by TDDing the loop conditions:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true"></a><span class="kw">class</span> InifiteLoopCondition:</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true"></a></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true"></a>    <span class="kw">def</span> active(<span class="va">self</span>):</span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true"></a>        <span class="co">&quot;&quot;&quot;</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true"></a><span class="co">        &gt;&gt;&gt; InifiteLoopCondition().active()</span></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true"></a><span class="co">        True</span></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true"></a><span class="co">        &quot;&quot;&quot;</span></span></code></pre></div>
<p>That fails. Fix by return true. The other:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true"></a><span class="kw">class</span> FiteLoopCondition:</span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true"></a></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, iterations):</span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true"></a>        <span class="va">self</span>.iterations <span class="op">=</span> iterations</span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true"></a>        <span class="va">self</span>.count <span class="op">=</span> <span class="dv">0</span></span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true"></a></span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true"></a>    <span class="kw">def</span> active(<span class="va">self</span>):</span>
<span id="cb12-8"><a href="#cb12-8" aria-hidden="true"></a>        <span class="co">&quot;&quot;&quot;</span></span>
<span id="cb12-9"><a href="#cb12-9" aria-hidden="true"></a><span class="co">        &gt;&gt;&gt; condition = FiteLoopCondition(iterations=2)</span></span>
<span id="cb12-10"><a href="#cb12-10" aria-hidden="true"></a><span class="co">        &gt;&gt;&gt; condition.active()</span></span>
<span id="cb12-11"><a href="#cb12-11" aria-hidden="true"></a><span class="co">        True</span></span>
<span id="cb12-12"><a href="#cb12-12" aria-hidden="true"></a><span class="co">        &gt;&gt;&gt; condition.active()</span></span>
<span id="cb12-13"><a href="#cb12-13" aria-hidden="true"></a><span class="co">        True</span></span>
<span id="cb12-14"><a href="#cb12-14" aria-hidden="true"></a><span class="co">        &gt;&gt;&gt; condition.active()</span></span>
<span id="cb12-15"><a href="#cb12-15" aria-hidden="true"></a><span class="co">        False</span></span>
<span id="cb12-16"><a href="#cb12-16" aria-hidden="true"></a><span class="co">        &quot;&quot;&quot;</span></span>
<span id="cb12-17"><a href="#cb12-17" aria-hidden="true"></a>        flag <span class="op">=</span> <span class="va">self</span>.count <span class="op">&lt;</span> <span class="va">self</span>.iterations</span>
<span id="cb12-18"><a href="#cb12-18" aria-hidden="true"></a>        <span class="va">self</span>.count <span class="op">+=</span> <span class="dv">1</span></span>
<span id="cb12-19"><a href="#cb12-19" aria-hidden="true"></a>        <span class="cf">return</span> flag</span></code></pre></div>
<p>I actually got the condition wrong here at first. I’m glad I wrote a test for it. The previous example, <code>TestLoopCondition</code>, above is actually wrong. Even for really simple code like this, having tests is nice.</p>
<p>Let’s see if we can use a loop condition and have the test show us that two loops are actually made.</p>
<p>I change</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true"></a><span class="kw">class</span> StartupApplication:</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true"></a></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true"></a>    ...</span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true"></a></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true"></a>    <span class="at">@staticmethod</span></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true"></a>    <span class="kw">def</span> run_in_test_mode(events<span class="op">=</span>[]):</span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true"></a>        ...</span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true"></a>        StartupApplication(loop).run()</span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true"></a>        ...</span></code></pre></div>
<p>to</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true"></a><span class="kw">class</span> StartupApplication:</span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true"></a></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true"></a>    ...</span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true"></a></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true"></a>    <span class="at">@staticmethod</span></span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true"></a>    <span class="kw">def</span> run_in_test_mode(events<span class="op">=</span>[]):</span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true"></a>        ...</span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true"></a>        StartupApplication(</span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true"></a>            loop<span class="op">=</span>loop,</span>
<span id="cb14-10"><a href="#cb14-10" aria-hidden="true"></a>            loop_condition<span class="op">=</span>FiteLoopCondition(<span class="dv">2</span>)</span>
<span id="cb14-11"><a href="#cb14-11" aria-hidden="true"></a>        ).run()</span>
<span id="cb14-12"><a href="#cb14-12" aria-hidden="true"></a>        ...</span></code></pre></div>
<p>I also notice that i misspelled finite. I fix that and then add the parameter to the class. Test passes. Let’s add an actual loop:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true"></a><span class="kw">class</span> StartupApplication:</span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true"></a></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true"></a>    ...</span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true"></a></span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true"></a>    <span class="kw">def</span> run(<span class="va">self</span>):</span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true"></a>        <span class="cf">while</span> <span class="va">self</span>.loop_condition.active():</span>
<span id="cb15-7"><a href="#cb15-7" aria-hidden="true"></a>            <span class="va">self</span>.loop.run(<span class="va">self</span>)</span></code></pre></div>
<p>This, expectedly, output another loop which I add to the assertion. Perfect!</p>
<pre><code>    GAMELOOP_INIT =&gt;
        resolution: (1280, 720)
        fps: 60
    GAMELOOP_QUIT =&gt;</code></pre>
<p>We are not yet using the <code>InfiniteLoopCondition</code>. Let’s change that by adding a <code>create</code> method:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true"></a><span class="kw">class</span> StartupApplication:</span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true"></a></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true"></a>    ...</span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true"></a></span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true"></a>    <span class="at">@staticmethod</span></span>
<span id="cb17-6"><a href="#cb17-6" aria-hidden="true"></a>    <span class="kw">def</span> create():</span>
<span id="cb17-7"><a href="#cb17-7" aria-hidden="true"></a>        <span class="co">&quot;&quot;&quot;</span></span>
<span id="cb17-8"><a href="#cb17-8" aria-hidden="true"></a><span class="co">        &gt;&gt;&gt; isinstance(StartupApplication.create(), StartupApplication)</span></span>
<span id="cb17-9"><a href="#cb17-9" aria-hidden="true"></a><span class="co">        True</span></span>
<span id="cb17-10"><a href="#cb17-10" aria-hidden="true"></a><span class="co">        &quot;&quot;&quot;</span></span>
<span id="cb17-11"><a href="#cb17-11" aria-hidden="true"></a>        <span class="cf">return</span> StartupApplication(</span>
<span id="cb17-12"><a href="#cb17-12" aria-hidden="true"></a>            loop<span class="op">=</span>GameLoop.create(),</span>
<span id="cb17-13"><a href="#cb17-13" aria-hidden="true"></a>            loop_condition<span class="op">=</span>InifiteLoopCondition()</span>
<span id="cb17-14"><a href="#cb17-14" aria-hidden="true"></a>        )</span></code></pre></div>
<p>I also add this:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true"></a><span class="cf">if</span> <span class="va">__name__</span> <span class="op">==</span> <span class="st">&quot;__main__&quot;</span>:</span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true"></a>    StartupApplication.create().run()</span></code></pre></div>
<p>And when I run</p>
<pre><code>$ python startup.py</code></pre>
<p>It indeed creates a new window every time I close it.</p>
<pre><code>$ git commit -a -m &#39;Add startup entry point and have it loop.&#39;
[main aadd1a2] Add startup entry point and have it loop.
 1 file changed, 60 insertions(+), 5 deletions(-)</code></pre>
<h2 id="selecting-a-game">Selecting a game</h2>
<p>What is the simplest possible solution for selecting a game?</p>
<p>I imagine that the display shows an icon for each game that can be selected. Then you move a cursor over it and press a key to select it.</p>
<p>I start by getting some games on the screen:</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true"></a><span class="kw">def</span> tick(<span class="va">self</span>, dt):</span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true"></a>    <span class="va">self</span>.loop.clear_screen()</span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true"></a>    <span class="va">self</span>.loop.draw_text(Point(x<span class="op">=</span><span class="dv">100</span>, y<span class="op">=</span><span class="dv">100</span>), text<span class="op">=</span><span class="st">&quot;SuperTux&quot;</span>)</span>
<span id="cb21-4"><a href="#cb21-4" aria-hidden="true"></a>    <span class="va">self</span>.loop.draw_text(Point(x<span class="op">=</span><span class="dv">100</span>, y<span class="op">=</span><span class="dv">200</span>), text<span class="op">=</span><span class="st">&quot;Balloon Shooter&quot;</span>)</span></code></pre></div>
<p>It looks like this:</p>
<p>
<center>
<img src="games.png" title="fig:" alt="Games in startup screen." />
</center>
</p>
<p>I think we also need a cursor:</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true"></a><span class="kw">def</span> tick(<span class="va">self</span>, dt):</span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true"></a>    <span class="va">self</span>.loop.clear_screen()</span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true"></a>    <span class="va">self</span>.loop.draw_text(Point(x<span class="op">=</span><span class="dv">100</span>, y<span class="op">=</span><span class="dv">100</span>), text<span class="op">=</span><span class="st">&quot;SuperTux&quot;</span>)</span>
<span id="cb22-4"><a href="#cb22-4" aria-hidden="true"></a>    <span class="va">self</span>.loop.draw_text(Point(x<span class="op">=</span><span class="dv">100</span>, y<span class="op">=</span><span class="dv">200</span>), text<span class="op">=</span><span class="st">&quot;Balloon Shooter&quot;</span>)</span>
<span id="cb22-5"><a href="#cb22-5" aria-hidden="true"></a>    <span class="va">self</span>.loop.draw_circle(Point(x<span class="op">=</span><span class="dv">500</span>, y<span class="op">=</span><span class="dv">500</span>), radius<span class="op">=</span><span class="dv">20</span>, color<span class="op">=</span><span class="st">&quot;pink&quot;</span>)</span></code></pre></div>
<p>It looks like this:</p>
<p>
<center>
<img src="cursor.png" title="fig:" alt="Cursor in startup screen." />
</center>
</p>
<p>Now I think two things are missing. The first is that at the press of a button, the game closest to the cursor should start. The second is that you also need to be able to move the cursor.</p>
<p>I think working on movement is secondary. It is more important to be able to start <strong>one</strong> game instead of nothing. So let’s work on that first.</p>
<h2 id="starting-a-game">Starting a game</h2>
<p>I want to write a test for the new behavior, but I find that testing at the top level is tedious and error prone. I would therefore like to start by refactoring and extracting a <code>StartupScene</code> maybe that has an interface that is easier to test. I end up with this:</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true"></a><span class="kw">class</span> StartupScene:</span>
<span id="cb23-2"><a href="#cb23-2" aria-hidden="true"></a></span>
<span id="cb23-3"><a href="#cb23-3" aria-hidden="true"></a>    <span class="kw">def</span> event(<span class="va">self</span>, event):</span>
<span id="cb23-4"><a href="#cb23-4" aria-hidden="true"></a>        <span class="cf">if</span> event.is_user_closed_window():</span>
<span id="cb23-5"><a href="#cb23-5" aria-hidden="true"></a>            <span class="cf">raise</span> ExitGameLoop()</span>
<span id="cb23-6"><a href="#cb23-6" aria-hidden="true"></a></span>
<span id="cb23-7"><a href="#cb23-7" aria-hidden="true"></a>    <span class="kw">def</span> draw(<span class="va">self</span>, loop):</span>
<span id="cb23-8"><a href="#cb23-8" aria-hidden="true"></a>        loop.draw_text(Point(x<span class="op">=</span><span class="dv">100</span>, y<span class="op">=</span><span class="dv">100</span>), text<span class="op">=</span><span class="st">&quot;SuperTux&quot;</span>)</span>
<span id="cb23-9"><a href="#cb23-9" aria-hidden="true"></a>        loop.draw_text(Point(x<span class="op">=</span><span class="dv">100</span>, y<span class="op">=</span><span class="dv">200</span>), text<span class="op">=</span><span class="st">&quot;Balloon Shooter&quot;</span>)</span>
<span id="cb23-10"><a href="#cb23-10" aria-hidden="true"></a>        loop.draw_circle(Point(x<span class="op">=</span><span class="dv">500</span>, y<span class="op">=</span><span class="dv">500</span>), radius<span class="op">=</span><span class="dv">20</span>, color<span class="op">=</span><span class="st">&quot;pink&quot;</span>)</span></code></pre></div>
<p>I’m sure this refactoring works because I have tests to cover it.</p>
<p>Commit!</p>
<p>Now, let’s see if we can write a test:</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true"></a><span class="co">When XBOX_A is pressed, I start the game that is closest to the cursor:</span></span>
<span id="cb24-3"><a href="#cb24-3" aria-hidden="true"></a></span>
<span id="cb24-4"><a href="#cb24-4" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; scene = StartupScene()</span></span>
<span id="cb24-5"><a href="#cb24-5" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; scene.event(GameLoop.create_event_joystick_down(XBOX_A))</span></span>
<span id="cb24-6"><a href="#cb24-6" aria-hidden="true"></a><span class="co">SuperTux</span></span>
<span id="cb24-7"><a href="#cb24-7" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>I make it pass like this:</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true"></a><span class="kw">class</span> StartupScene:</span>
<span id="cb25-2"><a href="#cb25-2" aria-hidden="true"></a></span>
<span id="cb25-3"><a href="#cb25-3" aria-hidden="true"></a>    ...</span>
<span id="cb25-4"><a href="#cb25-4" aria-hidden="true"></a></span>
<span id="cb25-5"><a href="#cb25-5" aria-hidden="true"></a>    <span class="kw">def</span> event(<span class="va">self</span>, event):</span>
<span id="cb25-6"><a href="#cb25-6" aria-hidden="true"></a>        ...</span>
<span id="cb25-7"><a href="#cb25-7" aria-hidden="true"></a>        <span class="cf">elif</span> event.is_joystick_down(XBOX_A):</span>
<span id="cb25-8"><a href="#cb25-8" aria-hidden="true"></a>            <span class="bu">print</span>(<span class="st">&quot;SuperTux&quot;</span>)</span></code></pre></div>
<p>This is obviously faking it. It is not supposed to print the name of the game, it is supposed to run it, or, wait a minute. This class is not supposed to run it, the top-level class is.</p>
<p>Let’s scratch this and start over.</p>
<h2 id="starting-a-game-again">Starting a game (again)</h2>
<p>Let’s have a look at the top-level test:</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb26-2"><a href="#cb26-2" aria-hidden="true"></a><span class="co">I draw an application select screen:</span></span>
<span id="cb26-3"><a href="#cb26-3" aria-hidden="true"></a></span>
<span id="cb26-4"><a href="#cb26-4" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; StartupApplication.run_in_test_mode(</span></span>
<span id="cb26-5"><a href="#cb26-5" aria-hidden="true"></a><span class="co">...     events=[</span></span>
<span id="cb26-6"><a href="#cb26-6" aria-hidden="true"></a><span class="co">...         [],</span></span>
<span id="cb26-7"><a href="#cb26-7" aria-hidden="true"></a><span class="co">...         [GameLoop.create_event_user_closed_window()],</span></span>
<span id="cb26-8"><a href="#cb26-8" aria-hidden="true"></a><span class="co">...         [],</span></span>
<span id="cb26-9"><a href="#cb26-9" aria-hidden="true"></a><span class="co">...         [GameLoop.create_event_user_closed_window()],</span></span>
<span id="cb26-10"><a href="#cb26-10" aria-hidden="true"></a><span class="co">...     ]</span></span>
<span id="cb26-11"><a href="#cb26-11" aria-hidden="true"></a><span class="co">... )</span></span>
<span id="cb26-12"><a href="#cb26-12" aria-hidden="true"></a><span class="co">GAMELOOP_INIT =&gt;</span></span>
<span id="cb26-13"><a href="#cb26-13" aria-hidden="true"></a><span class="co">    resolution: (1280, 720)</span></span>
<span id="cb26-14"><a href="#cb26-14" aria-hidden="true"></a><span class="co">    fps: 60</span></span>
<span id="cb26-15"><a href="#cb26-15" aria-hidden="true"></a><span class="co">CLEAR_SCREEN =&gt;</span></span>
<span id="cb26-16"><a href="#cb26-16" aria-hidden="true"></a><span class="co">DRAW_TEXT =&gt;</span></span>
<span id="cb26-17"><a href="#cb26-17" aria-hidden="true"></a><span class="co">    x: 100</span></span>
<span id="cb26-18"><a href="#cb26-18" aria-hidden="true"></a><span class="co">    y: 100</span></span>
<span id="cb26-19"><a href="#cb26-19" aria-hidden="true"></a><span class="co">    text: &#39;SuperTux&#39;</span></span>
<span id="cb26-20"><a href="#cb26-20" aria-hidden="true"></a><span class="co">DRAW_TEXT =&gt;</span></span>
<span id="cb26-21"><a href="#cb26-21" aria-hidden="true"></a><span class="co">    x: 100</span></span>
<span id="cb26-22"><a href="#cb26-22" aria-hidden="true"></a><span class="co">    y: 200</span></span>
<span id="cb26-23"><a href="#cb26-23" aria-hidden="true"></a><span class="co">    text: &#39;Balloon Shooter&#39;</span></span>
<span id="cb26-24"><a href="#cb26-24" aria-hidden="true"></a><span class="co">DRAW_CIRCLE =&gt;</span></span>
<span id="cb26-25"><a href="#cb26-25" aria-hidden="true"></a><span class="co">    x: 500</span></span>
<span id="cb26-26"><a href="#cb26-26" aria-hidden="true"></a><span class="co">    y: 500</span></span>
<span id="cb26-27"><a href="#cb26-27" aria-hidden="true"></a><span class="co">    radius: 20</span></span>
<span id="cb26-28"><a href="#cb26-28" aria-hidden="true"></a><span class="co">    color: &#39;pink&#39;</span></span>
<span id="cb26-29"><a href="#cb26-29" aria-hidden="true"></a><span class="co">GAMELOOP_QUIT =&gt;</span></span>
<span id="cb26-30"><a href="#cb26-30" aria-hidden="true"></a><span class="co">GAMELOOP_INIT =&gt;</span></span>
<span id="cb26-31"><a href="#cb26-31" aria-hidden="true"></a><span class="co">    resolution: (1280, 720)</span></span>
<span id="cb26-32"><a href="#cb26-32" aria-hidden="true"></a><span class="co">    fps: 60</span></span>
<span id="cb26-33"><a href="#cb26-33" aria-hidden="true"></a><span class="co">CLEAR_SCREEN =&gt;</span></span>
<span id="cb26-34"><a href="#cb26-34" aria-hidden="true"></a><span class="co">DRAW_TEXT =&gt;</span></span>
<span id="cb26-35"><a href="#cb26-35" aria-hidden="true"></a><span class="co">    x: 100</span></span>
<span id="cb26-36"><a href="#cb26-36" aria-hidden="true"></a><span class="co">    y: 100</span></span>
<span id="cb26-37"><a href="#cb26-37" aria-hidden="true"></a><span class="co">    text: &#39;SuperTux&#39;</span></span>
<span id="cb26-38"><a href="#cb26-38" aria-hidden="true"></a><span class="co">DRAW_TEXT =&gt;</span></span>
<span id="cb26-39"><a href="#cb26-39" aria-hidden="true"></a><span class="co">    x: 100</span></span>
<span id="cb26-40"><a href="#cb26-40" aria-hidden="true"></a><span class="co">    y: 200</span></span>
<span id="cb26-41"><a href="#cb26-41" aria-hidden="true"></a><span class="co">    text: &#39;Balloon Shooter&#39;</span></span>
<span id="cb26-42"><a href="#cb26-42" aria-hidden="true"></a><span class="co">DRAW_CIRCLE =&gt;</span></span>
<span id="cb26-43"><a href="#cb26-43" aria-hidden="true"></a><span class="co">    x: 500</span></span>
<span id="cb26-44"><a href="#cb26-44" aria-hidden="true"></a><span class="co">    y: 500</span></span>
<span id="cb26-45"><a href="#cb26-45" aria-hidden="true"></a><span class="co">    radius: 20</span></span>
<span id="cb26-46"><a href="#cb26-46" aria-hidden="true"></a><span class="co">    color: &#39;pink&#39;</span></span>
<span id="cb26-47"><a href="#cb26-47" aria-hidden="true"></a><span class="co">GAMELOOP_QUIT =&gt;</span></span>
<span id="cb26-48"><a href="#cb26-48" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>This shows our game loop runs twice, but there is no mention that a command is run. Let’s modify</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb27-1"><a href="#cb27-1" aria-hidden="true"></a><span class="kw">class</span> StartupApplication:</span>
<span id="cb27-2"><a href="#cb27-2" aria-hidden="true"></a></span>
<span id="cb27-3"><a href="#cb27-3" aria-hidden="true"></a>    ...</span>
<span id="cb27-4"><a href="#cb27-4" aria-hidden="true"></a></span>
<span id="cb27-5"><a href="#cb27-5" aria-hidden="true"></a>    <span class="kw">def</span> run(<span class="va">self</span>):</span>
<span id="cb27-6"><a href="#cb27-6" aria-hidden="true"></a>        <span class="cf">while</span> <span class="va">self</span>.loop_condition.active():</span>
<span id="cb27-7"><a href="#cb27-7" aria-hidden="true"></a>            <span class="va">self</span>.loop.run(<span class="va">self</span>)</span></code></pre></div>
<p>to</p>
<div class="sourceCode" id="cb28"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb28-1"><a href="#cb28-1" aria-hidden="true"></a><span class="kw">class</span> StartupApplication:</span>
<span id="cb28-2"><a href="#cb28-2" aria-hidden="true"></a></span>
<span id="cb28-3"><a href="#cb28-3" aria-hidden="true"></a>    ...</span>
<span id="cb28-4"><a href="#cb28-4" aria-hidden="true"></a></span>
<span id="cb28-5"><a href="#cb28-5" aria-hidden="true"></a>    <span class="kw">def</span> run(<span class="va">self</span>):</span>
<span id="cb28-6"><a href="#cb28-6" aria-hidden="true"></a>        <span class="cf">while</span> <span class="va">self</span>.loop_condition.active():</span>
<span id="cb28-7"><a href="#cb28-7" aria-hidden="true"></a>            <span class="va">self</span>.loop.run(<span class="va">self</span>)</span>
<span id="cb28-8"><a href="#cb28-8" aria-hidden="true"></a>            <span class="bu">print</span>(<span class="ss">f&quot;TODO: run </span><span class="sc">{</span><span class="va">self</span><span class="sc">.</span>startup_scene<span class="sc">.</span>get_command()<span class="sc">}</span><span class="ss">&quot;</span>)</span></code></pre></div>
<p>It complains that <code>get_command</code> does not exist. Let’s add it:</p>
<div class="sourceCode" id="cb29"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb29-1"><a href="#cb29-1" aria-hidden="true"></a><span class="kw">class</span> StartupScene:</span>
<span id="cb29-2"><a href="#cb29-2" aria-hidden="true"></a></span>
<span id="cb29-3"><a href="#cb29-3" aria-hidden="true"></a>    <span class="kw">def</span> get_command(<span class="va">self</span>):</span>
<span id="cb29-4"><a href="#cb29-4" aria-hidden="true"></a>        <span class="cf">return</span> [<span class="st">&quot;supertux2&quot;</span>]</span>
<span id="cb29-5"><a href="#cb29-5" aria-hidden="true"></a></span>
<span id="cb29-6"><a href="#cb29-6" aria-hidden="true"></a>    ...</span></code></pre></div>
<p>We are now getting a somewhat expected test failure:</p>
<pre><code>Differences (ndiff with -expected +actual):
    + TODO: run [&#39;supertux2&#39;]
    + TODO: run [&#39;supertux2&#39;]
      GAMELOOP_INIT =&gt;
          resolution: (1280, 720)
          fps: 60
      CLEAR_SCREEN =&gt;</code></pre>
<p>I was thinking to fake this and postpone running the actual command. To do it properly we need an infrastructure wrapper for running commands. I’ll just do it.</p>
<p>Here is a first faked version:</p>
<div class="sourceCode" id="cb31"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb31-1"><a href="#cb31-1" aria-hidden="true"></a><span class="kw">class</span> Command(Observable):</span>
<span id="cb31-2"><a href="#cb31-2" aria-hidden="true"></a></span>
<span id="cb31-3"><a href="#cb31-3" aria-hidden="true"></a>    <span class="at">@staticmethod</span></span>
<span id="cb31-4"><a href="#cb31-4" aria-hidden="true"></a>    <span class="kw">def</span> create():</span>
<span id="cb31-5"><a href="#cb31-5" aria-hidden="true"></a>        <span class="cf">return</span> Command()</span>
<span id="cb31-6"><a href="#cb31-6" aria-hidden="true"></a></span>
<span id="cb31-7"><a href="#cb31-7" aria-hidden="true"></a>    <span class="at">@staticmethod</span></span>
<span id="cb31-8"><a href="#cb31-8" aria-hidden="true"></a>    <span class="kw">def</span> create_null():</span>
<span id="cb31-9"><a href="#cb31-9" aria-hidden="true"></a>        <span class="cf">return</span> Command()</span>
<span id="cb31-10"><a href="#cb31-10" aria-hidden="true"></a></span>
<span id="cb31-11"><a href="#cb31-11" aria-hidden="true"></a>    <span class="kw">def</span> run(<span class="va">self</span>, command):</span>
<span id="cb31-12"><a href="#cb31-12" aria-hidden="true"></a>        <span class="va">self</span>.notify(<span class="st">&quot;COMMAND&quot;</span>, {<span class="st">&quot;command&quot;</span>: command})</span></code></pre></div>
<p>Instead of printing the command, it sends a notification so that we can assert that the event happens at the right time in the test. That is, we can assert that a command is run after the game loop is quit:</p>
<pre><code>...
GAMELOOP_QUIT =&gt;
COMMAND =&gt;
    command: [&#39;supertux2&#39;]
...</code></pre>
<p>This works. Let’s commit:</p>
<pre><code>$ git commit -a -m &#39;Run command from StartupScene when game loop is quit.&#39;
[main 4c47b18] Run command from StartupScene when game loop is quit.
 1 file changed, 31 insertions(+), 5 deletions(-)</code></pre>
<p>For this to actually do something, we need to flesh out <code>Command</code>. Here is what I end up with:</p>
<div class="sourceCode" id="cb34"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb34-1"><a href="#cb34-1" aria-hidden="true"></a><span class="kw">class</span> Command(Observable):</span>
<span id="cb34-2"><a href="#cb34-2" aria-hidden="true"></a></span>
<span id="cb34-3"><a href="#cb34-3" aria-hidden="true"></a>    <span class="co">&quot;&quot;&quot;</span></span>
<span id="cb34-4"><a href="#cb34-4" aria-hidden="true"></a><span class="co">    &gt;&gt;&gt; Command.create().run([&quot;echo&quot;, &quot;hello&quot;])</span></span>
<span id="cb34-5"><a href="#cb34-5" aria-hidden="true"></a></span>
<span id="cb34-6"><a href="#cb34-6" aria-hidden="true"></a><span class="co">    &gt;&gt;&gt; Command.create().run([&quot;command-that-does-not-exist&quot;])</span></span>
<span id="cb34-7"><a href="#cb34-7" aria-hidden="true"></a><span class="co">    Traceback (most recent call last):</span></span>
<span id="cb34-8"><a href="#cb34-8" aria-hidden="true"></a><span class="co">      ...</span></span>
<span id="cb34-9"><a href="#cb34-9" aria-hidden="true"></a><span class="co">    FileNotFoundError: [Errno 2] No such file or directory: &#39;command-that-does-not-exist&#39;</span></span>
<span id="cb34-10"><a href="#cb34-10" aria-hidden="true"></a></span>
<span id="cb34-11"><a href="#cb34-11" aria-hidden="true"></a><span class="co">    &gt;&gt;&gt; Command.create_null().run([&quot;command-that-does-not-exist&quot;])</span></span>
<span id="cb34-12"><a href="#cb34-12" aria-hidden="true"></a><span class="co">    &quot;&quot;&quot;</span></span>
<span id="cb34-13"><a href="#cb34-13" aria-hidden="true"></a></span>
<span id="cb34-14"><a href="#cb34-14" aria-hidden="true"></a>    <span class="at">@staticmethod</span></span>
<span id="cb34-15"><a href="#cb34-15" aria-hidden="true"></a>    <span class="kw">def</span> create():</span>
<span id="cb34-16"><a href="#cb34-16" aria-hidden="true"></a>        <span class="cf">return</span> Command(subprocess<span class="op">=</span>subprocess)</span>
<span id="cb34-17"><a href="#cb34-17" aria-hidden="true"></a></span>
<span id="cb34-18"><a href="#cb34-18" aria-hidden="true"></a>    <span class="at">@staticmethod</span></span>
<span id="cb34-19"><a href="#cb34-19" aria-hidden="true"></a>    <span class="kw">def</span> create_null():</span>
<span id="cb34-20"><a href="#cb34-20" aria-hidden="true"></a>        <span class="kw">class</span> NullSubprocess:</span>
<span id="cb34-21"><a href="#cb34-21" aria-hidden="true"></a>            <span class="kw">def</span> run(<span class="va">self</span>, command):</span>
<span id="cb34-22"><a href="#cb34-22" aria-hidden="true"></a>                <span class="cf">pass</span></span>
<span id="cb34-23"><a href="#cb34-23" aria-hidden="true"></a>        <span class="cf">return</span> Command(subprocess<span class="op">=</span>NullSubprocess())</span>
<span id="cb34-24"><a href="#cb34-24" aria-hidden="true"></a></span>
<span id="cb34-25"><a href="#cb34-25" aria-hidden="true"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, subprocess):</span>
<span id="cb34-26"><a href="#cb34-26" aria-hidden="true"></a>        Observable.<span class="fu">__init__</span>(<span class="va">self</span>)</span>
<span id="cb34-27"><a href="#cb34-27" aria-hidden="true"></a>        <span class="va">self</span>.subprocess <span class="op">=</span> subprocess</span>
<span id="cb34-28"><a href="#cb34-28" aria-hidden="true"></a></span>
<span id="cb34-29"><a href="#cb34-29" aria-hidden="true"></a>    <span class="kw">def</span> run(<span class="va">self</span>, command):</span>
<span id="cb34-30"><a href="#cb34-30" aria-hidden="true"></a>        <span class="va">self</span>.notify(<span class="st">&quot;COMMAND&quot;</span>, {<span class="st">&quot;command&quot;</span>: command})</span>
<span id="cb34-31"><a href="#cb34-31" aria-hidden="true"></a>        <span class="va">self</span>.subprocess.run(command)</span></code></pre></div>
<p>When the startup application is run and then quit, SuperTux is actually started.</p>
<p>This is actually some real progress.</p>
<pre><code>$ git commit -a -m &#39;Command actually runs commands.&#39;
[main 270440e] Command actually runs commands.
 1 file changed, 23 insertions(+), 2 deletions(-)</code></pre>
<h2 id="selection-behavior">Selection behavior</h2>
<p>Let’s review the <code>StartupScene</code>:</p>
<div class="sourceCode" id="cb36"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb36-1"><a href="#cb36-1" aria-hidden="true"></a><span class="kw">class</span> StartupScene:</span>
<span id="cb36-2"><a href="#cb36-2" aria-hidden="true"></a></span>
<span id="cb36-3"><a href="#cb36-3" aria-hidden="true"></a>    <span class="kw">def</span> get_command(<span class="va">self</span>):</span>
<span id="cb36-4"><a href="#cb36-4" aria-hidden="true"></a>        <span class="cf">return</span> [<span class="st">&quot;supertux2&quot;</span>]</span>
<span id="cb36-5"><a href="#cb36-5" aria-hidden="true"></a></span>
<span id="cb36-6"><a href="#cb36-6" aria-hidden="true"></a>    <span class="kw">def</span> event(<span class="va">self</span>, event):</span>
<span id="cb36-7"><a href="#cb36-7" aria-hidden="true"></a>        <span class="cf">if</span> event.is_user_closed_window():</span>
<span id="cb36-8"><a href="#cb36-8" aria-hidden="true"></a>            <span class="cf">raise</span> ExitGameLoop()</span>
<span id="cb36-9"><a href="#cb36-9" aria-hidden="true"></a></span>
<span id="cb36-10"><a href="#cb36-10" aria-hidden="true"></a>    <span class="kw">def</span> draw(<span class="va">self</span>, loop):</span>
<span id="cb36-11"><a href="#cb36-11" aria-hidden="true"></a>        loop.draw_text(Point(x<span class="op">=</span><span class="dv">100</span>, y<span class="op">=</span><span class="dv">100</span>), text<span class="op">=</span><span class="st">&quot;SuperTux&quot;</span>)</span>
<span id="cb36-12"><a href="#cb36-12" aria-hidden="true"></a>        loop.draw_text(Point(x<span class="op">=</span><span class="dv">100</span>, y<span class="op">=</span><span class="dv">200</span>), text<span class="op">=</span><span class="st">&quot;Balloon Shooter&quot;</span>)</span>
<span id="cb36-13"><a href="#cb36-13" aria-hidden="true"></a>        loop.draw_circle(Point(x<span class="op">=</span><span class="dv">500</span>, y<span class="op">=</span><span class="dv">500</span>), radius<span class="op">=</span><span class="dv">20</span>, color<span class="op">=</span><span class="st">&quot;pink&quot;</span>)</span></code></pre></div>
<p>We have higher-level tests in place that checks that whatever <code>get_command</code> returns is run when the game loop quits.</p>
<p>I think it should now be fairly easy to write tests for selection behavior. Let’s first modify the event handler to also exit the game loop when <code>XBOX_A</code> is pressed:</p>
<div class="sourceCode" id="cb37"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb37-1"><a href="#cb37-1" aria-hidden="true"></a><span class="kw">class</span> StartupScene:</span>
<span id="cb37-2"><a href="#cb37-2" aria-hidden="true"></a></span>
<span id="cb37-3"><a href="#cb37-3" aria-hidden="true"></a>    ...</span>
<span id="cb37-4"><a href="#cb37-4" aria-hidden="true"></a></span>
<span id="cb37-5"><a href="#cb37-5" aria-hidden="true"></a>    <span class="kw">def</span> event(<span class="va">self</span>, event):</span>
<span id="cb37-6"><a href="#cb37-6" aria-hidden="true"></a>        <span class="co">&quot;&quot;&quot;</span></span>
<span id="cb37-7"><a href="#cb37-7" aria-hidden="true"></a><span class="co">        &gt;&gt;&gt; StartupScene().event(GameLoop.create_event_user_closed_window())</span></span>
<span id="cb37-8"><a href="#cb37-8" aria-hidden="true"></a><span class="co">        Traceback (most recent call last):</span></span>
<span id="cb37-9"><a href="#cb37-9" aria-hidden="true"></a><span class="co">          ...</span></span>
<span id="cb37-10"><a href="#cb37-10" aria-hidden="true"></a><span class="co">        gameloop.ExitGameLoop</span></span>
<span id="cb37-11"><a href="#cb37-11" aria-hidden="true"></a></span>
<span id="cb37-12"><a href="#cb37-12" aria-hidden="true"></a><span class="co">        &gt;&gt;&gt; StartupScene().event(GameLoop.create_event_joystick_down(XBOX_A))</span></span>
<span id="cb37-13"><a href="#cb37-13" aria-hidden="true"></a><span class="co">        Traceback (most recent call last):</span></span>
<span id="cb37-14"><a href="#cb37-14" aria-hidden="true"></a><span class="co">          ...</span></span>
<span id="cb37-15"><a href="#cb37-15" aria-hidden="true"></a><span class="co">        gameloop.ExitGameLoop</span></span>
<span id="cb37-16"><a href="#cb37-16" aria-hidden="true"></a><span class="co">        &quot;&quot;&quot;</span></span>
<span id="cb37-17"><a href="#cb37-17" aria-hidden="true"></a>        <span class="cf">if</span> event.is_user_closed_window() <span class="kw">or</span> event.is_joystick_down(XBOX_A):</span>
<span id="cb37-18"><a href="#cb37-18" aria-hidden="true"></a>            <span class="cf">raise</span> ExitGameLoop()</span></code></pre></div>
<p>Now let’s think about what <code>get_command</code> should return. It should return the command of the game that is closest to the cursor. Let’s write two tests for that:</p>
<div class="sourceCode" id="cb38"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb38-1"><a href="#cb38-1" aria-hidden="true"></a><span class="kw">class</span> StartupScene:</span>
<span id="cb38-2"><a href="#cb38-2" aria-hidden="true"></a></span>
<span id="cb38-3"><a href="#cb38-3" aria-hidden="true"></a>    ...</span>
<span id="cb38-4"><a href="#cb38-4" aria-hidden="true"></a></span>
<span id="cb38-5"><a href="#cb38-5" aria-hidden="true"></a>    <span class="kw">def</span> get_command(<span class="va">self</span>):</span>
<span id="cb38-6"><a href="#cb38-6" aria-hidden="true"></a>        <span class="co">&quot;&quot;&quot;</span></span>
<span id="cb38-7"><a href="#cb38-7" aria-hidden="true"></a><span class="co">        &gt;&gt;&gt; scene = StartupScene()</span></span>
<span id="cb38-8"><a href="#cb38-8" aria-hidden="true"></a></span>
<span id="cb38-9"><a href="#cb38-9" aria-hidden="true"></a><span class="co">        &gt;&gt;&gt; scene.move_cursor(x=100, y=100)</span></span>
<span id="cb38-10"><a href="#cb38-10" aria-hidden="true"></a><span class="co">        &gt;&gt;&gt; scene.get_command()</span></span>
<span id="cb38-11"><a href="#cb38-11" aria-hidden="true"></a><span class="co">        [&#39;supertux2&#39;]</span></span>
<span id="cb38-12"><a href="#cb38-12" aria-hidden="true"></a></span>
<span id="cb38-13"><a href="#cb38-13" aria-hidden="true"></a><span class="co">        &gt;&gt;&gt; scene.move_cursor(x=100, y=200)</span></span>
<span id="cb38-14"><a href="#cb38-14" aria-hidden="true"></a><span class="co">        &gt;&gt;&gt; scene.get_command()</span></span>
<span id="cb38-15"><a href="#cb38-15" aria-hidden="true"></a><span class="co">        [&#39;python&#39;, &#39;/home/.../agdpp/agdpp.py&#39;]</span></span>
<span id="cb38-16"><a href="#cb38-16" aria-hidden="true"></a><span class="co">        &quot;&quot;&quot;</span></span></code></pre></div>
<p>It complains that <code>move_cursor</code> does not exist. I add it like this:</p>
<div class="sourceCode" id="cb39"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb39-1"><a href="#cb39-1" aria-hidden="true"></a><span class="kw">class</span> StartupScene:</span>
<span id="cb39-2"><a href="#cb39-2" aria-hidden="true"></a></span>
<span id="cb39-3"><a href="#cb39-3" aria-hidden="true"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>):</span>
<span id="cb39-4"><a href="#cb39-4" aria-hidden="true"></a>        <span class="va">self</span>.cursor <span class="op">=</span> Point(x<span class="op">=</span><span class="dv">500</span>, y<span class="op">=</span><span class="dv">500</span>)</span>
<span id="cb39-5"><a href="#cb39-5" aria-hidden="true"></a></span>
<span id="cb39-6"><a href="#cb39-6" aria-hidden="true"></a>    <span class="kw">def</span> move_cursor(<span class="va">self</span>, x, y):</span>
<span id="cb39-7"><a href="#cb39-7" aria-hidden="true"></a>        <span class="va">self</span>.cursor <span class="op">=</span> Point(x<span class="op">=</span>x, y<span class="op">=</span>y)</span>
<span id="cb39-8"><a href="#cb39-8" aria-hidden="true"></a></span>
<span id="cb39-9"><a href="#cb39-9" aria-hidden="true"></a>    ...</span></code></pre></div>
<p>I also modify the drawing code to use this point for the cursor.</p>
<p>Now the second test case fails:</p>
<pre><code>Failed example:
    scene.get_command()
Differences (ndiff with -expected +actual):
    - [&#39;python&#39;, &#39;/home/.../agdpp/agdpp.py&#39;]
    + [&#39;supertux2&#39;]</code></pre>
<p>I make a quick and dirty fix, because I want to go quickly to green so that I can refactor and generalize the solution:</p>
<div class="sourceCode" id="cb41"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb41-1"><a href="#cb41-1" aria-hidden="true"></a>    <span class="kw">def</span> get_command(<span class="va">self</span>):</span>
<span id="cb41-2"><a href="#cb41-2" aria-hidden="true"></a>        <span class="cf">if</span> <span class="va">self</span>.cursor.y <span class="op">==</span> <span class="dv">200</span>:</span>
<span id="cb41-3"><a href="#cb41-3" aria-hidden="true"></a>            <span class="cf">return</span> [<span class="st">&quot;python&quot;</span>, <span class="st">&quot;/home/.../agdpp/agdpp.py&quot;</span>]</span>
<span id="cb41-4"><a href="#cb41-4" aria-hidden="true"></a>        <span class="cf">return</span> [<span class="st">&quot;supertux2&quot;</span>]</span></code></pre></div>
<p>And this is my favorite state of programming. This is actually where some design happens. I have the safety net of the tests and I can push code around until I think it looks good and the next thing is easy to add.</p>
<p>Here is what I come up with this time:</p>
<div class="sourceCode" id="cb42"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb42-1"><a href="#cb42-1" aria-hidden="true"></a><span class="kw">class</span> StartupScene:</span>
<span id="cb42-2"><a href="#cb42-2" aria-hidden="true"></a></span>
<span id="cb42-3"><a href="#cb42-3" aria-hidden="true"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>):</span>
<span id="cb42-4"><a href="#cb42-4" aria-hidden="true"></a>        <span class="va">self</span>.cursor <span class="op">=</span> Point(x<span class="op">=</span><span class="dv">500</span>, y<span class="op">=</span><span class="dv">500</span>)</span>
<span id="cb42-5"><a href="#cb42-5" aria-hidden="true"></a>        <span class="va">self</span>.games <span class="op">=</span> [</span>
<span id="cb42-6"><a href="#cb42-6" aria-hidden="true"></a>            Game(</span>
<span id="cb42-7"><a href="#cb42-7" aria-hidden="true"></a>                name<span class="op">=</span><span class="st">&quot;SuperTux&quot;</span>,</span>
<span id="cb42-8"><a href="#cb42-8" aria-hidden="true"></a>                position<span class="op">=</span>Point(x<span class="op">=</span><span class="dv">100</span>, y<span class="op">=</span><span class="dv">100</span>),</span>
<span id="cb42-9"><a href="#cb42-9" aria-hidden="true"></a>                command<span class="op">=</span>[<span class="st">&quot;supertux2&quot;</span>],</span>
<span id="cb42-10"><a href="#cb42-10" aria-hidden="true"></a>            ),</span>
<span id="cb42-11"><a href="#cb42-11" aria-hidden="true"></a>            Game(</span>
<span id="cb42-12"><a href="#cb42-12" aria-hidden="true"></a>                name<span class="op">=</span><span class="st">&quot;Balloon Shooter&quot;</span>,</span>
<span id="cb42-13"><a href="#cb42-13" aria-hidden="true"></a>                position<span class="op">=</span>Point(x<span class="op">=</span><span class="dv">100</span>, y<span class="op">=</span><span class="dv">200</span>),</span>
<span id="cb42-14"><a href="#cb42-14" aria-hidden="true"></a>                command<span class="op">=</span>[<span class="st">&quot;python&quot;</span>, <span class="st">&quot;/home/.../agdpp/agdpp.py&quot;</span>],</span>
<span id="cb42-15"><a href="#cb42-15" aria-hidden="true"></a>            ),</span>
<span id="cb42-16"><a href="#cb42-16" aria-hidden="true"></a>        ]</span>
<span id="cb42-17"><a href="#cb42-17" aria-hidden="true"></a></span>
<span id="cb42-18"><a href="#cb42-18" aria-hidden="true"></a>    <span class="kw">def</span> get_command(<span class="va">self</span>):</span>
<span id="cb42-19"><a href="#cb42-19" aria-hidden="true"></a>        <span class="cf">return</span> <span class="bu">min</span>(</span>
<span id="cb42-20"><a href="#cb42-20" aria-hidden="true"></a>            <span class="va">self</span>.games,</span>
<span id="cb42-21"><a href="#cb42-21" aria-hidden="true"></a>            key<span class="op">=</span><span class="kw">lambda</span> game: game.distance_to(<span class="va">self</span>.cursor)</span>
<span id="cb42-22"><a href="#cb42-22" aria-hidden="true"></a>        ).command</span>
<span id="cb42-23"><a href="#cb42-23" aria-hidden="true"></a></span>
<span id="cb42-24"><a href="#cb42-24" aria-hidden="true"></a>    <span class="kw">def</span> draw(<span class="va">self</span>, loop):</span>
<span id="cb42-25"><a href="#cb42-25" aria-hidden="true"></a>        <span class="cf">for</span> game <span class="kw">in</span> <span class="va">self</span>.games:</span>
<span id="cb42-26"><a href="#cb42-26" aria-hidden="true"></a>            game.draw(loop)</span>
<span id="cb42-27"><a href="#cb42-27" aria-hidden="true"></a>        loop.draw_circle(<span class="va">self</span>.cursor, radius<span class="op">=</span><span class="dv">20</span>, color<span class="op">=</span><span class="st">&quot;pink&quot;</span>)</span>
<span id="cb42-28"><a href="#cb42-28" aria-hidden="true"></a></span>
<span id="cb42-29"><a href="#cb42-29" aria-hidden="true"></a>    ...</span></code></pre></div>
<p>And here is the <code>Game</code> class:</p>
<div class="sourceCode" id="cb43"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb43-1"><a href="#cb43-1" aria-hidden="true"></a><span class="kw">class</span> Game:</span>
<span id="cb43-2"><a href="#cb43-2" aria-hidden="true"></a></span>
<span id="cb43-3"><a href="#cb43-3" aria-hidden="true"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, name, position, command):</span>
<span id="cb43-4"><a href="#cb43-4" aria-hidden="true"></a>        <span class="va">self</span>.name <span class="op">=</span> name</span>
<span id="cb43-5"><a href="#cb43-5" aria-hidden="true"></a>        <span class="va">self</span>.position <span class="op">=</span> position</span>
<span id="cb43-6"><a href="#cb43-6" aria-hidden="true"></a>        <span class="va">self</span>.command <span class="op">=</span> command</span>
<span id="cb43-7"><a href="#cb43-7" aria-hidden="true"></a></span>
<span id="cb43-8"><a href="#cb43-8" aria-hidden="true"></a>    <span class="kw">def</span> draw(<span class="va">self</span>, loop):</span>
<span id="cb43-9"><a href="#cb43-9" aria-hidden="true"></a>        loop.draw_text(<span class="va">self</span>.position, text<span class="op">=</span><span class="va">self</span>.name)</span>
<span id="cb43-10"><a href="#cb43-10" aria-hidden="true"></a></span>
<span id="cb43-11"><a href="#cb43-11" aria-hidden="true"></a>    <span class="kw">def</span> distance_to(<span class="va">self</span>, point):</span>
<span id="cb43-12"><a href="#cb43-12" aria-hidden="true"></a>        <span class="cf">return</span> <span class="va">self</span>.position.distance_to(point)</span></code></pre></div>
<p>This implementation still passes all tests and is also generalized. Nice!</p>
<pre><code>$ git commit -a -m &#39;Run the command closest to the cursor.&#39;
[main 921c71f] Run the command closest to the cursor.
 1 file changed, 64 insertions(+), 7 deletions(-)</code></pre>
<h2 id="cursor-movement">Cursor movement</h2>
<p>Next I want to work on cursor movement so that we can actually select different games.</p>
<p>I’m not quite sure how to write a low-level test for this in <code>GameScene</code>, so I write a top-level test instead:</p>
<div class="sourceCode" id="cb45"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb45-1"><a href="#cb45-1" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb45-2"><a href="#cb45-2" aria-hidden="true"></a><span class="co">&gt;&gt;&gt; StartupApplication.run_in_test_mode(</span></span>
<span id="cb45-3"><a href="#cb45-3" aria-hidden="true"></a><span class="co">...     events=[</span></span>
<span id="cb45-4"><a href="#cb45-4" aria-hidden="true"></a><span class="co">...         [],</span></span>
<span id="cb45-5"><a href="#cb45-5" aria-hidden="true"></a><span class="co">...         [GameLoop.create_event_joystick_motion(axis=1, value=1.0)],</span></span>
<span id="cb45-6"><a href="#cb45-6" aria-hidden="true"></a><span class="co">...         [GameLoop.create_event_user_closed_window()],</span></span>
<span id="cb45-7"><a href="#cb45-7" aria-hidden="true"></a><span class="co">...     ],</span></span>
<span id="cb45-8"><a href="#cb45-8" aria-hidden="true"></a><span class="co">...     iterations=1</span></span>
<span id="cb45-9"><a href="#cb45-9" aria-hidden="true"></a><span class="co">... ).filter(&quot;DRAW_CIRCLE&quot;)</span></span>
<span id="cb45-10"><a href="#cb45-10" aria-hidden="true"></a><span class="co">DRAW_CIRCLE =&gt;</span></span>
<span id="cb45-11"><a href="#cb45-11" aria-hidden="true"></a><span class="co">    x: 500</span></span>
<span id="cb45-12"><a href="#cb45-12" aria-hidden="true"></a><span class="co">    y: 500</span></span>
<span id="cb45-13"><a href="#cb45-13" aria-hidden="true"></a><span class="co">    radius: 20</span></span>
<span id="cb45-14"><a href="#cb45-14" aria-hidden="true"></a><span class="co">    color: &#39;pink&#39;</span></span>
<span id="cb45-15"><a href="#cb45-15" aria-hidden="true"></a><span class="co">DRAW_CIRCLE =&gt;</span></span>
<span id="cb45-16"><a href="#cb45-16" aria-hidden="true"></a><span class="co">    x: 500</span></span>
<span id="cb45-17"><a href="#cb45-17" aria-hidden="true"></a><span class="co">    y: 501</span></span>
<span id="cb45-18"><a href="#cb45-18" aria-hidden="true"></a><span class="co">    radius: 20</span></span>
<span id="cb45-19"><a href="#cb45-19" aria-hidden="true"></a><span class="co">    color: &#39;pink&#39;</span></span>
<span id="cb45-20"><a href="#cb45-20" aria-hidden="true"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>We assert that the cursor is drawn in two different positions given a joystick motion event.</p>
<p>The gist of the implementation is here:</p>
<div class="sourceCode" id="cb46"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb46-1"><a href="#cb46-1" aria-hidden="true"></a><span class="kw">class</span> StartupScene:</span>
<span id="cb46-2"><a href="#cb46-2" aria-hidden="true"></a></span>
<span id="cb46-3"><a href="#cb46-3" aria-hidden="true"></a>    ...</span>
<span id="cb46-4"><a href="#cb46-4" aria-hidden="true"></a></span>
<span id="cb46-5"><a href="#cb46-5" aria-hidden="true"></a>    <span class="kw">def</span> event(<span class="va">self</span>, event):</span>
<span id="cb46-6"><a href="#cb46-6" aria-hidden="true"></a>        ...</span>
<span id="cb46-7"><a href="#cb46-7" aria-hidden="true"></a>        <span class="cf">elif</span> event.is_joystick_motion():</span>
<span id="cb46-8"><a href="#cb46-8" aria-hidden="true"></a>            <span class="cf">if</span> event.get_axis() <span class="op">==</span> <span class="dv">0</span>:</span>
<span id="cb46-9"><a href="#cb46-9" aria-hidden="true"></a>                <span class="va">self</span>.dx <span class="op">=</span> event.get_value()</span>
<span id="cb46-10"><a href="#cb46-10" aria-hidden="true"></a>            <span class="cf">elif</span> event.get_axis() <span class="op">==</span> <span class="dv">1</span>:</span>
<span id="cb46-11"><a href="#cb46-11" aria-hidden="true"></a>                <span class="va">self</span>.dy <span class="op">=</span> event.get_value()</span>
<span id="cb46-12"><a href="#cb46-12" aria-hidden="true"></a></span>
<span id="cb46-13"><a href="#cb46-13" aria-hidden="true"></a>    <span class="kw">def</span> update(<span class="va">self</span>, dt):</span>
<span id="cb46-14"><a href="#cb46-14" aria-hidden="true"></a>        delta <span class="op">=</span> Point(x<span class="op">=</span><span class="va">self</span>.dx, y<span class="op">=</span><span class="va">self</span>.dy)</span>
<span id="cb46-15"><a href="#cb46-15" aria-hidden="true"></a>        <span class="cf">if</span> delta.length() <span class="op">&gt;</span> <span class="fl">0.05</span>:</span>
<span id="cb46-16"><a href="#cb46-16" aria-hidden="true"></a>            <span class="va">self</span>.cursor <span class="op">=</span> <span class="va">self</span>.cursor.add(delta.times(dt))</span></code></pre></div>
<p>The <code>update</code> method did not exist on <code>StartupScene</code> before. The pattern how it is called is here:</p>
<div class="sourceCode" id="cb47"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb47-1"><a href="#cb47-1" aria-hidden="true"></a><span class="kw">class</span> StartupApplication:</span>
<span id="cb47-2"><a href="#cb47-2" aria-hidden="true"></a></span>
<span id="cb47-3"><a href="#cb47-3" aria-hidden="true"></a>    ...</span>
<span id="cb47-4"><a href="#cb47-4" aria-hidden="true"></a></span>
<span id="cb47-5"><a href="#cb47-5" aria-hidden="true"></a>    <span class="kw">def</span> event(<span class="va">self</span>, event):</span>
<span id="cb47-6"><a href="#cb47-6" aria-hidden="true"></a>        <span class="va">self</span>.startup_scene.event(event)</span>
<span id="cb47-7"><a href="#cb47-7" aria-hidden="true"></a></span>
<span id="cb47-8"><a href="#cb47-8" aria-hidden="true"></a>    <span class="kw">def</span> tick(<span class="va">self</span>, dt):</span>
<span id="cb47-9"><a href="#cb47-9" aria-hidden="true"></a>        <span class="va">self</span>.loop.clear_screen()</span>
<span id="cb47-10"><a href="#cb47-10" aria-hidden="true"></a>        <span class="va">self</span>.startup_scene.update(dt)</span>
<span id="cb47-11"><a href="#cb47-11" aria-hidden="true"></a>        <span class="va">self</span>.startup_scene.draw(<span class="va">self</span>.loop)</span></code></pre></div>
<p>So the scene will receive these calls in order:</p>
<ul>
<li><code>event</code></li>
<li><code>update</code></li>
<li><code>draw</code></li>
</ul>
<p>This represents one game loop cycle. If this pattern becomes more permanent, we can move the top-level test down to <code>StartupApplication</code> and have that test call <code>event</code> + <code>update</code> and assert that the cursor moved. But for now, I want the confidence that the high-level test gives, that everything is actually working together.</p>
<p>I also test this in game to fist of all make sure that I got the axis right and also to tweak numbers so that speed feels good. The length check is needed because joystick movement events rarely return a value of 0. If we only move the joystick a tiny bit, we don’t want the cursor to move.</p>
<p>Also, we should probably add constant names for the axis to not compare to numbers. Maybe <code>XBOX_AXIS_Y</code> for example.</p>
<p>Anyway, when I try this out, it actually works. I can move the cursor around, and when I press <code>XBOX_A</code> the game closest to the cursor is started.</p>
<h2 id="finishing-touches">Finishing touches</h2>
<p>I want to visualize the game that is closest to the cursor. Let’s do it with another color.</p>
<div class="sourceCode" id="cb48"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb48-1"><a href="#cb48-1" aria-hidden="true"></a><span class="kw">class</span> StartupScene:</span>
<span id="cb48-2"><a href="#cb48-2" aria-hidden="true"></a></span>
<span id="cb48-3"><a href="#cb48-3" aria-hidden="true"></a>    ...</span>
<span id="cb48-4"><a href="#cb48-4" aria-hidden="true"></a></span>
<span id="cb48-5"><a href="#cb48-5" aria-hidden="true"></a>    <span class="kw">def</span> draw(<span class="va">self</span>, loop):</span>
<span id="cb48-6"><a href="#cb48-6" aria-hidden="true"></a>        <span class="cf">for</span> game <span class="kw">in</span> <span class="va">self</span>.games:</span>
<span id="cb48-7"><a href="#cb48-7" aria-hidden="true"></a>            game.draw(loop, <span class="va">self</span>.game_closest_to_cursor())</span>
<span id="cb48-8"><a href="#cb48-8" aria-hidden="true"></a></span>
<span id="cb48-9"><a href="#cb48-9" aria-hidden="true"></a>    <span class="kw">def</span> game_closest_to_cursor(<span class="va">self</span>):</span>
<span id="cb48-10"><a href="#cb48-10" aria-hidden="true"></a>        <span class="cf">return</span> <span class="bu">min</span>(</span>
<span id="cb48-11"><a href="#cb48-11" aria-hidden="true"></a>            <span class="va">self</span>.games,</span>
<span id="cb48-12"><a href="#cb48-12" aria-hidden="true"></a>            key<span class="op">=</span><span class="kw">lambda</span> game: game.distance_to(<span class="va">self</span>.cursor)</span>
<span id="cb48-13"><a href="#cb48-13" aria-hidden="true"></a>        )</span></code></pre></div>
<div class="sourceCode" id="cb49"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb49-1"><a href="#cb49-1" aria-hidden="true"></a><span class="kw">class</span> Game:</span>
<span id="cb49-2"><a href="#cb49-2" aria-hidden="true"></a></span>
<span id="cb49-3"><a href="#cb49-3" aria-hidden="true"></a>    ...</span>
<span id="cb49-4"><a href="#cb49-4" aria-hidden="true"></a></span>
<span id="cb49-5"><a href="#cb49-5" aria-hidden="true"></a>    <span class="kw">def</span> draw(<span class="va">self</span>, loop, closest):</span>
<span id="cb49-6"><a href="#cb49-6" aria-hidden="true"></a>        loop.draw_text(</span>
<span id="cb49-7"><a href="#cb49-7" aria-hidden="true"></a>            <span class="va">self</span>.position,</span>
<span id="cb49-8"><a href="#cb49-8" aria-hidden="true"></a>            text<span class="op">=</span><span class="va">self</span>.name,</span>
<span id="cb49-9"><a href="#cb49-9" aria-hidden="true"></a>            color<span class="op">=</span><span class="st">&quot;lightblue&quot;</span> <span class="cf">if</span> closest <span class="kw">is</span> <span class="va">self</span> <span class="cf">else</span> <span class="st">&quot;black&quot;</span></span>
<span id="cb49-10"><a href="#cb49-10" aria-hidden="true"></a>        )</span></code></pre></div>
<p>I modify tests to assert the correct color. This works perfectly.</p>
<p>Next I want to fix the games that are configured. I want them to display evenly on the screen, and I want to have a “QUIT” game that runs a shutdown command to shut down the Pi.</p>
<p>Here it is:</p>
<div class="sourceCode" id="cb50"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb50-1"><a href="#cb50-1" aria-hidden="true"></a><span class="kw">class</span> StartupScene:</span>
<span id="cb50-2"><a href="#cb50-2" aria-hidden="true"></a></span>
<span id="cb50-3"><a href="#cb50-3" aria-hidden="true"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>):</span>
<span id="cb50-4"><a href="#cb50-4" aria-hidden="true"></a>        <span class="va">self</span>.cursor <span class="op">=</span> Point(x<span class="op">=</span><span class="dv">400</span>, y<span class="op">=</span><span class="dv">300</span>)</span>
<span id="cb50-5"><a href="#cb50-5" aria-hidden="true"></a>        <span class="va">self</span>.games <span class="op">=</span> [</span>
<span id="cb50-6"><a href="#cb50-6" aria-hidden="true"></a>            Game(</span>
<span id="cb50-7"><a href="#cb50-7" aria-hidden="true"></a>                name<span class="op">=</span><span class="st">&quot;SuperTux&quot;</span>,</span>
<span id="cb50-8"><a href="#cb50-8" aria-hidden="true"></a>                position<span class="op">=</span>Point(x<span class="op">=</span><span class="dv">100</span>, y<span class="op">=</span><span class="dv">100</span>),</span>
<span id="cb50-9"><a href="#cb50-9" aria-hidden="true"></a>                command<span class="op">=</span>[<span class="st">&quot;supertux2&quot;</span>],</span>
<span id="cb50-10"><a href="#cb50-10" aria-hidden="true"></a>            ),</span>
<span id="cb50-11"><a href="#cb50-11" aria-hidden="true"></a>            Game(</span>
<span id="cb50-12"><a href="#cb50-12" aria-hidden="true"></a>                name<span class="op">=</span><span class="st">&quot;Balloon Shooter&quot;</span>,</span>
<span id="cb50-13"><a href="#cb50-13" aria-hidden="true"></a>                position<span class="op">=</span>Point(x<span class="op">=</span><span class="dv">400</span>, y<span class="op">=</span><span class="dv">300</span>),</span>
<span id="cb50-14"><a href="#cb50-14" aria-hidden="true"></a>                command<span class="op">=</span>[<span class="st">&quot;python3&quot;</span>, <span class="st">&quot;agdpp.py&quot;</span>],</span>
<span id="cb50-15"><a href="#cb50-15" aria-hidden="true"></a>            ),</span>
<span id="cb50-16"><a href="#cb50-16" aria-hidden="true"></a>            Game(</span>
<span id="cb50-17"><a href="#cb50-17" aria-hidden="true"></a>                name<span class="op">=</span><span class="st">&quot;QUIT&quot;</span>,</span>
<span id="cb50-18"><a href="#cb50-18" aria-hidden="true"></a>                position<span class="op">=</span>Point(x<span class="op">=</span><span class="dv">1000</span>, y<span class="op">=</span><span class="dv">600</span>),</span>
<span id="cb50-19"><a href="#cb50-19" aria-hidden="true"></a>                command<span class="op">=</span>[<span class="st">&quot;shutdown&quot;</span>, <span class="st">&quot;now&quot;</span>],</span>
<span id="cb50-20"><a href="#cb50-20" aria-hidden="true"></a>            ),</span>
<span id="cb50-21"><a href="#cb50-21" aria-hidden="true"></a>        ]</span></code></pre></div>
<p>And it looks like this:</p>
<p>
<center>
<img src="final.png" title="fig:" alt="Final startup screen." />
</center>
</p>
<h2 id="trying-on-the-pi">Trying on the Pi</h2>
<p>I change the startup script, <code>/etc/xdg/autostart/game_console_start.desktop</code>, to this:</p>
<pre><code>[Desktop Entry]
Name=Game console start
Exec=/home/pi/game_console_pc.sh</code></pre>
<p>Where <code>/home/pi/game_console_pc.sh</code> is this:</p>
<pre class="shell"><code>#!/usr/bin/env bash

exec &gt; /home/pi/game_console_pc.log

exec 2&gt;&amp;1

cd /home/pi/agdpp

for retry in 1 2 5 10 giveup; do
	if [ $retry = giveup ]; then
		echo giving up
		break
	elif git pull --ff-only; then
		break
	else
		echo Retrying in $retry
		sleep $retry
	fi
done

python3 startup.py</code></pre>
<p>And it works beautifully.</p>
<p>Why did I not test drive this startup script? Good question. I for sure spend some time debugging the loop, which, by the way, is needed to give the Pi time to connect to the wireless network before it can download the latest version of the startup application and balloon shooter.</p>
<pre><code>pi@raspberrypi:~ $ cat game_console_pc.log
fatal: unable to access &#39;https://github.com/rickardlindberg/agdpp.git/&#39;: Could not resolve host: github.com
Retrying in 1
fatal: unable to access &#39;https://github.com/rickardlindberg/agdpp.git/&#39;: Could not resolve host: github.com
Retrying in 2
fatal: unable to access &#39;https://github.com/rickardlindberg/agdpp.git/&#39;: Could not resolve host: github.com
Retrying in 5
Already up to date.</code></pre>
<p>I feel like this script is maybe not part of the game itself. So that is one reason why I just “hacked” it together on the Pi. But I’m not entirely happy that it exists only there, and not in some repo, and doesn’t have any tests.</p>
<p>However, for now, it works fine, but there is another problem. It is not possible to quit the balloon shooter with the gamepad. So once you start it, you are stuck in it.</p>
<h2 id="add-balloon-shooter-quit">Add balloon shooter quit</h2>
<p>I modify <code>GameScene</code> by adding a check for <code>XBOX_START</code>:</p>
<div class="sourceCode" id="cb54"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb54-1"><a href="#cb54-1" aria-hidden="true"></a><span class="kw">class</span> GameScene:</span>
<span id="cb54-2"><a href="#cb54-2" aria-hidden="true"></a></span>
<span id="cb54-3"><a href="#cb54-3" aria-hidden="true"></a>    ...</span>
<span id="cb54-4"><a href="#cb54-4" aria-hidden="true"></a></span>
<span id="cb54-5"><a href="#cb54-5" aria-hidden="true"></a>    <span class="kw">def</span> event(<span class="va">self</span>, event):</span>
<span id="cb54-6"><a href="#cb54-6" aria-hidden="true"></a>        <span class="cf">if</span> event.is_user_closed_window() <span class="kw">or</span> event.is_joystick_down(XBOX_START):</span>
<span id="cb54-7"><a href="#cb54-7" aria-hidden="true"></a>            <span class="cf">raise</span> ExitGameLoop()</span>
<span id="cb54-8"><a href="#cb54-8" aria-hidden="true"></a>        ...</span></code></pre></div>
<p>And by printing events, I figure out the value of <code>XBOX_START</code>:</p>
<div class="sourceCode" id="cb55"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb55-1"><a href="#cb55-1" aria-hidden="true"></a>XBOX_START <span class="op">=</span> <span class="dv">7</span></span></code></pre></div>
<h2 id="summary">Summary</h2>
<p>Finally, I have the first version of the setup that I had in mind.</p>
<p>I find it a little difficult to document all my thinking in this DevLog format. I feel like I make hundreds of decisions every minute when programming, and writing about all of them seems impossible. I think one solution would be to cover smaller changes in each DevLog. Your questions and commends are very welcome.</p>
<p>Even if these DevLogs are not valuable to anyone else, they are valuable to me because I get to practice writing and explaining my thinking.</p>
<p>See you next time!</p>
]]></description>
    <pubDate>Sun, 10 Sep 2023 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/devlog-013-raspberrypi-game-console/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>August 2023 Update</title>
    <link>http://rickardlindberg.me/writing/newsletter/august-2023/</link>
    <description><![CDATA[<h1>August 2023 Update</h1>

<p><em>Published on  4 September 2023.</em></p>

<p>This is what I’ve been up to in August 2023:</p>
<ul>
<li><p>I continued writing <a href="/tags/devlog/index.html">DevLogs</a>. All about the development of my <a href="/projects/rlvideo/index.html">video editor</a>.</p></li>
<li><p>I wrote the perhaps <a href="/writing/agdpp-the-end/index.html">final article</a> in my <em>Agile Game Development with Python and Pygame</em> series. I will most like continue the series in the form of DevLogs.</p></li>
<li><p>I decided that I need to use more of my free time for other things than programming. I still want to continue writing though but, most likely, program a bit less.</p></li>
</ul>
]]></description>
    <pubDate>Mon, 04 Sep 2023 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/newsletter/august-2023/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>

    </channel>
</rss>
