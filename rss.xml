<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>Rickard's personal homepage: latest posts</title>
        <link>http://rickardlindberg.me</link>
        <description><![CDATA[Rickard's personal homepage: latest posts]]></description>
        <atom:link href="http://rickardlindberg.me/rss.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Fri, 02 Dec 2022 00:00:00 UT</lastBuildDate>
        <item>
    <title>November 2022 Update</title>
    <link>http://rickardlindberg.me/writing/newsletter/november-2022/</link>
    <description><![CDATA[<h1>November 2022 Update</h1>

<p><em>Published on  2 December 2022.</em></p>

<p>This is what I’ve been up to in November 2022:</p>
<ul>
<li><p>I continued programming on my <a href="https://github.com/rickardlindberg/rlproject">projectional editor</a>. I had so many ideas I wanted to try, but I got stuck with the design. I started writing a <a href="/writing/projectional-editor-design-limit/index.html">blog post</a> explaining the problem. The blog post helped me get unstuck and I was able to move forward with my ideas.</p></li>
<li><p>I struggled with my writing in the before mentioned blog post. I got a <a href="https://hachyderm.io/@estherschindler/109424345364034217">tip</a> to read a book called “Bird by Bird”. It is a bit unlike other books I usually read in that it paints a picture of what it is like to be a writer. It doesn’t just give you the facts how to become a (better) writer. Sometimes I enjoy it and sometimes I just want the facts.</p></li>
<li><p>I created a Mastodon account to explore this other federated version of microblogging. You can find me at <a
href="https://hachyderm.io/@rickardlindberg"><span class="citation" data-cites="rickardlindberg">@rickardlindberg</span><span class="citation" data-cites="hachyderm.io">@hachyderm.io</span></a>.</p></li>
<li><p>I published just one programming video on my <a href="https://www.youtube.com/channel/UC4XI09URnsM_YYTSizAMliA">Youtube channel</a>:</p>
<ul>
<li><a href="https://youtu.be/qa_2Bk4bLyw">My projectional editor can do this now?!</a></li>
</ul></li>
</ul>
]]></description>
    <pubDate>Fri, 02 Dec 2022 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/newsletter/november-2022/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>October 2022 Update</title>
    <link>http://rickardlindberg.me/writing/newsletter/october-2022/</link>
    <description><![CDATA[<h1>October 2022 Update</h1>

<p><em>Published on 10 November 2022.</em></p>

<p>This is what I’ve been up to in October 2022:</p>
<ul>
<li><p>I started exploring projectional editing with <a href="https://github.com/rickardlindberg/rlproject">rlproject</a>. For now, I’m trying to implement something like what <a href="https://github.com/projectured/projectured/wiki">ProjecturEd</a> describes in its documentation to learn how that might work.</p></li>
<li><p>I watched <a href="https://youtu.be/8Ab3ArE8W3s">“Stop Writing Dead Programs” by Jack Rusher (Strange Loop 2022)</a>. It showed what a better development environment might look like. It also showed that a projectional editor might make your program feel more alive than a plain text editor. Hillel Wayne <a href="https://www.hillelwayne.com/post/strangeloop-22/">points out</a> that the talk has factual errors. Nevertheless, I found it inspiring.</p></li>
<li><p>I watched <a href="https://youtu.be/Fk4rCn4YLLU">End to end functional tests that can run in milliseconds | Nat Pryce | CukenFest London 2017</a>. Nat showed an interesting approach to testing you application in a flexible way.</p></li>
<li><p>I watched <a href="https://youtu.be/9fJntxnH4wY">Pairin’ with Aaron: Messing with Language Servers</a>. I learned about languages servers (LPS’s) and their integration with the development environment.</p></li>
<li><p>I watched some episodes of the <a href="https://www.youtube.com/channel/UCgt1lVMrdwlZKBaerxxp2iQ">Mob Mentality Show</a> and found them interesting.</p></li>
<li><p>I published another four programming videos on my <a href="https://www.youtube.com/channel/UC4XI09URnsM_YYTSizAMliA">Youtube channel</a>:</p>
<ul>
<li><a href="https://youtu.be/DowzqlHr67k">Writing and testing a tiny application without mocks.</a></li>
<li><a href="https://youtu.be/3060LO0PZaY">I demo a tool that makes me super quick at the command line and more.</a></li>
<li><a href="https://youtu.be/1_LAeMUdbH0">How to check balanced string TDD style + a bonus.</a></li>
<li><a href="https://youtu.be/GUX3DQjVg4c">Demo of new project that explores projectional, structured editing.</a></li>
</ul></li>
</ul>
]]></description>
    <pubDate>Thu, 10 Nov 2022 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/newsletter/october-2022/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>September 2022 Update</title>
    <link>http://rickardlindberg.me/writing/newsletter/september-2022/</link>
    <description><![CDATA[<h1>September 2022 Update</h1>

<p><em>Published on  8 October 2022.</em></p>

<p>This is what I’ve been up to in September 2022:</p>
<ul>
<li><p>I finally finished writing <a href="/writing/reliable-socket-servers/index.html">How to write reliable socket servers that survive crashes and restarts?</a></p></li>
<li><p>I watched <a href="https://youtu.be/ulRCs7xQA74">Continuous Delivery vs. Gitflow &amp; CD At Scale | Bryan Finster In The Engineering Room Ep. 11</a>. In it, Bryan mention a metaphor with flying cards. The idea was that it is difficult to explain the concept of a flying car to someone who has never experienced it. It’s too foreign. I thought about how I could expose people to more “flying cars”. Make them experience TDD, CI/CD, etc, so that they never wanting to go back.</p></li>
<li><p>I think it was also in the video above that Dave said something along the lines that it’s amazing how much you start caring about testing if you are the one on call. That resonated with me. If you are responsible, you start caring. It also reminded me of another concept about how much to test, where the advice was something like test until fear turns into boredom. (I think I read it from <a href="https://twitter.com/jbrains">jbrains</a>, but <a href="https://twitter.com/jbrains/status/663451314341416960">it seems</a> to originally be from someone else.)</p></li>
<li><p>I published another five programming videos on my <a href="https://www.youtube.com/channel/UC4XI09URnsM_YYTSizAMliA">Youtube channel</a>:</p>
<ul>
<li><a href="https://youtu.be/tu3Sbm78SpY">How to write reliable socket servers that survive crashes and restarts?</a></li>
<li><a href="https://youtu.be/X5yIEELf4t0">What does working in small steps look like?</a></li>
<li><a href="https://youtu.be/IWAx1-thc_w">Are you running your tests often enough?</a></li>
<li><a href="https://youtu.be/1bDEHWKjbyQ">My continuous integration workflow.</a></li>
<li><a href="https://youtu.be/kdYE7_9-5Ng">My workflow for making changes to software.</a></li>
</ul></li>
</ul>
]]></description>
    <pubDate>Sat, 08 Oct 2022 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/newsletter/september-2022/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>August 2022 Update</title>
    <link>http://rickardlindberg.me/writing/newsletter/august-2022/</link>
    <description><![CDATA[<h1>August 2022 Update</h1>

<p><em>Published on  9 September 2022.</em></p>

<p>This is what I’ve been up to in August 2022:</p>
<ul>
<li><p>I was interested in learning more how to slice stories to make them smaller but still valuable. I found Ron’s article <a href="https://ronjeffries.com/xprog/articles/getting-small-stories/">Getting Small Stories</a> very useful. Having one “dumb” idea can change the conversation from “that is impossible” to “how can we make it better”.</p></li>
<li><p>I also read Ron’s book <a href="https://pragprog.com/titles/rjnsd/the-nature-of-software-development/">The Nature of Software Development</a>. In it he talks about focusing on value and that value is something that <em>we want</em>. But who is <em>we</em>? When I am working on software that I use, I can ask myself what I want. But in most cases I’m not the only user of the software that I write. <em>We</em> are probably many different people.</p></li>
<li><p>I’ve though about writing a book about how to implement programming languages. It would use <a href="/projects/rlmeta/index.html">RLMeta</a> for the examples. But writing a book seems like a daunting task. I started thinking that I could approach writing the book the same way I approach writing software in an agile fashion with small stories. I can create the first version of the “book” in one day. Then I can improve it by writing more chapters and going into more details.</p></li>
<li><p>I continued writing <a href="/writing/reliable-socket-servers/index.html">How to write reliable socket servers that survive crashes and restarts?</a></p></li>
<li><p>I watched the Mob Mentality Show <a href="https://youtu.be/nLUFPHUS2Pk">Agile vs. Agility with Allen Holub</a>. I’ve been inspired by Allen’s talk about Agile, and I got value from this episode.</p></li>
<li><p>I published another four programming videos on my <a href="https://www.youtube.com/channel/UC4XI09URnsM_YYTSizAMliA">Youtube channel</a>:</p>
<ul>
<li><a href="https://youtu.be/BXyiqhqXT0U">I did the simplest thing that could possibly work. Here’s what happened.</a></li>
<li><a href="https://youtu.be/XldYdxAlH2o">Converting RLCI to client/server architecture (part 1/3).</a></li>
<li><a href="https://youtu.be/9HQB9pt4v30">Converting RLCI to client/server architecture (part 2/3).</a></li>
<li><a href="https://youtu.be/GBfUerlQfuI">Converting RLCI to client/server architecture (part 3/3).</a></li>
</ul></li>
</ul>
]]></description>
    <pubDate>Fri, 09 Sep 2022 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/newsletter/august-2022/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>How to write reliable socket servers that survive crashes and restarts?</title>
    <link>http://rickardlindberg.me/writing/reliable-socket-servers/</link>
    <description><![CDATA[<h1>How to write reliable socket servers that survive crashes and restarts?</h1>

<p><em>Published on  2 September 2022.</em></p>

<ul>
<li><a href="#video-version">Video version</a></li>
<li><a href="#the-problem-with-a-crashing-server">The problem with a crashing server</a></li>
<li><a href="#solution-restart-the-server-in-a-loop">Solution: restart the server in a loop</a></li>
<li><a href="#the-problem-with-a-restarting-server">The problem with a restarting server</a></li>
<li><a href="#solution-separate-listening-on-a-socket-and-accepting-connections">Solution: separate listening on a socket and accepting connections</a></li>
<li><a href="#questions-answers">Questions &amp; Answers</a>
<ul>
<li><a href="#how-long-will-a-socket-wait-before-timing-out">How long will a socket wait before timing out?</a></li>
<li><a href="#can-we-decrease-the-startup-time">Can we decrease the startup time?</a></li>
<li><a href="#can-we-use-this-technique-to-create-a-load-balancer">Can we use this technique to create a load balancer?</a></li>
<li><a href="#why-do-we-need-to-move-the-socket-file-descriptor">Why do we need to move the socket file descriptor?</a></li>
<li><a href="#why-is-execvp-needed">Why is execvp needed?</a></li>
<li><a href="#why-socket-option-reuse">Why socket option REUSE?</a></li>
<li><a href="#is-this-how-supervisor-works">Is this how Supervisor works?</a></li>
<li><a href="#why-not-make-the-server-more-reliable">Why not make the server more reliable?</a></li>
<li><a href="#can-this-approach-be-used-for-zero-downtime-deployments">Can this approach be used for zero-downtime deployments</a></li>
<li><a href="#can-we-use-a-unix-domain-socket-instead-of-a-tcp-socket">Can we use a Unix domain socket instead of a TCP socket?</a></li>
</ul></li>
</ul>
<p>A few months ago, I was researching how to do zero-downtime deployments and found the wonderful blog post <a href="https://alangrow.com/blog/dream-deploys-atomic-zero-downtime-deployments">Dream Deploys: Atomic, Zero-Downtime Deployments</a>.</p>
<p>In it, Alan describes how separating listening on a socket and accepting connections on it into different processes can keep a socket “live” at all times even during a restart.</p>
<p>In this blog post I want to document that trick and my understanding of it.</p>
<h2 id="video-version">Video version</h2>
<p>If you prefer a video version covering this topic:</p>
<center>
<iframe width="560" height="315" src="https://www.youtube.com/embed/tu3Sbm78SpY" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write;
encrypted-media; gyroscope; picture-in-picture" allowfullscreen>
</iframe>
</center>
<h2 id="the-problem-with-a-crashing-server">The problem with a crashing server</h2>
<p>To illustrate the problem with a crashing server, we use the example below:</p>
<div class="rliterate-code">
<div class="rliterate-code-header">
<ol class="rliterate-code-path">
<li>
server-listen.py
</li>
</ol>
</div>
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="kn">import</span> <span class="nn">socket</span>

<span class="k">with</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">()</span> <span class="k">as</span> <span class="n">s</span><span class="p">:</span>
    <span class="n">s</span><span class="o">.</span><span class="n">setsockopt</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">SOL_SOCKET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SO_REUSEADDR</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">s</span><span class="o">.</span><span class="n">bind</span><span class="p">((</span><span class="s2">&quot;localhost&quot;</span><span class="p">,</span> <span class="mi">9000</span><span class="p">))</span>
    <span class="n">s</span><span class="o">.</span><span class="n">listen</span><span class="p">()</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;listening on port 9000&quot;</span><span class="p">)</span>
    <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
        <span class="n">conn</span><span class="p">,</span> <span class="n">addr</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">accept</span><span class="p">()</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;accepting connection&quot;</span><span class="p">)</span>
        <span class="k">with</span> <span class="n">conn</span><span class="p">:</span>
            <span class="n">data</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
            <span class="n">number</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
            <span class="n">conn</span><span class="o">.</span><span class="n">sendall</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">number</span><span class="si">}</span><span class="s2">*</span><span class="si">{</span><span class="n">number</span><span class="si">}</span><span class="s2">=</span><span class="si">{</span><span class="n">number</span><span class="o">*</span><span class="n">number</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s2">&quot;ascii&quot;</span><span class="p">))</span>
</pre>
</div>
</div>
</div>
<p>This is a TCP server, listening on port 9000, reading numbers from clients, and returning the product of the two numbers. It assumes that numbers can be parsed as integers. If parsing fails, the server crashes.</p>
<p>To test the behavior of the server, we use the following client:</p>
<div class="rliterate-code">
<div class="rliterate-code-header">
<ol class="rliterate-code-path">
<li>
client.py
</li>
</ol>
</div>
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="kn">import</span> <span class="nn">socket</span>
<span class="kn">import</span> <span class="nn">time</span>

<span class="k">def</span> <span class="nf">make_request</span><span class="p">(</span><span class="n">number</span><span class="p">):</span>
    <span class="k">with</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">()</span> <span class="k">as</span> <span class="n">s</span><span class="p">:</span>
        <span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s2">&quot;localhost&quot;</span><span class="p">,</span> <span class="mi">9000</span><span class="p">))</span>
        <span class="k">if</span> <span class="n">number</span> <span class="o">==</span> <span class="mi">5</span><span class="p">:</span>
            <span class="n">s</span><span class="o">.</span><span class="n">sendall</span><span class="p">(</span><span class="sa">b</span><span class="s2">&quot;five</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">s</span><span class="o">.</span><span class="n">sendall</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">number</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s2">&quot;ascii&quot;</span><span class="p">))</span>
        <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s2">&quot;ascii&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">rstrip</span><span class="p">()</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">20</span><span class="p">):</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">time_start</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">perf_counter</span><span class="p">()</span>
        <span class="n">message</span> <span class="o">=</span> <span class="n">make_request</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
        <span class="n">time_end</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">perf_counter</span><span class="p">()</span>
        <span class="n">diff</span> <span class="o">=</span> <span class="nb">int</span><span class="p">((</span><span class="n">time_end</span> <span class="o">-</span> <span class="n">time_start</span><span class="p">)</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">message</span><span class="p">:</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">message</span><span class="si">}</span><span class="s2"> (request took </span><span class="si">{</span><span class="n">diff</span><span class="si">}</span><span class="s2">ms)&quot;</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;No response for </span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Connection failed for </span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.01</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>It sends 20 requests to the server with a 10ms delay between them. However, for request with number 5, instead of sending the number <code>5</code> it sends the string <code>five</code> to cause the server to crash.</p>
<p>If we start the server, then the client, the output looks as follows:</p>
<div class="rliterate-code">
<div class="rliterate-code-header">
<ol class="rliterate-code-path">
<li>
<span class="cp">server output </span>
</li>
</ol>
</div>
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ python server-listen.py 
listening on port 9000
accepting connection
accepting connection
accepting connection
accepting connection
accepting connection
accepting connection
Traceback (most recent call last):
  File &quot;/home/rick/rickardlindberg.me/writing/reliable-socket-servers/server-listen.py&quot;, line 13, in &lt;module&gt;
    number = int(data)
ValueError: invalid literal for int() with base 10: b&#39;five\n&#39;
</pre>
</div>
</div>
</div>
<div class="rliterate-code">
<div class="rliterate-code-header">
<ol class="rliterate-code-path">
<li>
<span class="cp">client output </span>
</li>
</ol>
</div>
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ python client.py 
0*0=0 (request took 1ms)
1*1=1 (request took 0ms)
2*2=4 (request took 0ms)
3*3=9 (request took 0ms)
4*4=16 (request took 0ms)
No response for 5
Connection failed for 6
Connection failed for 7
Connection failed for 8
Connection failed for 9
Connection failed for 10
Connection failed for 11
Connection failed for 12
Connection failed for 13
Connection failed for 14
Connection failed for 15
Connection failed for 16
Connection failed for 17
Connection failed for 18
Connection failed for 19
</pre>
</div>
</div>
</div>
<p>In the client output, we see that request with number 5 never receives a response from the server and that subsequent requests fail because the server has crashed, and there is no one listening on port 9000.</p>
<h2 id="solution-restart-the-server-in-a-loop">Solution: restart the server in a loop</h2>
<p>In order for subsequent requests to succeed, we need to start the server again after it has crashed. One way to do that is to run the server program in an infinite loop using a script like the one below:</p>
<div class="rliterate-code">
<div class="rliterate-code-header">
<ol class="rliterate-code-path">
<li>
loop.sh
</li>
</ol>
</div>
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">while</span> true<span class="p">;</span> <span class="k">do</span>
    <span class="nb">echo</span> <span class="s2">&quot;</span><span class="nv">$@</span><span class="s2">&quot;</span>
    <span class="s2">&quot;</span><span class="nv">$@</span><span class="s2">&quot;</span> <span class="o">||</span> <span class="nb">true</span>
    <span class="nb">echo</span> <span class="s2">&quot;restarting&quot;</span>
<span class="k">done</span>
</pre>
</div>
</div>
</div>
<p>This Bash script takes a command to run as argument and runs that command in a loop, ignoring any exit code.</p>
<p>Invoking the server and client again, we get the following output:</p>
<div class="rliterate-code">
<div class="rliterate-code-header">
<ol class="rliterate-code-path">
<li>
<span class="cp">server output </span>
</li>
</ol>
</div>
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ bash loop.sh python server-listen.py
python server-listen.py
listening on port 9000
accepting connection
accepting connection
accepting connection
accepting connection
accepting connection
accepting connection
Traceback (most recent call last):
  File &quot;/home/rick/rickardlindberg.me/writing/reliable-socket-servers/server-listen.py&quot;, line 13, in &lt;module&gt;
    number = int(data)
ValueError: invalid literal for int() with base 10: b&#39;five\n&#39;
restarting
python server-listen.py
listening on port 9000
accepting connection
accepting connection
accepting connection
accepting connection
accepting connection
accepting connection
</pre>
</div>
</div>
</div>
<div class="rliterate-code">
<div class="rliterate-code-header">
<ol class="rliterate-code-path">
<li>
<span class="cp">client output </span>
</li>
</ol>
</div>
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ python client.py 
0*0=0 (request took 1ms)
1*1=1 (request took 0ms)
2*2=4 (request took 0ms)
3*3=9 (request took 1ms)
4*4=16 (request took 0ms)
No response for 5
Connection failed for 6
Connection failed for 7
Connection failed for 8
Connection failed for 9
Connection failed for 10
Connection failed for 11
Connection failed for 12
Connection failed for 13
14*14=196 (request took 0ms)
15*15=225 (request took 0ms)
16*16=256 (request took 0ms)
17*17=289 (request took 0ms)
18*18=324 (request took 0ms)
19*19=361 (request took 1ms)
</pre>
</div>
</div>
</div>
<p>In the server output, we see that the server starts again after the crash and starts listening on port 9000.</p>
<p>In the client output, we see that request with number 5 fails the same way, but after a few more requests, it starts getting responses again at request with number 14.</p>
<h2 id="the-problem-with-a-restarting-server">The problem with a restarting server</h2>
<p>Running the server in a loop is an improvement. Instead of dropping all subsequent requests, we only drop a few.</p>
<p>But during the time between the server crash and a new server being up, there is no one listening on port 9000 and we still drop connections.</p>
<p>How can we make sure to handle all requests?</p>
<h2 id="solution-separate-listening-on-a-socket-and-accepting-connections">Solution: separate listening on a socket and accepting connections</h2>
<p>The trick, as also demonstrated in Alan’s blog post, is to listen on the socket in one process and accept connections and processing requests in another process. That way, if processing fails, and that process dies, the socket still stays open because it is managed by another process.</p>
<p>Here is a program that listens on a socket and then spawns server processes in a loop to accept connections:</p>
<div class="rliterate-code">
<div class="rliterate-code-header">
<ol class="rliterate-code-path">
<li>
server-listen-loop.py
</li>
</ol>
</div>
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">socket</span>

<span class="k">with</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">()</span> <span class="k">as</span> <span class="n">s</span><span class="p">:</span>
    <span class="n">s</span><span class="o">.</span><span class="n">setsockopt</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">SOL_SOCKET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SO_REUSEADDR</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">s</span><span class="o">.</span><span class="n">bind</span><span class="p">((</span><span class="s2">&quot;localhost&quot;</span><span class="p">,</span> <span class="mi">9000</span><span class="p">))</span>
    <span class="n">s</span><span class="o">.</span><span class="n">listen</span><span class="p">()</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;listening on port 9000&quot;</span><span class="p">)</span>
    <span class="n">os</span><span class="o">.</span><span class="n">dup2</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">fileno</span><span class="p">(),</span> <span class="mi">0</span><span class="p">)</span>
    <span class="n">os</span><span class="o">.</span><span class="n">close</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">fileno</span><span class="p">())</span>
    <span class="n">os</span><span class="o">.</span><span class="n">execvp</span><span class="p">(</span><span class="s2">&quot;bash&quot;</span><span class="p">,</span> <span class="p">[</span><span class="s2">&quot;bash&quot;</span><span class="p">,</span> <span class="s2">&quot;loop.sh&quot;</span><span class="p">,</span> <span class="s2">&quot;python&quot;</span><span class="p">,</span> <span class="s2">&quot;server-accept.py&quot;</span><span class="p">])</span>
</pre>
</div>
</div>
</div>
<p>The first part of this program creates a socket and starts listening. This is what we had in the previous example.</p>
<p>The second part moves the file descriptor of the socket to file descriptor 0 (stdin) to make it available to child processes.</p>
<p>The third part replaces the current process with <code>bash loop.sh python server-accept.py</code>. At this point the process is listening on the socket and starts the <code>server-accept.py</code> program in a loop. As long as the <code>loop.sh</code> script doesn’t exit, there will be someone listening on port 9000.</p>
<p>The <code>server-accept.py</code> program is similar to <code>server-listen.py</code>, but instead of listening on port 9000, it just accepts connections on the socket which is passed to it as file descriptor 0 (stdin):</p>
<p>Here is <code>server-accept.py</code>:</p>
<div class="rliterate-code">
<div class="rliterate-code-header">
<ol class="rliterate-code-path">
<li>
server-accept.py
</li>
</ol>
</div>
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="kn">import</span> <span class="nn">socket</span>

<span class="k">with</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">fileno</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="k">as</span> <span class="n">s</span><span class="p">:</span>
    <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
        <span class="n">conn</span><span class="p">,</span> <span class="n">addr</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">accept</span><span class="p">()</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;accepting connection&quot;</span><span class="p">)</span>
        <span class="k">with</span> <span class="n">conn</span><span class="p">:</span>
            <span class="n">data</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
            <span class="n">number</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
            <span class="n">conn</span><span class="o">.</span><span class="n">sendall</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">number</span><span class="si">}</span><span class="s2">*</span><span class="si">{</span><span class="n">number</span><span class="si">}</span><span class="s2">=</span><span class="si">{</span><span class="n">number</span><span class="o">*</span><span class="n">number</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s2">&quot;ascii&quot;</span><span class="p">))</span>
</pre>
</div>
</div>
</div>
<p>Invoking the server and client again, we get the following output:</p>
<div class="rliterate-code">
<div class="rliterate-code-header">
<ol class="rliterate-code-path">
<li>
<span class="cp">server output </span>
</li>
</ol>
</div>
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ python server-listen-loop.py
listening on port 9000
python server-accept.py
accepting connection
accepting connection
accepting connection
accepting connection
accepting connection
accepting connection
Traceback (most recent call last):
  File &quot;/home/rick/rickardlindberg.me/writing/reliable-socket-servers/server-accept.py&quot;, line 9, in &lt;module&gt;
    number = int(data)
ValueError: invalid literal for int() with base 10: b&#39;five\n&#39;
restarting
python server-accept.py
accepting connection
accepting connection
accepting connection
accepting connection
accepting connection
accepting connection
accepting connection
accepting connection
accepting connection
accepting connection
accepting connection
accepting connection
accepting connection
accepting connection
</pre>
</div>
</div>
</div>
<div class="rliterate-code">
<div class="rliterate-code-header">
<ol class="rliterate-code-path">
<li>
<span class="cp">client output </span>
</li>
</ol>
</div>
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ python client.py 
0*0=0 (request took 0ms)
1*1=1 (request took 0ms)
2*2=4 (request took 1ms)
3*3=9 (request took 0ms)
4*4=16 (request took 0ms)
No response for 5
6*6=36 (request took 106ms)
7*7=49 (request took 0ms)
8*8=64 (request took 1ms)
9*9=81 (request took 0ms)
10*10=100 (request took 0ms)
11*11=121 (request took 1ms)
12*12=144 (request took 0ms)
13*13=169 (request took 0ms)
14*14=196 (request took 0ms)
15*15=225 (request took 0ms)
16*16=256 (request took 1ms)
17*17=289 (request took 0ms)
18*18=324 (request took 0ms)
19*19=361 (request took 1ms)
</pre>
</div>
</div>
</div>
<p>Now all requests (except the one that causes a crash) get a response. We see that request with number six takes longer to complete. That is because <code>server-accept.py</code> needs time to start up (by the loop script) and call <code>accept</code> on the socket. But the request doesn’t fail. The client will not get a connection error.</p>
<p>And this is one way to write reliable socket servers that survive crashes and restarts.</p>
<h2 id="questions-answers">Questions &amp; Answers</h2>
<h3 id="how-long-will-a-socket-wait-before-timing-out">How long will a socket wait before timing out?</h3>
<p>I tried to modify the loop script to sleep for 60 seconds before restarting the server:</p>
<div class="rliterate-code">
<div class="rliterate-code-header">
<ol class="rliterate-code-path">
<li>
loop-sleep.sh
</li>
</ol>
</div>
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">while</span> true<span class="p">;</span> <span class="k">do</span>
    <span class="nb">echo</span> <span class="s2">&quot;</span><span class="nv">$@</span><span class="s2">&quot;</span>
    <span class="s2">&quot;</span><span class="nv">$@</span><span class="s2">&quot;</span> <span class="o">||</span> <span class="nb">true</span>
    <span class="nb">echo</span> <span class="s2">&quot;restarting&quot;</span>
    sleep <span class="m">60</span>
<span class="k">done</span>
</pre>
</div>
</div>
</div>
<p>The client output looked like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-header">
<ol class="rliterate-code-path">
<li>
<span class="cp">client output </span>
</li>
</ol>
</div>
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>...
No response for 5
6*6=36 (request took 60123ms)
7*7=49 (request took 0ms)
...
</pre>
</div>
</div>
</div>
<p>So it seems that the client got no errors even though the request took 60 seconds to be responded to.</p>
<p>I suppose you can put a timeout in the client code. But this question was about how long the operating system on the server will keep the connection “alive” even though no one calls <code>accept</code>.</p>
<p>I suppose the operating system has some kind of buffer. Say that there are multiple clients making requests at the same time and the server never calls <code>accept</code> during that time. Eventually some buffer must be exceeded and connections get dropped.</p>
<p>(It seems that the client hangs on the <code>s.recv</code> call. That means that the request was sent to the server and must have filled up some buffer.)</p>
<p>If anyone can point me to documentation where I can read about this behavior, please drop me a line.</p>
<h3 id="can-we-decrease-the-startup-time">Can we decrease the startup time?</h3>
<p>When the loop script restarts the server, it takes ~100ms for it to come up and process requests. How can we decrease that time?</p>
<p>One way would be to modify the loop script to spawn multiple server processes. That way, if one crashes, the other can serve the next request.</p>
<p>This would also make the server code concurrent. That is, no “global” state can reside in the server process, because we don’t know which server process will serve the next request.</p>
<p>Another solution might be to have a second process in standby mode. So the loop script starts a second server process, but it stops it right before calling accept. But then we would need a way to signal to the process to resume operation. Perhaps by sending it a signal?</p>
<div class="rliterate-code">
<div class="rliterate-code-header">
<ol class="rliterate-code-path">
<li>
server-accept-standby.py
</li>
</ol>
</div>
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="kn">import</span> <span class="nn">socket</span>

<span class="k">with</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">fileno</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="k">as</span> <span class="n">s</span><span class="p">:</span>
    <span class="c1"># wait for signal before proceeding</span>
    <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
        <span class="n">conn</span><span class="p">,</span> <span class="n">addr</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">accept</span><span class="p">()</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;accepting connection&quot;</span><span class="p">)</span>
        <span class="k">with</span> <span class="n">conn</span><span class="p">:</span>
            <span class="n">data</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
            <span class="n">number</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
            <span class="n">conn</span><span class="o">.</span><span class="n">sendall</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">number</span><span class="si">}</span><span class="s2">*</span><span class="si">{</span><span class="n">number</span><span class="si">}</span><span class="s2">=</span><span class="si">{</span><span class="n">number</span><span class="o">*</span><span class="n">number</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s2">&quot;ascii&quot;</span><span class="p">))</span>
</pre>
</div>
</div>
</div>
<p>Both of these make the loop script more complicated. And if it gets more complicated, it is more likely to crash. And if it crashes, the socket gets closed, and subsequent requests will get connection errors.</p>
<h3 id="can-we-use-this-technique-to-create-a-load-balancer">Can we use this technique to create a load balancer?</h3>
<p>Well, yes.</p>
<p>If the loop script spawns multiple server processes, the operating system will load balance between them.</p>
<p>No fancy load balancing software needed.</p>
<p>More info in <a href="https://relaxdiego.com/2017/02/load-balancing-sockets.html">this blog post</a>.</p>
<h3 id="why-do-we-need-to-move-the-socket-file-descriptor">Why do we need to move the socket file descriptor?</h3>
<p>In the middle of <code>server-listen-loop.py</code> we move the file descriptor of the socket, <code>s.fileno()</code>, to file descriptor 0 (stdin):</p>
<div class="rliterate-code">
<div class="rliterate-code-header">
<ol class="rliterate-code-path">
<li>
server-listen-loop.py
</li>
</ol>
</div>
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">socket</span>

<span class="k">with</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">()</span> <span class="k">as</span> <span class="n">s</span><span class="p">:</span>
    <span class="n">s</span><span class="o">.</span><span class="n">setsockopt</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">SOL_SOCKET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SO_REUSEADDR</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">s</span><span class="o">.</span><span class="n">bind</span><span class="p">((</span><span class="s2">&quot;localhost&quot;</span><span class="p">,</span> <span class="mi">9000</span><span class="p">))</span>
    <span class="n">s</span><span class="o">.</span><span class="n">listen</span><span class="p">()</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;listening on port 9000&quot;</span><span class="p">)</span>
    <span class="n">os</span><span class="o">.</span><span class="n">dup2</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">fileno</span><span class="p">(),</span> <span class="mi">0</span><span class="p">)</span>
    <span class="n">os</span><span class="o">.</span><span class="n">close</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">fileno</span><span class="p">())</span>
    <span class="n">os</span><span class="o">.</span><span class="n">execvp</span><span class="p">(</span><span class="s2">&quot;bash&quot;</span><span class="p">,</span> <span class="p">[</span><span class="s2">&quot;bash&quot;</span><span class="p">,</span> <span class="s2">&quot;loop.sh&quot;</span><span class="p">,</span> <span class="s2">&quot;python&quot;</span><span class="p">,</span> <span class="s2">&quot;server-accept.py&quot;</span><span class="p">])</span>
</pre>
</div>
</div>
</div>
<p>We do that to make the file descriptor available to child processes so that they can create a socket using it and then call <code>accept</code>.</p>
<p>In Python, the file descriptor of the socket is <a href="https://docs.python.org/3/library/os.html#fd-inheritance">not inheritable by default</a>. That is, a child process will not be able to access the socket file descriptor. That is why we have to move it to file descriptor 0 (stdin) which is inherited.</p>
<p>Another option might be to make the file descriptor inheritable. Something like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-header">
<ol class="rliterate-code-path">
<li>
server-listen-loop-inherit.py
</li>
</ol>
</div>
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">socket</span>

<span class="k">with</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">()</span> <span class="k">as</span> <span class="n">s</span><span class="p">:</span>
    <span class="n">s</span><span class="o">.</span><span class="n">setsockopt</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">SOL_SOCKET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SO_REUSEADDR</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">s</span><span class="o">.</span><span class="n">bind</span><span class="p">((</span><span class="s2">&quot;localhost&quot;</span><span class="p">,</span> <span class="mi">9000</span><span class="p">))</span>
    <span class="n">s</span><span class="o">.</span><span class="n">listen</span><span class="p">()</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;listening on port 9000&quot;</span><span class="p">)</span>
    <span class="n">os</span><span class="o">.</span><span class="n">set_inheritable</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">fileno</span><span class="p">(),</span> <span class="kc">True</span><span class="p">)</span>
    <span class="n">os</span><span class="o">.</span><span class="n">execvp</span><span class="p">(</span><span class="s2">&quot;bash&quot;</span><span class="p">,</span> <span class="p">[</span><span class="s2">&quot;bash&quot;</span><span class="p">,</span> <span class="s2">&quot;loop.sh&quot;</span><span class="p">,</span> <span class="s2">&quot;python&quot;</span><span class="p">,</span> <span class="s2">&quot;server-accept-inherit.py&quot;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">fileno</span><span class="p">())])</span>
</pre>
</div>
</div>
</div>
<p>Then the file descriptor must also be passed to the server processes and used there instead of stdin:</p>
<div class="rliterate-code">
<div class="rliterate-code-header">
<ol class="rliterate-code-path">
<li>
server-accept-inherit.py
</li>
</ol>
</div>
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="kn">import</span> <span class="nn">socket</span>
<span class="kn">import</span> <span class="nn">sys</span>

<span class="k">with</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">fileno</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span> <span class="k">as</span> <span class="n">s</span><span class="p">:</span>
    <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
        <span class="n">conn</span><span class="p">,</span> <span class="n">addr</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">accept</span><span class="p">()</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;accepting connection&quot;</span><span class="p">)</span>
        <span class="k">with</span> <span class="n">conn</span><span class="p">:</span>
            <span class="n">data</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
            <span class="n">number</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
            <span class="n">conn</span><span class="o">.</span><span class="n">sendall</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">number</span><span class="si">}</span><span class="s2">*</span><span class="si">{</span><span class="n">number</span><span class="si">}</span><span class="s2">=</span><span class="si">{</span><span class="n">number</span><span class="o">*</span><span class="n">number</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s2">&quot;ascii&quot;</span><span class="p">))</span>
</pre>
</div>
</div>
</div>
<p>This seems to work as well.</p>
<p>I think I choose the first approach because that is how <a href="https://github.com/acg/dream-deploys/blob/master/tcplisten">Alan did it</a>.</p>
<p>Not having to pass the file descriptor to the child processes might be preferable in some situations. I don’t know.</p>
<h3 id="why-is-execvp-needed">Why is execvp needed?</h3>
<p>At the end of <code>server-listen-loop.py</code> we call <code>execvp</code> to start executing the loop script in the same process that started listening on the socket:</p>
<div class="rliterate-code">
<div class="rliterate-code-header">
<ol class="rliterate-code-path">
<li>
server-listen-loop.py
</li>
</ol>
</div>
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">socket</span>

<span class="k">with</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">()</span> <span class="k">as</span> <span class="n">s</span><span class="p">:</span>
    <span class="n">s</span><span class="o">.</span><span class="n">setsockopt</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">SOL_SOCKET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SO_REUSEADDR</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">s</span><span class="o">.</span><span class="n">bind</span><span class="p">((</span><span class="s2">&quot;localhost&quot;</span><span class="p">,</span> <span class="mi">9000</span><span class="p">))</span>
    <span class="n">s</span><span class="o">.</span><span class="n">listen</span><span class="p">()</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;listening on port 9000&quot;</span><span class="p">)</span>
    <span class="n">os</span><span class="o">.</span><span class="n">dup2</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">fileno</span><span class="p">(),</span> <span class="mi">0</span><span class="p">)</span>
    <span class="n">os</span><span class="o">.</span><span class="n">close</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">fileno</span><span class="p">())</span>
    <span class="n">os</span><span class="o">.</span><span class="n">execvp</span><span class="p">(</span><span class="s2">&quot;bash&quot;</span><span class="p">,</span> <span class="p">[</span><span class="s2">&quot;bash&quot;</span><span class="p">,</span> <span class="s2">&quot;loop.sh&quot;</span><span class="p">,</span> <span class="s2">&quot;python&quot;</span><span class="p">,</span> <span class="s2">&quot;server-accept.py&quot;</span><span class="p">])</span>
</pre>
</div>
</div>
</div>
<p>Why do we do that?</p>
<p>I did it because that is how <a href="https://github.com/acg/dream-deploys/blob/master/tcplisten">Alan did it</a>. But now that I think about it, I think we can just as well inline the loop script in <code>server-listen-loop.py</code>. That, of course, requires the loop script to be written in Python. Something like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-header">
<ol class="rliterate-code-path">
<li>
server-listen-loop-python.py
</li>
</ol>
</div>
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">socket</span>
<span class="kn">import</span> <span class="nn">subprocess</span>

<span class="k">with</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">()</span> <span class="k">as</span> <span class="n">s</span><span class="p">:</span>
    <span class="n">s</span><span class="o">.</span><span class="n">setsockopt</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">SOL_SOCKET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SO_REUSEADDR</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">s</span><span class="o">.</span><span class="n">bind</span><span class="p">((</span><span class="s2">&quot;localhost&quot;</span><span class="p">,</span> <span class="mi">9000</span><span class="p">))</span>
    <span class="n">s</span><span class="o">.</span><span class="n">listen</span><span class="p">()</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;listening on port 9000&quot;</span><span class="p">)</span>
    <span class="n">os</span><span class="o">.</span><span class="n">dup2</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">fileno</span><span class="p">(),</span> <span class="mi">0</span><span class="p">)</span>
    <span class="n">os</span><span class="o">.</span><span class="n">close</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">fileno</span><span class="p">())</span>
    <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
        <span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">([</span><span class="s2">&quot;python&quot;</span><span class="p">,</span> <span class="s2">&quot;server-accept.py&quot;</span><span class="p">])</span><span class="o">.</span><span class="n">wait</span><span class="p">()</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;restarting&quot;</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>It seems to work as well.</p>
<p>If the loop script is a simple loop like this, perhaps it makes sense to inline it. But if the loop script is more complex, perhaps even a third party product to manage server processes, it makes sense to do the <code>execvp</code>.</p>
<h3 id="why-socket-option-reuse">Why socket option REUSE?</h3>
<p>In <code>server-listen.py</code>, we set the socket option <code>SO_REUSEADDR</code>:</p>
<div class="rliterate-code">
<div class="rliterate-code-header">
<ol class="rliterate-code-path">
<li>
server-listen.py
</li>
</ol>
</div>
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="kn">import</span> <span class="nn">socket</span>

<span class="k">with</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">()</span> <span class="k">as</span> <span class="n">s</span><span class="p">:</span>
    <span class="n">s</span><span class="o">.</span><span class="n">setsockopt</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">SOL_SOCKET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SO_REUSEADDR</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">s</span><span class="o">.</span><span class="n">bind</span><span class="p">((</span><span class="s2">&quot;localhost&quot;</span><span class="p">,</span> <span class="mi">9000</span><span class="p">))</span>
    <span class="n">s</span><span class="o">.</span><span class="n">listen</span><span class="p">()</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;listening on port 9000&quot;</span><span class="p">)</span>
    <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
        <span class="n">conn</span><span class="p">,</span> <span class="n">addr</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">accept</span><span class="p">()</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;accepting connection&quot;</span><span class="p">)</span>
        <span class="k">with</span> <span class="n">conn</span><span class="p">:</span>
            <span class="n">data</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
            <span class="n">number</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
            <span class="n">conn</span><span class="o">.</span><span class="n">sendall</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">number</span><span class="si">}</span><span class="s2">*</span><span class="si">{</span><span class="n">number</span><span class="si">}</span><span class="s2">=</span><span class="si">{</span><span class="n">number</span><span class="o">*</span><span class="n">number</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s2">&quot;ascii&quot;</span><span class="p">))</span>
</pre>
</div>
</div>
</div>
<p>Why?</p>
<p>I think <a href="https://stackoverflow.com/a/3229926">this Stackoverflow answer</a> explains it well:</p>
<blockquote>
<p>This socket option tells the kernel that even if this port is busy (in the TIME_WAIT state), go ahead and reuse it anyway. If it is busy, but with another state, you will still get an address already in use error. It is useful if your server has been shut down, and then restarted right away while sockets are still active on its port.</p>
</blockquote>
<p>Without it, it can not be run in a loop, and will get this error:</p>
<pre><code>OSError: [Errno 98] Address already in use</code></pre>
<h3 id="is-this-how-supervisor-works">Is this how Supervisor works?</h3>
<p><a href="http://supervisord.org/">Supervisor</a> can create a process that listens on a socket and then pass that socket to child processes. For example like this:</p>
<pre><code>[fcgi-program:test]
socket=tcp://localhost:9000
command=python server-accept.py</code></pre>
<p>The <code>server-accept.py</code> program will get a socket passed to it as file descriptor 0 (stdin).</p>
<p>However, if <code>server-accept.py</code> crashes, it seems like Supervisor closes the socket and creates it again upon restart:</p>
<pre><code>2022-05-10 21:46:28,734 INFO exited: test (exit status 1; not expected)
2022-05-10 21:46:28,734 INFO Closing socket tcp://localhost:9000
2022-05-10 21:46:29,736 INFO Creating socket tcp://localhost:9000
2022-05-10 21:46:29,737 INFO spawned: &#39;test&#39; with pid 561624
2022-05-10 21:46:30,740 INFO success: test entered RUNNING state, process has stayed up for &gt; than 1 seconds (startsecs)</code></pre>
<p>So in this setup, we would still drop connections.</p>
<h3 id="why-not-make-the-server-more-reliable">Why not make the server more reliable?</h3>
<p>We could make the server more reliable so that it doesn’t crash. But sometimes a server needs to be restarted anyway. For example when configuration changes or a new version of the server should be deployed. The approach described in this blog post makes it possible to do those kinds of things without ever dropping connections as well.</p>
<h3 id="can-this-approach-be-used-for-zero-downtime-deployments">Can this approach be used for zero-downtime deployments</h3>
<p>Well, yes, that is how I learned about it in <a href="https://alangrow.com/blog/dream-deploys-atomic-zero-downtime-deployments">Alan’s blog post</a>.</p>
<h3 id="can-we-use-a-unix-domain-socket-instead-of-a-tcp-socket">Can we use a Unix domain socket instead of a TCP socket?</h3>
<p>Well, yes.</p>
<p>In fact, the accepting server doesn’t know what kind of socket is passed to it. It could be either a Unix domain socket or a TCP socket:</p>
<div class="rliterate-code">
<div class="rliterate-code-header">
<ol class="rliterate-code-path">
<li>
server-accept.py
</li>
</ol>
</div>
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="kn">import</span> <span class="nn">socket</span>

<span class="k">with</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">fileno</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="k">as</span> <span class="n">s</span><span class="p">:</span>
    <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
        <span class="n">conn</span><span class="p">,</span> <span class="n">addr</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">accept</span><span class="p">()</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;accepting connection&quot;</span><span class="p">)</span>
        <span class="k">with</span> <span class="n">conn</span><span class="p">:</span>
            <span class="n">data</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
            <span class="n">number</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
            <span class="n">conn</span><span class="o">.</span><span class="n">sendall</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">number</span><span class="si">}</span><span class="s2">*</span><span class="si">{</span><span class="n">number</span><span class="si">}</span><span class="s2">=</span><span class="si">{</span><span class="n">number</span><span class="o">*</span><span class="n">number</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s2">&quot;ascii&quot;</span><span class="p">))</span>
</pre>
</div>
</div>
</div>
<p>(<a href="https://eli.thegreenplace.net/2019/unix-domain-sockets-in-go/">Unix domain sockets are probably faster than TCP sockets when running on the same machine.</a>)</p>
]]></description>
    <pubDate>Fri, 02 Sep 2022 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/reliable-socket-servers/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>July 2022 Update</title>
    <link>http://rickardlindberg.me/writing/newsletter/july-2022/</link>
    <description><![CDATA[<h1>July 2022 Update</h1>

<p><em>Published on  2 August 2022.</em></p>

<p>This is what I’ve been up to in July 2022:</p>
<ul>
<li><p>I continued practicing Agile software development with <a href="https://github.com/rickardlindberg/rlci/">RLCI</a>. I slowly get the feeling that Agile is not really what most people think it is. Some things I read and watched this month in that vein:</p>
<ul>
<li><p>A <a href="https://twitter.com/allenholub/status/1546604233323032576">few</a> <a href="https://twitter.com/allenholub/status/1552432052762320896">tweets</a> by Allen Holub and a <a href="https://youtu.be/hxXmTnb3mFU">conversation</a> he had with Dave Farley gave me some insights into what “real” Agile is about.</p></li>
<li><p><a href="https://www.sicpers.info/2022/07/phrases-in-computing-that-might-need-retiring/">Phrases in computing that might need retiring</a> by Graham Lee indicated to me that the term “Agile” has changed meaning over the years.</p></li>
<li><p><a href="https://www.ronjeffries.com/articles/-z022/0222ff/gotta-be-good/">Gotta Be Good</a> by Ron Reffries indicated to me that “real” Agile is actually HARD and need to be practiced to get good at.</p></li>
</ul></li>
<li><p>I published another five programming videos on my <a href="https://www.youtube.com/channel/UC4XI09URnsM_YYTSizAMliA">Youtube channel</a>:</p>
<ul>
<li><a href="https://youtu.be/d7fq8JyU9jg">How to write tests that allow refactoring your code?</a></li>
<li><a href="https://youtu.be/BmUz4my7eko">Deploying my continuous integration software to a server.</a></li>
<li><a href="https://youtu.be/C05OD7h0-gg">Therapeutic refactoring and polishing of a feature.</a></li>
<li><a href="https://youtu.be/h_oRLiJo3Tc">How to incorporate evolutionary design into the development process?</a></li>
<li><a href="https://youtu.be/WlvsjCeuT6w">I made a mistake when evolving the design of RLCI to support a database.</a></li>
</ul></li>
</ul>
]]></description>
    <pubDate>Tue, 02 Aug 2022 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/newsletter/july-2022/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>June 2022 Update</title>
    <link>http://rickardlindberg.me/writing/newsletter/june-2022/</link>
    <description><![CDATA[<h1>June 2022 Update</h1>

<p><em>Published on  4 July 2022.</em></p>

<p>This is what I’ve been up to in June 2022:</p>
<ul>
<li><p>I started over with <a href="https://github.com/rickardlindberg/rlci/">RLCI</a> and tried to build it using an agile approach. The README has a bunch of more information about it. In this process, the following resources helped me:</p>
<ul>
<li><p><a href="https://www.jamesshore.com/v2/blog/2018/testing-without-mocks">Testing Without Mocks: A Pattern Language</a> Again from James Shore. Gave me insight into how to design and test.</p></li>
<li><p><a href="https://blog.thecodewhisperer.com/permalink/you-dont-hate-mocks-you-hate-side-effects">You Don’t Hate Mocks; You Hate Side-Effects</a> The following quote explained it well to me the design relationship between pure functions and functions with side effects:</p>
<blockquote>
<p>We always have the option of replacing a side-effect with returning a value that represents the effect, as long as we can instruct the clients to interpret that value as a command to execute.</p>
</blockquote></li>
<li><p><a href="https://stackoverflow.blog/2022/01/03/favor-real-dependencies-for-unit-testing/">Favor real dependencies for unit testing</a> This helped me solve a testing problem I had. More on that in an upcoming video.</p></li>
</ul></li>
<li><p>I discovered that one of the authors of <em>Continuous Delivery</em>, Dave Farley, has a <a href="https://www.youtube.com/c/ContinuousDelivery">Youtube channel</a>. I found some of his videos interesting.</p></li>
<li><p>I published another four programming videos on my <a href="https://www.youtube.com/channel/UC4XI09URnsM_YYTSizAMliA">Youtube channel</a>:</p>
<ul>
<li><a href="https://youtu.be/yKkGXn1zmaI">How James Shore ruined my RLCI project.</a></li>
<li><a href="https://youtu.be/Re7litDdulU">Rebooting RLCI with an agile approach using TDD and zero friction development.</a></li>
<li><a href="https://youtu.be/sokSvnAkd5E">Adding continuous integration functionality to RLCI.</a></li>
<li><a href="https://youtu.be/0jJEPgomRCc">Making RLCI pipelines run in isolation.</a></li>
</ul></li>
</ul>
]]></description>
    <pubDate>Mon, 04 Jul 2022 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/newsletter/june-2022/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>May 2022 Update</title>
    <link>http://rickardlindberg.me/writing/newsletter/may-2022/</link>
    <description><![CDATA[<h1>May 2022 Update</h1>

<p><em>Published on  4 June 2022.</em></p>

<p>This is what I’ve been up to in May 2022:</p>
<ul>
<li><p>I rediscovered James Shore through his <a href="https://www.jamesshore.com/v2/books/aoad2/book_club/evolutionary_design">Agile Book Club: Evolutionary Design (with Kent Beck)</a>. I had stumbled upon his <a href="https://www.jamesshore.com/v2/projects/lunch-and-learn">TDD Lunch &amp; Learn</a> series before, and the book club made me revisit some of his work. This time I also bought his book <a href="https://www.jamesshore.com/v2/books/aoad2">The Art of Agile Development</a> which reignited my interest for agile methods (something that has diminished more and more since I first got into it).</p></li>
<li><p>I read <a href="https://alangrow.com/blog/dream-deploys-atomic-zero-downtime-deployments">Dream Deploys: Atomic, Zero-Downtime Deployments</a> and got inspired to try that approach. I also started working on a <a href="/writing/reliable-socket-servers/index.html">blog post</a> on my own to explore the topic.</p></li>
<li><p>I continued working on <a href="https://github.com/rickardlindberg/rlci/">RLCI</a> and worked on connecting the different pieces. However, after getting inspired by agile methods again and learning that continuous integration is not what I thought it was (thanks for the inspiration James!), I will have to rethink the project. I think I will start over from scratch and develop it with a slightly new approach.</p></li>
<li><p>I published another four programming videos on my <a href="https://www.youtube.com/channel/UC4XI09URnsM_YYTSizAMliA">Youtube channel</a>:</p>
<ul>
<li><a href="https://youtu.be/R-HCtiVzYuI">Connecting all the pieces in RLCI.</a></li>
<li><a href="https://youtu.be/BQ-wWIVQ_gs">Researching zero downtime deployments.</a></li>
<li><a href="https://youtu.be/S_R80ZhsmZo">Getting back to the roots of TDD.</a></li>
<li><a href="https://youtu.be/Xm8QGMzyxeI">Practicing TDD and testing without mocks.</a></li>
</ul></li>
</ul>
]]></description>
    <pubDate>Sat, 04 Jun 2022 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/newsletter/may-2022/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>April 2022 Update</title>
    <link>http://rickardlindberg.me/writing/newsletter/april-2022/</link>
    <description><![CDATA[<h1>April 2022 Update</h1>

<p><em>Published on  1 May 2022.</em></p>

<p>This is what I’ve been up to in April 2022:</p>
<ul>
<li><p>I continued working on <a href="https://github.com/rickardlindberg/rlci/">RLCI</a>. In particular I started working on the server component and wrote it using <a href="https://docs.python.org/3/library/asyncio.html">asyncio</a>. So far, that feels like a good choice.</p></li>
<li><p>I read <a href="https://www.martinfowler.com/books/refactoringDatabases.html">Refactoring databases</a> and started reading <a href="https://www.martinfowler.com/books/nosql.html">NoSQL Distilled</a>. The reason I picked up the first one was that I sought to understand how you can do zero-downtime deployments and still evolve your database. That is, how can both an old version of an application and a new version of an application work with the same database? The answer was that you must evolve your database schema such that it is compatible with both versions. So if you move a column for example, you can create a trigger that make sure that both the old and the new column are in sync. And when a transition period is over, you can drop the old column, and the move column refactoring is complete. I picked up the second book to find if the answer was any different for NoSQL databases which generally are a bit more flexible when it comes to database schema. My guess is that a similar approach is needed. So far the book has given me some new ideas about what databases are for and how different databases serve different purposes. This will all be useful in going forward with a storage mechanism for RCLI.</p></li>
<li><p>I published another five programming videos on my Youtube channel:</p>
<ul>
<li><a href="https://youtu.be/lqV5c_fN29Q">How to find time to work on your hobby projects?</a></li>
<li><a href="https://youtu.be/aXkGdvKZu1A">How I got unstuck with RLCI.</a></li>
<li><a href="https://youtu.be/GO-sfUaqbvg">Learning Python asyncio when working on CI server.</a></li>
<li><a href="https://youtu.be/ihS0HagBfKY">What makes programming videos interesting?</a></li>
<li><a href="https://youtu.be/uV2eeAcrxzU">Refactoring a class to test in isolation: REAL WORLD EXAMPLE</a></li>
</ul></li>
</ul>
]]></description>
    <pubDate>Sun, 01 May 2022 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/newsletter/april-2022/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>March 2022 Update</title>
    <link>http://rickardlindberg.me/writing/newsletter/march-2022/</link>
    <description><![CDATA[<h1>March 2022 Update</h1>

<p><em>Published on  2 April 2022.</em></p>

<p>This is what I’ve been up to in March 2022:</p>
<ul>
<li><p>I started prototyping <a href="https://github.com/rickardlindberg/rlci/">RLCI</a> which is an experimental CI/CD system designed to solve problems I’ve had with Jenkins. I made some videos about it too.</p></li>
<li><p>I published another four programming videos on my Youtube channel:</p>
<ul>
<li><a href="https://youtu.be/pZwjYknDxYo">Sharing thoughts about a new CI system that solves problems I’ve had with Jenkins.</a></li>
<li><a href="https://youtu.be/-iSgZkqlUVw">Thinking about representations for CI pipelines.</a></li>
<li><a href="https://youtu.be/oPX8bBTNBMI">Demoing prototype of CI/CD system.</a></li>
<li><a href="https://youtu.be/RHy-oryo5rI">How can a worker node execute code on behalf of a CI/CD server?</a></li>
</ul></li>
</ul>
]]></description>
    <pubDate>Sat, 02 Apr 2022 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/newsletter/march-2022/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>February 2022 Update</title>
    <link>http://rickardlindberg.me/writing/newsletter/february-2022/</link>
    <description><![CDATA[<h1>February 2022 Update</h1>

<p><em>Published on  2 March 2022.</em></p>

<p>This is what I’ve been up to in February 2022:</p>
<ul>
<li><p>I finished the blog post about the new version of <a href="/writing/rlmeta-poster-2/index.html">RLMeta</a>.</p></li>
<li><p>I published another four programming videos on my Youtube channel:</p>
<ul>
<li><a href="https://youtu.be/stBGg7v-URg">How I got consumed by a programming problem and recovered.</a></li>
<li><a href="https://youtu.be/ACTO7AfB_zQ">Adding LISP-style function calls to RLMeta.</a></li>
<li><a href="https://youtu.be/riJUqBPx1uU">Solving Advent of Code 2021 Day 14 using Python without any libraries.</a></li>
<li><a href="https://youtu.be/84IUZVyFrh8">Demoing new image export dialog in Timeline version 2.6.0.</a></li>
</ul></li>
</ul>
]]></description>
    <pubDate>Wed, 02 Mar 2022 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/newsletter/february-2022/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>RLMeta poster 2: the poster that wasn't</title>
    <link>http://rickardlindberg.me/writing/rlmeta-poster-2/</link>
    <description><![CDATA[<h1>RLMeta poster 2: the poster that wasn't</h1>

<p><em>Published on 12 February 2022.</em></p>

<ul>
<li><a href="#code-walk-through">Code walk through</a>
<ul>
<li><a href="#getting-rlmeta">Getting RLMeta</a></li>
<li><a href="#file-structure">File structure</a></li>
<li><a href="#exploring-rlmeta">Exploring RLMeta</a></li>
<li><a href="#compiling-rlmeta-itself">Compiling RLMeta itself</a></li>
<li><a href="#a-tour-of-the-main-function">A tour of the main function</a></li>
<li><a href="#following-a-compilation">Following a compilation</a></li>
<li><a href="#the-purpose-of-the-make-script">The purpose of the make script</a></li>
</ul></li>
<li><a href="#changes-from-the-poster-version">Changes from the poster version</a>
<ul>
<li><a href="#generate-labels-in-semantic-actions">Generate labels in semantic actions</a></li>
<li><a href="#remove-dependency-on-bash">Remove dependency on Bash</a></li>
<li><a href="#extract-assembler">Extract assembler</a></li>
<li><a href="#rewrite-vm-for-clarity">Rewrite VM for clarity</a></li>
<li><a href="#add-ability-to-run-a-rule-in-semantic-action">Add ability to run a rule in semantic action</a></li>
<li><a href="#misc">Misc</a></li>
</ul></li>
<li><a href="#the-future">The future</a></li>
<li><a href="#code-listings-for-rlmeta">Code listings for RLMeta</a>
<ul>
<li><a href="#srcparser.rlmeta">src/parser.rlmeta</a></li>
<li><a href="#srccodegenerator.rlmeta">src/codegenerator.rlmeta</a></li>
<li><a href="#srcassembler.rlmeta">src/assembler.rlmeta</a></li>
<li><a href="#srcsupport.py">src/support.py</a></li>
<li><a href="#srcmain.py">src/main.py</a></li>
<li><a href="#make.py">make.py</a></li>
</ul></li>
</ul>
<p>A while ago I created a <a href="/writing/creating-rlmeta-poster/index.html">poster</a> to showcase RLMeta. The version of RLMeta on the poster is based on the version from the <a href="/writing/rlmeta-memoize-failures/index.html">memoizing failures</a> article, but I made it smaller and more beautiful to better fit the poster. To be able to finish the poster, I had to stop making changes and put the source code on the poster. That was difficult because I felt the need for it to be perfect. Eventually I did stop polishing, and left a few items unresolved.</p>
<p>Almost immediately after I finished the poster, I started working on a second version. Initially, my plan was to make a second version of the poster. I started to fix the unresolved items and I was making progress. But somehow imperfections kept creeping in. It felt like a never ending game of chasing perfection. That’s when I decided that a second poster was probably not going to be worth it. But I still liked the new version of RLMeta.</p>
<p>Instead, I decided to attempt to present the new version in the style of a code walk through. In other words, another way to showcase RLMeta that is also a bit more practical. Compared to the poster version, this version could also be more easily improved because rendering the blog post is automatic whereas creating the layout of a poster requires manual work every time the source code changes. I also wanted to experiment with the walk through format because I thought it could be something worth putting into the README of a project.</p>
<p>The rest of this blog post consists of the walk through of the new version of RLMeta and a section on the most important changes from the poster version and motivations for them.</p>
<h2 id="code-walk-through">Code walk through</h2>
<h3 id="getting-rlmeta">Getting RLMeta</h3>
<p>In order to follow along on this walk through, you need to download the version of RLMeta from here: <a href="rlmeta-poster-2.zip">rlmeta-poster-2.zip</a>.</p>
<h3 id="file-structure">File structure</h3>
<p>The zip file consists of the source code for the RLMeta compiler, a make script, and the compiler itself (<code>rlmeta.py</code>):</p>
<div class="highlight">
<pre><span></span>$ <span></span>tree --dirsfirst
<span></span>.
├── src
│   ├── assembler.rlmeta
│   ├── codegenerator.rlmeta
│   ├── main.py
│   ├── parser.rlmeta
│   └── support.py
├── make.py
└── rlmeta.py

1 directory, 7 files
</pre>
</div>
<p>The size of the source code is quite small:</p>
<div class="highlight">
<pre><span></span>$ <span></span>wc -l src/*
<span></span>   39 src/assembler.rlmeta
   57 src/codegenerator.rlmeta
   26 src/main.py
   60 src/parser.rlmeta
  240 src/support.py
  422 total
</pre>
</div>
<p>The compiler can be created from this source code only. We will see how later in this walk through.</p>
<h3 id="exploring-rlmeta">Exploring RLMeta</h3>
<p>Before we dive into how the RLMeta compiler is created, let’s explore RLMeta by writing a small, but real, program in it.</p>
<p>What types of programs can we write in RLMeta?</p>
<p>In RLMeta, we write grammars. Grammars have rules that specify how to match objects from an input stream and specify what should happen when objects are matched.</p>
<p>Let’s write a grammar that counts the number of objects in an input stream and produces a report:</p>
<div class="highlight">
<pre><span></span>$ <span></span>cat object_counter.rlmeta
<span></span>ObjectCounter {
    count <span class="nb">=</span> <span class="nc">.*</span><span class="nb">:</span>xs <span class="nb">-&gt;</span> { <span class="s">&quot;number of objects = &quot;</span> len(xs) }
}
</pre>
</div>
<p>The main function of the RLMeta compiler is to transform grammars into Python code. If invoked without arguments, the compiler reads a grammar from stdin and writes Python code to stdout:</p>
<div class="highlight">
<pre><span></span>$ <span></span>cat object_counter.rlmeta <span class="p">|</span> python rlmeta.py
<span></span><span class="k">class</span> <span class="nc">ObjectCounter</span><span class="p">(</span><span class="n">Grammar</span><span class="p">):</span>
    <span class="n">rules</span> <span class="o">=</span> <span class="p">{</span>
        <span class="s1">&#39;count&#39;</span><span class="p">:</span> <span class="mi">0</span>
    <span class="p">}</span>
    <span class="n">code</span> <span class="o">=</span> <span class="p">[</span>
        <span class="n">PUSH_SCOPE</span><span class="p">,</span>
        <span class="n">LIST_START</span><span class="p">,</span>
        <span class="n">BACKTRACK</span><span class="p">,</span>
        <span class="mi">10</span><span class="p">,</span>
        <span class="n">MATCH</span><span class="p">,</span>
        <span class="s1">&#39;any&#39;</span><span class="p">,</span>
        <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="kc">True</span><span class="p">,</span>
        <span class="n">LIST_APPEND</span><span class="p">,</span>
        <span class="n">COMMIT</span><span class="p">,</span>
        <span class="mi">2</span><span class="p">,</span>
        <span class="n">LIST_END</span><span class="p">,</span>
        <span class="n">BIND</span><span class="p">,</span>
        <span class="s1">&#39;xs&#39;</span><span class="p">,</span>
        <span class="n">ACTION</span><span class="p">,</span>
        <span class="k">lambda</span> <span class="bp">self</span><span class="p">:</span> <span class="n">join</span><span class="p">([</span><span class="s1">&#39;number of objects = &#39;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">lookup</span><span class="p">(</span><span class="s1">&#39;len&#39;</span><span class="p">)(</span><span class="bp">self</span><span class="o">.</span><span class="n">lookup</span><span class="p">(</span><span class="s1">&#39;xs&#39;</span><span class="p">))]),</span>
        <span class="n">POP_SCOPE</span><span class="p">,</span>
        <span class="n">RETURN</span>
    <span class="p">]</span>
</pre>
</div>
<p>This is equivalent to using the <code>--compile</code> command with a value of <code>-</code> which stands for stdin:</p>
<div class="highlight">
<pre><span></span>$ <span></span>cat object_counter.rlmeta <span class="p">|</span> python rlmeta.py --compile - <span class="p">|</span> head -n3
<span></span><span class="k">class</span> <span class="nc">ObjectCounter</span><span class="p">(</span><span class="n">Grammar</span><span class="p">):</span>
    <span class="n">rules</span> <span class="o">=</span> <span class="p">{</span>
        <span class="s1">&#39;count&#39;</span><span class="p">:</span> <span class="mi">0</span>
</pre>
</div>
<p>And, the file can also be specified directly like this:</p>
<div class="highlight">
<pre><span></span>$ <span></span>python rlmeta.py --compile object_counter.rlmeta <span class="p">|</span> head -n3
<span></span><span class="k">class</span> <span class="nc">ObjectCounter</span><span class="p">(</span><span class="n">Grammar</span><span class="p">):</span>
    <span class="n">rules</span> <span class="o">=</span> <span class="p">{</span>
        <span class="s1">&#39;count&#39;</span><span class="p">:</span> <span class="mi">0</span>
</pre>
</div>
<p>Don’t worry about understanding the generated code. We will explore it more later. Just note that the generated class inherits from a class called <code>Grammar</code> and that it uses some constants like <code>PUSH_SCOPE</code> and <code>LIST_START</code>. These things are defined in a support library which can be generated by the RLMeta compiler with the <code>--support</code> command:</p>
<div class="highlight">
<pre><span></span>$ <span></span>python rlmeta.py --support <span class="p">|</span> grep <span class="s1">&#39;^\(class\|def\)&#39;</span>
<span></span><span class="k">class</span> <span class="nc">VM</span><span class="p">:</span>
<span class="k">def</span> <span class="nf">PUSH_SCOPE</span><span class="p">(</span><span class="n">vm</span><span class="p">):</span>
<span class="k">def</span> <span class="nf">POP_SCOPE</span><span class="p">(</span><span class="n">vm</span><span class="p">):</span>
<span class="k">def</span> <span class="nf">BACKTRACK</span><span class="p">(</span><span class="n">vm</span><span class="p">):</span>
<span class="k">def</span> <span class="nf">COMMIT</span><span class="p">(</span><span class="n">vm</span><span class="p">):</span>
<span class="k">def</span> <span class="nf">CALL</span><span class="p">(</span><span class="n">vm</span><span class="p">):</span>
<span class="k">def</span> <span class="nf">CALL_</span><span class="p">(</span><span class="n">vm</span><span class="p">,</span> <span class="n">pc</span><span class="p">):</span>
<span class="k">def</span> <span class="nf">RETURN</span><span class="p">(</span><span class="n">vm</span><span class="p">):</span>
<span class="k">def</span> <span class="nf">MATCH</span><span class="p">(</span><span class="n">vm</span><span class="p">):</span>
<span class="k">def</span> <span class="nf">MATCH_</span><span class="p">(</span><span class="n">vm</span><span class="p">,</span> <span class="n">fn</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
<span class="k">def</span> <span class="nf">MATCH_CALL_RULE</span><span class="p">(</span><span class="n">vm</span><span class="p">):</span>
<span class="k">def</span> <span class="nf">LIST_START</span><span class="p">(</span><span class="n">vm</span><span class="p">):</span>
<span class="k">def</span> <span class="nf">LIST_APPEND</span><span class="p">(</span><span class="n">vm</span><span class="p">):</span>
<span class="k">def</span> <span class="nf">LIST_END</span><span class="p">(</span><span class="n">vm</span><span class="p">):</span>
<span class="k">def</span> <span class="nf">BIND</span><span class="p">(</span><span class="n">vm</span><span class="p">):</span>
<span class="k">def</span> <span class="nf">ACTION</span><span class="p">(</span><span class="n">vm</span><span class="p">):</span>
<span class="k">def</span> <span class="nf">PUSH_STREAM</span><span class="p">(</span><span class="n">vm</span><span class="p">):</span>
<span class="k">def</span> <span class="nf">POP_STREAM</span><span class="p">(</span><span class="n">vm</span><span class="p">):</span>
<span class="k">def</span> <span class="nf">FAIL</span><span class="p">(</span><span class="n">vm</span><span class="p">):</span>
<span class="k">def</span> <span class="nf">FAIL_</span><span class="p">(</span><span class="n">vm</span><span class="p">,</span> <span class="n">fail_message</span><span class="p">):</span>
<span class="k">class</span> <span class="nc">SemanticAction</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
<span class="k">class</span> <span class="nc">MatchError</span><span class="p">(</span><span class="ne">Exception</span><span class="p">):</span>
<span class="k">class</span> <span class="nc">Grammar</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
<span class="k">class</span> <span class="nc">Runtime</span><span class="p">(</span><span class="nb">dict</span><span class="p">):</span>
<span class="k">class</span> <span class="nc">Counter</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
<span class="k">def</span> <span class="nf">splice</span><span class="p">(</span><span class="n">depth</span><span class="p">,</span> <span class="n">item</span><span class="p">):</span>
<span class="k">def</span> <span class="nf">concat</span><span class="p">(</span><span class="n">lists</span><span class="p">):</span>
<span class="k">def</span> <span class="nf">join</span><span class="p">(</span><span class="n">items</span><span class="p">,</span> <span class="n">delimiter</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="p">):</span>
<span class="k">def</span> <span class="nf">indent</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">prefix</span><span class="o">=</span><span class="s2">&quot;    &quot;</span><span class="p">):</span>
<span class="k">def</span> <span class="nf">compile_chain</span><span class="p">(</span><span class="n">grammars</span><span class="p">,</span> <span class="n">source</span><span class="p">):</span>
</pre>
</div>
<p>To create a complete program, we also have to write a main function that instantiates the <code>ObjectCounter</code> grammar and invokes its <code>count</code> rule.</p>
<p>Here is an example that passes stdin as the input stream to the <code>count</code> rule and prints the result to stdout:</p>
<div class="highlight">
<pre><span></span>$ <span></span>cat object_counter_main.py
<span></span><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&quot;__main__&quot;</span><span class="p">:</span>
    <span class="kn">import</span> <span class="nn">sys</span>
    <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">ObjectCounter</span><span class="p">()</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="s2">&quot;count&quot;</span><span class="p">,</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdin</span><span class="o">.</span><span class="n">read</span><span class="p">()))</span>
</pre>
</div>
<p>The <code>--copy</code> command of the RLMeta compiler can be used to copy this main file, as is, to the output.</p>
<p>Combining these pieces into a single compile command, we get this:</p>
<div class="highlight">
<pre><span></span>$ <span></span>python rlmeta.py --support --compile object_counter.rlmeta --copy object_counter_main.py &gt; object_counter.py
<span></span>
</pre>
</div>
<p>It will perform all commands in the given order and write all generated code concatenated into a single file.</p>
<p>Note that the support library comes before the grammar so that <code>Grammar</code> is defined by the time <code>ObjectCounter</code> is evaluated.</p>
<p>The object counter source code has now been compiled into a standalone Python program that can be run like this:</p>
<div class="highlight">
<pre><span></span>$ <span></span><span class="nb">echo</span> <span class="s1">&#39;hello&#39;</span> <span class="p">|</span> python object_counter.py
<span></span>number of objects = 6
</pre>
</div>
<div class="highlight">
<pre><span></span>$ <span></span><span class="nb">echo</span> <span class="s1">&#39;this is longer&#39;</span> <span class="p">|</span> python object_counter.py
<span></span>number of objects = 15
</pre>
</div>
<p>So programs in RLMeta are written mainly in grammar files with some support functions written in Python. The RLMeta compiler can process all these files to produce a single Python file which is the compiled program.</p>
<h3 id="compiling-rlmeta-itself">Compiling RLMeta itself</h3>
<p>Now that we have an understanding of RLMeta, let’s look at the command that compiles the RLMeta compiler itself from the source code:</p>
<div class="highlight">
<pre><span></span>$ <span></span>python rlmeta.py --embed SUPPORT src/support.py --support --compile src/parser.rlmeta --compile src/codegenerator.rlmeta --compile src/assembler.rlmeta --copy src/main.py &gt; rlmeta-raw.py
<span></span>
</pre>
</div>
<p>The first command, <code>--embed SUPPORT src/support.py</code>, tells the compiler to generate a Python variable named <code>SUPPORT</code> containing the contents of the file <code>src/support.py</code>. The <code>--embed</code> command is the last command of the compiler that we have not yet seen. (The RLMeta compiler needs the support library in a variable so that it can generate it later with the <code>--support</code> command.)</p>
<p>Next, the <code>--support</code> command tells the compiler to generate the support library that is embedded in it.</p>
<p>The <code>--compile ...</code> commands tell the compiler to compile the given grammar files.</p>
<p>The last command, <code>--copy src/main.py</code>, tells the compiler to copy the main file verbatim. Similar to what we did to the main file in the object counter.</p>
<p>The make script can be called with the <code>--compile</code> command to perform this exact function:</p>
<div class="highlight">
<pre><span></span>$ <span></span>./make.py --compile &gt; rlmeta-compile.py
<span></span>Compiling rlmeta using rlmeta.py
  O-----------------O
  | RLMeta compiled |
~~|     itself!     |
  O-----------------O
</pre>
</div>
<p>And all these files are exactly the same:</p>
<div class="highlight">
<pre><span></span>$ <span></span>md5sum rlmeta.py rlmeta-compile.py rlmeta-raw.py
<span></span>92396155e85e24fb45cb3e58e160e89e  rlmeta.py
92396155e85e24fb45cb3e58e160e89e  rlmeta-compile.py
92396155e85e24fb45cb3e58e160e89e  rlmeta-raw.py
</pre>
</div>
<p>Thus, the RLMeta compiler reproduced itself exactly from the source code.</p>
<h3 id="a-tour-of-the-main-function">A tour of the main function</h3>
<p>Let’s now look at how all commands of the RLMeta compiler are implemented. Here is the main function:</p>
<div class="highlight">
<pre><span></span><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&quot;__main__&quot;</span><span class="p">:</span>
    <span class="kn">import</span> <span class="nn">sys</span>
    <span class="k">def</span> <span class="nf">read</span><span class="p">(</span><span class="n">path</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">path</span> <span class="o">==</span> <span class="s2">&quot;-&quot;</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdin</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">path</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
    <span class="n">args</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span> <span class="ow">or</span> <span class="p">[</span><span class="s2">&quot;--compile&quot;</span><span class="p">,</span> <span class="s2">&quot;-&quot;</span><span class="p">]</span>
    <span class="k">while</span> <span class="n">args</span><span class="p">:</span>
        <span class="n">command</span> <span class="o">=</span> <span class="n">args</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">command</span> <span class="o">==</span> <span class="s2">&quot;--support&quot;</span><span class="p">:</span>
            <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">SUPPORT</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">command</span> <span class="o">==</span> <span class="s2">&quot;--copy&quot;</span><span class="p">:</span>
            <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">read</span><span class="p">(</span><span class="n">args</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">)))</span>
        <span class="k">elif</span> <span class="n">command</span> <span class="o">==</span> <span class="s2">&quot;--embed&quot;</span><span class="p">:</span>
            <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">{}</span><span class="s2"> = </span><span class="si">{}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span>
                <span class="n">args</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span>
                <span class="nb">repr</span><span class="p">(</span><span class="n">read</span><span class="p">(</span><span class="n">args</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">)))</span>
            <span class="p">))</span>
        <span class="k">elif</span> <span class="n">command</span> <span class="o">==</span> <span class="s2">&quot;--compile&quot;</span><span class="p">:</span>
            <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">compile_chain</span><span class="p">(</span>
                <span class="p">[(</span><span class="n">Parser</span><span class="p">,</span> <span class="s2">&quot;file&quot;</span><span class="p">),</span> <span class="p">(</span><span class="n">CodeGenerator</span><span class="p">,</span> <span class="s2">&quot;asts&quot;</span><span class="p">),</span> <span class="p">(</span><span class="n">Assembler</span><span class="p">,</span> <span class="s2">&quot;asts&quot;</span><span class="p">)],</span>
                <span class="n">read</span><span class="p">(</span><span class="n">args</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
            <span class="p">))</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="s2">&quot;ERROR: Unknown command &#39;</span><span class="si">{}</span><span class="s2">&#39;&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">command</span><span class="p">))</span>
</pre>
</div>
<p>It contains command line parsing and handles processing of all commands.</p>
<p>The <code>--compile</code> command is the most complex of them all. It calls the <code>compile_chain</code> function which runs the given grammars/rules in order (in this case the input will first be parsed, then passed to the code generator, and finally passed to the assembler) and prints a pretty error message to stderr upon failure:</p>
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">compile_chain</span><span class="p">(</span><span class="n">grammars</span><span class="p">,</span> <span class="n">source</span><span class="p">):</span>
    <span class="kn">import</span> <span class="nn">os</span>
    <span class="kn">import</span> <span class="nn">sys</span>
    <span class="kn">import</span> <span class="nn">pprint</span>
    <span class="k">for</span> <span class="n">grammar</span><span class="p">,</span> <span class="n">rule</span> <span class="ow">in</span> <span class="n">grammars</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">source</span> <span class="o">=</span> <span class="n">grammar</span><span class="p">()</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">rule</span><span class="p">,</span> <span class="n">source</span><span class="p">)</span>
        <span class="k">except</span> <span class="n">MatchError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="n">marker</span> <span class="o">=</span> <span class="s2">&quot;&lt;ERROR POSITION&gt;&quot;</span>
            <span class="k">if</span> <span class="n">os</span><span class="o">.</span><span class="n">isatty</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">stderr</span><span class="o">.</span><span class="n">fileno</span><span class="p">()):</span>
                <span class="n">marker</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="se">\033</span><span class="s2">[0;31m</span><span class="si">{</span><span class="n">marker</span><span class="si">}</span><span class="se">\033</span><span class="s2">[0m&quot;</span>
            <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">e</span><span class="o">.</span><span class="n">stream</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                <span class="n">stream_string</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">stream</span><span class="p">[:</span><span class="n">e</span><span class="o">.</span><span class="n">pos</span><span class="p">]</span> <span class="o">+</span> <span class="n">marker</span> <span class="o">+</span> <span class="n">e</span><span class="o">.</span><span class="n">stream</span><span class="p">[</span><span class="n">e</span><span class="o">.</span><span class="n">pos</span><span class="p">:]</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">stream_string</span> <span class="o">=</span> <span class="n">pprint</span><span class="o">.</span><span class="n">pformat</span><span class="p">(</span><span class="n">e</span><span class="o">.</span><span class="n">stream</span><span class="p">)</span>
            <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="s2">&quot;ERROR: </span><span class="si">{}</span><span class="se">\n</span><span class="s2">POSITION: </span><span class="si">{}</span><span class="se">\n</span><span class="s2">STREAM:</span><span class="se">\n</span><span class="si">{}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span>
                <span class="n">e</span><span class="o">.</span><span class="n">message</span><span class="p">,</span>
                <span class="n">e</span><span class="o">.</span><span class="n">pos</span><span class="p">,</span>
                <span class="n">indent</span><span class="p">(</span><span class="n">stream_string</span><span class="p">)</span>
            <span class="p">))</span>
    <span class="k">return</span> <span class="n">source</span>
</pre>
</div>
<p>This function might be useful for other RLMeta programs as well. That is why it’s included in the support library and not only in the main file.</p>
<h3 id="following-a-compilation">Following a compilation</h3>
<p>Let’s now follow a compilation of an example grammar to learn more about how a grammar file is turned into Python code. Here it is:</p>
<div class="highlight">
<pre><span></span>$ <span></span>cat example.rlmeta
<span></span>Example {
    main <span class="nb">=</span> <span class="nc">.</span>
}
</pre>
</div>
<p>And this is what it compiles to:</p>
<div class="highlight">
<pre><span></span>$ <span></span>python rlmeta.py --compile example.rlmeta
<span></span><span class="k">class</span> <span class="nc">Example</span><span class="p">(</span><span class="n">Grammar</span><span class="p">):</span>
    <span class="n">rules</span> <span class="o">=</span> <span class="p">{</span>
        <span class="s1">&#39;main&#39;</span><span class="p">:</span> <span class="mi">0</span>
    <span class="p">}</span>
    <span class="n">code</span> <span class="o">=</span> <span class="p">[</span>
        <span class="n">PUSH_SCOPE</span><span class="p">,</span>
        <span class="n">MATCH</span><span class="p">,</span>
        <span class="s1">&#39;any&#39;</span><span class="p">,</span>
        <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="kc">True</span><span class="p">,</span>
        <span class="n">POP_SCOPE</span><span class="p">,</span>
        <span class="n">RETURN</span>
    <span class="p">]</span>
</pre>
</div>
<p>The transformations that the grammar goes through are defined in the main function:</p>
<div class="highlight">
<pre><span></span><span class="p">[(</span><span class="n">Parser</span><span class="p">,</span> <span class="s2">&quot;file&quot;</span><span class="p">),</span> <span class="p">(</span><span class="n">CodeGenerator</span><span class="p">,</span> <span class="s2">&quot;asts&quot;</span><span class="p">),</span> <span class="p">(</span><span class="n">Assembler</span><span class="p">,</span> <span class="s2">&quot;asts&quot;</span><span class="p">)],</span>
</pre>
</div>
<p>So first the grammar file is passed to the <code>file</code> rule of the parser:</p>
<div class="highlight">
<pre><span></span>file <span class="nb">=</span>
  <span class="nb">|</span> (space grammar)<span class="nc">*</span><span class="nb">:</span>xs space <span class="nc">!.</span>            <span class="nb">-&gt;</span> xs
</pre>
</div>
<p>It in turn calls the <code>grammar</code> rule to parse all grammars in the file:</p>
<div class="highlight">
<pre><span></span>grammar <span class="nb">=</span>
  <span class="nb">|</span> name<span class="nb">:</span>x space <span class="sc">&#39;{&#39;</span> rule<span class="nc">*</span><span class="nb">:</span>ys space <span class="sc">&#39;}&#39;</span>     <span class="nb">-&gt;</span> [<span class="s">&quot;Grammar&quot;</span> x <span class="nc">~</span>ys]
</pre>
</div>
<p>This rule matches the name, the open curly brace, a set of rules, and the closing curly brace. It will then return an AST that looks like this:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a>[</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a>    <span class="st">&quot;Grammar&quot;</span>,</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>    <span class="st">&quot;Example&quot;</span>,</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a>    ...</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a>]</span></code></pre></div>
<p>All grammar AST nodes are handed off to the <code>asts</code> rule in the code generator:</p>
<div class="highlight">
<pre><span></span>asts          <span class="nb">=</span> ast<span class="nc">*</span><span class="nb">:</span>xs <span class="nc">!.</span>  <span class="nb">-&gt;</span> xs
</pre>
</div>
<p>It it turn calls the <code>ast</code> rule to process each AST node:</p>
<div class="highlight">
<pre><span></span>ast           <span class="nb">=</span> [<span class="nc">%</span><span class="nb">:</span>x]       <span class="nb">-&gt;</span> x
</pre>
</div>
<p>The <code>ast</code> rule treats the first argument in the AST as a rule name, and calls that rule. In this case <code>Grammar</code>:</p>
<div class="highlight">
<pre><span></span>Grammar       <span class="nb">=</span> <span class="nc">.</span><span class="nb">:</span>x ast<span class="nc">*</span><span class="nb">:</span>ys <span class="nb">-&gt;</span> [<span class="s">&quot;Grammar&quot;</span> x <span class="nc">~~</span>ys]
</pre>
</div>
<p>The code generator creates a new AST node representing a grammar. But this AST node is slightly different and meant to be processed by the assembler. The result is this:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a>[</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a>    <span class="st">&quot;Grammar&quot;</span>,</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a>    <span class="st">&quot;Example&quot;</span>,</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a>    ... ast nodes <span class="cf">for</span> consumption by assembler ...</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a>]</span></code></pre></div>
<p>This AST node and all the others that the code generator produces are passed to the <code>asts</code> rule in the assembler:</p>
<div class="highlight">
<pre><span></span>asts     <span class="nb">=</span> ast<span class="nc">*</span><span class="nb">:</span>xs <span class="nc">!.</span>      <span class="nb">-&gt;</span> { xs }
</pre>
</div>
<p>It in turn calls the <code>ast</code> rule:</p>
<div class="highlight">
<pre><span></span>ast      <span class="nb">=</span> [<span class="nc">%</span><span class="nb">:</span>x]           <span class="nb">-&gt;</span> x
</pre>
</div>
<p>Which does the same trick again, now invoking the <code>Grammar</code> rule (in the assembler) which looks like this:</p>
<div class="highlight">
<pre><span></span>Grammar  <span class="nb">=</span> <span class="nc">.</span><span class="nb">:</span>x ast<span class="nc">*</span><span class="nb">:</span>ys     <span class="nb">-&gt;</span> list()<span class="nb">:</span>rules
                           <span class="nb">-&gt;</span> list()<span class="nb">:</span>code
                           <span class="nb">-&gt;</span> dict()<span class="nb">:</span>labels
                           <span class="nb">-&gt;</span> list()<span class="nb">:</span>patches
                           <span class="nb">-&gt;</span> ys
                           <span class="nb">-&gt;</span> run(<span class="s">&quot;asts&quot;</span> patches)
                           <span class="nb">-&gt;</span> { <span class="s">&quot;class &quot;</span> x <span class="s">&quot;(Grammar):</span><span class="se">\n</span><span class="s">&quot;</span> &gt;
                                  <span class="s">&quot;rules = {</span><span class="se">\n</span><span class="s">&quot;</span> &gt; join(rules <span class="s">&quot;,</span><span class="se">\n</span><span class="s">&quot;</span>) &lt; <span class="s">&quot;</span><span class="se">\n</span><span class="s">}</span><span class="se">\n</span><span class="s">&quot;</span>
                                  <span class="s">&quot;code = [</span><span class="se">\n</span><span class="s">&quot;</span> &gt; join(code  <span class="s">&quot;,</span><span class="se">\n</span><span class="s">&quot;</span>) &lt; <span class="s">&quot;</span><span class="se">\n</span><span class="s">]</span><span class="se">\n</span><span class="s">&quot;</span>
                                &lt; }
</pre>
</div>
<p>This rule can be read as follows:</p>
<ul>
<li>Match the grammar name and all AST nodes</li>
<li>Perform the following action
<ul>
<li>Define a variable called <code>rules</code> which is a list</li>
<li>Define a variable called <code>code</code> which is a list</li>
<li>Define a variable called <code>labels</code> which is a dictionary</li>
<li>Define a variable called <code>patches</code> which is a list</li>
<li>Evaluate the AST nodes (with possible side effects recorded in the above variables)</li>
<li>Treat the value of the <code>patches</code> variable as a list of AST nodes and process them with the <code>asts</code> rule of this grammar</li>
<li>Return a string which is generated Python code</li>
</ul></li>
</ul>
<p>The generated code from our example looks like this:</p>
<pre><code>class Example(Grammar):
    rules = {
        ...
    }
    code = [
        ...
    ]</code></pre>
<p>To understand how the <code>rule</code> and <code>code</code> sections are generated, we just have to follow a few more transformations.</p>
<p>Let’s look at one more and see how the rule in our example grammar is transformed.</p>
<p>First, the rule is parsed by the <code>rule</code> rule in the parser:</p>
<div class="highlight">
<pre><span></span>rule <span class="nb">=</span>
  <span class="nb">|</span> name<span class="nb">:</span>x space <span class="sc">&#39;=&#39;</span> choice<span class="nb">:</span>y               <span class="nb">-&gt;</span> [<span class="s">&quot;Rule&quot;</span> x y]
</pre>
</div>
<p>First the name is matched, then the equals sign, and then an expression representing the body of the rule.</p>
<p>It our case, this rule produces this AST node:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a>[</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a>    <span class="st">&quot;Rule&quot;</span>,</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a>    <span class="st">&quot;main&quot;</span>,</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a>    ...</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true"></a>]</span></code></pre></div>
<p>That node is going to be processed by the <code>Rule</code> rule in the code generator:</p>
<div class="highlight">
<pre><span></span>Rule          <span class="nb">=</span> <span class="nc">.</span><span class="nb">:</span>x ast<span class="nb">:</span>y   <span class="nb">-&gt;</span> [[<span class="s">&quot;Rule&quot;</span> x]
                                <span class="nc">~</span>y
                                [<span class="s">&quot;OpCode&quot;</span> <span class="s">&quot;RETURN&quot;</span>]]
</pre>
</div>
<p>Generating an AST node that looks like this:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a>[</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a>    [<span class="st">&quot;Rule&quot;</span>, <span class="st">&quot;main&quot;</span>],</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a>    ...,</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true"></a>    [<span class="st">&quot;OpCode&quot;</span>, <span class="st">&quot;RETURN&quot;</span>]</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true"></a>]</span></code></pre></div>
<p>Here we can see that the AST from the code generator looks a bit more like assembly code than a representation of the syntax in the grammar.</p>
<p>The first child in this AST node is going to be handled the <code>Rule</code> rule in the assembler:</p>
<div class="highlight">
<pre><span></span>Rule     <span class="nb">=</span> <span class="nc">.</span><span class="nb">:</span>x             <span class="nb">-&gt;</span> add(rules { repr(x) <span class="s">&quot;: &quot;</span> len(code) })
                           <span class="nb">-&gt;</span> set(labels x len(code))
</pre>
</div>
<p>It does two things:</p>
<ol type="1">
<li>Adds a string value to the <code>rules</code> list</li>
<li>Adds an entry to the <code>labels</code> dictionary to map a label to an index in the <code>code</code> list</li>
</ol>
<p>At this point, the variables have the following values.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a>rules <span class="op">=</span> [</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a>    <span class="st">&quot;&#39;main&#39;: 0&quot;</span>,</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a>]</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true"></a>labels <span class="op">=</span> {</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true"></a>    <span class="st">&#39;main&#39;</span>: <span class="dv">0</span>,</span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true"></a>}</span></code></pre></div>
<p>The second child in the AST node is going to be handled by the <code>OpCode</code> rule in the assembler:</p>
<div class="highlight">
<pre><span></span>OpCode   <span class="nb">=</span> <span class="nc">.</span><span class="nb">:</span>x             <span class="nb">-&gt;</span> add(code x)
</pre>
</div>
<p>It adds the given op code to the <code>code</code> list, giving it this value:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a>code <span class="op">=</span> [</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a>    ...,</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true"></a>    <span class="st">&quot;RETURN&quot;</span>,</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true"></a>]</span></code></pre></div>
<p>When the <code>rules</code> and <code>code</code> variables are expanded, the resulting class looks like this:</p>
<pre><code>class Example(Grammar):
    rules = {
        &#39;main&#39;: 0
    }
    code = [
        ...,
        RETURN
    ]</code></pre>
<p>Hopefully you should now be comfortable to follow transformations yourself to understand how a compilation is done.</p>
<h3 id="the-purpose-of-the-make-script">The purpose of the make script</h3>
<p>When the make script is called without arguments, it performs a meta compilation and runs a few tests:</p>
<div class="highlight">
<pre><span></span>$ <span></span>./make.py
<span></span>Compiling rlmeta using rlmeta.py
Writing rlmeta1.py
Test: Has its own support library
Test: Disallow semantic action in the middle
ERROR: expected }
POSITION: 22
STREAM:
    Grammar { x = . -&gt; [] &lt;ERROR POSITION&gt;. }
Test: Call unknown rule foo
Moving rlmeta1.py -&gt; rlmeta.py
  O-----------------O
  | RLMeta compiled |
~~|     itself!     |
  O-----------------O
</pre>
</div>
<p>The meaning of a meta compilation is to create a new version of RLMeta that can still reproduce itself from the source code.</p>
<p>In the output above, we can see that it compiled RLMeta and wrote the result to <code>rlmeta1.py</code>. In this case, since it is exactly the same as <code>rlmeta.py</code>, the compilation stopped there and a few more tests were run using this compiler. But if we make changes to the source code, <code>rlmeta1.py</code> will most likely not be exactly the same as <code>rlmeta.py</code>, and a few more compilations might be needed. I’ve written about the details of meta compilation in a <a href="/writing/modifying-rlmeta/index.html#5f6a1c91143146dbb3b865ac42562135">previous blog post</a>.</p>
<p>So the purpose of the make script is to ease meta compilations and also run a test suit on the newly generated metacompiler before accepting it.</p>
<p>The make script can also be used to perform a single compilation of RLMeta with the <code>--compile</code> argument as we saw earlier.</p>
<h2 id="changes-from-the-poster-version">Changes from the poster version</h2>
<p>This section explains the most important changes in this version of RLMeta compared to the poster version.</p>
<p>First of all, I wanted to work on the unresolved items which were the following:</p>
<ul>
<li>The label counter is incremented at match time, not at semantic action evaluation time.</li>
<li>Compilation depends on Bash.</li>
<li>Assembly code in code generator is hard to read.</li>
</ul>
<p>In the poster article, I also had a few notes about <a href="/writing/creating-rlmeta-poster/index.html#b070abcd2f134cf894e33e63188a9fee">future versions</a>:</p>
<blockquote>
<p>The smaller it is, the easier it is to understand and therefore extend. The more flexible it is to extend the better. If I make another poster version it would therefore focus on being smaller and more flexible. Since all successive version of RLMeta have been faster than the ones before, performance is also important. But small size, clarity, and flexibility come first.</p>
</blockquote>
<p>I used these guidelines to decide if certain changes should go into the new version or not.</p>
<p>One interesting thing to note is that the guidelines are sometimes contradicting. Writing clear code might mean more lines of code which makes the code base larger. Perhaps that’s also why I got stuck chasing perfection. I thought I made something easier to read, but it ended up costing 10 extra lines of code. Should I include it?</p>
<h3 id="generate-labels-in-semantic-actions">Generate labels in semantic actions</h3>
<p>One thing that I left in the poster version that still annoyed me was that labels were generated at match time, not at semantic action evaluation time. It would not produce incorrect results. At worst, some labels end up not being used because the counter value captured was in a rule that later failed. But dealing with labels at match time does not make sense. It should really happen at semantic action evaluation time.</p>
<p>Here is what the <code>Not</code> rule looks like in the poster version:</p>
<div class="highlight">
<pre><span></span>Not <span class="nb">=</span> ast<span class="nb">:</span>x <span class="nc">#</span><span class="nb">:</span>a <span class="nc">#</span><span class="nb">:</span>b <span class="nb">-&gt;</span> { <span class="s">&quot;I(&#39;BACKTRACK&#39;, &quot;</span> b <span class="s">&quot;)</span><span class="se">\n</span><span class="s">&quot;</span>
                         x
                         <span class="s">&quot;I(&#39;COMMIT&#39;, &quot;</span> a <span class="s">&quot;)</span><span class="se">\n</span><span class="s">&quot;</span>
                         <span class="s">&quot;LABEL(&quot;</span> a <span class="s">&quot;)</span><span class="se">\n</span><span class="s">&quot;</span>
                         <span class="s">&quot;I(&#39;FAIL&#39;, &#39;no match expected&#39;)</span><span class="se">\n</span><span class="s">&quot;</span>
                         <span class="s">&quot;LABEL(&quot;</span> b <span class="s">&quot;)</span><span class="se">\n</span><span class="s">&quot;</span>                   }
</pre>
</div>
<p>Here is what the <code>Not</code> rule looks like after the change:</p>
<div class="highlight">
<pre><span></span>Not <span class="nb">=</span> ast<span class="nb">:</span>x <span class="nb">-&gt;</span> label()<span class="nb">:</span>a <span class="nb">-&gt;</span> label()<span class="nb">:</span>b
            <span class="nb">-&gt;</span> { <span class="s">&quot;I(&#39;BACKTRACK&#39;, &quot;</span> b <span class="s">&quot;)</span><span class="se">\n</span><span class="s">&quot;</span>
                 x
                 <span class="s">&quot;I(&#39;COMMIT&#39;, &quot;</span> a <span class="s">&quot;)</span><span class="se">\n</span><span class="s">&quot;</span>
                 <span class="s">&quot;LABEL(&quot;</span> a <span class="s">&quot;)</span><span class="se">\n</span><span class="s">&quot;</span>
                 <span class="s">&quot;I(&#39;FAIL&#39;, &#39;no match expected&#39;)</span><span class="se">\n</span><span class="s">&quot;</span>
                 <span class="s">&quot;LABEL(&quot;</span> b <span class="s">&quot;)</span><span class="se">\n</span><span class="s">&quot;</span>                   }
</pre>
</div>
<p>This change puts label generation where it belongs, in semantic actions, and thus makes the implementation <strong>more clear</strong>. The VM is no longer concerned with labels. It is only concerned with matching. This change required a bit of rework how semantic actions work. Previously only one expression was allowed:</p>
<pre><code>&lt;match expression&gt; -&gt; &lt;semantic action expression&gt;</code></pre>
<p>Now multiple expressions are allowed:</p>
<pre><code>&lt;match expression&gt; -&gt; &lt;semantic action expression&gt;:x
                   -&gt; &lt;semantic action expression&gt;
                   -&gt; &lt;semantic action expression&gt;</code></pre>
<p>The result of expressions can also be bound to names which subsequent expressions can refer to. <code>label</code> is such a variable that is set internally to a function that generates increasing integers starting at 0.</p>
<p>The implementation of this change also <strong>increases the flexibility</strong> of RLMeta. For example, it is now possible to write a semantic action that generates code in different sections like this:</p>
<div class="highlight">
<pre><span></span>ExampleBuffers {
    program  <span class="nb">=</span> ast<span class="nb">:</span>x  <span class="nb">-&gt;</span> []<span class="nb">:</span>header
                      <span class="nb">-&gt;</span> { <span class="s">&quot;# HEADER</span><span class="se">\n</span><span class="s">&quot;</span>
                           header
                           <span class="s">&quot;# BODY</span><span class="se">\n</span><span class="s">&quot;</span>
                           x            }
    ast      <span class="nb">=</span> [<span class="nc">%</span><span class="nb">:</span>x]  <span class="nb">-&gt;</span> x
    Program  <span class="nb">=</span> ast<span class="nc">*</span>
    Function <span class="nb">=</span> <span class="nc">.</span><span class="nb">:</span>name <span class="nb">-&gt;</span> add(header { <span class="s">&quot;def &quot;</span> name <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span> })
                      <span class="nb">-&gt;</span> { name <span class="s">&quot;()</span><span class="se">\n</span><span class="s">&quot;</span> }
}
</pre>
</div>
<p>The expression <code>[]:header</code> creates a list and assigns it to the variable <code>header</code>. When <code>x</code> is evaluated in the next step, the semantic action for the <code>Function</code> rule will be evaluated which can then access the <code>header</code> variable defined earlier. These variables are not lexically scoped, but dynamically scoped. If at runtime, a variable is defined, it will be accessible. It also means that the <code>Function</code> rule can not be run without <code>program</code> being run first, or the <code>header</code> variable will not be defined.</p>
<p>Here is an example AST representing a program:</p>
<div class="highlight">
<pre><span></span><span class="n">AST</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">[</span><span class="s1">&#39;Program&#39;</span><span class="p">,</span>
        <span class="p">[</span><span class="s1">&#39;Function&#39;</span><span class="p">,</span> <span class="s1">&#39;foo&#39;</span><span class="p">],</span>
        <span class="p">[</span><span class="s1">&#39;Function&#39;</span><span class="p">,</span> <span class="s1">&#39;bar&#39;</span><span class="p">]</span>
    <span class="p">]</span>
<span class="p">]</span>
</pre>
</div>
<p>When the <code>program</code> rule is run on the example input, the following is output:</p>
<div class="highlight">
<pre><span></span>$ <span></span>python example_buffers.py
<span></span># HEADER
def foo
def bar
# BODY
foo()
bar()
</pre>
</div>
<p>In summary, this change is as follows:</p>
<ul>
<li>Label syntax (<code>#</code>) in parser is removed</li>
<li>Actions can have multiple expressions</li>
<li>Expressions can be bound to names</li>
<li>A default <code>label</code> function to generate labels</li>
<li>Names in semantic actions refer to matches or results bound earlier</li>
</ul>
<p>(The complete initial diff for this change can be found on <a href="https://github.com/rickardlindberg/rickardlindberg.me/commit/5154583e9d98c123630fb41664aa6906d4801d05">GitHub</a>.)</p>
<p>The increased clarity and flexibility come with a price. The size increases and the performance drops.</p>
<p>The parser and the code generator are mostly the same. The greatest addition is in the support library. Which is expected when semantic action evaluation becomes more complex. The drop in performance is likely due to more function calls when evaluating semantic actions. Even though size and performance got worse, I believe the clarity and flexibility gain is worth it.</p>
<h3 id="remove-dependency-on-bash">Remove dependency on Bash</h3>
<p>To compile the poster version of RLMeta, you ran the following command:</p>
<pre><code>./compile.sh rlmeta.py</code></pre>
<p>In one way, the compiler could not compile itself, but relied on a Bash script for gluing things together. It would call the <code>rlmeta.py</code> compiler for certain tasks and use Bash and Python for other tasks.</p>
<p>As we have already seen, the new version of RLMeta compiles itself like this:</p>
<pre><code>python rlmeta.py \
    --embed SUPPORT src/support.py \
    --support \
    --compile src/parser.rlmeta \
    --compile src/codegenerator.rlmeta \
    --compile src/assembler.rlmeta \
    --copy src/main.py \
    &gt; rlmeta.py</code></pre>
<p>The <code>rlmeta.py</code> compiler now has support (via <code>--embed</code> and <code>--copy</code>) for doing what the Bash script previously did.</p>
<p>This makes the compiler slightly larger, but it feels so much cleaner.</p>
<p>In addition, the extra features are useful when writing programs in RLMeta. Those programs can now also be compiled with a single command, and there is no need to concatenate different pieces together.</p>
<p>(The complete diff for this change can be found on <a href="https://github.com/rickardlindberg/rickardlindberg.me/commit/935bb77e1d5b88e09de64112aa2fb2f46dbcb7d9">GitHub</a>.)</p>
<h3 id="extract-assembler">Extract assembler</h3>
<p>The third thing that annoyed me with in the poster version was the readability of the code generator. For example, the <code>Not</code> rule looked like this:</p>
<div class="highlight">
<pre><span></span>Not <span class="nb">=</span> ast<span class="nb">:</span>x <span class="nb">-&gt;</span> label()<span class="nb">:</span>a <span class="nb">-&gt;</span> label()<span class="nb">:</span>b
            <span class="nb">-&gt;</span> { <span class="s">&quot;I(&#39;BACKTRACK&#39;, &quot;</span> b <span class="s">&quot;)</span><span class="se">\n</span><span class="s">&quot;</span>
                 x
                 <span class="s">&quot;I(&#39;COMMIT&#39;, &quot;</span> a <span class="s">&quot;)</span><span class="se">\n</span><span class="s">&quot;</span>
                 <span class="s">&quot;LABEL(&quot;</span> a <span class="s">&quot;)</span><span class="se">\n</span><span class="s">&quot;</span>
                 <span class="s">&quot;I(&#39;FAIL&#39;, &#39;no match expected&#39;)</span><span class="se">\n</span><span class="s">&quot;</span>
                 <span class="s">&quot;LABEL(&quot;</span> b <span class="s">&quot;)</span><span class="se">\n</span><span class="s">&quot;</span>                   }
</pre>
</div>
<p>It generates a string which contains Python code that calls functions to create “assembly” code. So part of the compilation is actually happening at runtime here. It is mixed and messy.</p>
<p>The new <code>Not</code> rule looks like this:</p>
<div class="highlight">
<pre><span></span>Not <span class="nb">=</span> ast<span class="nb">:</span>x <span class="nb">-&gt;</span> label()<span class="nb">:</span>a <span class="nb">-&gt;</span> label()<span class="nb">:</span>b
            <span class="nb">-&gt;</span> [[<span class="s">&quot;OpCode&quot;</span> <span class="s">&quot;BACKTRACK&quot;</span>]
                [<span class="s">&quot;Target&quot;</span> b]
                <span class="nc">~</span>x
                [<span class="s">&quot;OpCode&quot;</span> <span class="s">&quot;COMMIT&quot;</span>]
                [<span class="s">&quot;Target&quot;</span> a]
                [<span class="s">&quot;Label&quot;</span> a]
                [<span class="s">&quot;OpCode&quot;</span> <span class="s">&quot;FAIL&quot;</span>]
                [<span class="s">&quot;Value&quot;</span> <span class="s">&quot;no match&quot;</span>]
                [<span class="s">&quot;Label&quot;</span> b]]
</pre>
</div>
<p>Instead of outputting Python code directly, it now generates abstract assembly code. Then a new third pass, the assembler, turns those instructions into Python code as well as resolves label positions. So no more compilation at runtime.</p>
<p>This reads better because the purpose of the code generator is now a bit narrower. It can focus on one thing and leave the rest to the assembler.</p>
<p>Adding another pass also opens up the possibility to do peep-hole optimizations on the abstract assembly code before the assembler turns the instructions into Python code.</p>
<h3 id="rewrite-vm-for-clarity">Rewrite VM for clarity</h3>
<p>In the poster version, the virtual machine was written as a single function with one loop like this:</p>
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">vm</span><span class="p">(</span><span class="n">instructions</span><span class="p">,</span> <span class="n">labels</span><span class="p">,</span> <span class="n">start_rule</span><span class="p">,</span> <span class="n">stream</span><span class="p">):</span>
    <span class="o">...</span>
    <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
        <span class="n">name</span><span class="p">,</span> <span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span> <span class="o">=</span> <span class="n">instructions</span><span class="p">[</span><span class="n">pc</span><span class="p">]</span>
        <span class="k">if</span> <span class="n">name</span> <span class="o">==</span> <span class="s2">&quot;PUSH_SCOPE&quot;</span><span class="p">:</span>
            <span class="n">scope_stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">scope</span><span class="p">)</span>
            <span class="n">scope</span> <span class="o">=</span> <span class="p">{}</span>
            <span class="n">pc</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">continue</span>
        <span class="k">elif</span> <span class="n">name</span> <span class="o">==</span> <span class="s2">&quot;BACKTRACK&quot;</span><span class="p">:</span>
            <span class="o">...</span>
        <span class="o">...</span>
</pre>
</div>
<p>It was written like that to be as fast as possible. It avoided function calls. It avoided class variables lookup by avoiding classes. All variables used were defined locally in the <code>vm</code> function. Because function calls could not be used, some code was also duplicated.</p>
<p>I decided that I would not consider performance at all, and instead try to write the VM as clear as I could. I ended up with a <code>VM</code> class to hold some state and instruction functions that operate on an instance of a VM:</p>
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">VM</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">code</span><span class="p">,</span> <span class="n">rules</span><span class="p">):</span>
        <span class="o">...</span>

    <span class="o">...</span>

<span class="k">def</span> <span class="nf">PUSH_SCOPE</span><span class="p">(</span><span class="n">vm</span><span class="p">):</span>
    <span class="n">vm</span><span class="o">.</span><span class="n">scope_rest</span> <span class="o">=</span> <span class="p">(</span><span class="n">vm</span><span class="o">.</span><span class="n">scope</span><span class="p">,</span> <span class="n">vm</span><span class="o">.</span><span class="n">scope_rest</span><span class="p">)</span>
    <span class="n">vm</span><span class="o">.</span><span class="n">scope</span> <span class="o">=</span> <span class="p">{}</span>

<span class="k">def</span> <span class="nf">BACKTRACK</span><span class="p">(</span><span class="n">vm</span><span class="p">):</span>
    <span class="o">...</span>

<span class="o">...</span>
</pre>
</div>
<p>As I noted earlier, I’m not sure I am happy with this result. I’m not convinced that it reads better. The biggest upside is that since function calls are now allowed, part of the VM can be expressed more clearly without repetition.</p>
<p>Before I ended up with this VM, I experimented with a language for writing virtual machines that compiled to Python code. You could define instructions and the arguments they took and define macros for code re-use. It was basically a small macro language on top of Python. It looked something like this:</p>
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">vm</span><span class="p">(</span><span class="n">code</span><span class="p">,</span> <span class="n">rules</span><span class="p">,</span> <span class="n">start_rule</span><span class="p">,</span> <span class="n">stream</span><span class="p">):</span>
    <span class="n">action</span> <span class="o">=</span> <span class="n">SemanticAction</span><span class="p">(</span><span class="kc">None</span><span class="p">)</span>
    <span class="n">pc</span> <span class="o">=</span> <span class="n">rules</span><span class="p">[</span><span class="n">start_rule</span><span class="p">]</span>
    <span class="n">call_backtrack_stack</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">stream</span><span class="p">,</span> <span class="n">stream_rest</span> <span class="o">=</span> <span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>
    <span class="n">pos</span><span class="p">,</span> <span class="n">pos_rest</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">tuple</span><span class="p">())</span>
    <span class="n">scope</span><span class="p">,</span> <span class="n">scope_rest</span> <span class="o">=</span> <span class="p">(</span><span class="kc">None</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>
    <span class="n">fail_message</span> <span class="o">=</span> <span class="kc">None</span>
    <span class="n">latest_fail_message</span><span class="p">,</span> <span class="n">latest_fail_pos</span> <span class="o">=</span> <span class="p">(</span><span class="kc">None</span><span class="p">,</span> <span class="nb">tuple</span><span class="p">())</span>
    <span class="n">memo</span> <span class="o">=</span> <span class="p">{}</span>

<span class="n">definstruction</span> <span class="n">PUSH_SCOPE</span><span class="p">():</span>
    <span class="n">scope_rest</span> <span class="o">=</span> <span class="p">(</span><span class="n">scope</span><span class="p">,</span> <span class="n">scope_rest</span><span class="p">)</span>
    <span class="n">scope</span> <span class="o">=</span> <span class="p">{}</span>
</pre>
</div>
<p>And here is how macros were used:</p>
<div class="highlight">
<pre><span></span><span class="n">definstruction</span> <span class="n">FAIL</span><span class="p">(</span><span class="n">arg_message</span><span class="p">):</span>
    <span class="n">fail_message</span> <span class="o">=</span> <span class="p">(</span><span class="n">arg_message</span><span class="p">,)</span>
    <span class="c1">#FAIL</span>

<span class="n">defmacro</span> <span class="n">FAIL</span><span class="p">:</span>
    <span class="o">...</span>
</pre>
</div>
<p>When this was compiled, something similar to the <code>vm</code> function above was generated. A single function that was intended to run as fast as possible. But you could write the VM quite clearly anyway.</p>
<p>I liked the result of that, but it introduced yet another language and made compilation and metacompilation more complicated. For that reason, I decided against it.</p>
<p>Perhaps another approach would be to consider the VM a separate piece, not to be included in compilations and metacompilations. But they are also strongly connected. Say for example that an optimizer decides to output a new VM instruction, then the VM has to change.</p>
<p>I am not entirely clear about the interface here between the VM and the rest of the compiler.</p>
<h3 id="add-ability-to-run-a-rule-in-semantic-action">Add ability to run a rule in semantic action</h3>
<p>Another feature that was added in this version was the ability to run a grammar rule recursively from a semantic action.</p>
<p>This was initially needed to to implement recursive macros in the VM language mentioned in the previous section, but it made its way into RLMeta to support the patching of assembly instructions.</p>
<p>When a <code>Target</code> instruction is encountered, the <code>patches</code> list is populated with a command:</p>
<div class="highlight">
<pre><span></span>Target   <span class="nb">=</span> <span class="nc">.</span><span class="nb">:</span>x             <span class="nb">-&gt;</span> add(patches [<span class="s">&quot;Patch&quot;</span> len(code) x])
                           <span class="nb">-&gt;</span> add(code <span class="s">&quot;placeholder&quot;</span>)
</pre>
</div>
<p>These commands are then evaluated by running the <code>asts</code> rule on the <code>patches</code> list. This starts another parse on the given stream.</p>
<div class="highlight">
<pre><span></span><span class="nb">-&gt;</span> run(<span class="s">&quot;asts&quot;</span> patches)
</pre>
</div>
<p>The new parse has access to all the runtime variables that the semantic action that invokes it has. So that is why a <code>Patch</code> instruction can modify the <code>code</code> array and insert the correct index there instead of the placeholder:</p>
<div class="highlight">
<pre><span></span>Patch    <span class="nb">=</span> <span class="nc">.</span><span class="nb">:</span>x <span class="nc">.</span><span class="nb">:</span>y         <span class="nb">-&gt;</span> set(code x get(labels y))
</pre>
</div>
<h3 id="misc">Misc</h3>
<p>Many more small changes were made. Here are a few notes about them.</p>
<ul>
<li><p>Various renames to make intention more clear and reformats to improve readability.</p></li>
<li><p>Various clean ups in the parser:</p>
<ul>
<li><p>Only allow semantic actions at the very end of a rule.</p></li>
<li><p>Make sure the whole file is parsed so that junk after a grammar results in an error.</p></li>
</ul></li>
<li><p>Adapt to Python 3.</p></li>
</ul>
<h2 id="the-future">The future</h2>
<p>On the one hand, I’m quite happy with the improvements to RLMeta that I was able to make. The code feels more clear and flexible. Definitely a better version of RLMeta.</p>
<p>On the other hand, this article turned out to have the same problem as the poster. It just kept growing and growing, and at some point I had to stop working on in, leave some issues unresolved, and call the article finished. For example, I am not happy with how the new VM looks. A mix between classes and functions and helpers.</p>
<p>I decided to set up a <a href="https://github.com/rickardlindberg/rlmeta">repo on GitHub</a> for RLMeta where it can continue to be improved.</p>
<p>I plan for it to contain the base version of RLMeta which is the minimal version that is able to compile itself and maintain properties such as flexible, easy to extend, and easy to understand. Then I want to include examples as well to show how RLMeta can be used and how you can extend it in various ways.</p>
<h2 id="code-listings-for-rlmeta">Code listings for RLMeta</h2>
<p>Here is all the source code and also the make script for this version of RLMeta.</p>
<h3 id="srcparser.rlmeta">src/parser.rlmeta</h3>
<div class="highlight">
<pre><span></span>Parser {
  file <span class="nb">=</span>
    <span class="nb">|</span> (space grammar)<span class="nc">*</span><span class="nb">:</span>xs space <span class="nc">!.</span>            <span class="nb">-&gt;</span> xs
  grammar <span class="nb">=</span>
    <span class="nb">|</span> name<span class="nb">:</span>x space <span class="sc">&#39;{&#39;</span> rule<span class="nc">*</span><span class="nb">:</span>ys space <span class="sc">&#39;}&#39;</span>     <span class="nb">-&gt;</span> [<span class="s">&quot;Grammar&quot;</span> x <span class="nc">~</span>ys]
  rule <span class="nb">=</span>
    <span class="nb">|</span> name<span class="nb">:</span>x space <span class="sc">&#39;=&#39;</span> choice<span class="nb">:</span>y               <span class="nb">-&gt;</span> [<span class="s">&quot;Rule&quot;</span> x y]
  choice <span class="nb">=</span>
    <span class="nb">|</span> (space <span class="sc">&#39;|&#39;</span>)<span class="nc">?</span>
      sequence<span class="nb">:</span>x (space <span class="sc">&#39;|&#39;</span> sequence)<span class="nc">*</span><span class="nb">:</span>xs     <span class="nb">-&gt;</span> [<span class="s">&quot;Or&quot;</span> x <span class="nc">~</span>xs]
  sequence <span class="nb">=</span>
    <span class="nb">|</span> expr<span class="nc">*</span><span class="nb">:</span>xs maybeAction<span class="nb">:</span>ys                 <span class="nb">-&gt;</span> [<span class="s">&quot;Scope&quot;</span> [<span class="s">&quot;And&quot;</span> <span class="nc">~</span>xs <span class="nc">~</span>ys]]
  expr <span class="nb">=</span>
    <span class="nb">|</span> expr1<span class="nb">:</span>x space <span class="sc">&#39;:&#39;</span> name<span class="nb">:</span>y                <span class="nb">-&gt;</span> [<span class="s">&quot;Bind&quot;</span> y x]
    <span class="nb">|</span> expr1
  expr1 <span class="nb">=</span>
    <span class="nb">|</span> expr2<span class="nb">:</span>x space <span class="sc">&#39;*&#39;</span>                       <span class="nb">-&gt;</span> [<span class="s">&quot;Star&quot;</span> x]
    <span class="nb">|</span> expr2<span class="nb">:</span>x space <span class="sc">&#39;?&#39;</span>                       <span class="nb">-&gt;</span> [<span class="s">&quot;Or&quot;</span> x [<span class="s">&quot;And&quot;</span>]]
    <span class="nb">|</span> space <span class="sc">&#39;!&#39;</span> expr2<span class="nb">:</span>x                       <span class="nb">-&gt;</span> [<span class="s">&quot;Not&quot;</span> x]
    <span class="nb">|</span> space <span class="sc">&#39;%&#39;</span>                               <span class="nb">-&gt;</span> [<span class="s">&quot;MatchCallRule&quot;</span>]
    <span class="nb">|</span> expr2
  expr2 <span class="nb">=</span>
    <span class="nb">|</span> name<span class="nb">:</span>x <span class="nc">!</span>(space <span class="sc">&#39;=&#39;</span>)                     <span class="nb">-&gt;</span> [<span class="s">&quot;MatchRule&quot;</span> x]
    <span class="nb">|</span> space char<span class="nb">:</span>x <span class="sc">&#39;-&#39;</span> char<span class="nb">:</span>y                 <span class="nb">-&gt;</span> [<span class="s">&quot;MatchObject&quot;</span> [<span class="s">&quot;Range&quot;</span> x y]]
    <span class="nb">|</span> space <span class="sc">&#39;</span><span class="se">\&#39;</span><span class="sc">&#39;</span> (<span class="nc">!</span><span class="sc">&#39;</span><span class="se">\&#39;</span><span class="sc">&#39;</span> matchChar)<span class="nc">*</span><span class="nb">:</span>xs <span class="sc">&#39;</span><span class="se">\&#39;</span><span class="sc">&#39;</span>   <span class="nb">-&gt;</span> [<span class="s">&quot;And&quot;</span> <span class="nc">~</span>xs]
    <span class="nb">|</span> space <span class="sc">&#39;.&#39;</span>                               <span class="nb">-&gt;</span> [<span class="s">&quot;MatchObject&quot;</span> [<span class="s">&quot;Any&quot;</span>]]
    <span class="nb">|</span> space <span class="sc">&#39;(&#39;</span> choice<span class="nb">:</span>x space <span class="sc">&#39;)&#39;</span>            <span class="nb">-&gt;</span> x
    <span class="nb">|</span> space <span class="sc">&#39;[&#39;</span> expr<span class="nc">*</span><span class="nb">:</span>xs space <span class="sc">&#39;]&#39;</span>            <span class="nb">-&gt;</span> [<span class="s">&quot;MatchList&quot;</span> [<span class="s">&quot;And&quot;</span> <span class="nc">~</span>xs]]
  matchChar <span class="nb">=</span>
    <span class="nb">|</span> innerChar<span class="nb">:</span>x                             <span class="nb">-&gt;</span> [<span class="s">&quot;MatchObject&quot;</span> [<span class="s">&quot;Eq&quot;</span> x]]
  maybeAction <span class="nb">=</span>
    <span class="nb">|</span> actionExpr<span class="nb">:</span>x                            <span class="nb">-&gt;</span> [[<span class="s">&quot;Action&quot;</span> x]]
    <span class="nb">|</span>                                         <span class="nb">-&gt;</span> []
  actionExpr <span class="nb">=</span>
    <span class="nb">|</span> space <span class="sc">&#39;-&gt;&#39;</span> hostExpr<span class="nb">:</span>x
      (space <span class="sc">&#39;:&#39;</span> name <span class="nb">|</span> <span class="nb">-&gt;</span> <span class="s">&quot;&quot;</span>)<span class="nb">:</span>y actionExpr<span class="nb">:</span>z <span class="nb">-&gt;</span> [<span class="s">&quot;Set&quot;</span> y x z]
    <span class="nb">|</span> space <span class="sc">&#39;-&gt;&#39;</span> hostExpr<span class="nb">:</span>x                   <span class="nb">-&gt;</span> x
  hostExpr <span class="nb">=</span>
    <span class="nb">|</span> space string<span class="nb">:</span>x                          <span class="nb">-&gt;</span> [<span class="s">&quot;String&quot;</span> x]
    <span class="nb">|</span> space <span class="sc">&#39;[&#39;</span> hostListItem<span class="nc">*</span><span class="nb">:</span>xs space <span class="sc">&#39;]&#39;</span>    <span class="nb">-&gt;</span> [<span class="s">&quot;List&quot;</span> <span class="nc">~</span>xs]
    <span class="nb">|</span> space <span class="sc">&#39;{&#39;</span> formatExpr<span class="nc">*</span><span class="nb">:</span>xs space <span class="sc">&#39;}&#39;</span>      <span class="nb">-&gt;</span> [<span class="s">&quot;Format&quot;</span> <span class="nc">~</span>xs]
    <span class="nb">|</span> var<span class="nb">:</span>x space <span class="sc">&#39;(&#39;</span> hostExpr<span class="nc">*</span><span class="nb">:</span>ys space <span class="sc">&#39;)&#39;</span>  <span class="nb">-&gt;</span> [<span class="s">&quot;Call&quot;</span> x <span class="nc">~</span>ys]
    <span class="nb">|</span> var<span class="nb">:</span>x
  hostListItem <span class="nb">=</span>
    <span class="nb">|</span> space <span class="sc">&#39;~&#39;</span><span class="nc">*</span><span class="nb">:</span>ys hostExpr<span class="nb">:</span>x                <span class="nb">-&gt;</span> [<span class="s">&quot;ListItem&quot;</span> len(ys) x]
  formatExpr <span class="nb">=</span>
    <span class="nb">|</span> space <span class="sc">&#39;&gt;&#39;</span> formatExpr<span class="nc">*</span><span class="nb">:</span>xs space <span class="sc">&#39;&lt;&#39;</span>      <span class="nb">-&gt;</span> [<span class="s">&quot;Indent&quot;</span> [<span class="s">&quot;Format&quot;</span> <span class="nc">~</span>xs]]
    <span class="nb">|</span> hostExpr
  var <span class="nb">=</span>
    <span class="nb">|</span> name<span class="nb">:</span>x <span class="nc">!</span>(space <span class="sc">&#39;=&#39;</span>)                     <span class="nb">-&gt;</span> [<span class="s">&quot;Lookup&quot;</span> x]
  string    <span class="nb">=</span> <span class="sc">&#39;&quot;&#39;</span>  (<span class="nc">!</span><span class="sc">&#39;&quot;&#39;</span>  innerChar)<span class="nc">*</span><span class="nb">:</span>xs <span class="sc">&#39;&quot;&#39;</span>  <span class="nb">-&gt;</span> { xs }
  char      <span class="nb">=</span> <span class="sc">&#39;</span><span class="se">\&#39;</span><span class="sc">&#39;</span>  <span class="nc">!</span><span class="sc">&#39;</span><span class="se">\&#39;</span><span class="sc">&#39;</span> innerChar  <span class="nb">:</span>x  <span class="sc">&#39;</span><span class="se">\&#39;</span><span class="sc">&#39;</span> <span class="nb">-&gt;</span> x
  innerChar <span class="nb">=</span> <span class="sc">&#39;</span><span class="se">\\</span><span class="sc">&#39;</span> escape <span class="nb">|</span> <span class="nc">.</span>
  escape    <span class="nb">=</span> <span class="sc">&#39;</span><span class="se">\\</span><span class="sc">&#39;</span> <span class="nb">-&gt;</span> <span class="s">&quot;</span><span class="se">\\</span><span class="s">&quot;</span> <span class="nb">|</span> <span class="sc">&#39;</span><span class="se">\&#39;</span><span class="sc">&#39;</span> <span class="nb">-&gt;</span> <span class="s">&quot;&#39;&quot;</span>
            <span class="nb">|</span> <span class="sc">&#39;&quot;&#39;</span>  <span class="nb">-&gt;</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">&quot;</span> <span class="nb">|</span> <span class="sc">&#39;n&#39;</span>  <span class="nb">-&gt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span>
  name      <span class="nb">=</span> space nameStart<span class="nb">:</span>x nameChar<span class="nc">*</span><span class="nb">:</span>xs  <span class="nb">-&gt;</span> { x xs }
  nameStart <span class="nb">=</span> <span class="sc">&#39;a&#39;</span><span class="nc">-</span><span class="sc">&#39;z&#39;</span> <span class="nb">|</span> <span class="sc">&#39;A&#39;</span><span class="nc">-</span><span class="sc">&#39;Z&#39;</span>
  nameChar  <span class="nb">=</span> <span class="sc">&#39;a&#39;</span><span class="nc">-</span><span class="sc">&#39;z&#39;</span> <span class="nb">|</span> <span class="sc">&#39;A&#39;</span><span class="nc">-</span><span class="sc">&#39;Z&#39;</span> <span class="nb">|</span> <span class="sc">&#39;0&#39;</span><span class="nc">-</span><span class="sc">&#39;9&#39;</span>
  space     <span class="nb">=</span> (<span class="sc">&#39; &#39;</span> <span class="nb">|</span> <span class="sc">&#39;</span><span class="se">\n</span><span class="sc">&#39;</span>)<span class="nc">*</span>
}
</pre>
</div>
<h3 id="srccodegenerator.rlmeta">src/codegenerator.rlmeta</h3>
<div class="highlight">
<pre><span></span>CodeGenerator {
  Grammar       <span class="nb">=</span> <span class="nc">.</span><span class="nb">:</span>x ast<span class="nc">*</span><span class="nb">:</span>ys <span class="nb">-&gt;</span> [<span class="s">&quot;Grammar&quot;</span> x <span class="nc">~~</span>ys]
  Rule          <span class="nb">=</span> <span class="nc">.</span><span class="nb">:</span>x ast<span class="nb">:</span>y   <span class="nb">-&gt;</span> [[<span class="s">&quot;Rule&quot;</span> x]
                                  <span class="nc">~</span>y
                                  [<span class="s">&quot;OpCode&quot;</span> <span class="s">&quot;RETURN&quot;</span>]]
  Or            <span class="nb">=</span>
    <span class="nb">|</span> ast<span class="nb">:</span>x Or<span class="nb">:</span>y              <span class="nb">-&gt;</span> label()<span class="nb">:</span>a <span class="nb">-&gt;</span> label()<span class="nb">:</span>b
                              <span class="nb">-&gt;</span> [[<span class="s">&quot;OpCode&quot;</span> <span class="s">&quot;BACKTRACK&quot;</span>]
                                  [<span class="s">&quot;Target&quot;</span> a]
                                  <span class="nc">~</span>x
                                  [<span class="s">&quot;OpCode&quot;</span> <span class="s">&quot;COMMIT&quot;</span>]
                                  [<span class="s">&quot;Target&quot;</span> b]
                                  [<span class="s">&quot;Label&quot;</span> a]
                                  <span class="nc">~</span>y
                                  [<span class="s">&quot;Label&quot;</span> b]]
    <span class="nb">|</span> ast
  Scope         <span class="nb">=</span> ast<span class="nb">:</span>x       <span class="nb">-&gt;</span> [[<span class="s">&quot;OpCode&quot;</span> <span class="s">&quot;PUSH_SCOPE&quot;</span>]
                                  <span class="nc">~</span>x
                                  [<span class="s">&quot;OpCode&quot;</span> <span class="s">&quot;POP_SCOPE&quot;</span>]]
  And           <span class="nb">=</span> ast<span class="nc">*</span><span class="nb">:</span>xs     <span class="nb">-&gt;</span> [<span class="nc">~~</span>xs]
  Bind          <span class="nb">=</span> <span class="nc">.</span><span class="nb">:</span>x ast<span class="nb">:</span>y   <span class="nb">-&gt;</span> [<span class="nc">~</span>y
                                  [<span class="s">&quot;OpCode&quot;</span> <span class="s">&quot;BIND&quot;</span>]
                                  [<span class="s">&quot;Value&quot;</span> x]]
  Star          <span class="nb">=</span> ast<span class="nb">:</span>x       <span class="nb">-&gt;</span> label()<span class="nb">:</span>a <span class="nb">-&gt;</span> label()<span class="nb">:</span>b
                              <span class="nb">-&gt;</span> [[<span class="s">&quot;OpCode&quot;</span> <span class="s">&quot;LIST_START&quot;</span>]
                                  [<span class="s">&quot;Label&quot;</span> a]
                                  [<span class="s">&quot;OpCode&quot;</span> <span class="s">&quot;BACKTRACK&quot;</span>]
                                  [<span class="s">&quot;Target&quot;</span> b]
                                  <span class="nc">~</span>x
                                  [<span class="s">&quot;OpCode&quot;</span> <span class="s">&quot;LIST_APPEND&quot;</span>]
                                  [<span class="s">&quot;OpCode&quot;</span> <span class="s">&quot;COMMIT&quot;</span>]
                                  [<span class="s">&quot;Target&quot;</span> a]
                                  [<span class="s">&quot;Label&quot;</span> b]
                                  [<span class="s">&quot;OpCode&quot;</span> <span class="s">&quot;LIST_END&quot;</span>]]
  Not           <span class="nb">=</span> ast<span class="nb">:</span>x       <span class="nb">-&gt;</span> label()<span class="nb">:</span>a <span class="nb">-&gt;</span> label()<span class="nb">:</span>b
                              <span class="nb">-&gt;</span> [[<span class="s">&quot;OpCode&quot;</span> <span class="s">&quot;BACKTRACK&quot;</span>]
                                  [<span class="s">&quot;Target&quot;</span> b]
                                  <span class="nc">~</span>x
                                  [<span class="s">&quot;OpCode&quot;</span> <span class="s">&quot;COMMIT&quot;</span>]
                                  [<span class="s">&quot;Target&quot;</span> a]
                                  [<span class="s">&quot;Label&quot;</span> a]
                                  [<span class="s">&quot;OpCode&quot;</span> <span class="s">&quot;FAIL&quot;</span>]
                                  [<span class="s">&quot;Value&quot;</span> <span class="s">&quot;no match&quot;</span>]
                                  [<span class="s">&quot;Label&quot;</span> b]]
  MatchCallRule <span class="nb">=</span>             <span class="nb">-&gt;</span> [[<span class="s">&quot;OpCode&quot;</span> <span class="s">&quot;MATCH_CALL_RULE&quot;</span>]]
  MatchRule     <span class="nb">=</span> <span class="nc">.</span><span class="nb">:</span>x         <span class="nb">-&gt;</span> [[<span class="s">&quot;OpCode&quot;</span> <span class="s">&quot;CALL&quot;</span>]
                                  [<span class="s">&quot;Target&quot;</span> x]]
  MatchObject   <span class="nb">=</span> <span class="nc">.</span><span class="nb">:</span>x         <span class="nb">-&gt;</span> [[<span class="s">&quot;OpCode&quot;</span> <span class="s">&quot;MATCH&quot;</span>]
                                  x]
  MatchList     <span class="nb">=</span> ast<span class="nb">:</span>x       <span class="nb">-&gt;</span> [[<span class="s">&quot;OpCode&quot;</span> <span class="s">&quot;PUSH_STREAM&quot;</span>]
                                  <span class="nc">~</span>x
                                  [<span class="s">&quot;OpCode&quot;</span> <span class="s">&quot;POP_STREAM&quot;</span>]]
  Action        <span class="nb">=</span> <span class="nc">.</span><span class="nb">:</span>x         <span class="nb">-&gt;</span> [[<span class="s">&quot;OpCode&quot;</span> <span class="s">&quot;ACTION&quot;</span>]
                                  [<span class="s">&quot;Action&quot;</span> x]]
  asts          <span class="nb">=</span> ast<span class="nc">*</span><span class="nb">:</span>xs <span class="nc">!.</span>  <span class="nb">-&gt;</span> xs
  ast           <span class="nb">=</span> [<span class="nc">%</span><span class="nb">:</span>x]       <span class="nb">-&gt;</span> x
}
</pre>
</div>
<h3 id="srcassembler.rlmeta">src/assembler.rlmeta</h3>
<div class="highlight">
<pre><span></span>Assembler {
  Grammar  <span class="nb">=</span> <span class="nc">.</span><span class="nb">:</span>x ast<span class="nc">*</span><span class="nb">:</span>ys     <span class="nb">-&gt;</span> list()<span class="nb">:</span>rules
                             <span class="nb">-&gt;</span> list()<span class="nb">:</span>code
                             <span class="nb">-&gt;</span> dict()<span class="nb">:</span>labels
                             <span class="nb">-&gt;</span> list()<span class="nb">:</span>patches
                             <span class="nb">-&gt;</span> ys
                             <span class="nb">-&gt;</span> run(<span class="s">&quot;asts&quot;</span> patches)
                             <span class="nb">-&gt;</span> { <span class="s">&quot;class &quot;</span> x <span class="s">&quot;(Grammar):</span><span class="se">\n</span><span class="s">&quot;</span> &gt;
                                    <span class="s">&quot;rules = {</span><span class="se">\n</span><span class="s">&quot;</span> &gt; join(rules <span class="s">&quot;,</span><span class="se">\n</span><span class="s">&quot;</span>) &lt; <span class="s">&quot;</span><span class="se">\n</span><span class="s">}</span><span class="se">\n</span><span class="s">&quot;</span>
                                    <span class="s">&quot;code = [</span><span class="se">\n</span><span class="s">&quot;</span> &gt; join(code  <span class="s">&quot;,</span><span class="se">\n</span><span class="s">&quot;</span>) &lt; <span class="s">&quot;</span><span class="se">\n</span><span class="s">]</span><span class="se">\n</span><span class="s">&quot;</span>
                                  &lt; }
  Rule     <span class="nb">=</span> <span class="nc">.</span><span class="nb">:</span>x             <span class="nb">-&gt;</span> add(rules { repr(x) <span class="s">&quot;: &quot;</span> len(code) })
                             <span class="nb">-&gt;</span> set(labels x len(code))
  Label    <span class="nb">=</span> <span class="nc">.</span><span class="nb">:</span>x             <span class="nb">-&gt;</span> set(labels x len(code))
  Target   <span class="nb">=</span> <span class="nc">.</span><span class="nb">:</span>x             <span class="nb">-&gt;</span> add(patches [<span class="s">&quot;Patch&quot;</span> len(code) x])
                             <span class="nb">-&gt;</span> add(code <span class="s">&quot;placeholder&quot;</span>)
  Patch    <span class="nb">=</span> <span class="nc">.</span><span class="nb">:</span>x <span class="nc">.</span><span class="nb">:</span>y         <span class="nb">-&gt;</span> set(code x get(labels y))
  OpCode   <span class="nb">=</span> <span class="nc">.</span><span class="nb">:</span>x             <span class="nb">-&gt;</span> add(code x)
  Value    <span class="nb">=</span> <span class="nc">.</span><span class="nb">:</span>x             <span class="nb">-&gt;</span> add(code repr(x))
  Eq       <span class="nb">=</span> <span class="nc">.</span><span class="nb">:</span>x             <span class="nb">-&gt;</span> add(code repr(x))
                             <span class="nb">-&gt;</span> add(code { <span class="s">&quot;lambda x: x == &quot;</span> repr(x) })
  Range    <span class="nb">=</span> <span class="nc">.</span><span class="nb">:</span>x <span class="nc">.</span><span class="nb">:</span>y         <span class="nb">-&gt;</span> add(code repr({<span class="s">&quot;range &quot;</span> repr(x) <span class="s">&quot;-&quot;</span> repr(y)}))
                             <span class="nb">-&gt;</span> add(code { <span class="s">&quot;lambda x: &quot;</span> repr(x) <span class="s">&quot; &lt;= x &lt;= &quot;</span> repr(y) })
  Any      <span class="nb">=</span>                 <span class="nb">-&gt;</span> add(code repr(<span class="s">&quot;any&quot;</span>))
                             <span class="nb">-&gt;</span> add(code <span class="s">&quot;lambda x: True&quot;</span>)
  Action   <span class="nb">=</span> ast<span class="nb">:</span>x           <span class="nb">-&gt;</span> add(code {<span class="s">&quot;lambda self: &quot;</span> x})
  Set      <span class="nb">=</span> <span class="nc">.</span><span class="nb">:</span>x ast<span class="nb">:</span>y ast<span class="nb">:</span>z <span class="nb">-&gt;</span> { <span class="s">&quot;self.bind(&quot;</span> repr(x) <span class="s">&quot;, &quot;</span> y <span class="s">&quot;, lambda: &quot;</span> z <span class="s">&quot;)&quot;</span> }
  String   <span class="nb">=</span> <span class="nc">.</span><span class="nb">:</span>x             <span class="nb">-&gt;</span> repr(x)
  List     <span class="nb">=</span> astList<span class="nb">:</span>x       <span class="nb">-&gt;</span> { <span class="s">&quot;concat([&quot;</span> x <span class="s">&quot;])&quot;</span> }
  ListItem <span class="nb">=</span> <span class="nc">.</span><span class="nb">:</span>x ast<span class="nb">:</span>y       <span class="nb">-&gt;</span> { <span class="s">&quot;splice(&quot;</span> repr(x) <span class="s">&quot;, &quot;</span> y <span class="s">&quot;)&quot;</span> }
  Format   <span class="nb">=</span> astList<span class="nb">:</span>x       <span class="nb">-&gt;</span> { <span class="s">&quot;join([&quot;</span> x <span class="s">&quot;])&quot;</span> }
  Indent   <span class="nb">=</span> ast<span class="nb">:</span>x           <span class="nb">-&gt;</span> { <span class="s">&quot;indent(&quot;</span> x <span class="s">&quot;, &quot;</span>
                                  <span class="s">&quot;self.lookup(&#39;indentprefix&#39;))&quot;</span> }
  Call     <span class="nb">=</span> ast<span class="nb">:</span>x astList<span class="nb">:</span>y <span class="nb">-&gt;</span> { x <span class="s">&quot;(&quot;</span> y <span class="s">&quot;)&quot;</span> }
  Lookup   <span class="nb">=</span> <span class="nc">.</span><span class="nb">:</span>x             <span class="nb">-&gt;</span> { <span class="s">&quot;self.lookup(&quot;</span> repr(x) <span class="s">&quot;)&quot;</span> }
  asts     <span class="nb">=</span> ast<span class="nc">*</span><span class="nb">:</span>xs <span class="nc">!.</span>      <span class="nb">-&gt;</span> { xs }
  astList  <span class="nb">=</span> ast<span class="nc">*</span><span class="nb">:</span>xs         <span class="nb">-&gt;</span> join(xs <span class="s">&quot;, &quot;</span>)
  ast      <span class="nb">=</span> [<span class="nc">%</span><span class="nb">:</span>x]           <span class="nb">-&gt;</span> x
}
</pre>
</div>
<h3 id="srcsupport.py">src/support.py</h3>
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">VM</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">code</span><span class="p">,</span> <span class="n">rules</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">code</span> <span class="o">=</span> <span class="n">code</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">rules</span> <span class="o">=</span> <span class="n">rules</span>

    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">start_rule</span><span class="p">,</span> <span class="n">stream</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">action</span> <span class="o">=</span> <span class="n">SemanticAction</span><span class="p">(</span><span class="kc">None</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">pc</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">rules</span><span class="p">[</span><span class="n">start_rule</span><span class="p">]</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">call_backtrack_stack</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">stream</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">stream_rest</span> <span class="o">=</span> <span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">pos</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">pos_rest</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">tuple</span><span class="p">())</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">scope</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">scope_rest</span> <span class="o">=</span> <span class="p">(</span><span class="kc">None</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">latest_fail_message</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">latest_fail_pos</span> <span class="o">=</span> <span class="p">(</span><span class="kc">None</span><span class="p">,</span> <span class="nb">tuple</span><span class="p">())</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">memo</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
            <span class="n">result</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">pop_arg</span><span class="p">()(</span><span class="bp">self</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">result</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">result</span>

    <span class="k">def</span> <span class="nf">pop_arg</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">code</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">code</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">pc</span><span class="p">]</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">pc</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="n">code</span>

<span class="k">def</span> <span class="nf">PUSH_SCOPE</span><span class="p">(</span><span class="n">vm</span><span class="p">):</span>
    <span class="n">vm</span><span class="o">.</span><span class="n">scope_rest</span> <span class="o">=</span> <span class="p">(</span><span class="n">vm</span><span class="o">.</span><span class="n">scope</span><span class="p">,</span> <span class="n">vm</span><span class="o">.</span><span class="n">scope_rest</span><span class="p">)</span>
    <span class="n">vm</span><span class="o">.</span><span class="n">scope</span> <span class="o">=</span> <span class="p">{}</span>

<span class="k">def</span> <span class="nf">POP_SCOPE</span><span class="p">(</span><span class="n">vm</span><span class="p">):</span>
    <span class="n">vm</span><span class="o">.</span><span class="n">scope</span><span class="p">,</span> <span class="n">vm</span><span class="o">.</span><span class="n">scope_rest</span> <span class="o">=</span> <span class="n">vm</span><span class="o">.</span><span class="n">scope_rest</span>

<span class="k">def</span> <span class="nf">BACKTRACK</span><span class="p">(</span><span class="n">vm</span><span class="p">):</span>
    <span class="n">vm</span><span class="o">.</span><span class="n">call_backtrack_stack</span><span class="o">.</span><span class="n">append</span><span class="p">((</span>
        <span class="n">vm</span><span class="o">.</span><span class="n">pop_arg</span><span class="p">(),</span> <span class="n">vm</span><span class="o">.</span><span class="n">stream</span><span class="p">,</span> <span class="n">vm</span><span class="o">.</span><span class="n">stream_rest</span><span class="p">,</span> <span class="n">vm</span><span class="o">.</span><span class="n">pos</span><span class="p">,</span> <span class="n">vm</span><span class="o">.</span><span class="n">pos_rest</span><span class="p">,</span> <span class="n">vm</span><span class="o">.</span><span class="n">scope</span><span class="p">,</span> <span class="n">vm</span><span class="o">.</span><span class="n">scope_rest</span>
    <span class="p">))</span>

<span class="k">def</span> <span class="nf">COMMIT</span><span class="p">(</span><span class="n">vm</span><span class="p">):</span>
    <span class="n">vm</span><span class="o">.</span><span class="n">call_backtrack_stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
    <span class="n">vm</span><span class="o">.</span><span class="n">pc</span> <span class="o">=</span> <span class="n">vm</span><span class="o">.</span><span class="n">pop_arg</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">CALL</span><span class="p">(</span><span class="n">vm</span><span class="p">):</span>
    <span class="n">CALL_</span><span class="p">(</span><span class="n">vm</span><span class="p">,</span> <span class="n">vm</span><span class="o">.</span><span class="n">pop_arg</span><span class="p">())</span>

<span class="k">def</span> <span class="nf">CALL_</span><span class="p">(</span><span class="n">vm</span><span class="p">,</span> <span class="n">pc</span><span class="p">):</span>
    <span class="n">key</span> <span class="o">=</span> <span class="p">(</span><span class="n">pc</span><span class="p">,</span> <span class="n">vm</span><span class="o">.</span><span class="n">pos_rest</span><span class="o">+</span><span class="p">(</span><span class="n">vm</span><span class="o">.</span><span class="n">pos</span><span class="p">,))</span>
    <span class="k">if</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">vm</span><span class="o">.</span><span class="n">memo</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">vm</span><span class="o">.</span><span class="n">memo</span><span class="p">[</span><span class="n">key</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
            <span class="n">FAIL_</span><span class="p">(</span><span class="n">vm</span><span class="p">,</span> <span class="n">vm</span><span class="o">.</span><span class="n">memo</span><span class="p">[</span><span class="n">key</span><span class="p">][</span><span class="mi">1</span><span class="p">])</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">vm</span><span class="o">.</span><span class="n">action</span><span class="p">,</span> <span class="n">vm</span><span class="o">.</span><span class="n">stream</span><span class="p">,</span> <span class="n">vm</span><span class="o">.</span><span class="n">stream_rest</span><span class="p">,</span> <span class="n">vm</span><span class="o">.</span><span class="n">pos</span><span class="p">,</span> <span class="n">vm</span><span class="o">.</span><span class="n">pos_rest</span> <span class="o">=</span> <span class="n">vm</span><span class="o">.</span><span class="n">memo</span><span class="p">[</span><span class="n">key</span><span class="p">]</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">vm</span><span class="o">.</span><span class="n">call_backtrack_stack</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">vm</span><span class="o">.</span><span class="n">pc</span><span class="p">,</span> <span class="n">key</span><span class="p">))</span>
        <span class="n">vm</span><span class="o">.</span><span class="n">pc</span> <span class="o">=</span> <span class="n">pc</span>

<span class="k">def</span> <span class="nf">RETURN</span><span class="p">(</span><span class="n">vm</span><span class="p">):</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">vm</span><span class="o">.</span><span class="n">call_backtrack_stack</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">vm</span><span class="o">.</span><span class="n">action</span>
    <span class="n">vm</span><span class="o">.</span><span class="n">pc</span><span class="p">,</span> <span class="n">key</span> <span class="o">=</span> <span class="n">vm</span><span class="o">.</span><span class="n">call_backtrack_stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
    <span class="n">vm</span><span class="o">.</span><span class="n">memo</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">vm</span><span class="o">.</span><span class="n">action</span><span class="p">,</span> <span class="n">vm</span><span class="o">.</span><span class="n">stream</span><span class="p">,</span> <span class="n">vm</span><span class="o">.</span><span class="n">stream_rest</span><span class="p">,</span> <span class="n">vm</span><span class="o">.</span><span class="n">pos</span><span class="p">,</span> <span class="n">vm</span><span class="o">.</span><span class="n">pos_rest</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">MATCH</span><span class="p">(</span><span class="n">vm</span><span class="p">):</span>
    <span class="n">object_description</span> <span class="o">=</span> <span class="n">vm</span><span class="o">.</span><span class="n">pop_arg</span><span class="p">()</span>
    <span class="n">fn</span> <span class="o">=</span> <span class="n">vm</span><span class="o">.</span><span class="n">pop_arg</span><span class="p">()</span>
    <span class="n">MATCH_</span><span class="p">(</span><span class="n">vm</span><span class="p">,</span> <span class="n">fn</span><span class="p">,</span> <span class="p">(</span><span class="s2">&quot;expected </span><span class="si">{}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">object_description</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">MATCH_</span><span class="p">(</span><span class="n">vm</span><span class="p">,</span> <span class="n">fn</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">vm</span><span class="o">.</span><span class="n">pos</span> <span class="o">&gt;=</span> <span class="nb">len</span><span class="p">(</span><span class="n">vm</span><span class="o">.</span><span class="n">stream</span><span class="p">)</span> <span class="ow">or</span> <span class="ow">not</span> <span class="n">fn</span><span class="p">(</span><span class="n">vm</span><span class="o">.</span><span class="n">stream</span><span class="p">[</span><span class="n">vm</span><span class="o">.</span><span class="n">pos</span><span class="p">]):</span>
        <span class="n">FAIL_</span><span class="p">(</span><span class="n">vm</span><span class="p">,</span> <span class="n">message</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">vm</span><span class="o">.</span><span class="n">action</span> <span class="o">=</span> <span class="n">SemanticAction</span><span class="p">(</span><span class="n">vm</span><span class="o">.</span><span class="n">stream</span><span class="p">[</span><span class="n">vm</span><span class="o">.</span><span class="n">pos</span><span class="p">])</span>
        <span class="n">vm</span><span class="o">.</span><span class="n">pos</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="kc">True</span>

<span class="k">def</span> <span class="nf">MATCH_CALL_RULE</span><span class="p">(</span><span class="n">vm</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">MATCH_</span><span class="p">(</span><span class="n">vm</span><span class="p">,</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">vm</span><span class="o">.</span><span class="n">rules</span><span class="p">,</span> <span class="p">(</span><span class="s2">&quot;expected rule name&quot;</span><span class="p">,)):</span>
        <span class="n">CALL_</span><span class="p">(</span><span class="n">vm</span><span class="p">,</span> <span class="n">vm</span><span class="o">.</span><span class="n">rules</span><span class="p">[</span><span class="n">vm</span><span class="o">.</span><span class="n">action</span><span class="o">.</span><span class="n">value</span><span class="p">])</span>

<span class="k">def</span> <span class="nf">LIST_START</span><span class="p">(</span><span class="n">vm</span><span class="p">):</span>
    <span class="n">vm</span><span class="o">.</span><span class="n">scope_rest</span> <span class="o">=</span> <span class="p">(</span><span class="n">vm</span><span class="o">.</span><span class="n">scope</span><span class="p">,</span> <span class="n">vm</span><span class="o">.</span><span class="n">scope_rest</span><span class="p">)</span>
    <span class="n">vm</span><span class="o">.</span><span class="n">scope</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">def</span> <span class="nf">LIST_APPEND</span><span class="p">(</span><span class="n">vm</span><span class="p">):</span>
    <span class="n">vm</span><span class="o">.</span><span class="n">scope</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">vm</span><span class="o">.</span><span class="n">action</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">LIST_END</span><span class="p">(</span><span class="n">vm</span><span class="p">):</span>
    <span class="n">vm</span><span class="o">.</span><span class="n">action</span> <span class="o">=</span> <span class="n">SemanticAction</span><span class="p">(</span><span class="n">vm</span><span class="o">.</span><span class="n">scope</span><span class="p">,</span> <span class="k">lambda</span> <span class="bp">self</span><span class="p">:</span> <span class="p">[</span><span class="n">x</span><span class="o">.</span><span class="n">eval</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">runtime</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">value</span><span class="p">])</span>
    <span class="n">vm</span><span class="o">.</span><span class="n">scope</span><span class="p">,</span> <span class="n">vm</span><span class="o">.</span><span class="n">scope_rest</span> <span class="o">=</span> <span class="n">vm</span><span class="o">.</span><span class="n">scope_rest</span>

<span class="k">def</span> <span class="nf">BIND</span><span class="p">(</span><span class="n">vm</span><span class="p">):</span>
    <span class="n">vm</span><span class="o">.</span><span class="n">scope</span><span class="p">[</span><span class="n">vm</span><span class="o">.</span><span class="n">pop_arg</span><span class="p">()]</span> <span class="o">=</span> <span class="n">vm</span><span class="o">.</span><span class="n">action</span>

<span class="k">def</span> <span class="nf">ACTION</span><span class="p">(</span><span class="n">vm</span><span class="p">):</span>
    <span class="n">vm</span><span class="o">.</span><span class="n">action</span> <span class="o">=</span> <span class="n">SemanticAction</span><span class="p">(</span><span class="n">vm</span><span class="o">.</span><span class="n">scope</span><span class="p">,</span> <span class="n">vm</span><span class="o">.</span><span class="n">pop_arg</span><span class="p">())</span>

<span class="k">def</span> <span class="nf">PUSH_STREAM</span><span class="p">(</span><span class="n">vm</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">vm</span><span class="o">.</span><span class="n">pos</span> <span class="o">&gt;=</span> <span class="nb">len</span><span class="p">(</span><span class="n">vm</span><span class="o">.</span><span class="n">stream</span><span class="p">)</span> <span class="ow">or</span> <span class="ow">not</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">vm</span><span class="o">.</span><span class="n">stream</span><span class="p">[</span><span class="n">vm</span><span class="o">.</span><span class="n">pos</span><span class="p">],</span> <span class="nb">list</span><span class="p">):</span>
        <span class="n">FAIL_</span><span class="p">(</span><span class="n">vm</span><span class="p">,</span> <span class="p">(</span><span class="s2">&quot;expected list&quot;</span><span class="p">,))</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">vm</span><span class="o">.</span><span class="n">stream_rest</span> <span class="o">=</span> <span class="p">(</span><span class="n">vm</span><span class="o">.</span><span class="n">stream</span><span class="p">,</span> <span class="n">vm</span><span class="o">.</span><span class="n">stream_rest</span><span class="p">)</span>
        <span class="n">vm</span><span class="o">.</span><span class="n">pos_rest</span> <span class="o">=</span> <span class="n">vm</span><span class="o">.</span><span class="n">pos_rest</span> <span class="o">+</span> <span class="p">(</span><span class="n">vm</span><span class="o">.</span><span class="n">pos</span><span class="p">,)</span>
        <span class="n">vm</span><span class="o">.</span><span class="n">stream</span> <span class="o">=</span> <span class="n">vm</span><span class="o">.</span><span class="n">stream</span><span class="p">[</span><span class="n">vm</span><span class="o">.</span><span class="n">pos</span><span class="p">]</span>
        <span class="n">vm</span><span class="o">.</span><span class="n">pos</span> <span class="o">=</span> <span class="mi">0</span>

<span class="k">def</span> <span class="nf">POP_STREAM</span><span class="p">(</span><span class="n">vm</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">vm</span><span class="o">.</span><span class="n">pos</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">vm</span><span class="o">.</span><span class="n">stream</span><span class="p">):</span>
        <span class="n">FAIL_</span><span class="p">(</span><span class="n">vm</span><span class="p">,</span> <span class="p">(</span><span class="s2">&quot;expected end of list&quot;</span><span class="p">,))</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">vm</span><span class="o">.</span><span class="n">stream</span><span class="p">,</span> <span class="n">vm</span><span class="o">.</span><span class="n">stream_rest</span> <span class="o">=</span> <span class="n">vm</span><span class="o">.</span><span class="n">stream_rest</span>
        <span class="n">vm</span><span class="o">.</span><span class="n">pos</span><span class="p">,</span> <span class="n">vm</span><span class="o">.</span><span class="n">pos_rest</span> <span class="o">=</span> <span class="n">vm</span><span class="o">.</span><span class="n">pos_rest</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">vm</span><span class="o">.</span><span class="n">pos_rest</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="n">vm</span><span class="o">.</span><span class="n">pos</span> <span class="o">+=</span> <span class="mi">1</span>

<span class="k">def</span> <span class="nf">FAIL</span><span class="p">(</span><span class="n">vm</span><span class="p">):</span>
    <span class="n">FAIL_</span><span class="p">(</span><span class="n">vm</span><span class="p">,</span> <span class="p">(</span><span class="n">vm</span><span class="o">.</span><span class="n">pop_arg</span><span class="p">(),))</span>

<span class="k">def</span> <span class="nf">FAIL_</span><span class="p">(</span><span class="n">vm</span><span class="p">,</span> <span class="n">fail_message</span><span class="p">):</span>
    <span class="n">fail_pos</span> <span class="o">=</span> <span class="n">vm</span><span class="o">.</span><span class="n">pos_rest</span><span class="o">+</span><span class="p">(</span><span class="n">vm</span><span class="o">.</span><span class="n">pos</span><span class="p">,)</span>
    <span class="k">if</span> <span class="n">fail_pos</span> <span class="o">&gt;=</span> <span class="n">vm</span><span class="o">.</span><span class="n">latest_fail_pos</span><span class="p">:</span>
        <span class="n">vm</span><span class="o">.</span><span class="n">latest_fail_message</span> <span class="o">=</span> <span class="n">fail_message</span>
        <span class="n">vm</span><span class="o">.</span><span class="n">latest_fail_pos</span> <span class="o">=</span> <span class="n">fail_pos</span>
    <span class="n">call_backtrack_entry</span> <span class="o">=</span> <span class="nb">tuple</span><span class="p">()</span>
    <span class="k">while</span> <span class="n">vm</span><span class="o">.</span><span class="n">call_backtrack_stack</span><span class="p">:</span>
        <span class="n">call_backtrack_entry</span> <span class="o">=</span> <span class="n">vm</span><span class="o">.</span><span class="n">call_backtrack_stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">call_backtrack_entry</span><span class="p">)</span> <span class="o">==</span> <span class="mi">7</span><span class="p">:</span>
            <span class="k">break</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">vm</span><span class="o">.</span><span class="n">memo</span><span class="p">[</span><span class="n">call_backtrack_entry</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span> <span class="o">=</span> <span class="p">(</span><span class="kc">None</span><span class="p">,</span> <span class="n">fail_message</span><span class="p">)</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">call_backtrack_entry</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">7</span><span class="p">:</span>
        <span class="k">raise</span> <span class="n">MatchError</span><span class="p">(</span>
            <span class="n">vm</span><span class="o">.</span><span class="n">latest_fail_message</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="o">*</span><span class="n">vm</span><span class="o">.</span><span class="n">latest_fail_message</span><span class="p">[</span><span class="mi">1</span><span class="p">:]),</span>
            <span class="n">vm</span><span class="o">.</span><span class="n">latest_fail_pos</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span>
            <span class="n">vm</span><span class="o">.</span><span class="n">stream</span>
        <span class="p">)</span>
    <span class="p">(</span><span class="n">vm</span><span class="o">.</span><span class="n">pc</span><span class="p">,</span> <span class="n">vm</span><span class="o">.</span><span class="n">stream</span><span class="p">,</span> <span class="n">vm</span><span class="o">.</span><span class="n">stream_rest</span><span class="p">,</span> <span class="n">vm</span><span class="o">.</span><span class="n">pos</span><span class="p">,</span> <span class="n">vm</span><span class="o">.</span><span class="n">pos_rest</span><span class="p">,</span> <span class="n">vm</span><span class="o">.</span><span class="n">scope</span><span class="p">,</span> <span class="n">vm</span><span class="o">.</span><span class="n">scope_rest</span><span class="p">)</span> <span class="o">=</span> <span class="n">call_backtrack_entry</span>

<span class="k">class</span> <span class="nc">SemanticAction</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="n">fn</span><span class="o">=</span><span class="k">lambda</span> <span class="bp">self</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">value</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="n">value</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">fn</span> <span class="o">=</span> <span class="n">fn</span>

    <span class="k">def</span> <span class="nf">eval</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">runtime</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">runtime</span> <span class="o">=</span> <span class="n">runtime</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">fn</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">bind</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="n">continuation</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">runtime</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">runtime</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">continuation</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">lookup</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">name</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">value</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">value</span><span class="p">[</span><span class="n">name</span><span class="p">]</span><span class="o">.</span><span class="n">eval</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">runtime</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">runtime</span><span class="p">[</span><span class="n">name</span><span class="p">]</span>

<span class="k">class</span> <span class="nc">MatchError</span><span class="p">(</span><span class="ne">Exception</span><span class="p">):</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">pos</span><span class="p">,</span> <span class="n">stream</span><span class="p">):</span>
        <span class="ne">Exception</span><span class="o">.</span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">message</span> <span class="o">=</span> <span class="n">message</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">pos</span> <span class="o">=</span> <span class="n">pos</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">stream</span> <span class="o">=</span> <span class="n">stream</span>

<span class="k">class</span> <span class="nc">Grammar</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>

    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">rule</span><span class="p">,</span> <span class="n">stream</span><span class="p">,</span> <span class="n">runtime</span><span class="o">=</span><span class="p">{}):</span>
        <span class="k">return</span> <span class="n">Runtime</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="nb">dict</span><span class="p">(</span><span class="n">runtime</span><span class="p">,</span> <span class="o">**</span><span class="p">{</span>
            <span class="s2">&quot;label&quot;</span><span class="p">:</span> <span class="n">Counter</span><span class="p">(),</span>
            <span class="s2">&quot;indentprefix&quot;</span><span class="p">:</span> <span class="s2">&quot;    &quot;</span><span class="p">,</span>
            <span class="s2">&quot;list&quot;</span><span class="p">:</span> <span class="nb">list</span><span class="p">,</span>
            <span class="s2">&quot;dict&quot;</span><span class="p">:</span> <span class="nb">dict</span><span class="p">,</span>
            <span class="s2">&quot;add&quot;</span><span class="p">:</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="n">x</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">y</span><span class="p">),</span>
            <span class="s2">&quot;get&quot;</span><span class="p">:</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="n">y</span><span class="p">],</span>
            <span class="s2">&quot;set&quot;</span><span class="p">:</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">:</span> <span class="n">x</span><span class="o">.</span><span class="fm">__setitem__</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">),</span>
            <span class="s2">&quot;len&quot;</span><span class="p">:</span> <span class="nb">len</span><span class="p">,</span>
            <span class="s2">&quot;repr&quot;</span><span class="p">:</span> <span class="nb">repr</span><span class="p">,</span>
            <span class="s2">&quot;join&quot;</span><span class="p">:</span> <span class="n">join</span><span class="p">,</span>
        <span class="p">}))</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">rule</span><span class="p">,</span> <span class="n">stream</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Runtime</span><span class="p">(</span><span class="nb">dict</span><span class="p">):</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">grammar</span><span class="p">,</span> <span class="n">values</span><span class="p">):</span>
        <span class="nb">dict</span><span class="o">.</span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="nb">dict</span><span class="p">(</span><span class="n">values</span><span class="p">,</span> <span class="n">run</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">run</span><span class="p">))</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">grammar</span> <span class="o">=</span> <span class="n">grammar</span>

    <span class="k">def</span> <span class="nf">set</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">Runtime</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">grammar</span><span class="p">,</span> <span class="nb">dict</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">**</span><span class="p">{</span><span class="n">key</span><span class="p">:</span> <span class="n">value</span><span class="p">}))</span>

    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">rule</span><span class="p">,</span> <span class="n">stream</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">VM</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">grammar</span><span class="o">.</span><span class="n">code</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">grammar</span><span class="o">.</span><span class="n">rules</span><span class="p">)</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">rule</span><span class="p">,</span> <span class="n">stream</span><span class="p">)</span><span class="o">.</span><span class="n">eval</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Counter</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">def</span> <span class="fm">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">result</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">value</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">value</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="n">result</span>

<span class="k">def</span> <span class="nf">splice</span><span class="p">(</span><span class="n">depth</span><span class="p">,</span> <span class="n">item</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">depth</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">[</span><span class="n">item</span><span class="p">]</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">concat</span><span class="p">([</span><span class="n">splice</span><span class="p">(</span><span class="n">depth</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">subitem</span><span class="p">)</span> <span class="k">for</span> <span class="n">subitem</span> <span class="ow">in</span> <span class="n">item</span><span class="p">])</span>

<span class="k">def</span> <span class="nf">concat</span><span class="p">(</span><span class="n">lists</span><span class="p">):</span>
    <span class="k">return</span> <span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">xs</span> <span class="ow">in</span> <span class="n">lists</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">xs</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">join</span><span class="p">(</span><span class="n">items</span><span class="p">,</span> <span class="n">delimiter</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">delimiter</span><span class="o">.</span><span class="n">join</span><span class="p">(</span>
        <span class="n">join</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">delimiter</span><span class="p">)</span> <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="nb">list</span><span class="p">)</span> <span class="k">else</span> <span class="nb">str</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">items</span>
    <span class="p">)</span>

<span class="k">def</span> <span class="nf">indent</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">prefix</span><span class="o">=</span><span class="s2">&quot;    &quot;</span><span class="p">):</span>
    <span class="k">return</span> <span class="s2">&quot;&quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">prefix</span><span class="o">+</span><span class="n">line</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">text</span><span class="o">.</span><span class="n">splitlines</span><span class="p">(</span><span class="kc">True</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">compile_chain</span><span class="p">(</span><span class="n">grammars</span><span class="p">,</span> <span class="n">source</span><span class="p">):</span>
    <span class="kn">import</span> <span class="nn">os</span>
    <span class="kn">import</span> <span class="nn">sys</span>
    <span class="kn">import</span> <span class="nn">pprint</span>
    <span class="k">for</span> <span class="n">grammar</span><span class="p">,</span> <span class="n">rule</span> <span class="ow">in</span> <span class="n">grammars</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">source</span> <span class="o">=</span> <span class="n">grammar</span><span class="p">()</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">rule</span><span class="p">,</span> <span class="n">source</span><span class="p">)</span>
        <span class="k">except</span> <span class="n">MatchError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="n">marker</span> <span class="o">=</span> <span class="s2">&quot;&lt;ERROR POSITION&gt;&quot;</span>
            <span class="k">if</span> <span class="n">os</span><span class="o">.</span><span class="n">isatty</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">stderr</span><span class="o">.</span><span class="n">fileno</span><span class="p">()):</span>
                <span class="n">marker</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="se">\033</span><span class="s2">[0;31m</span><span class="si">{</span><span class="n">marker</span><span class="si">}</span><span class="se">\033</span><span class="s2">[0m&quot;</span>
            <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">e</span><span class="o">.</span><span class="n">stream</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                <span class="n">stream_string</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">stream</span><span class="p">[:</span><span class="n">e</span><span class="o">.</span><span class="n">pos</span><span class="p">]</span> <span class="o">+</span> <span class="n">marker</span> <span class="o">+</span> <span class="n">e</span><span class="o">.</span><span class="n">stream</span><span class="p">[</span><span class="n">e</span><span class="o">.</span><span class="n">pos</span><span class="p">:]</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">stream_string</span> <span class="o">=</span> <span class="n">pprint</span><span class="o">.</span><span class="n">pformat</span><span class="p">(</span><span class="n">e</span><span class="o">.</span><span class="n">stream</span><span class="p">)</span>
            <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="s2">&quot;ERROR: </span><span class="si">{}</span><span class="se">\n</span><span class="s2">POSITION: </span><span class="si">{}</span><span class="se">\n</span><span class="s2">STREAM:</span><span class="se">\n</span><span class="si">{}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span>
                <span class="n">e</span><span class="o">.</span><span class="n">message</span><span class="p">,</span>
                <span class="n">e</span><span class="o">.</span><span class="n">pos</span><span class="p">,</span>
                <span class="n">indent</span><span class="p">(</span><span class="n">stream_string</span><span class="p">)</span>
            <span class="p">))</span>
    <span class="k">return</span> <span class="n">source</span>
</pre>
</div>
<h3 id="srcmain.py">src/main.py</h3>
<div class="highlight">
<pre><span></span><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&quot;__main__&quot;</span><span class="p">:</span>
    <span class="kn">import</span> <span class="nn">sys</span>
    <span class="k">def</span> <span class="nf">read</span><span class="p">(</span><span class="n">path</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">path</span> <span class="o">==</span> <span class="s2">&quot;-&quot;</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdin</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">path</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
    <span class="n">args</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span> <span class="ow">or</span> <span class="p">[</span><span class="s2">&quot;--compile&quot;</span><span class="p">,</span> <span class="s2">&quot;-&quot;</span><span class="p">]</span>
    <span class="k">while</span> <span class="n">args</span><span class="p">:</span>
        <span class="n">command</span> <span class="o">=</span> <span class="n">args</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">command</span> <span class="o">==</span> <span class="s2">&quot;--support&quot;</span><span class="p">:</span>
            <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">SUPPORT</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">command</span> <span class="o">==</span> <span class="s2">&quot;--copy&quot;</span><span class="p">:</span>
            <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">read</span><span class="p">(</span><span class="n">args</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">)))</span>
        <span class="k">elif</span> <span class="n">command</span> <span class="o">==</span> <span class="s2">&quot;--embed&quot;</span><span class="p">:</span>
            <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">{}</span><span class="s2"> = </span><span class="si">{}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span>
                <span class="n">args</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span>
                <span class="nb">repr</span><span class="p">(</span><span class="n">read</span><span class="p">(</span><span class="n">args</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">)))</span>
            <span class="p">))</span>
        <span class="k">elif</span> <span class="n">command</span> <span class="o">==</span> <span class="s2">&quot;--compile&quot;</span><span class="p">:</span>
            <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">compile_chain</span><span class="p">(</span>
                <span class="p">[(</span><span class="n">Parser</span><span class="p">,</span> <span class="s2">&quot;file&quot;</span><span class="p">),</span> <span class="p">(</span><span class="n">CodeGenerator</span><span class="p">,</span> <span class="s2">&quot;asts&quot;</span><span class="p">),</span> <span class="p">(</span><span class="n">Assembler</span><span class="p">,</span> <span class="s2">&quot;asts&quot;</span><span class="p">)],</span>
                <span class="n">read</span><span class="p">(</span><span class="n">args</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
            <span class="p">))</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="s2">&quot;ERROR: Unknown command &#39;</span><span class="si">{}</span><span class="s2">&#39;&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">command</span><span class="p">))</span>
</pre>
</div>
<h3 id="make.py">make.py</h3>
<div class="highlight">
<pre><span></span><span class="ch">#!/usr/bin/env python</span>

<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">subprocess</span>
<span class="kn">import</span> <span class="nn">sys</span>

<span class="k">def</span> <span class="nf">make_next_version</span><span class="p">():</span>
    <span class="n">final_compiler</span> <span class="o">=</span> <span class="n">meta_compile_rlmeta</span><span class="p">()</span>
    <span class="n">test</span><span class="p">(</span><span class="n">final_compiler</span><span class="p">)</span>
    <span class="n">mv</span><span class="p">(</span><span class="n">final_compiler</span><span class="p">,</span> <span class="s2">&quot;rlmeta.py&quot;</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">meta_compile_rlmeta</span><span class="p">():</span>
    <span class="n">compiler</span> <span class="o">=</span> <span class="s2">&quot;rlmeta.py&quot;</span>
    <span class="n">content</span> <span class="o">=</span> <span class="n">read</span><span class="p">(</span><span class="n">compiler</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">):</span>
        <span class="n">next_compiler</span> <span class="o">=</span> <span class="s2">&quot;rlmeta</span><span class="si">{}</span><span class="s2">.py&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">next_content</span> <span class="o">=</span> <span class="n">compile_rlmeta</span><span class="p">(</span><span class="n">compiler</span><span class="p">)</span>
        <span class="n">log</span><span class="p">(</span><span class="s2">&quot;Writing </span><span class="si">{}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">next_compiler</span><span class="p">))</span>
        <span class="n">write</span><span class="p">(</span><span class="n">next_compiler</span><span class="p">,</span> <span class="n">next_content</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">next_content</span> <span class="o">==</span> <span class="n">content</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">next_compiler</span>
        <span class="n">compiler</span> <span class="o">=</span> <span class="n">next_compiler</span>
        <span class="n">content</span> <span class="o">=</span> <span class="n">next_content</span>
    <span class="n">fail</span><span class="p">(</span><span class="s2">&quot;Unable to produce metacompiler.&quot;</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">compile_rlmeta</span><span class="p">(</span><span class="n">rlmeta</span><span class="p">):</span>
    <span class="n">log</span><span class="p">(</span><span class="s2">&quot;Compiling rlmeta using </span><span class="si">{}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">rlmeta</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">run_rlmeta</span><span class="p">(</span><span class="n">rlmeta</span><span class="p">,</span> <span class="p">[</span>
        <span class="s2">&quot;--embed&quot;</span><span class="p">,</span> <span class="s2">&quot;SUPPORT&quot;</span><span class="p">,</span> <span class="s2">&quot;src/support.py&quot;</span><span class="p">,</span>
        <span class="s2">&quot;--support&quot;</span><span class="p">,</span>
        <span class="s2">&quot;--compile&quot;</span><span class="p">,</span> <span class="s2">&quot;src/parser.rlmeta&quot;</span><span class="p">,</span>
        <span class="s2">&quot;--compile&quot;</span><span class="p">,</span> <span class="s2">&quot;src/codegenerator.rlmeta&quot;</span><span class="p">,</span>
        <span class="s2">&quot;--compile&quot;</span><span class="p">,</span> <span class="s2">&quot;src/assembler.rlmeta&quot;</span><span class="p">,</span>
        <span class="s2">&quot;--copy&quot;</span><span class="p">,</span> <span class="s2">&quot;src/main.py&quot;</span><span class="p">,</span>
    <span class="p">])</span>

<span class="k">def</span> <span class="nf">test</span><span class="p">(</span><span class="n">rlmeta</span><span class="p">):</span>
    <span class="n">log</span><span class="p">(</span><span class="s2">&quot;Test: Has its own support library&quot;</span><span class="p">)</span>
    <span class="k">assert</span> <span class="n">run_rlmeta</span><span class="p">(</span><span class="n">rlmeta</span><span class="p">,</span> <span class="p">[</span><span class="s2">&quot;--support&quot;</span><span class="p">])</span> <span class="o">==</span> <span class="n">read</span><span class="p">(</span><span class="s2">&quot;src/support.py&quot;</span><span class="p">)</span>
    <span class="n">log</span><span class="p">(</span><span class="s2">&quot;Test: Disallow semantic action in the middle&quot;</span><span class="p">)</span>
    <span class="n">run_rlmeta</span><span class="p">(</span><span class="n">rlmeta</span><span class="p">,</span> <span class="p">[],</span> <span class="sa">b</span><span class="s2">&quot;Grammar { x = . -&gt; [] . }&quot;</span><span class="p">,</span> <span class="n">expect_failure</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
    <span class="n">log</span><span class="p">(</span><span class="s2">&quot;Test: Call unknown rule foo&quot;</span><span class="p">)</span>
    <span class="k">assert</span> <span class="n">test_grammar</span><span class="p">(</span>
        <span class="n">rlmeta</span><span class="p">,</span>
        <span class="sa">b</span><span class="s2">&quot;Grammar { x = % | . }&quot;</span><span class="p">,</span>
        <span class="sa">b</span><span class="s2">&quot;print(compile_chain([(Grammar, &#39;x&#39;)], [&#39;foo&#39;]))&quot;</span>
    <span class="p">)</span> <span class="o">==</span> <span class="sa">b</span><span class="s2">&quot;foo</span><span class="se">\n</span><span class="s2">&quot;</span>

<span class="k">def</span> <span class="nf">test_grammar</span><span class="p">(</span><span class="n">rlmeta</span><span class="p">,</span> <span class="n">grammar</span><span class="p">,</span> <span class="n">main_code</span><span class="p">):</span>
    <span class="n">compiled</span> <span class="o">=</span> <span class="n">run_rlmeta</span><span class="p">(</span><span class="n">rlmeta</span><span class="p">,</span> <span class="p">[</span><span class="s2">&quot;--support&quot;</span><span class="p">,</span> <span class="s2">&quot;--compile&quot;</span><span class="p">,</span> <span class="s2">&quot;-&quot;</span><span class="p">],</span> <span class="n">grammar</span><span class="p">)</span>
    <span class="n">total</span> <span class="o">=</span> <span class="n">compiled</span> <span class="o">+</span> <span class="n">main_code</span>
    <span class="n">process</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">(</span>
        <span class="p">[</span><span class="s2">&quot;python&quot;</span><span class="p">],</span>
        <span class="n">stdin</span><span class="o">=</span><span class="n">subprocess</span><span class="o">.</span><span class="n">PIPE</span><span class="p">,</span>
        <span class="n">stdout</span><span class="o">=</span><span class="n">subprocess</span><span class="o">.</span><span class="n">PIPE</span>
    <span class="p">)</span>
    <span class="n">stdout</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">process</span><span class="o">.</span><span class="n">communicate</span><span class="p">(</span><span class="n">total</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">stdout</span>

<span class="k">def</span> <span class="nf">run_rlmeta</span><span class="p">(</span><span class="n">rlmeta</span><span class="p">,</span> <span class="n">args</span><span class="p">,</span> <span class="n">stdin</span><span class="o">=</span><span class="sa">b</span><span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="n">expect_failure</span><span class="o">=</span><span class="kc">False</span><span class="p">):</span>
    <span class="n">process</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">(</span>
        <span class="p">[</span><span class="s2">&quot;python&quot;</span><span class="p">,</span> <span class="n">rlmeta</span><span class="p">]</span><span class="o">+</span><span class="n">args</span><span class="p">,</span>
        <span class="n">stdin</span><span class="o">=</span><span class="n">subprocess</span><span class="o">.</span><span class="n">PIPE</span><span class="p">,</span>
        <span class="n">stdout</span><span class="o">=</span><span class="n">subprocess</span><span class="o">.</span><span class="n">PIPE</span>
    <span class="p">)</span>
    <span class="n">stdout</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">process</span><span class="o">.</span><span class="n">communicate</span><span class="p">(</span><span class="n">stdin</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">expect_failure</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">process</span><span class="o">.</span><span class="n">returncode</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">fail</span><span class="p">(</span><span class="s2">&quot;Expected failure&quot;</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">process</span><span class="o">.</span><span class="n">returncode</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">fail</span><span class="p">(</span><span class="s2">&quot;Expected success&quot;</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">stdout</span>

<span class="k">def</span> <span class="nf">mv</span><span class="p">(</span><span class="n">src</span><span class="p">,</span> <span class="n">dest</span><span class="p">):</span>
    <span class="n">log</span><span class="p">(</span><span class="s2">&quot;Moving </span><span class="si">{}</span><span class="s2"> -&gt; </span><span class="si">{}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">src</span><span class="p">,</span> <span class="n">dest</span><span class="p">))</span>
    <span class="n">os</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">dest</span><span class="p">)</span>
    <span class="n">os</span><span class="o">.</span><span class="n">rename</span><span class="p">(</span><span class="n">src</span><span class="p">,</span> <span class="n">dest</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">cleanup</span><span class="p">():</span>
    <span class="k">for</span> <span class="n">path</span> <span class="ow">in</span> <span class="p">[</span>
        <span class="s2">&quot;rlmeta1.py&quot;</span><span class="p">,</span>
        <span class="s2">&quot;rlmeta2.py&quot;</span><span class="p">,</span>
        <span class="s2">&quot;rlmeta3.py&quot;</span><span class="p">,</span>
        <span class="s2">&quot;rlmeta4.py&quot;</span><span class="p">,</span>
    <span class="p">]:</span>
        <span class="k">if</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">path</span><span class="p">):</span>
            <span class="n">log</span><span class="p">(</span><span class="s2">&quot;Deleting </span><span class="si">{}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">path</span><span class="p">))</span>
            <span class="n">os</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">read</span><span class="p">(</span><span class="n">path</span><span class="p">):</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="s2">&quot;rb&quot;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">write</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">content</span><span class="p">):</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="s2">&quot;wb&quot;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">log</span><span class="p">(</span><span class="n">message</span><span class="p">):</span>
    <span class="n">sys</span><span class="o">.</span><span class="n">stderr</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">color</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">message</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">,</span> <span class="s2">&quot;33&quot;</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">success</span><span class="p">(</span><span class="n">message</span><span class="p">):</span>
    <span class="n">sys</span><span class="o">.</span><span class="n">stderr</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">color</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">message</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">,</span> <span class="s2">&quot;32&quot;</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">fail</span><span class="p">(</span><span class="n">message</span><span class="p">):</span>
    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="n">color</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;ERROR: </span><span class="si">{</span><span class="n">message</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="s2">&quot;31&quot;</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">color</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="n">color</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">os</span><span class="o">.</span><span class="n">isatty</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">stderr</span><span class="o">.</span><span class="n">fileno</span><span class="p">()):</span>
        <span class="k">return</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="se">\033</span><span class="s2">[0;</span><span class="si">{</span><span class="n">color</span><span class="si">}</span><span class="s2">m</span><span class="si">{</span><span class="n">message</span><span class="si">}</span><span class="se">\033</span><span class="s2">[0m&quot;</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">message</span>

<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&quot;__main__&quot;</span><span class="p">:</span>
    <span class="n">cleanup</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span> <span class="o">==</span> <span class="p">[</span><span class="s2">&quot;--compile&quot;</span><span class="p">]:</span>
        <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">buffer</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">compile_rlmeta</span><span class="p">(</span><span class="s2">&quot;rlmeta.py&quot;</span><span class="p">))</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">make_next_version</span><span class="p">()</span>
    <span class="n">cleanup</span><span class="p">()</span>
    <span class="n">success</span><span class="p">(</span><span class="s2">&quot;  O-----------------O&quot;</span><span class="p">)</span>
    <span class="n">success</span><span class="p">(</span><span class="s2">&quot;  | RLMeta compiled |&quot;</span><span class="p">)</span>
    <span class="n">success</span><span class="p">(</span><span class="s2">&quot;~~|     itself!     |&quot;</span><span class="p">)</span>
    <span class="n">success</span><span class="p">(</span><span class="s2">&quot;  O-----------------O&quot;</span><span class="p">)</span>
</pre>
</div>
]]></description>
    <pubDate>Sat, 12 Feb 2022 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/rlmeta-poster-2/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>January 2022 Update</title>
    <link>http://rickardlindberg.me/writing/newsletter/january-2022/</link>
    <description><![CDATA[<h1>January 2022 Update</h1>

<p><em>Published on  4 February 2022.</em></p>

<p>This is what I’ve been up to in January 2022:</p>
<ul>
<li><p>I did more writing on the <a href="/writing/rlmeta-poster-2/index.html">RLMeta</a> blog post. I took some larger time blocks to work on it, and I can now finally see it being finished next month.</p></li>
<li><p>I decided to set up a <a href="https://github.com/rickardlindberg/rlmeta">repo on GitHub</a> for RLMeta where it can continue to be improved. I plan for it to contain the base version of RLMeta which is the minimal version that is able to compile itself and maintain properties such as flexible, easy to extend, and easy to understand. Then I want to include examples as well to show how RLMeta can be used and how you can extend it in various ways.</p></li>
<li><p>I started publishing weekly programming videos on Youtube. My goal for 2022 is to make one programming related video each week. I’m currently in the process of finding a good format or formats, and I am experimenting a lot. This month I made the following videos:</p>
<ul>
<li><a href="https://youtu.be/NsVERD6Xvvw">I’m starting weekly programming videos on Youtube.</a></li>
<li><a href="https://youtu.be/6lqdJvSuZpk">How a Python programmer extracts timelapses from camera SD card.</a></li>
<li><a href="https://youtu.be/aT2XbyMv53E">Writing a decoder for the “Quite OK Image Format” (QOI) in 55 lines of RLMeta.</a></li>
<li><a href="https://youtu.be/V3oUnhyCSkY">Rewriting QOI decoder semantic action in Python for clarity and speed.</a></li>
</ul></li>
<li><p>I got an urge to write a projectional editor to learn more about projectional editing. It’s something I’ve been thinking about before and have tried to incorporate a bit in <a href="/projects/rliterate/index.html">RLiterate</a>.</p></li>
<li><p>I watched <a href="https://youtu.be/dP1xVpMPn8M">A Tour of the Acme Editor</a> by Russ Cox. Acme felt like a different and unique text editor with an interesting approach.</p></li>
<li><p>I did some work to update my <a href="https://github.com/rickardlindberg/dotfiles/">dotfiles</a>. Mainly to simplify and add support for different setups. When I am recording videos for Youtube, for example, I want to have bigger font size in various applications. With my new dotfiles, I can now quickly switch between different setups.</p></li>
</ul>
]]></description>
    <pubDate>Fri, 04 Feb 2022 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/newsletter/january-2022/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>December 2021 Update</title>
    <link>http://rickardlindberg.me/writing/newsletter/december-2021/</link>
    <description><![CDATA[<h1>December 2021 Update</h1>

<p><em>Published on  4 January 2022.</em></p>

<p>This is what I’ve been up to in December 2021:</p>
<ul>
<li><p>I did more writing on the <a href="/writing/rlmeta-poster-2/index.html">RLMeta</a> blog post. I wrote for quite many days, but not for a very long time each day. I believe consistency works better. After each small edit, I published the draft. I will continue writing in January.</p></li>
<li><p>After quite a long absence, I made a contribution to <a href="/projects/timeline/index.html">Timeline</a> again. The contribution was to replace all image export dialogs with a better, more flexible one. I got inspired to work on this because of a problem that a user expressed on the mailing list. The new dialog will hopefully make the user experience a bit better and it simplified the code base. After the initial version, I had to make tweaks to make it work good on both Linux and Windows. Even though wxPython is cross-platform, you can still run into issues that are platform specific.</p></li>
<li><p>I started planning and recording a series of programming videos that I will publish on Youtube. My goal for 2022 is to publish one video every week. More on that in the first video, which I have planned for 7th of January.</p></li>
<li><p>I watched <a href="https://youtu.be/GgsRQuGSrc0">Building an encoder for the “Quite OK Image Format” (QOI)</a>. It inspired me to try and write a QOI decoder in RLMeta. I plan to make a video about that.</p></li>
</ul>
]]></description>
    <pubDate>Tue, 04 Jan 2022 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/newsletter/december-2021/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>November 2021 Update</title>
    <link>http://rickardlindberg.me/writing/newsletter/november-2021/</link>
    <description><![CDATA[<h1>November 2021 Update</h1>

<p><em>Published on  2 December 2021.</em></p>

<p>This is what I’ve been up to in November 2021:</p>
<ul>
<li><p>I managed to do a little more writing on the <a href="/writing/rlmeta-poster-2/index.html">RLMeta</a> blog post. Not as much as I had hoped, but I plan to continue working on it in December.</p></li>
<li><p>Since I started getting interested in cameras and making videos, my spare time, and perhaps also interest, for programming has decreased. It is still a big interest of mine, so I don’t think it has gone away. I have mostly made videos for myself, but perhaps I can combine my two interests and make programming videos of some sort.</p></li>
<li><p>I got an email from someone with a question about my article on <a href="/writing/expr-to-x86-compiler/index.html">compiling expressions to x86 machine code</a>. I don’t often get any feedback on my blog posts, but whenever I do, I get happy because then it feels like someone appreciated what I did.</p></li>
</ul>
]]></description>
    <pubDate>Thu, 02 Dec 2021 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/newsletter/november-2021/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>

    </channel>
</rss>
