<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>Rickard's personal homepage: latest posts</title>
        <link>http://rickardlindberg.me</link>
        <description><![CDATA[Rickard's personal homepage: latest posts]]></description>
        <atom:link href="http://rickardlindberg.me/rss.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Tue, 12 Dec 2023 00:00:00 UT</lastBuildDate>
        <item>
    <title>November 2023 Update</title>
    <link>http://rickardlindberg.me/writing/newsletter/november-2023/</link>
    <description><![CDATA[<h1>November 2023 Update</h1>

<p><em>Published on 12 December 2023.</em></p>

<p>This is what I’ve been up to in November 2023:</p>
<ul>
<li><p>I continued work on my <a href="https://github.com/rickardlindberg/linda-meta-oop">experimental programming language</a> which is based on <a href="/writing/rlmeta/index.html">RLMeta</a>.</p>
<ul>
<li><p>I did more research on the paradigm of the <a href="https://en.wikipedia.org/wiki/Linda_(coordination_language)">Linda programming language</a> and how it would fit together with RLMeta.</p></li>
<li><p>I started evolving the RLMeta implementation to support the paradigm of Linda. I realized that RLMeta could itself be implemented in this paradigm and started to evolve the code base in that direction.</p></li>
<li><p>I plan on solving <a href="https://adventofcode.com/">Advent of Code</a> puzzles using this langauge to see how problems from different domains can be expressed.</p></li>
<li><p>I really should document this language and my work on it better.</p></li>
</ul></li>
</ul>
]]></description>
    <pubDate>Tue, 12 Dec 2023 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/newsletter/november-2023/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>October 2023 Update</title>
    <link>http://rickardlindberg.me/writing/newsletter/october-2023/</link>
    <description><![CDATA[<h1>October 2023 Update</h1>

<p><em>Published on  6 November 2023.</em></p>

<p>This is what I’ve been up to in October 2023:</p>
<ul>
<li><p>Somehow videos from <a href="https://computerhistory.org/">Computer History Museum</a> showed up in my Youtube feed and I once again got sucked into the world of <a href="/writing/alan-kay-notes/index.html">Alan Kay</a> and Smalltalk. Here are (some of?) the videos that I watched:</p>
<ul>
<li><a href="https://youtu.be/PaOMiNku1_M">CHM Live | Making Smalltalk</a></li>
<li><a href="https://youtu.be/loEREmEPEOY">CHM Live | Making Smalltalk: Member Event</a></li>
<li><a href="https://youtu.be/uknEhXyZgsg">Alto System Project: Dan Ingalls demonstrates Smalltalk</a></li>
</ul></li>
<li><p>I found the <a href="https://archive.org/details/byte-magazine-1981-08">Byte Magazine Volume 06 Number 08 - Smalltalk</a> online which covers many topics from Smalltalk. So interesting.</p></li>
<li><p>I played with some Smalltalks from <a href="https://smalltalkzoo.thechm.org/">the Smalltalk zoo</a>, and also with <a href="https://squeak.org/">Squeak</a>.</p></li>
<li><p>I played with RLMeta and worked on a <a href="https://github.com/rickardlindberg/rlmeta/tree/main/simpler_base">simpler base version</a>.</p></li>
<li><p>Revisiting Alan Kay, I once again was inspired by his ideas. What triggered it this time was re-watching <a href="https://www.youtube.com/watch?v=fhOHn9TClXY">Joe Armstrong &amp; Alan Kay - Joe Armstrong interviews Alan Kay</a>. In it, he mentions the <a href="https://en.wikipedia.org/wiki/Linda_(coordination_language)">Linda programming language</a> and how it relates to META II (which I’ve previously explored in <a href="/projects/rlmeta/index.html">RLMeta</a>). I decided to try to explore those ideas further in a new project: <a href="https://github.com/rickardlindberg/linda-meta-oop">https://github.com/rickardlindberg/linda-meta-oop</a>. Perhaps more to come there soon.</p></li>
<li><p>I watched <a href="https://youtu.be/CmIGPGPdxTI">Is Software Engineering Real Engineering? • Hillel Wayne • YOW! 2023</a>. What I remember from it now is that other engineering disciplines envy that software engineering has version control.</p></li>
<li><p>I had the realization that creating a DSL <em>might</em> be like science. You observe how a certain problem is solved or how a certain thing works. Then you try to <strong>describe</strong> that <strong>phenomena</strong> in a new language, the <strong>DSL</strong>. Then you make it run by <strong>writing a compiler</strong>. The new language allow people to solve problems that they might not have been able to do before. It allows them to think in a different way. The group of people who can <strong>create</strong> a DSL is most likely smaller than the group of people who can do useful work with one. Similar to how many people can use math today to solve useful problems, but might not have been able to invent math itself.</p></li>
</ul>
]]></description>
    <pubDate>Mon, 06 Nov 2023 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/newsletter/october-2023/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>September 2023 Update</title>
    <link>http://rickardlindberg.me/writing/newsletter/september-2023/</link>
    <description><![CDATA[<h1>September 2023 Update</h1>

<p><em>Published on 10 October 2023.</em></p>

<p>This is what I’ve been up to in September 2023:</p>
<ul>
<li><p>I wrote another devlog about my <a href="/writing/devlog-013-raspberrypi-game-console/index.html">Raspberry Pi game console</a>.</p></li>
<li><p>I watched <a href="https://www.youtube.com/watch?v=3gib0hKYjB0">Continued Learning: The Beauty of Maintenance - Kent Beck - DDD Europe 2020</a>. What stuck in my mind was the metaphor that software development is like a swan. You can watch the beauty as it moves across the water. That represents the behavior of the software system. The features. But to make that happen, lots of things is going on under the surface that you don’t see. The swan paddles its feet (?) to go forward, poop comes out, it is messy. That is the structural changes needed in software to make the features possible. Refactoring.</p></li>
<li><p>I started reading <a href="https://www.davefarley.net/?p=352">Modern Software Engineering</a> by Dave Farley. So far, I’ve gotten a few useful ideas out of it.</p></li>
<li><p>When I started reading about software engineering, <a href="/writing/alan-kay-notes/index.html">Alan Kay</a> came to mind again. I revisited some of his talks, trying to find things about science and engineering in particular. I admire Alan’s work, and I also like the Agile concepts that Dave talks about. I’m interested in figuring out if they contradict, or if I can happily continue to admire both.</p></li>
<li><p>When reading about Alan Kay again, Bret Victor came to mind, and I watched his talk <a href="https://www.youtube.com/watch?v=agOdP2Bmieg">The Humane Representation of Thought</a>. I feel like his and Kay’s work are worth revisiting from time to time. For inspiration for better ways of doing things. And for inspiration of things to try to do differently.</p></li>
</ul>
]]></description>
    <pubDate>Tue, 10 Oct 2023 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/newsletter/september-2023/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>DevLog 013: Raspberry Pi game console</title>
    <link>http://rickardlindberg.me/writing/devlog-013-raspberrypi-game-console/</link>
    <description><![CDATA[<h1>DevLog 013: Raspberry Pi game console</h1>

<p><em>Published on 10 September 2023.</em></p>

<p>It is time to revisit the <a href="/projects/agdpp/index.html">balloon shooter</a>. I’m interested in building a “game console PC” so that my son can more easily play the balloon shooter and other games. Until now we have played all games on my laptop.</p>
<p>This will involve two main steps I think. The first is to get a Raspberry Pi and install all games on it. The second involves auto starting a custom application that can be used to select which game to play by using the gamepad. Ideally, you should not need to use a mouse or a keyboard. My plan for this custom application is to build it using the framework that we have in the balloon shooter.</p>
<p>Let’s get started.</p>
<h2 id="the-raspberry-pi">The Raspberry Pi</h2>
<p>At first, I’m not sure what hardware to get for this game console PC. I look around a bit, and then eventually settle on a Raspberry Pi starter kit.</p>
<p>
<center>
<img src="pibox.png" title="fig:" alt="Raspberry Pi starter kit." />
</center>
</p>
<p>I am bit concerned that it will not be powerful enough to play games. But it is relatively cheap, and if it can’t play all games, perhaps my son (or me) can have some fun with it in another way.</p>
<h2 id="assembly">Assembly</h2>
<p>The starter kit comes with everything you need to get started. That’s also one reason that I went with it. I’m not that interested in selecting hardware. I’m more interested in quickly prototyping this game console PC. If it turns out the Pi is not powerful enough, but the game console PC concept is a hit, we can look for better hardware. However, if the game console PC is not a hit, we have not wasted that much time or money.</p>
<p>And look. Apparently Raspberry Pis need heat sinks and fans nowadays. When I last played with a Pi, many, many years ago, I don’t remember that being the case. Let’s hope that means that they are more powerful now.</p>
<p>
<center>
<img src="assembly.png" title="fig:" alt="Assembling the starter kit." />
</center>
</p>
<p>I assemble the kit in about 15 minutes. Then I boot it up and install the operating system that comes preconfigured. I let it do its thing, and come back once it is installed.</p>
<h2 id="setup">Setup</h2>
<p>I want to install <a href="https://www.supertux.org/">SuperTux</a> and the balloon shooter on the Pi.</p>
<p>It seems like the version of SuperTux is older than what I have on my laptop. And my laptop is old. Furthermore, Python 2 seems to be the default Python. I learn that when trying to install all requirements for the balloon shooter. I also have to install a newer version of Pygame and for that I need to install some SDL build dependencies. Perhaps getting a newer operating system would be nice.</p>
<p>Eventually, I get everything working:</p>
<p>
<center>
<img src="setup.png" title="fig:" alt="Setting up games." />
</center>
</p>
<p>The versions might be a little old. The performance might be so so. But we have something setup that we can experiment with.</p>
<h2 id="a-note-on-performance">A note on performance</h2>
<p>Me and my son try to play SuperTux on the setup. It feels a little different. Part of it might be that it is slightly different version of the game. Part of it might be that the Pi has worse performance. We try to run the game at a lower resolution, and it seems to help a bit. We can probably try different things to get better performance, but this is absolutely fine for now. My son is still having fun playing.</p>
<h2 id="autostart">Autostart</h2>
<p>To start SuperTux on the Pi you first have to start the Pi and then you have to select SuperTux from the menu with the mouse. The balloon shooter is even more complicated to start. First you need to open a terminal and then run a command.</p>
<p>I don’t think that is good enough for a game console PC. I want to be able to operate it using the gamepad only.</p>
<p>The first tiny step in that direction is to configure SuperTux as the startup application. If we can do that, then SuperTux can be started and played without using the keyboard or mouse.</p>
<p>Once we have that working, we can work on our own startup application that let us select the game, and then we can start that one instead.</p>
<p>I search the internet for how to configure a startup application for the Pi.</p>
<p>I find an article that says that you can put a file in the autostart directory. I try this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ cat /etc/xdg/autostart/game_console_start.desktop
[Desktop Entry]
Name=Game console start
Exec=supertux2
</pre>
</div>
</div>
</div>
<p>I restart the Pi, and SuperTux actually starts automatically and you can start playing it using the gamepad. Fantastic!</p>
<h2 id="startup-application-idea">Startup application idea</h2>
<p>Let’s move on to our custom startup application. Here is the idea that I have for it:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
    <span class="n">subprocess</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">StartupApplication</span><span class="o">.</span><span class="n">create</span><span class="p">()</span><span class="o">.</span><span class="n">run</span><span class="p">())</span>
</pre>
</div>
</div>
</div>
<p>This code runs the startup application in a loop. Its <code>run</code> method should return the command to run. (The game to play or shutdown command.)</p>
<p>I think we can test drive the <code>StartupApplication</code> and then we can hook it up in the loop above.</p>
<p>Perhaps we should even test drive the loop.</p>
<p>We’ll see.</p>
<h2 id="test-driving-the-application">Test driving the application</h2>
<p>I start with this in a new file:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">StartupApplication</span><span class="p">:</span>

    <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">    I draw an application select screen:</span>

<span class="sd">    &gt;&gt;&gt; events = StartupApplication.run_in_test_mode(</span>
<span class="sd">    ...     events=[</span>
<span class="sd">    ...         [GameLoop.create_event_user_closed_window()],</span>
<span class="sd">    ...     ]</span>
<span class="sd">    ... )</span>
<span class="sd">    &quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<p>I create the bare minimum that the test complains about and get this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">StartupApplication</span><span class="p">:</span>

    <span class="o">...</span>

    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">run_in_test_mode</span><span class="p">(</span><span class="n">events</span><span class="o">=</span><span class="p">[]):</span>
        <span class="n">loop</span> <span class="o">=</span> <span class="n">GameLoop</span><span class="o">.</span><span class="n">create_null</span><span class="p">(</span>
            <span class="n">events</span><span class="o">=</span><span class="n">events</span><span class="o">+</span><span class="p">[</span>
                <span class="p">[</span><span class="n">GameLoop</span><span class="o">.</span><span class="n">create_event_user_closed_window</span><span class="p">()],</span>
            <span class="p">]</span>
        <span class="p">)</span>
        <span class="n">events</span> <span class="o">=</span> <span class="n">loop</span><span class="o">.</span><span class="n">track_events</span><span class="p">()</span>
        <span class="n">StartupApplication</span><span class="p">(</span><span class="n">loop</span><span class="p">)</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">events</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">loop</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">loop</span> <span class="o">=</span> <span class="n">loop</span>

    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">loop</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">event</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>
        <span class="k">pass</span>

    <span class="k">def</span> <span class="nf">tick</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">):</span>
        <span class="k">pass</span>
</pre>
</div>
</div>
</div>
<p>Now it doesn’t complain, but it seems to hang in an infinite loop.</p>
<p>I modify <code>event</code> to this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">StartupApplication</span><span class="p">:</span>

    <span class="o">...</span>

    <span class="k">def</span> <span class="nf">event</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">event</span><span class="o">.</span><span class="n">is_user_closed_window</span><span class="p">():</span>
            <span class="k">raise</span> <span class="n">ExitGameLoop</span><span class="p">()</span>
</pre>
</div>
</div>
</div>
<p>And we’re green. Let’s commit.</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ git commit -a -m &#39;Emryo to new startup application.&#39;
[main a55d17e] Emryo to new startup application.
 2 files changed, 39 insertions(+)
 create mode 100644 startup.py
</pre>
</div>
</div>
</div>
<p>The test is not yet fleshed out. It doesn’t test what it says it tests. But it drove out the skeleton of the application.</p>
<h2 id="reflecting-on-the-design">Reflecting on the design</h2>
<p>It’s been a while since I worked on the balloon shooter. What do I think when I work in this design again?</p>
<p>I got stuck in an infinite loop. That happens because we have a <code>while True:</code> in our game loop somewhere. I’ve always found testing infinite loops difficult. That’s one reason why I hesitated testing the loop for the startup application. But now I get another idea. What if we create the loop like this instead?</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">while</span> <span class="bp">self</span><span class="o">.</span><span class="n">loop_condition</span><span class="o">.</span><span class="n">active</span><span class="p">():</span>
    <span class="o">...</span>
</pre>
</div>
</div>
</div>
<p>Then we can create different versions of the loop condition maybe something like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">InfiniteLoopCondition</span><span class="p">:</span>

    <span class="k">def</span> <span class="nf">active</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="kc">True</span>
</pre>
</div>
</div>
</div>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">TestLoopCondition</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">iterations</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">counter</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">iterations</span> <span class="o">=</span> <span class="n">iterations</span>

    <span class="k">def</span> <span class="nf">active</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">flag</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">counter</span> <span class="o">&gt;=</span> <span class="bp">self</span><span class="o">.</span><span class="n">iterations</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">iterations</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="n">flag</span>
</pre>
</div>
</div>
</div>
<p>Let’s see if we can try this out in the startup application. If it works out well, perhaps we can port it to the game loop as well?</p>
<h2 id="a-mistake">A mistake</h2>
<p>The test that we wrote does not assert anything on the events. Let’s fix that. I comment out the assignment of <code>events</code> and paste the expected test output:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">I draw an application select screen:</span>

<span class="sd">&gt;&gt;&gt; StartupApplication.run_in_test_mode(</span>
<span class="sd">...     events=[</span>
<span class="sd">...         [GameLoop.create_event_user_closed_window()],</span>
<span class="sd">...     ]</span>
<span class="sd">... )</span>
<span class="sd">GAMELOOP_INIT =&gt;</span>
<span class="sd">    resolution: (1280, 720)</span>
<span class="sd">    fps: 60</span>
<span class="sd">GAMELOOP_QUIT =&gt;</span>
<span class="sd">&quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<h2 id="the-looping-concept">The looping concept</h2>
<p>This startup application should run in an infinite loop. In each iteration it should init the game loop and show the game selection screen. Once the selection has been made, it should quit the game loop and run the command. Then it starts all over.</p>
<p>Let’s try the looping thing.</p>
<p>I start by TDDing the loop conditions:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">InifiteLoopCondition</span><span class="p">:</span>

    <span class="k">def</span> <span class="nf">active</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">        &gt;&gt;&gt; InifiteLoopCondition().active()</span>
<span class="sd">        True</span>
<span class="sd">        &quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<p>That fails. Fix by return true. The other:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">FiteLoopCondition</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">iterations</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">iterations</span> <span class="o">=</span> <span class="n">iterations</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">def</span> <span class="nf">active</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">        &gt;&gt;&gt; condition = FiteLoopCondition(iterations=2)</span>
<span class="sd">        &gt;&gt;&gt; condition.active()</span>
<span class="sd">        True</span>
<span class="sd">        &gt;&gt;&gt; condition.active()</span>
<span class="sd">        True</span>
<span class="sd">        &gt;&gt;&gt; condition.active()</span>
<span class="sd">        False</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="n">flag</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">count</span> <span class="o">&lt;</span> <span class="bp">self</span><span class="o">.</span><span class="n">iterations</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="n">flag</span>
</pre>
</div>
</div>
</div>
<p>I actually got the condition wrong here at first. I’m glad I wrote a test for it. The previous example, <code>TestLoopCondition</code>, above is actually wrong. Even for really simple code like this, having tests is nice.</p>
<p>Let’s see if we can use a loop condition and have the test show us that two loops are actually made.</p>
<p>I change</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">StartupApplication</span><span class="p">:</span>

    <span class="o">...</span>

    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">run_in_test_mode</span><span class="p">(</span><span class="n">events</span><span class="o">=</span><span class="p">[]):</span>
        <span class="o">...</span>
        <span class="n">StartupApplication</span><span class="p">(</span><span class="n">loop</span><span class="p">)</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
        <span class="o">...</span>
</pre>
</div>
</div>
</div>
<p>to</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">StartupApplication</span><span class="p">:</span>

    <span class="o">...</span>

    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">run_in_test_mode</span><span class="p">(</span><span class="n">events</span><span class="o">=</span><span class="p">[]):</span>
        <span class="o">...</span>
        <span class="n">StartupApplication</span><span class="p">(</span>
            <span class="n">loop</span><span class="o">=</span><span class="n">loop</span><span class="p">,</span>
            <span class="n">loop_condition</span><span class="o">=</span><span class="n">FiteLoopCondition</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
        <span class="p">)</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
        <span class="o">...</span>
</pre>
</div>
</div>
</div>
<p>I also notice that i misspelled finite. I fix that and then add the parameter to the class. Test passes. Let’s add an actual loop:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">StartupApplication</span><span class="p">:</span>

    <span class="o">...</span>

    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">while</span> <span class="bp">self</span><span class="o">.</span><span class="n">loop_condition</span><span class="o">.</span><span class="n">active</span><span class="p">():</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">loop</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>This, expectedly, output another loop which I add to the assertion. Perfect!</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>    GAMELOOP_INIT =&gt;
        resolution: (1280, 720)
        fps: 60
    GAMELOOP_QUIT =&gt;
</pre>
</div>
</div>
</div>
<p>We are not yet using the <code>InfiniteLoopCondition</code>. Let’s change that by adding a <code>create</code> method:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">StartupApplication</span><span class="p">:</span>

    <span class="o">...</span>

    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">create</span><span class="p">():</span>
        <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">        &gt;&gt;&gt; isinstance(StartupApplication.create(), StartupApplication)</span>
<span class="sd">        True</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="k">return</span> <span class="n">StartupApplication</span><span class="p">(</span>
            <span class="n">loop</span><span class="o">=</span><span class="n">GameLoop</span><span class="o">.</span><span class="n">create</span><span class="p">(),</span>
            <span class="n">loop_condition</span><span class="o">=</span><span class="n">InifiteLoopCondition</span><span class="p">()</span>
        <span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>I also add this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&quot;__main__&quot;</span><span class="p">:</span>
    <span class="n">StartupApplication</span><span class="o">.</span><span class="n">create</span><span class="p">()</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</pre>
</div>
</div>
</div>
<p>And when I run</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ python startup.py
</pre>
</div>
</div>
</div>
<p>It indeed creates a new window every time I close it.</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ git commit -a -m &#39;Add startup entry point and have it loop.&#39;
[main aadd1a2] Add startup entry point and have it loop.
 1 file changed, 60 insertions(+), 5 deletions(-)
</pre>
</div>
</div>
</div>
<h2 id="selecting-a-game">Selecting a game</h2>
<p>What is the simplest possible solution for selecting a game?</p>
<p>I imagine that the display shows an icon for each game that can be selected. Then you move a cursor over it and press a key to select it.</p>
<p>I start by getting some games on the screen:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">tick</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">):</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">loop</span><span class="o">.</span><span class="n">clear_screen</span><span class="p">()</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">loop</span><span class="o">.</span><span class="n">draw_text</span><span class="p">(</span><span class="n">Point</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mi">100</span><span class="p">),</span> <span class="n">text</span><span class="o">=</span><span class="s2">&quot;SuperTux&quot;</span><span class="p">)</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">loop</span><span class="o">.</span><span class="n">draw_text</span><span class="p">(</span><span class="n">Point</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mi">200</span><span class="p">),</span> <span class="n">text</span><span class="o">=</span><span class="s2">&quot;Balloon Shooter&quot;</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>It looks like this:</p>
<p>
<center>
<img src="games.png" title="fig:" alt="Games in startup screen." />
</center>
</p>
<p>I think we also need a cursor:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">tick</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">):</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">loop</span><span class="o">.</span><span class="n">clear_screen</span><span class="p">()</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">loop</span><span class="o">.</span><span class="n">draw_text</span><span class="p">(</span><span class="n">Point</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mi">100</span><span class="p">),</span> <span class="n">text</span><span class="o">=</span><span class="s2">&quot;SuperTux&quot;</span><span class="p">)</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">loop</span><span class="o">.</span><span class="n">draw_text</span><span class="p">(</span><span class="n">Point</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mi">200</span><span class="p">),</span> <span class="n">text</span><span class="o">=</span><span class="s2">&quot;Balloon Shooter&quot;</span><span class="p">)</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">loop</span><span class="o">.</span><span class="n">draw_circle</span><span class="p">(</span><span class="n">Point</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">500</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mi">500</span><span class="p">),</span> <span class="n">radius</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s2">&quot;pink&quot;</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>It looks like this:</p>
<p>
<center>
<img src="cursor.png" title="fig:" alt="Cursor in startup screen." />
</center>
</p>
<p>Now I think two things are missing. The first is that at the press of a button, the game closest to the cursor should start. The second is that you also need to be able to move the cursor.</p>
<p>I think working on movement is secondary. It is more important to be able to start <strong>one</strong> game instead of nothing. So let’s work on that first.</p>
<h2 id="starting-a-game">Starting a game</h2>
<p>I want to write a test for the new behavior, but I find that testing at the top level is tedious and error prone. I would therefore like to start by refactoring and extracting a <code>StartupScene</code> maybe that has an interface that is easier to test. I end up with this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">StartupScene</span><span class="p">:</span>

    <span class="k">def</span> <span class="nf">event</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">event</span><span class="o">.</span><span class="n">is_user_closed_window</span><span class="p">():</span>
            <span class="k">raise</span> <span class="n">ExitGameLoop</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">draw</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">loop</span><span class="p">):</span>
        <span class="n">loop</span><span class="o">.</span><span class="n">draw_text</span><span class="p">(</span><span class="n">Point</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mi">100</span><span class="p">),</span> <span class="n">text</span><span class="o">=</span><span class="s2">&quot;SuperTux&quot;</span><span class="p">)</span>
        <span class="n">loop</span><span class="o">.</span><span class="n">draw_text</span><span class="p">(</span><span class="n">Point</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mi">200</span><span class="p">),</span> <span class="n">text</span><span class="o">=</span><span class="s2">&quot;Balloon Shooter&quot;</span><span class="p">)</span>
        <span class="n">loop</span><span class="o">.</span><span class="n">draw_circle</span><span class="p">(</span><span class="n">Point</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">500</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mi">500</span><span class="p">),</span> <span class="n">radius</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s2">&quot;pink&quot;</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>I’m sure this refactoring works because I have tests to cover it.</p>
<p>Commit!</p>
<p>Now, let’s see if we can write a test:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">When XBOX_A is pressed, I start the game that is closest to the cursor:</span>

<span class="sd">&gt;&gt;&gt; scene = StartupScene()</span>
<span class="sd">&gt;&gt;&gt; scene.event(GameLoop.create_event_joystick_down(XBOX_A))</span>
<span class="sd">SuperTux</span>
<span class="sd">&quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<p>I make it pass like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">StartupScene</span><span class="p">:</span>

    <span class="o">...</span>

    <span class="k">def</span> <span class="nf">event</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>
        <span class="o">...</span>
        <span class="k">elif</span> <span class="n">event</span><span class="o">.</span><span class="n">is_joystick_down</span><span class="p">(</span><span class="n">XBOX_A</span><span class="p">):</span>
            <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;SuperTux&quot;</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>This is obviously faking it. It is not supposed to print the name of the game, it is supposed to run it, or, wait a minute. This class is not supposed to run it, the top-level class is.</p>
<p>Let’s scratch this and start over.</p>
<h2 id="starting-a-game-again">Starting a game (again)</h2>
<p>Let’s have a look at the top-level test:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">I draw an application select screen:</span>

<span class="sd">&gt;&gt;&gt; StartupApplication.run_in_test_mode(</span>
<span class="sd">...     events=[</span>
<span class="sd">...         [],</span>
<span class="sd">...         [GameLoop.create_event_user_closed_window()],</span>
<span class="sd">...         [],</span>
<span class="sd">...         [GameLoop.create_event_user_closed_window()],</span>
<span class="sd">...     ]</span>
<span class="sd">... )</span>
<span class="sd">GAMELOOP_INIT =&gt;</span>
<span class="sd">    resolution: (1280, 720)</span>
<span class="sd">    fps: 60</span>
<span class="sd">CLEAR_SCREEN =&gt;</span>
<span class="sd">DRAW_TEXT =&gt;</span>
<span class="sd">    x: 100</span>
<span class="sd">    y: 100</span>
<span class="sd">    text: &#39;SuperTux&#39;</span>
<span class="sd">DRAW_TEXT =&gt;</span>
<span class="sd">    x: 100</span>
<span class="sd">    y: 200</span>
<span class="sd">    text: &#39;Balloon Shooter&#39;</span>
<span class="sd">DRAW_CIRCLE =&gt;</span>
<span class="sd">    x: 500</span>
<span class="sd">    y: 500</span>
<span class="sd">    radius: 20</span>
<span class="sd">    color: &#39;pink&#39;</span>
<span class="sd">GAMELOOP_QUIT =&gt;</span>
<span class="sd">GAMELOOP_INIT =&gt;</span>
<span class="sd">    resolution: (1280, 720)</span>
<span class="sd">    fps: 60</span>
<span class="sd">CLEAR_SCREEN =&gt;</span>
<span class="sd">DRAW_TEXT =&gt;</span>
<span class="sd">    x: 100</span>
<span class="sd">    y: 100</span>
<span class="sd">    text: &#39;SuperTux&#39;</span>
<span class="sd">DRAW_TEXT =&gt;</span>
<span class="sd">    x: 100</span>
<span class="sd">    y: 200</span>
<span class="sd">    text: &#39;Balloon Shooter&#39;</span>
<span class="sd">DRAW_CIRCLE =&gt;</span>
<span class="sd">    x: 500</span>
<span class="sd">    y: 500</span>
<span class="sd">    radius: 20</span>
<span class="sd">    color: &#39;pink&#39;</span>
<span class="sd">GAMELOOP_QUIT =&gt;</span>
<span class="sd">&quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<p>This shows our game loop runs twice, but there is no mention that a command is run. Let’s modify</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">StartupApplication</span><span class="p">:</span>

    <span class="o">...</span>

    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">while</span> <span class="bp">self</span><span class="o">.</span><span class="n">loop_condition</span><span class="o">.</span><span class="n">active</span><span class="p">():</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">loop</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>to</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">StartupApplication</span><span class="p">:</span>

    <span class="o">...</span>

    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">while</span> <span class="bp">self</span><span class="o">.</span><span class="n">loop_condition</span><span class="o">.</span><span class="n">active</span><span class="p">():</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">loop</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;TODO: run </span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">startup_scene</span><span class="o">.</span><span class="n">get_command</span><span class="p">()</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>It complains that <code>get_command</code> does not exist. Let’s add it:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">StartupScene</span><span class="p">:</span>

    <span class="k">def</span> <span class="nf">get_command</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">[</span><span class="s2">&quot;supertux2&quot;</span><span class="p">]</span>

    <span class="o">...</span>
</pre>
</div>
</div>
</div>
<p>We are now getting a somewhat expected test failure:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>Differences (ndiff with -expected +actual):
    + TODO: run [&#39;supertux2&#39;]
    + TODO: run [&#39;supertux2&#39;]
      GAMELOOP_INIT =&gt;
          resolution: (1280, 720)
          fps: 60
      CLEAR_SCREEN =&gt;
</pre>
</div>
</div>
</div>
<p>I was thinking to fake this and postpone running the actual command. To do it properly we need an infrastructure wrapper for running commands. I’ll just do it.</p>
<p>Here is a first faked version:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">Command</span><span class="p">(</span><span class="n">Observable</span><span class="p">):</span>

    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">create</span><span class="p">():</span>
        <span class="k">return</span> <span class="n">Command</span><span class="p">()</span>

    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">create_null</span><span class="p">():</span>
        <span class="k">return</span> <span class="n">Command</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">command</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">notify</span><span class="p">(</span><span class="s2">&quot;COMMAND&quot;</span><span class="p">,</span> <span class="p">{</span><span class="s2">&quot;command&quot;</span><span class="p">:</span> <span class="n">command</span><span class="p">})</span>
</pre>
</div>
</div>
</div>
<p>Instead of printing the command, it sends a notification so that we can assert that the event happens at the right time in the test. That is, we can assert that a command is run after the game loop is quit:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>...
GAMELOOP_QUIT =&gt;
COMMAND =&gt;
    command: [&#39;supertux2&#39;]
...
</pre>
</div>
</div>
</div>
<p>This works. Let’s commit:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ git commit -a -m &#39;Run command from StartupScene when game loop is quit.&#39;
[main 4c47b18] Run command from StartupScene when game loop is quit.
 1 file changed, 31 insertions(+), 5 deletions(-)
</pre>
</div>
</div>
</div>
<p>For this to actually do something, we need to flesh out <code>Command</code>. Here is what I end up with:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">Command</span><span class="p">(</span><span class="n">Observable</span><span class="p">):</span>

    <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">    &gt;&gt;&gt; Command.create().run([&quot;echo&quot;, &quot;hello&quot;])</span>

<span class="sd">    &gt;&gt;&gt; Command.create().run([&quot;command-that-does-not-exist&quot;])</span>
<span class="sd">    Traceback (most recent call last):</span>
<span class="sd">      ...</span>
<span class="sd">    FileNotFoundError: [Errno 2] No such file or directory: &#39;command-that-does-not-exist&#39;</span>

<span class="sd">    &gt;&gt;&gt; Command.create_null().run([&quot;command-that-does-not-exist&quot;])</span>
<span class="sd">    &quot;&quot;&quot;</span>

    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">create</span><span class="p">():</span>
        <span class="k">return</span> <span class="n">Command</span><span class="p">(</span><span class="n">subprocess</span><span class="o">=</span><span class="n">subprocess</span><span class="p">)</span>

    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">create_null</span><span class="p">():</span>
        <span class="k">class</span> <span class="nc">NullSubprocess</span><span class="p">:</span>
            <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">command</span><span class="p">):</span>
                <span class="k">pass</span>
        <span class="k">return</span> <span class="n">Command</span><span class="p">(</span><span class="n">subprocess</span><span class="o">=</span><span class="n">NullSubprocess</span><span class="p">())</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">subprocess</span><span class="p">):</span>
        <span class="n">Observable</span><span class="o">.</span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">subprocess</span> <span class="o">=</span> <span class="n">subprocess</span>

    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">command</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">notify</span><span class="p">(</span><span class="s2">&quot;COMMAND&quot;</span><span class="p">,</span> <span class="p">{</span><span class="s2">&quot;command&quot;</span><span class="p">:</span> <span class="n">command</span><span class="p">})</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">subprocess</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">command</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>When the startup application is run and then quit, SuperTux is actually started.</p>
<p>This is actually some real progress.</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ git commit -a -m &#39;Command actually runs commands.&#39;
[main 270440e] Command actually runs commands.
 1 file changed, 23 insertions(+), 2 deletions(-)
</pre>
</div>
</div>
</div>
<h2 id="selection-behavior">Selection behavior</h2>
<p>Let’s review the <code>StartupScene</code>:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">StartupScene</span><span class="p">:</span>

    <span class="k">def</span> <span class="nf">get_command</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">[</span><span class="s2">&quot;supertux2&quot;</span><span class="p">]</span>

    <span class="k">def</span> <span class="nf">event</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">event</span><span class="o">.</span><span class="n">is_user_closed_window</span><span class="p">():</span>
            <span class="k">raise</span> <span class="n">ExitGameLoop</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">draw</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">loop</span><span class="p">):</span>
        <span class="n">loop</span><span class="o">.</span><span class="n">draw_text</span><span class="p">(</span><span class="n">Point</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mi">100</span><span class="p">),</span> <span class="n">text</span><span class="o">=</span><span class="s2">&quot;SuperTux&quot;</span><span class="p">)</span>
        <span class="n">loop</span><span class="o">.</span><span class="n">draw_text</span><span class="p">(</span><span class="n">Point</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mi">200</span><span class="p">),</span> <span class="n">text</span><span class="o">=</span><span class="s2">&quot;Balloon Shooter&quot;</span><span class="p">)</span>
        <span class="n">loop</span><span class="o">.</span><span class="n">draw_circle</span><span class="p">(</span><span class="n">Point</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">500</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mi">500</span><span class="p">),</span> <span class="n">radius</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s2">&quot;pink&quot;</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>We have higher-level tests in place that checks that whatever <code>get_command</code> returns is run when the game loop quits.</p>
<p>I think it should now be fairly easy to write tests for selection behavior. Let’s first modify the event handler to also exit the game loop when <code>XBOX_A</code> is pressed:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">StartupScene</span><span class="p">:</span>

    <span class="o">...</span>

    <span class="k">def</span> <span class="nf">event</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">        &gt;&gt;&gt; StartupScene().event(GameLoop.create_event_user_closed_window())</span>
<span class="sd">        Traceback (most recent call last):</span>
<span class="sd">          ...</span>
<span class="sd">        gameloop.ExitGameLoop</span>

<span class="sd">        &gt;&gt;&gt; StartupScene().event(GameLoop.create_event_joystick_down(XBOX_A))</span>
<span class="sd">        Traceback (most recent call last):</span>
<span class="sd">          ...</span>
<span class="sd">        gameloop.ExitGameLoop</span>
<span class="sd">        &quot;&quot;&quot;</span>
        <span class="k">if</span> <span class="n">event</span><span class="o">.</span><span class="n">is_user_closed_window</span><span class="p">()</span> <span class="ow">or</span> <span class="n">event</span><span class="o">.</span><span class="n">is_joystick_down</span><span class="p">(</span><span class="n">XBOX_A</span><span class="p">):</span>
            <span class="k">raise</span> <span class="n">ExitGameLoop</span><span class="p">()</span>
</pre>
</div>
</div>
</div>
<p>Now let’s think about what <code>get_command</code> should return. It should return the command of the game that is closest to the cursor. Let’s write two tests for that:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">StartupScene</span><span class="p">:</span>

    <span class="o">...</span>

    <span class="k">def</span> <span class="nf">get_command</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">        &gt;&gt;&gt; scene = StartupScene()</span>

<span class="sd">        &gt;&gt;&gt; scene.move_cursor(x=100, y=100)</span>
<span class="sd">        &gt;&gt;&gt; scene.get_command()</span>
<span class="sd">        [&#39;supertux2&#39;]</span>

<span class="sd">        &gt;&gt;&gt; scene.move_cursor(x=100, y=200)</span>
<span class="sd">        &gt;&gt;&gt; scene.get_command()</span>
<span class="sd">        [&#39;python&#39;, &#39;/home/.../agdpp/agdpp.py&#39;]</span>
<span class="sd">        &quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<p>It complains that <code>move_cursor</code> does not exist. I add it like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">StartupScene</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">cursor</span> <span class="o">=</span> <span class="n">Point</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">500</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mi">500</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">move_cursor</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">cursor</span> <span class="o">=</span> <span class="n">Point</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="n">y</span><span class="p">)</span>

    <span class="o">...</span>
</pre>
</div>
</div>
</div>
<p>I also modify the drawing code to use this point for the cursor.</p>
<p>Now the second test case fails:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>Failed example:
    scene.get_command()
Differences (ndiff with -expected +actual):
    - [&#39;python&#39;, &#39;/home/.../agdpp/agdpp.py&#39;]
    + [&#39;supertux2&#39;]
</pre>
</div>
</div>
</div>
<p>I make a quick and dirty fix, because I want to go quickly to green so that I can refactor and generalize the solution:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>    <span class="k">def</span> <span class="nf">get_command</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">cursor</span><span class="o">.</span><span class="n">y</span> <span class="o">==</span> <span class="mi">200</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">[</span><span class="s2">&quot;python&quot;</span><span class="p">,</span> <span class="s2">&quot;/home/.../agdpp/agdpp.py&quot;</span><span class="p">]</span>
        <span class="k">return</span> <span class="p">[</span><span class="s2">&quot;supertux2&quot;</span><span class="p">]</span>
</pre>
</div>
</div>
</div>
<p>And this is my favorite state of programming. This is actually where some design happens. I have the safety net of the tests and I can push code around until I think it looks good and the next thing is easy to add.</p>
<p>Here is what I come up with this time:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">StartupScene</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">cursor</span> <span class="o">=</span> <span class="n">Point</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">500</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mi">500</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">games</span> <span class="o">=</span> <span class="p">[</span>
            <span class="n">Game</span><span class="p">(</span>
                <span class="n">name</span><span class="o">=</span><span class="s2">&quot;SuperTux&quot;</span><span class="p">,</span>
                <span class="n">position</span><span class="o">=</span><span class="n">Point</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mi">100</span><span class="p">),</span>
                <span class="n">command</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;supertux2&quot;</span><span class="p">],</span>
            <span class="p">),</span>
            <span class="n">Game</span><span class="p">(</span>
                <span class="n">name</span><span class="o">=</span><span class="s2">&quot;Balloon Shooter&quot;</span><span class="p">,</span>
                <span class="n">position</span><span class="o">=</span><span class="n">Point</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mi">200</span><span class="p">),</span>
                <span class="n">command</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;python&quot;</span><span class="p">,</span> <span class="s2">&quot;/home/.../agdpp/agdpp.py&quot;</span><span class="p">],</span>
            <span class="p">),</span>
        <span class="p">]</span>

    <span class="k">def</span> <span class="nf">get_command</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="nb">min</span><span class="p">(</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">games</span><span class="p">,</span>
            <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">game</span><span class="p">:</span> <span class="n">game</span><span class="o">.</span><span class="n">distance_to</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">cursor</span><span class="p">)</span>
        <span class="p">)</span><span class="o">.</span><span class="n">command</span>

    <span class="k">def</span> <span class="nf">draw</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">loop</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">game</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">games</span><span class="p">:</span>
            <span class="n">game</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="n">loop</span><span class="p">)</span>
        <span class="n">loop</span><span class="o">.</span><span class="n">draw_circle</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">cursor</span><span class="p">,</span> <span class="n">radius</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s2">&quot;pink&quot;</span><span class="p">)</span>

    <span class="o">...</span>
</pre>
</div>
</div>
</div>
<p>And here is the <code>Game</code> class:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">Game</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">position</span><span class="p">,</span> <span class="n">command</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">position</span> <span class="o">=</span> <span class="n">position</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">command</span> <span class="o">=</span> <span class="n">command</span>

    <span class="k">def</span> <span class="nf">draw</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">loop</span><span class="p">):</span>
        <span class="n">loop</span><span class="o">.</span><span class="n">draw_text</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">position</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">distance_to</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">point</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">position</span><span class="o">.</span><span class="n">distance_to</span><span class="p">(</span><span class="n">point</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>This implementation still passes all tests and is also generalized. Nice!</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ git commit -a -m &#39;Run the command closest to the cursor.&#39;
[main 921c71f] Run the command closest to the cursor.
 1 file changed, 64 insertions(+), 7 deletions(-)
</pre>
</div>
</div>
</div>
<h2 id="cursor-movement">Cursor movement</h2>
<p>Next I want to work on cursor movement so that we can actually select different games.</p>
<p>I’m not quite sure how to write a low-level test for this in <code>GameScene</code>, so I write a top-level test instead:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">&gt;&gt;&gt; StartupApplication.run_in_test_mode(</span>
<span class="sd">...     events=[</span>
<span class="sd">...         [],</span>
<span class="sd">...         [GameLoop.create_event_joystick_motion(axis=1, value=1.0)],</span>
<span class="sd">...         [GameLoop.create_event_user_closed_window()],</span>
<span class="sd">...     ],</span>
<span class="sd">...     iterations=1</span>
<span class="sd">... ).filter(&quot;DRAW_CIRCLE&quot;)</span>
<span class="sd">DRAW_CIRCLE =&gt;</span>
<span class="sd">    x: 500</span>
<span class="sd">    y: 500</span>
<span class="sd">    radius: 20</span>
<span class="sd">    color: &#39;pink&#39;</span>
<span class="sd">DRAW_CIRCLE =&gt;</span>
<span class="sd">    x: 500</span>
<span class="sd">    y: 501</span>
<span class="sd">    radius: 20</span>
<span class="sd">    color: &#39;pink&#39;</span>
<span class="sd">&quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<p>We assert that the cursor is drawn in two different positions given a joystick motion event.</p>
<p>The gist of the implementation is here:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">StartupScene</span><span class="p">:</span>

    <span class="o">...</span>

    <span class="k">def</span> <span class="nf">event</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>
        <span class="o">...</span>
        <span class="k">elif</span> <span class="n">event</span><span class="o">.</span><span class="n">is_joystick_motion</span><span class="p">():</span>
            <span class="k">if</span> <span class="n">event</span><span class="o">.</span><span class="n">get_axis</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">dx</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="n">get_value</span><span class="p">()</span>
            <span class="k">elif</span> <span class="n">event</span><span class="o">.</span><span class="n">get_axis</span><span class="p">()</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">dy</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="n">get_value</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">):</span>
        <span class="n">delta</span> <span class="o">=</span> <span class="n">Point</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">dx</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">dy</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">delta</span><span class="o">.</span><span class="n">length</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mf">0.05</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">cursor</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">cursor</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">delta</span><span class="o">.</span><span class="n">times</span><span class="p">(</span><span class="n">dt</span><span class="p">))</span>
</pre>
</div>
</div>
</div>
<p>The <code>update</code> method did not exist on <code>StartupScene</code> before. The pattern how it is called is here:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">StartupApplication</span><span class="p">:</span>

    <span class="o">...</span>

    <span class="k">def</span> <span class="nf">event</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">startup_scene</span><span class="o">.</span><span class="n">event</span><span class="p">(</span><span class="n">event</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">tick</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">loop</span><span class="o">.</span><span class="n">clear_screen</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">startup_scene</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">dt</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">startup_scene</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">loop</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>So the scene will receive these calls in order:</p>
<ul>
<li><code>event</code></li>
<li><code>update</code></li>
<li><code>draw</code></li>
</ul>
<p>This represents one game loop cycle. If this pattern becomes more permanent, we can move the top-level test down to <code>StartupApplication</code> and have that test call <code>event</code> + <code>update</code> and assert that the cursor moved. But for now, I want the confidence that the high-level test gives, that everything is actually working together.</p>
<p>I also test this in game to fist of all make sure that I got the axis right and also to tweak numbers so that speed feels good. The length check is needed because joystick movement events rarely return a value of 0. If we only move the joystick a tiny bit, we don’t want the cursor to move.</p>
<p>Also, we should probably add constant names for the axis to not compare to numbers. Maybe <code>XBOX_AXIS_Y</code> for example.</p>
<p>Anyway, when I try this out, it actually works. I can move the cursor around, and when I press <code>XBOX_A</code> the game closest to the cursor is started.</p>
<h2 id="finishing-touches">Finishing touches</h2>
<p>I want to visualize the game that is closest to the cursor. Let’s do it with another color.</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">StartupScene</span><span class="p">:</span>

    <span class="o">...</span>

    <span class="k">def</span> <span class="nf">draw</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">loop</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">game</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">games</span><span class="p">:</span>
            <span class="n">game</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="n">loop</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">game_closest_to_cursor</span><span class="p">())</span>

    <span class="k">def</span> <span class="nf">game_closest_to_cursor</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="nb">min</span><span class="p">(</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">games</span><span class="p">,</span>
            <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">game</span><span class="p">:</span> <span class="n">game</span><span class="o">.</span><span class="n">distance_to</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">cursor</span><span class="p">)</span>
        <span class="p">)</span>
</pre>
</div>
</div>
</div>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">Game</span><span class="p">:</span>

    <span class="o">...</span>

    <span class="k">def</span> <span class="nf">draw</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">loop</span><span class="p">,</span> <span class="n">closest</span><span class="p">):</span>
        <span class="n">loop</span><span class="o">.</span><span class="n">draw_text</span><span class="p">(</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">position</span><span class="p">,</span>
            <span class="n">text</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">name</span><span class="p">,</span>
            <span class="n">color</span><span class="o">=</span><span class="s2">&quot;lightblue&quot;</span> <span class="k">if</span> <span class="n">closest</span> <span class="ow">is</span> <span class="bp">self</span> <span class="k">else</span> <span class="s2">&quot;black&quot;</span>
        <span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>I modify tests to assert the correct color. This works perfectly.</p>
<p>Next I want to fix the games that are configured. I want them to display evenly on the screen, and I want to have a “QUIT” game that runs a shutdown command to shut down the Pi.</p>
<p>Here it is:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">StartupScene</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">cursor</span> <span class="o">=</span> <span class="n">Point</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">400</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mi">300</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">games</span> <span class="o">=</span> <span class="p">[</span>
            <span class="n">Game</span><span class="p">(</span>
                <span class="n">name</span><span class="o">=</span><span class="s2">&quot;SuperTux&quot;</span><span class="p">,</span>
                <span class="n">position</span><span class="o">=</span><span class="n">Point</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mi">100</span><span class="p">),</span>
                <span class="n">command</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;supertux2&quot;</span><span class="p">],</span>
            <span class="p">),</span>
            <span class="n">Game</span><span class="p">(</span>
                <span class="n">name</span><span class="o">=</span><span class="s2">&quot;Balloon Shooter&quot;</span><span class="p">,</span>
                <span class="n">position</span><span class="o">=</span><span class="n">Point</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">400</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mi">300</span><span class="p">),</span>
                <span class="n">command</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;python3&quot;</span><span class="p">,</span> <span class="s2">&quot;agdpp.py&quot;</span><span class="p">],</span>
            <span class="p">),</span>
            <span class="n">Game</span><span class="p">(</span>
                <span class="n">name</span><span class="o">=</span><span class="s2">&quot;QUIT&quot;</span><span class="p">,</span>
                <span class="n">position</span><span class="o">=</span><span class="n">Point</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">1000</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mi">600</span><span class="p">),</span>
                <span class="n">command</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;shutdown&quot;</span><span class="p">,</span> <span class="s2">&quot;now&quot;</span><span class="p">],</span>
            <span class="p">),</span>
        <span class="p">]</span>
</pre>
</div>
</div>
</div>
<p>And it looks like this:</p>
<p>
<center>
<img src="final.png" title="fig:" alt="Final startup screen." />
</center>
</p>
<h2 id="trying-on-the-pi">Trying on the Pi</h2>
<p>I change the startup script, <code>/etc/xdg/autostart/game_console_start.desktop</code>, to this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>[Desktop Entry]
Name=Game console start
Exec=/home/pi/game_console_pc.sh
</pre>
</div>
</div>
</div>
<p>Where <code>/home/pi/game_console_pc.sh</code> is this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="ch">#!/usr/bin/env bash</span>

<span class="nb">exec</span> &gt; /home/pi/game_console_pc.log

<span class="nb">exec</span> <span class="m">2</span>&gt;<span class="p">&amp;</span><span class="m">1</span>

<span class="nb">cd</span> /home/pi/agdpp

<span class="k">for</span> retry <span class="k">in</span> <span class="m">1</span> <span class="m">2</span> <span class="m">5</span> <span class="m">10</span> giveup<span class="p">;</span> <span class="k">do</span>
	<span class="k">if</span> <span class="o">[</span> <span class="nv">$retry</span> <span class="o">=</span> giveup <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
		<span class="nb">echo</span> giving up
		<span class="nb">break</span>
	<span class="k">elif</span> git pull --ff-only<span class="p">;</span> <span class="k">then</span>
		<span class="nb">break</span>
	<span class="k">else</span>
		<span class="nb">echo</span> Retrying <span class="k">in</span> <span class="nv">$retry</span>
		sleep <span class="nv">$retry</span>
	<span class="k">fi</span>
<span class="k">done</span>

python3 startup.py
</pre>
</div>
</div>
</div>
<p>And it works beautifully.</p>
<p>Why did I not test drive this startup script? Good question. I for sure spend some time debugging the loop, which, by the way, is needed to give the Pi time to connect to the wireless network before it can download the latest version of the startup application and balloon shooter.</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>pi@raspberrypi:~ $ cat game_console_pc.log
fatal: unable to access &#39;https://github.com/rickardlindberg/agdpp.git/&#39;: Could not resolve host: github.com
Retrying in 1
fatal: unable to access &#39;https://github.com/rickardlindberg/agdpp.git/&#39;: Could not resolve host: github.com
Retrying in 2
fatal: unable to access &#39;https://github.com/rickardlindberg/agdpp.git/&#39;: Could not resolve host: github.com
Retrying in 5
Already up to date.
</pre>
</div>
</div>
</div>
<p>I feel like this script is maybe not part of the game itself. So that is one reason why I just “hacked” it together on the Pi. But I’m not entirely happy that it exists only there, and not in some repo, and doesn’t have any tests.</p>
<p>However, for now, it works fine, but there is another problem. It is not possible to quit the balloon shooter with the gamepad. So once you start it, you are stuck in it.</p>
<h2 id="add-balloon-shooter-quit">Add balloon shooter quit</h2>
<p>I modify <code>GameScene</code> by adding a check for <code>XBOX_START</code>:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">GameScene</span><span class="p">:</span>

    <span class="o">...</span>

    <span class="k">def</span> <span class="nf">event</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">event</span><span class="o">.</span><span class="n">is_user_closed_window</span><span class="p">()</span> <span class="ow">or</span> <span class="n">event</span><span class="o">.</span><span class="n">is_joystick_down</span><span class="p">(</span><span class="n">XBOX_START</span><span class="p">):</span>
            <span class="k">raise</span> <span class="n">ExitGameLoop</span><span class="p">()</span>
        <span class="o">...</span>
</pre>
</div>
</div>
</div>
<p>And by printing events, I figure out the value of <code>XBOX_START</code>:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="n">XBOX_START</span> <span class="o">=</span> <span class="mi">7</span>
</pre>
</div>
</div>
</div>
<h2 id="summary">Summary</h2>
<p>Finally, I have the first version of the setup that I had in mind.</p>
<p>I find it a little difficult to document all my thinking in this DevLog format. I feel like I make hundreds of decisions every minute when programming, and writing about all of them seems impossible. I think one solution would be to cover smaller changes in each DevLog. Your questions and commends are very welcome.</p>
<p>Even if these DevLogs are not valuable to anyone else, they are valuable to me because I get to practice writing and explaining my thinking.</p>
<p>See you next time!</p>
]]></description>
    <pubDate>Sun, 10 Sep 2023 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/devlog-013-raspberrypi-game-console/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>August 2023 Update</title>
    <link>http://rickardlindberg.me/writing/newsletter/august-2023/</link>
    <description><![CDATA[<h1>August 2023 Update</h1>

<p><em>Published on  4 September 2023.</em></p>

<p>This is what I’ve been up to in August 2023:</p>
<ul>
<li><p>I continued writing <a href="/tags/devlog/index.html">DevLogs</a>. All about the development of my <a href="/projects/rlvideo/index.html">video editor</a>.</p></li>
<li><p>I wrote the perhaps <a href="/writing/agdpp-the-end/index.html">final article</a> in my <em>Agile Game Development with Python and Pygame</em> series. I will most like continue the series in the form of DevLogs.</p></li>
<li><p>I decided that I need to use more of my free time for other things than programming. I still want to continue writing though but, most likely, program a bit less.</p></li>
</ul>
]]></description>
    <pubDate>Mon, 04 Sep 2023 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/newsletter/august-2023/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>DevLog 012: Investigating export crash</title>
    <link>http://rickardlindberg.me/writing/devlog-012-investigating-export-crash/</link>
    <description><![CDATA[<h1>DevLog 012: Investigating export crash</h1>

<p><em>Published on 23 August 2023.</em></p>

<p>I have managed to edit some footage using my own <a href="/projects/rlvideo/index.html">video editor</a>. When I tried to export it, it took forever and eventually crashed. In this DevLog, we will investigate why that might be.</p>
<h2 id="how-export-works">How export works</h2>
<p>When we press the export button, the following code is run:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">Project</span><span class="p">:</span>

    <span class="o">...</span>

    <span class="k">def</span> <span class="nf">export</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">path</span> <span class="o">=</span> <span class="s2">&quot;export.mp4&quot;</span>
        <span class="n">producer</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">split_into_sections</span><span class="p">()</span><span class="o">.</span><span class="n">to_mlt_producer</span><span class="p">(</span>
            <span class="n">profile</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">profile</span><span class="p">,</span>
            <span class="n">cache</span><span class="o">=</span><span class="n">ExportSourceLoader</span><span class="p">(</span><span class="n">profile</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">profile</span><span class="p">,</span> <span class="n">project</span><span class="o">=</span><span class="bp">self</span><span class="p">)</span>
        <span class="p">)</span>
        <span class="k">def</span> <span class="nf">work</span><span class="p">(</span><span class="n">progress</span><span class="p">):</span>
            <span class="n">consumer</span> <span class="o">=</span> <span class="n">mlt</span><span class="o">.</span><span class="n">Consumer</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">profile</span><span class="p">,</span> <span class="s2">&quot;avformat&quot;</span><span class="p">)</span>
            <span class="n">consumer</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;target&quot;</span><span class="p">,</span> <span class="n">path</span><span class="p">)</span>
            <span class="n">consumer</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">producer</span><span class="p">)</span>
            <span class="n">consumer</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
            <span class="k">while</span> <span class="n">consumer</span><span class="o">.</span><span class="n">is_stopped</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">progress</span><span class="p">(</span><span class="n">producer</span><span class="o">.</span><span class="n">position</span><span class="p">()</span><span class="o">/</span><span class="n">producer</span><span class="o">.</span><span class="n">get_playtime</span><span class="p">())</span>
                <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">background_worker</span><span class="o">.</span><span class="n">add</span><span class="p">(</span>
            <span class="sa">f</span><span class="s2">&quot;Exporting </span><span class="si">{</span><span class="n">path</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>
            <span class="k">lambda</span> <span class="n">result</span><span class="p">:</span> <span class="kc">None</span><span class="p">,</span>
            <span class="n">work</span><span class="p">,</span>
        <span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>It creates an MLT producer with the real clips, and not the proxy clips. The <code>work</code> function is called in a thread, and this code does the actual export:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="n">consumer</span> <span class="o">=</span> <span class="n">mlt</span><span class="o">.</span><span class="n">Consumer</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">profile</span><span class="p">,</span> <span class="s2">&quot;avformat&quot;</span><span class="p">)</span>
<span class="n">consumer</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;target&quot;</span><span class="p">,</span> <span class="n">path</span><span class="p">)</span>
<span class="n">consumer</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">producer</span><span class="p">)</span>
<span class="n">consumer</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
<span class="k">while</span> <span class="n">consumer</span><span class="o">.</span><span class="n">is_stopped</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
    <span class="n">progress</span><span class="p">(</span><span class="n">producer</span><span class="o">.</span><span class="n">position</span><span class="p">()</span><span class="o">/</span><span class="n">producer</span><span class="o">.</span><span class="n">get_playtime</span><span class="p">())</span>
    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>As I remember, this is the code that takes forever and eventually crash. I also think its memory consumption steadily increase.</p>
<h2 id="way-forward">Way forward</h2>
<p>There is not much Python code in here. Just the loop that queries the consumer. So my guess is that something in MLT consumes memory and eventually crashes. We had a similar problem, I think, before when we created proxies using MLT in this way. On the other hand, it seems unlikely that MLT would crash when exporting a “small” project.</p>
<p>What I want to try today is to export my project as an MLT XML file and try to render it using melt. It should do roughly the same thing as my Python code, but will avoid using the Python binding for MLT.</p>
<p>If there is something wrong with MLT, which I doubt, the export will fail here as well. If not, well, then I don’t know what is wrong, but we can at least rule out MLT (core).</p>
<h2 id="the-test">The test</h2>
<p>We have this code that enables us to export MLT XML:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">if</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="p">[</span><span class="s2">&quot;--export-melt&quot;</span><span class="p">]:</span>
    <span class="n">path</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Exporting </span><span class="si">{</span><span class="n">path</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
    <span class="n">project</span> <span class="o">=</span> <span class="n">Project</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">args</span><span class="o">=</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">3</span><span class="p">:])</span>
    <span class="n">consumer</span> <span class="o">=</span> <span class="n">mlt</span><span class="o">.</span><span class="n">Consumer</span><span class="p">(</span><span class="n">project</span><span class="o">.</span><span class="n">profile</span><span class="p">,</span> <span class="s2">&quot;xml&quot;</span><span class="p">)</span>
    <span class="n">consumer</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;resource&quot;</span><span class="p">,</span> <span class="n">path</span><span class="p">)</span>
    <span class="n">consumer</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">project</span><span class="o">.</span><span class="n">get_preview_mlt_producer</span><span class="p">())</span>
    <span class="n">consumer</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
    <span class="k">while</span> <span class="n">consumer</span><span class="o">.</span><span class="n">is_stopped</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Done&quot;</span><span class="p">)</span>
    <span class="k">return</span>
</pre>
</div>
</div>
</div>
<p>However, it creates the preview MLT producer which uses the proxy clips.</p>
<p>Since this is just a test, not intended to be committed, I modify this code to instead create an MLT producer with the real clips.</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="kn">from</span> <span class="nn">rlvideolib.domain.project</span> <span class="kn">import</span> <span class="n">ExportSourceLoader</span>
<span class="n">producer</span> <span class="o">=</span> <span class="n">project</span><span class="o">.</span><span class="n">split_into_sections</span><span class="p">()</span><span class="o">.</span><span class="n">to_mlt_producer</span><span class="p">(</span>
    <span class="n">profile</span><span class="o">=</span><span class="n">project</span><span class="o">.</span><span class="n">profile</span><span class="p">,</span>
    <span class="n">cache</span><span class="o">=</span><span class="n">ExportSourceLoader</span><span class="p">(</span><span class="n">profile</span><span class="o">=</span><span class="n">project</span><span class="o">.</span><span class="n">profile</span><span class="p">,</span> <span class="n">project</span><span class="o">=</span><span class="n">project</span><span class="p">)</span>
<span class="p">)</span>
<span class="n">consumer</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">producer</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>Now we can export the XML like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ rlvideo --export-melt test.xml devlog-009.rlvideo 
Exporting test.xml
...
Done
</pre>
</div>
</div>
</div>
<p>I verify that the XML file has references to the real clips. It does. Perfect!</p>
<p>We can now do the equivalent export with this command:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>mlt-melt test.xml -consumer avformat target=export.mp4
</pre>
</div>
</div>
</div>
<p>And now, it’s just to wait and see what happens.</p>
<h2 id="a-few-minutes-later">A few minutes later</h2>
<p>The memory consumption seems to be quite stable. Unless there is a memory leak, this is what I expect. If the memory consumption keeps increasing for every frame that is exported, that would mean that you can only export longer videos by getting more memory. That does not seem right.</p>
<p>I should probably also verify that the export in the application keeps increasing memory consumption. If it does, then there might be a memory leak in the Python binding for MLT. Or I might use the binding incorrectly.</p>
<p>Using threads (which is used in the export) has also been problematic. I’ve experienced that the Python threads interfere with the MLT threads. I’m don’t understand the problem fully, it’s just a feeling. So that might be something to look into. Try the export with threading disabled.</p>
<h2 id="a-few-hours-later">A few hours later</h2>
<p>I might have mistaken. The memory consumption seems to keep increasing. However, the export finish without crashing and the final result looks fine.</p>
<h2 id="summary">Summary</h2>
<p>It seems that MLT consumes more and more memory the longer the exported video. To confirm this, I should probably do some more precise measures. Maybe using something like <a href="https://github.com/astrofrog/psrecord">psrecord</a>? However, memory consumption might not be problematic in itself. Perhaps it allocates more memory to speed things up, but will not allocated more than what is available. Perhaps the crash that I experienced before was not related to memory.</p>
<p>We have learned something today, and this knowledge will make us better prepared for the future.</p>
<p>Here are a few things I think of as possible next steps in this area:</p>
<ul>
<li>Measure memory consumption properly</li>
<li>Compare memory consumption from MLT and rlvideo</li>
<li>Try disabling threading in rlvideo</li>
<li>“Optimize” the generated producer. It has many unnecessary tracks which I think will slow rendering down. (Should measure this to confirm.)</li>
</ul>
<p>We’ll see if we work on any of these the next time or something else.</p>
]]></description>
    <pubDate>Wed, 23 Aug 2023 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/devlog-012-investigating-export-crash/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>The end?</title>
    <link>http://rickardlindberg.me/writing/agdpp-the-end/</link>
    <description><![CDATA[<h1>The end?</h1>

<p><em>Published on 21 August 2023 in <a href="/projects/agdpp/index.html">Agile Game Development with Python and Pygame</a>.</em></p>

<p>When I started this series, my intention was to document my journey of creating a game using agile methods. I think I have mostly succeeded in this regard, but at the moment I’ve done some development that I have not documented. Furthermore, I did that development many months ago, so documenting it gets harder and harder because I forget what I was thinking when I did the development.</p>
<p>Recently though, I’ve experimented with a new format which I call <a href="/tags/devlog/index.html">DevLog</a>. It is basically the same thing but a little less polished. I write a DevLog while doing the development, so there is no risk of falling behind. I write about what is going on in my mind as I do the development. Also, I’m not strict about documenting everything in a DevLog. It’s OK to do something and not write about it.</p>
<p>In this post I will briefly mention the development that I’ve done on the balloon shooter but not documented and then talk a little about future plans for this project.</p>
<h2 id="particle-effects">Particle effects</h2>
<p>I polish the game a little by adding a particle effect system that I use to render a splashing animation when a balloon is hit.</p>
<p>It looks a little something like this (although it is hard to show in a single image):</p>
<p>
<center>
<img src="particles.png" title="fig:" alt="Particles when a balloon is hit." />
</center>
</p>
<p>The most interesting piece of code is this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">Balloon</span><span class="p">:</span>

    <span class="o">...</span>

    <span class="k">def</span> <span class="nf">get_hit_particles</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">number_of_particles</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span>
        <span class="k">return</span> <span class="p">[</span>
            <span class="n">BalloonParticle</span><span class="p">(</span>
                <span class="n">position</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">position</span><span class="o">.</span><span class="n">move</span><span class="p">(</span>
                    <span class="n">dx</span><span class="o">=</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">radius</span><span class="p">),</span>
                    <span class="n">dy</span><span class="o">=</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">radius</span><span class="p">)</span>
                <span class="p">),</span>
                <span class="n">radius</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">radius</span><span class="o">*</span><span class="p">(</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">30</span><span class="p">,</span> <span class="mi">70</span><span class="p">)</span><span class="o">/</span><span class="mi">100</span><span class="p">),</span>
                <span class="n">velocity</span><span class="o">=</span><span class="n">Angle</span><span class="o">.</span><span class="n">fraction_of_whole</span><span class="p">(</span><span class="n">random</span><span class="o">.</span><span class="n">random</span><span class="p">())</span><span class="o">.</span><span class="n">to_unit_point</span><span class="p">()</span><span class="o">.</span><span class="n">times</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">speed</span><span class="o">*</span><span class="mi">2</span><span class="p">)</span>
            <span class="p">)</span>
            <span class="k">for</span> <span class="n">x</span>
            <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">number_of_particles</span><span class="p">)</span>
        <span class="p">]</span>
</pre>
</div>
</div>
</div>
<p>It generates a list of particles when a balloon is hit. The particles have a randomized position, radius, and velocity. The radius keeps decreasing as time passes, and when it reaches a low enough value, the particle is removed.</p>
<p>The complete diff for this change can be seen on <a href="https://github.com/rickardlindberg/agdpp/compare/b5261a939505c203cd1ffb21462a6772f0381faf...7533ec079dbdeba713526469535a1cc0fc915449">GitHub</a>.</p>
<h2 id="sound-effects">Sound effects</h2>
<p>Me and my son record sound effects that are played when a balloon is hit. We go to the store, buy some balloons, rig up the mic, and pop them. It is much fun.</p>
<p>The code for integrating the sound can be seen on <a href="https://github.com/rickardlindberg/agdpp/compare/7533ec079dbdeba713526469535a1cc0fc915449...fcb1757f9b219be55d65d8588c259b96b9dc26ce">GitHub</a>.</p>
<p>This change include adding the <code>load_sound</code> method to <code>GameLoop</code>:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">GameLoop</span><span class="p">(</span><span class="n">Observable</span><span class="p">):</span>

    <span class="o">...</span>

    <span class="k">def</span> <span class="nf">load_sound</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">path</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">Sound</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">pygame</span><span class="o">.</span><span class="n">mixer</span><span class="o">.</span><span class="n">Sound</span><span class="p">(</span><span class="n">path</span><span class="p">))</span>
</pre>
</div>
</div>
</div>
<p>Does it really make sense that you load a sound from the game loop? I’m not sure. The game loop is the only abstraction that we have for accessing pygame. That’s why it ended up there. But the design here feels a little off to me. Something to keep in mind for the future. Next time we touch this area of the code, we might feel the same thing again and have an idea about how to improve.</p>
<h2 id="medals">Medals</h2>
<p>When I ask my son what he wants the game to do next, he says that he wants to get a medal for every 100 balloon that you shoot down.</p>
<p>I add a fun little particle effect again for the animation when you get a medal:</p>
<p>
<center>
<img src="medal1.png" title="fig:" alt="Medal animation." />
</center>
</p>
<p>The medals stack up in the upper left corner like this:</p>
<p>
<center>
<img src="medal2.png" title="fig:" alt="Medals stacking up." />
</center>
</p>
<p>The complete diff for this change can be seen on <a href="https://github.com/rickardlindberg/agdpp/compare/fcb1757f9b219be55d65d8588c259b96b9dc26ce...0c8e713a6d938898ddb92164cc86dcb1db19aa0c">GitHub</a>.</p>
<h2 id="test-scene">Test scene</h2>
<p>Testing the medal particle effect is tedious. You have to shoot down 100 balloons, then you can see the effect for a split second, and then you have to shoot down 100 more.</p>
<p>When I have done that enough times, I come up with a better idea. And that is to allow the game to be started in “test mode” where we can trigger the animation with a press of a button.</p>
<p>We can do it like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py rundev test-scene-score
</pre>
</div>
</div>
</div>
<p>Instead of starting the game, it starts a test scene:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&quot;__main__&quot;</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span> <span class="o">==</span> <span class="p">[</span><span class="s2">&quot;test-scene-score&quot;</span><span class="p">]:</span>
        <span class="n">scene</span> <span class="o">=</span> <span class="n">TestSceneScore</span><span class="p">()</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">scene</span> <span class="o">=</span> <span class="kc">None</span>
    <span class="n">BalloonShooter</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">scene</span><span class="p">)</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</pre>
</div>
</div>
</div>
<p>This test scene is only used for test purposes and looks like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">TestSceneScore</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">score</span> <span class="o">=</span> <span class="n">Score</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">event</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">event</span><span class="o">.</span><span class="n">is_user_closed_window</span><span class="p">():</span>
            <span class="k">raise</span> <span class="n">ExitGameLoop</span><span class="p">()</span>
        <span class="k">elif</span> <span class="n">event</span><span class="o">.</span><span class="n">is_keydown</span><span class="p">(</span><span class="n">KEY_SPACE</span><span class="p">):</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">score</span><span class="o">.</span><span class="n">add_points</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">score</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">dt</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">draw</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">loop</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">score</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="n">loop</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>It uses the score object (which is used in the real game) and adds 100 points when we press the space key.</p>
<p>It looks like this:</p>
<p>
<center>
<img src="test-scene.png" title="fig:" alt="Test scene." />
</center>
</p>
<p>This way, I can quickly exercise the animation and validate that it looks good.</p>
<h2 id="future-plans">Future plans</h2>
<p>This project has been inactive for a few months. With my hobby projects, I follow my interest. And my interest has lately been about writing my own <a href="/projects/rlvideo/index.html">video editor</a>. And also, after the medals in place, my son said that the game was finished.</p>
<p>However, right now, I have two ideas that I’m interested in doing. One is trying a decentralized design that <a href="https://www.ronjeffries.com/categories/python/">Ron</a> has been writing about and doing in his Asteroids Python series.</p>
<p>Another is to create a “game console PC” where I customize this game to first show a start screen where the game to play can be selected. One game will be the balloon shooter. Another will be <a href="https://www.supertux.org/">SuperTux</a> (which me and my son have played a lot).</p>
<h2 id="summary">Summary</h2>
<p>This post probably marks the end of this series in the current format. When I continue this project, it will be in the form of a <a href="/tags/devlog/index.html">DevLog</a>. See you there!</p>
]]></description>
    <pubDate>Mon, 21 Aug 2023 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/agdpp-the-end/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>DevLog 011: Modifying cut out point</title>
    <link>http://rickardlindberg.me/writing/devlog-011-modifying-cut-out-point/</link>
    <description><![CDATA[<h1>DevLog 011: Modifying cut out point</h1>

<p><em>Published on  6 August 2023.</em></p>

<p>I’ve added a few more timeline edit operations to the <a href="/projects/rlvideo/index.html">video editor</a>. For example, it is now possible to change the speed of a cut with ctrl+drag on the right hand side and modify the in point with drag on the left hand side.</p>
<p>
<center>
<img src="move-right.png" title="fig:" alt="Move right." />
</center>
</p>
<p>However, changing the out point of a cut by dragging the right hand side does not yet work. It prints the following in the console:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>TODO: implement move_right!
</pre>
</div>
</div>
</div>
<p>It is a bit trickier to get working than changing the in point as we will see in a second.</p>
<h2 id="the-call-chain">The call chain</h2>
<p>Here is roughly what happens when you drag the right hand side of a cut:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="n">transaction</span> <span class="o">=</span> <span class="n">project</span><span class="o">.</span><span class="n">new_transaction</span><span class="p">()</span>
<span class="n">transaction</span><span class="o">.</span><span class="n">modify</span><span class="p">(</span><span class="n">cut_id</span><span class="p">,</span> <span class="k">lambda</span> <span class="n">cut</span><span class="p">:</span> <span class="n">cut</span><span class="o">.</span><span class="n">move_right</span><span class="p">(</span><span class="n">delta</span><span class="p">))</span>
<span class="n">transaction</span><span class="o">.</span><span class="n">commit</span><span class="p">()</span>
</pre>
</div>
</div>
</div>
<p>Here is <code>Transaction.modify</code>:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">modify</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">cut_id</span><span class="p">,</span> <span class="n">fn</span><span class="p">):</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">project</span><span class="o">.</span><span class="n">set_project_data</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">project</span><span class="o">.</span><span class="n">project_data</span><span class="o">.</span><span class="n">modify_cut</span><span class="p">(</span><span class="n">cut_id</span><span class="p">,</span> <span class="n">fn</span><span class="p">))</span>
</pre>
</div>
</div>
</div>
<p>Here is <code>ProjectData.modify_cut</code>:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">modify_cut</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">cut_id</span><span class="p">,</span> <span class="n">fn</span><span class="p">):</span>
    <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_replace</span><span class="p">(</span><span class="n">cuts</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">cuts</span><span class="o">.</span><span class="n">modify</span><span class="p">(</span><span class="n">cut_id</span><span class="p">,</span> <span class="n">fn</span><span class="p">))</span>
</pre>
</div>
</div>
</div>
<p>Here is <code>Cuts.modify</code>:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">modify</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">cut_id</span><span class="p">,</span> <span class="n">fn</span><span class="p">):</span>
    <span class="o">...</span>
    <span class="n">old_cut</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">cut_map</span><span class="p">[</span><span class="n">cut_id</span><span class="p">]</span>
    <span class="n">new_cut</span> <span class="o">=</span> <span class="n">fn</span><span class="p">(</span><span class="n">old_cut</span><span class="p">)</span>
    <span class="n">new_cuts</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">cut_map</span><span class="p">)</span>
    <span class="n">new_cuts</span><span class="p">[</span><span class="n">cut_id</span><span class="p">]</span> <span class="o">=</span> <span class="n">new_cut</span>
    <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_replace</span><span class="p">(</span>
        <span class="n">cut_map</span><span class="o">=</span><span class="n">new_cuts</span><span class="p">,</span>
        <span class="n">region_to_cuts</span><span class="o">=...</span><span class="p">,</span>
    <span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>And it is here that the lambda gets called to modify the cut.</p>
<p>The problem is that when we modify the out point, we can’t place it outside the length of the source. And the cut itself does not know how long the source is. It just has a source id where it can be looked up, but only in the <code>ProjectData</code> structure, which is two levels above.</p>
<h2 id="data-structure-consistency">Data structure consistency</h2>
<p>Let’s have a look at the data structures and what they contain:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">ProjectData</span><span class="p">(</span><span class="n">namedtuple</span><span class="p">(</span><span class="s2">&quot;ProjectData&quot;</span><span class="p">,</span> <span class="s2">&quot;sources,cuts&quot;</span><span class="p">)):</span>
<span class="k">class</span> <span class="nc">Sources</span><span class="p">(</span><span class="n">namedtuple</span><span class="p">(</span><span class="s2">&quot;Sources&quot;</span><span class="p">,</span> <span class="s2">&quot;id_to_source&quot;</span><span class="p">)):</span>
<span class="k">class</span> <span class="nc">FileSource</span><span class="p">(</span><span class="n">namedtuple</span><span class="p">(</span><span class="s2">&quot;FileSource&quot;</span><span class="p">,</span> <span class="s2">&quot;id,path,length&quot;</span><span class="p">)):</span>
<span class="k">class</span> <span class="nc">TextSource</span><span class="p">(</span><span class="n">namedtuple</span><span class="p">(</span><span class="s2">&quot;TextSource&quot;</span><span class="p">,</span> <span class="s2">&quot;id,text&quot;</span><span class="p">)):</span>
<span class="k">class</span> <span class="nc">Cuts</span><span class="p">(</span><span class="n">namedtuple</span><span class="p">(</span><span class="s2">&quot;Cuts&quot;</span><span class="p">,</span> <span class="s2">&quot;cut_map,region_to_cuts,region_group_size&quot;</span><span class="p">)):</span>
<span class="k">class</span> <span class="nc">Cut</span><span class="p">(</span><span class="n">namedtuple</span><span class="p">(</span><span class="s2">&quot;Cut&quot;</span><span class="p">,</span> <span class="s2">&quot;source,in_out,position,id,mix_strategy,volume,speed&quot;</span><span class="p">)):</span>
</pre>
</div>
</div>
</div>
<p>Put in a more hierarchical format:</p>
<ul>
<li>ProjectData
<ul>
<li>sources (Sources)</li>
<li>cuts (Cuts)</li>
</ul></li>
<li>Sources
<ul>
<li>id_to_source (id -&gt; source)</li>
</ul></li>
<li>Source
<ul>
<li>FileSource</li>
<li>TextSource</li>
</ul></li>
<li>Cuts
<ul>
<li>cut_map (id -&gt; Cut)</li>
<li>region_to_cuts</li>
<li>region_group_size</li>
</ul></li>
<li>Cut
<ul>
<li>source (id)</li>
<li>in_out</li>
<li>position</li>
<li>id</li>
<li>mix_strategy</li>
<li>volume</li>
<li>speed</li>
</ul></li>
</ul>
<p>To make sure that a cut’s out point does not exceed the length of the source, we have to make the check in ProjectData since that is the only structure that has both the source information and the cut information.</p>
<h2 id="modify-cut">Modify cut</h2>
<p>Let’s have a look at <code>ProjectData.modify_cut</code> again:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">modify_cut</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">cut_id</span><span class="p">,</span> <span class="n">fn</span><span class="p">):</span>
    <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_replace</span><span class="p">(</span><span class="n">cuts</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">cuts</span><span class="o">.</span><span class="n">modify</span><span class="p">(</span><span class="n">cut_id</span><span class="p">,</span> <span class="n">fn</span><span class="p">))</span>
</pre>
</div>
</div>
</div>
<p>How about if we did something like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">modify_cut</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">cut_id</span><span class="p">,</span> <span class="n">fn</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">wrapper</span><span class="p">(</span><span class="n">cut</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">sources</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">cut</span><span class="o">.</span><span class="n">source</span><span class="p">)</span><span class="o">.</span><span class="n">limit_out_point</span><span class="p">(</span><span class="n">fn</span><span class="p">(</span><span class="n">cut</span><span class="p">))</span>
    <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_replace</span><span class="p">(</span><span class="n">cuts</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">cuts</span><span class="o">.</span><span class="n">modify</span><span class="p">(</span><span class="n">cut_id</span><span class="p">,</span> <span class="n">wrapper</span><span class="p">))</span>
</pre>
</div>
</div>
</div>
<p>That is, we let the original lambda modify the out point beyond the length of the source. Then in the wrapper above we get the source of the clip and have it adjust the out point to not exceed the length.</p>
<p>I think this will actually work.</p>
<h2 id="reflections">Reflections</h2>
<p>When first thinking about this problem I had a much more complicated solution in mind. I was annoyed that the cut itself did not know about the maximum length. I was thinking that <code>Cut.modify</code> somehow has to be passed a length so that it could do the limiting itself.</p>
<p>Then I started writing about it, and I thought that each data structure should be responsible for validating itself. Since a cut has no information about length, it is ok to specify any length. But when a cut is put into a <code>ProjectData</code> and is associated with a source, the validation must happen.</p>
<p>This makes a lot of sense to me, and I feel like a made a breakthrough.</p>
<p>You could argue that the design of the data structure is wrong. Perhaps a cut should have more information about its source so that it can do more validation.</p>
<p>But when it looks as it does, I think this will be fine.</p>
<p>Let’s see if we can test this.</p>
<h2 id="testing-limiting-out-point">Testing limiting out point</h2>
<p>Here is the test that I come up with:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">A cut&#39;s out point is adjusted if going outside the limit:</span>

<span class="sd">&gt;&gt;&gt; data = ProjectData.empty()</span>
<span class="sd">&gt;&gt;&gt; data = data.add_source(FileSource(id=&quot;source_a&quot;, path=&quot;a.mp4&quot;, length=5))</span>
<span class="sd">&gt;&gt;&gt; data = data.add_cut(Cut.test_instance(name=&quot;source_a&quot;, start=0, end=3, id=&quot;cut_a&quot;))</span>
<span class="sd">&gt;&gt;&gt; data = data.modify_cut(&quot;cut_a&quot;, lambda cut: cut.move_right(10))</span>
<span class="sd">&gt;&gt;&gt; data.get_cut(&quot;cut_a&quot;).in_out</span>
<span class="sd">Region(start=0, end=5)</span>
<span class="sd">&quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<p>We create project data with one source and one cut. The source is of length 5 and the cut is of length 3. We can extend it two more frames before we have reached the end of the source.</p>
<p>Then we modify the cut by trying to extend it by 10 frames.</p>
<p>Then we assert that the end point is limited to 5.</p>
<p>This fails with this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>Failed example:
    data = data.modify_cut(&quot;cut_a&quot;, lambda cut: cut.move_right(10))
Differences (ndiff with -expected +actual):
    + TODO: implement move_right!
</pre>
</div>
</div>
</div>
<p>I implement <code>Cut.move_right</code> like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">move_right</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">amount</span><span class="p">):</span>
    <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_replace</span><span class="p">(</span>
        <span class="n">in_out</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">in_out</span><span class="o">.</span><span class="n">move_end</span><span class="p">(</span><span class="n">amount</span><span class="p">),</span>
    <span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>Then we get this failure:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>Failed example:
    data.get_cut(&quot;cut_a&quot;).in_out
Differences (ndiff with -expected +actual):
    - Region(start=0, end=5)
    ?                     ^
    + Region(start=0, end=13)
    ?                     ^^
</pre>
</div>
</div>
</div>
<p>I expected this. We don’t do any limiting yet.</p>
<p>Let’s modify <code>ProjectData.modify_cut</code> to what we had in mind. I write this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">modify_cut</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">cut_id</span><span class="p">,</span> <span class="n">fn</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">wrapper</span><span class="p">(</span><span class="n">cut</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_source</span><span class="p">(</span><span class="n">cut</span><span class="o">.</span><span class="n">source</span><span class="o">.</span><span class="n">source_id</span><span class="p">)</span><span class="o">.</span><span class="n">limit_in_out</span><span class="p">(</span><span class="n">fn</span><span class="p">(</span><span class="n">cut</span><span class="p">))</span>
    <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_replace</span><span class="p">(</span><span class="n">cuts</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">cuts</span><span class="o">.</span><span class="n">modify</span><span class="p">(</span><span class="n">cut_id</span><span class="p">,</span> <span class="n">wrapper</span><span class="p">))</span>
</pre>
</div>
</div>
</div>
<p>We now get this error:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>AttributeError: &#39;TextSource&#39; object has no attribute &#39;limit_in_out&#39;
</pre>
</div>
</div>
</div>
<p>This is also to be expected. Now we need to implement <code>limit_in_out</code> on every type of source. At the moment those are <code>TextSource</code> and <code>FileSource</code>. Let’s see if we have coverage for both. We get a failure for <code>TextSource</code> now, so let’s start there.</p>
<p>A text source does not have a length. It is infinite. So <code>limit_in_out</code> just becomes this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">limit_in_out</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">cut</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">cut</span>
</pre>
</div>
</div>
</div>
<p>Now we get the same error for the file source.</p>
<p>I implement <code>FileSource.limit_in_out</code> like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">limit_in_out</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">cut</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">cut</span><span class="o">.</span><span class="n">limit_out</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">length</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>The test now complains about this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>AttributeError: &#39;Cut&#39; object has no attribute &#39;limit_out&#39;
</pre>
</div>
</div>
</div>
<p>I implement it like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">limit_out</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">max_out</span><span class="p">):</span>
    <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_replace</span><span class="p">(</span><span class="n">in_out</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">in_out</span><span class="o">.</span><span class="n">limit_end</span><span class="p">(</span><span class="n">max_out</span><span class="p">))</span>
</pre>
</div>
</div>
</div>
<p>And <code>Region.limit_end</code> like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>    <span class="k">def</span> <span class="nf">limit_end</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">max_end</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_replace</span><span class="p">(</span><span class="n">end</span><span class="o">=</span><span class="nb">min</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">end</span><span class="p">,</span> <span class="n">max_end</span><span class="p">))</span>
</pre>
</div>
</div>
</div>
<p>And wow, that actually works.</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m &#39;ProjectData.modify_cut ensures that in_out is withing source limit.&#39;
...................................................................
----------------------------------------------------------------------
Ran 67 tests in 3.925s

OK
[main a9eb857] ProjectData.modify_cut ensures that in_out is withing source limit.
 4 files changed, 29 insertions(+), 3 deletions(-)
</pre>
</div>
</div>
</div>
<h2 id="improving-design">Improving design</h2>
<p>Right above <code>modify_cut</code> I see <code>add_cut</code> which also has a TODO:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">add_cut</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">cut</span><span class="p">):</span>
    <span class="c1"># TODO: assert that source id exists (even for json loading)</span>
    <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_replace</span><span class="p">(</span><span class="n">cuts</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">cuts</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">cut</span><span class="p">))</span>
</pre>
</div>
</div>
</div>
<p>Now that we have touched this area of the code, let’s have a closer look if we can make something cleaner with our new insights.</p>
<p>The <code>add_cut</code> could probably also benefit from having the in and out points limited.</p>
<p>However, it is not used by the JSON loading mechanism.</p>
<p>I move the JSON loading part of the comment to here:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="nd">@staticmethod</span>
<span class="k">def</span> <span class="nf">from_json</span><span class="p">(</span><span class="n">json</span><span class="p">):</span>
    <span class="c1"># TODO: validate the cuts point to valid sources and that they have</span>
    <span class="c1"># valid in/out points.</span>
    <span class="k">return</span> <span class="n">ProjectData</span><span class="p">(</span>
        <span class="n">sources</span><span class="o">=</span><span class="n">Sources</span><span class="o">.</span><span class="n">from_json</span><span class="p">(</span><span class="n">json</span><span class="p">[</span><span class="s2">&quot;sources&quot;</span><span class="p">]),</span>
        <span class="n">cuts</span><span class="o">=</span><span class="n">Cuts</span><span class="o">.</span><span class="n">from_json</span><span class="p">(</span><span class="n">json</span><span class="p">[</span><span class="s2">&quot;cuts&quot;</span><span class="p">])</span>
    <span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>I’m not sure that we want to adjust cuts that are invalid. We could remove cuts that don’t have a corresponding source, and we could adjust in and out points of cuts with valid sources. But that would change the project. So a load + save will save something else without the user having done any changes. Unless manually modified, a JSON export should never have these problems. So validation should be ok. But I said <strong>should</strong>. If we make a mistake somewhere, we could export invalid JSON. So a load that fixes bad input it probably a good idea. However, in such cases the user should probably be informed about the changes made and a backup file with the old contents should probably be written. I think this work is for a later time. Not really prioritized now.</p>
<p>Let’s go back to <code>ProjectData.add_cut</code>. It is only used when the user actively adds a cut somehow. At that point the cut does not exists yet, and if we modify the in and out points, there is no obvious change.</p>
<p>Let’s modify it guided by this test:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">In/Out is modified according to source:</span>

<span class="sd">&gt;&gt;&gt; ProjectData.empty(</span>
<span class="sd">... ).add_source(</span>
<span class="sd">...     FileSource(id=&quot;source_a&quot;, path=&quot;a.mp4&quot;, length=5)</span>
<span class="sd">... ).add_cut(</span>
<span class="sd">...     Cut.test_instance(name=&quot;source_a&quot;, start=0, end=10, id=&quot;cut_a&quot;)</span>
<span class="sd">... ).get_cut(&quot;cut_a&quot;).in_out</span>
<span class="sd">Region(start=0, end=5)</span>
<span class="sd">&quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<p>It fails with this message:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>Differences (ndiff with -expected +actual):
    - Region(start=0, end=5)
    ?                     ^
    + Region(start=0, end=10)
    ?                     ^^
</pre>
</div>
</div>
</div>
<p>We fix it in a similar way to before:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_replace</span><span class="p">(</span><span class="n">cuts</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">cuts</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">get_source</span><span class="p">(</span><span class="n">cut</span><span class="o">.</span><span class="n">source</span><span class="o">.</span><span class="n">source_id</span><span class="p">)</span><span class="o">.</span><span class="n">limit_in_out</span><span class="p">(</span><span class="n">cut</span><span class="p">)))</span>
</pre>
</div>
</div>
</div>
<p>That passes all the tests.</p>
<h2 id="speed-issue">Speed issue</h2>
<p>I also noticed an issue with the limiting for cuts that had a changed speed. I modify <code>FileSource.limit_in_out</code> to take speed into account:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">limit_in_out</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">cut</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">    &gt;&gt;&gt; source = FileSource(id=&quot;source_a&quot;, path=&quot;a.mp4&quot;, length=5)</span>

<span class="sd">    &gt;&gt;&gt; source.limit_in_out(Cut.test_instance(start=0, end=10)).in_out</span>
<span class="sd">    Region(start=0, end=5)</span>

<span class="sd">    &gt;&gt;&gt; source.limit_in_out(Cut.test_instance(start=0, end=20, speed=0.5)).in_out</span>
<span class="sd">    Region(start=0, end=10)</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="k">return</span> <span class="n">cut</span><span class="o">.</span><span class="n">limit_out</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">length</span><span class="o">/</span><span class="n">cut</span><span class="o">.</span><span class="n">speed</span><span class="p">))</span>
</pre>
</div>
</div>
</div>
<h2 id="summary">Summary</h2>
<p>We added a feature to the application. It is now possible to move the out point of a cut and it is properly limited to not exceed the length of the underlying source.</p>
<p>I was surprised at how elegant the solution came out. The realisation that made this possible was that validation should happen at the point where all data exists. Each data entity validates itself. If parent attributes are needed for the validation, do the validation higher up the hierarchy.</p>
<p>This also makes me wonder if the limit of in point should also be done by the source. Right now the cut assumes that in point &gt;= 0 is ok. It doesn’t need to know anything about the source. But it makes assumptions about the source. I think this assumption is always correct, but I don’t think it hurts to not assume anything and let the source do the decision.</p>
<p>I will probably try that refactoring out. My suspicion is that the code base will be a little cleaner then.</p>
<p>But not in this session. This is it for now. See you next time!</p>
]]></description>
    <pubDate>Sun, 06 Aug 2023 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/devlog-011-modifying-cut-out-point/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>July 2023 Update</title>
    <link>http://rickardlindberg.me/writing/newsletter/july-2023/</link>
    <description><![CDATA[<h1>July 2023 Update</h1>

<p><em>Published on  5 August 2023.</em></p>

<p>This is what I’ve been up to in July 2023:</p>
<ul>
<li><p>I continued work on my <a href="/projects/rlvideo/index.html">video editor</a>. Here is the initial blog post about it: <a href="/writing/writing-my-own-video-editor/index.html">Writing my own video editor</a>.</p></li>
<li><p>I started writing <a href="/tags/devlog/index.html">DevLogs</a>. DevLogs is an experiment to try to document development that I do on various projects. I will try to write what is going on in my head as I do various development tasks. So far, they have all been about development of the video editor.</p></li>
<li><p>I wrote a blog post called <a href="/writing/fast-feedback-on-graphical-code/index.html">How to get fast feedback on graphical code?</a> I share a technique that I started using while developing the video editor.</p></li>
</ul>
]]></description>
    <pubDate>Sat, 05 Aug 2023 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/newsletter/july-2023/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>DevLog 010: Debugging MLT/GTK segfault</title>
    <link>http://rickardlindberg.me/writing/devlog-010-debugging-mlt-gtk-segfault/</link>
    <description><![CDATA[<h1>DevLog 010: Debugging MLT/GTK segfault</h1>

<p><em>Published on  3 August 2023.</em></p>

<p>I try to edit some footage with my <a href="/projects/rlvideo/index.html">video editor</a>. Actually, it is footage from <a href="/writing/devlog-009-improve-timeline-scrubbing/index.html">DevLog 009</a> that I hope to put together. Everything is going quite well. After I add a split-cut-at-playhead operation to the editor, in addition to the previously added ripple delete, I am actually able to do some useful edits.</p>
<p>However, after a while I notice that a cut does not seem to render the correct frame. I decide to restart the application, and then it happens. Segfault!</p>
<p>This time, the segfault reproduces consistently. I’m excited to debug this and see how we can resolve it. I’ve got my cup of coffee, and I’m ready to go.</p>
<p>
<center>
<img src="coffee.png" title="fig:" alt="Coffee." />
</center>
</p>
<h2 id="gdb-output">GDB output</h2>
<p>Because this is not the first time I see segfaults in this application, I have added a command to run the application in GDB. Here is how to use it:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ~/rlvideo/make.py gdb devlog-009.rlvideo
...
Starting program: /usr/bin/python3 /home/rick/rlvideo/rlvideo.py devlog-009.rlvideo
...
Thread 1 &quot;python3&quot; received signal SIGSEGV, Segmentation fault.
..
(gdb) bt
#0  0x00007ffff7a64474 in pthread_mutex_lock () at /lib64/libpthread.so.0
#1  0x00007fffe96866af in XrmQGetResource () at /lib64/libX11.so.6
#2  0x00007fffe9667fca in XGetDefault () at /lib64/libX11.so.6
#3  0x00007fffe9a5ae8a in _cairo_xlib_surface_get_font_options () at /lib64/libcairo.so.2
...
</pre>
</div>
</div>
</div>
<h2 id="analysis-and-ideas">Analysis and ideas</h2>
<p>The segfault seems to happen inside some Cairo drawing code. That is most likely happening because GTK is trying to show a widget that tries to draw itself. I think GTK calls were further down in the backrace.</p>
<p>I find it very unlikely that this can happen from the Python GTK bindings. My suspicion is that this has something to do with MLT. Why? Because the segfault only happens for some projects.</p>
<p>I know that many MLT calls return status codes that I never check. Perhaps I should.</p>
<p>There is also a way to serialize an MLT producer to an XML file which can then be played with <code>melt</code>. That way we can see if MLT has the same problems as we are having given the same MLT producer.</p>
<p>This might be useful for other types of debugging as well.</p>
<p>Let’s see if we can implement that XML export and see if <code>melt</code> segfaults as well or if that works.</p>
<h2 id="debugging-mlt-producers">Debugging MLT producers</h2>
<p>I add this to the main function:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">if</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="p">[</span><span class="s2">&quot;--export-melt&quot;</span><span class="p">]:</span>
    <span class="n">path</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Exporting </span><span class="si">{</span><span class="n">path</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
    <span class="n">project</span> <span class="o">=</span> <span class="n">Project</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">args</span><span class="o">=</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">3</span><span class="p">:])</span>
    <span class="n">consumer</span> <span class="o">=</span> <span class="n">mlt</span><span class="o">.</span><span class="n">Consumer</span><span class="p">(</span><span class="n">project</span><span class="o">.</span><span class="n">get_preview_profile</span><span class="p">(),</span> <span class="s2">&quot;xml&quot;</span><span class="p">)</span>
    <span class="n">consumer</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;resource&quot;</span><span class="p">,</span> <span class="n">path</span><span class="p">)</span>
    <span class="n">consumer</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">project</span><span class="o">.</span><span class="n">get_preview_mlt_producer</span><span class="p">())</span>
    <span class="n">consumer</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
    <span class="k">while</span> <span class="n">consumer</span><span class="o">.</span><span class="n">is_stopped</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Done&quot;</span><span class="p">)</span>
    <span class="k">return</span>
</pre>
</div>
</div>
</div>
<p>We can run it like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py rundev --export-melt test.xml
Exporting test.xml
Done
</pre>
</div>
</div>
</div>
<p>Then we can feed it to <code>melt</code> like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ mlt-melt test.xml
</pre>
</div>
</div>
</div>
<p>When I do, I get this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>[producer_xml] parse fatal: Input is not proper UTF-8, indicate encoding !
Bytes: 0xC0 0xF3 0x68 0x0E
	row: 3	col: 25
[producer_xml] parse fatal: invalid character in attribute value
...
</pre>
</div>
</div>
</div>
<p>There seems to be an encoding issue. I look at the file and see that the profile description looks weird.</p>
<p>I fix it manually, and then get this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ mlt-melt test.xml
+-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+
|1=-10| |2= -5| |3= -2| |4= -1| |5=  0| |6=  1| |7=  2| |8=  5| |9= 10|
+-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+
+---------------------------------------------------------------------+
|               H = back 1 minute,  L = forward 1 minute              |
|                 h = previous frame,  l = next frame                 |
|           g = start of clip, j = next clip, k = previous clip       |
|                0 = restart, q = quit, space = play                  |
+---------------------------------------------------------------------+
Segmentation fault (core dumped)
</pre>
</div>
</div>
</div>
<p>Hmm. Now I’m not using the project that I had problems with. Now I’m just using the default test project which works fine otherwise.</p>
<p>When I look closer at the profile in the XML file, other things seem off as well. The width and height don’t seem to be correct either. I try to use the project profile instead of the preview profile in the XML export code. This works better. However, the player only shows a couple of frames where there should be more. What is going on?</p>
<p>Then I notice this at the end of the XML file:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>  <span class="nt">&lt;playlist</span> <span class="na">id=</span><span class="s">&quot;playlist0&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;entry</span> <span class="na">producer=</span><span class="s">&quot;playlist1&quot;</span> <span class="na">in=</span><span class="s">&quot;&quot;</span> <span class="na">out=</span><span class="s">&quot;&quot;</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;entry</span> <span class="na">producer=</span><span class="s">&quot;producer4&quot;</span> <span class="na">in=</span><span class="s">&quot;0&quot;</span> <span class="na">out=</span><span class="s">&quot;0&quot;</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;/playlist&gt;</span>
<span class="nt">&lt;/mlt&gt;</span>
</pre>
</div>
</div>
</div>
<p>The first item in the playlist, which is another playlist, seems to lack in and out arguments. If I change to the following, the file plays ok:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>    <span class="nt">&lt;entry</span> <span class="na">producer=</span><span class="s">&quot;playlist1&quot;</span> <span class="na">in=</span><span class="s">&quot;0&quot;</span> <span class="na">out=</span><span class="s">&quot;43&quot;</span><span class="nt">/&gt;</span>
</pre>
</div>
</div>
</div>
<p>I print in and out points for all playlists that we create, and they seem to have valid numbers. Time to dig into the MLT XML export code.</p>
<p>I find this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="kt">char</span> <span class="o">*</span><span class="nf">mlt_properties_get_time</span><span class="p">(</span><span class="n">mlt_properties</span> <span class="n">self</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">,</span> <span class="n">mlt_time_format</span> <span class="n">format</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">mlt_profile</span> <span class="n">profile</span> <span class="o">=</span> <span class="n">mlt_properties_get_data</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="s">&quot;_profile&quot;</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">profile</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">double</span> <span class="n">fps</span> <span class="o">=</span> <span class="n">mlt_profile_fps</span><span class="p">(</span><span class="n">profile</span><span class="p">);</span>
        <span class="n">mlt_property</span> <span class="n">value</span> <span class="o">=</span> <span class="n">mlt_properties_find</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">);</span>
        <span class="n">property_list</span> <span class="o">*</span><span class="n">list</span> <span class="o">=</span> <span class="n">self</span><span class="o">-&gt;</span><span class="n">local</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">value</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="o">?</span> <span class="nb">NULL</span> <span class="o">:</span> <span class="n">mlt_property_get_time</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">format</span><span class="p">,</span> <span class="n">fps</span><span class="p">,</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">locale</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
<span class="p">}</span>
</pre>
</div>
</div>
</div>
<p>The <code>mlt_properties_get_time</code> functions seems to be used in the XML export. And it seems to work only if there is a profile.</p>
<p>My playlists don’t have profiles.</p>
<p>I add it like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="gh">diff --git a/rlvideolib/domain/section.py b/rlvideolib/domain/section.py</span>
<span class="gh">index 4c50d6d..78a0683 100644</span>
<span class="gd">--- a/rlvideolib/domain/section.py</span>
<span class="gi">+++ b/rlvideolib/domain/section.py</span>
<span class="gu">@@ -33,7 +33,7 @@ class Sections:</span>
         return canvas

     def to_mlt_producer(self, profile, cache):
<span class="gd">-        playlist = mlt.Playlist()</span>
<span class="gi">+        playlist = mlt.Playlist(profile)</span>
         for section in self.sections:
             playlist.append(section.to_mlt_producer(profile, cache))
         assert playlist.get_playtime() == self.length
<span class="gu">@@ -71,7 +71,7 @@ class PlaylistSection:</span>
         return canvas

     def to_mlt_producer(self, profile, cache):
<span class="gd">-        playlist = mlt.Playlist()</span>
<span class="gi">+        playlist = mlt.Playlist(profile)</span>
         for part in self.parts:
             part.add_to_mlt_playlist(profile, cache, playlist)
         assert playlist.get_playtime() == self.length
</pre>
</div>
</div>
</div>
<p>Now the export works fine!</p>
<p>Let’s export the XML file for the project that segfaults.</p>
<p>I examine the XML file and notice the same problem for <code>mlt.Tractor</code>. It is also missing in and out arguments. I add profiles to those as well.</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m &#39;Pass profile to mlt.Tractor so that XML export works properly with in/out points.&#39;
...........................................................
----------------------------------------------------------------------
Ran 59 tests in 3.024s

OK
[main a5db808] Pass profile to mlt.Tractor so that XML export works properly with in/out points.
 1 file changed, 1 insertion(+), 1 deletion(-)
</pre>
</div>
</div>
</div>
<p>The export works fine and it plays fine in the <code>melt</code> player.</p>
<p>I think that the fixes we made for the XML export only affects the XML export. But it is nice that we now have the ability to play our projects with <code>melt</code>. I suspect it might come in handy in the future as well.</p>
<p>So there doesn’t seem to be anything wrong with the producer that we create. Melt can play it just fine. That is good news, I guess, but what to do next?</p>
<h2 id="weird-cuts">Weird cuts</h2>
<p>I mentioned in the beginning that the reason that I restarted the application was that I thought a cut rendered the wrong frame.</p>
<p>I see this problem when playing the XML file with melt as well.</p>
<p>This is most likely something wrong in our code. However, it doesn’t seem to contribute to the segfault.</p>
<p>I add a TODO in the code in a place where I think the problem is. Let’s deal with that later. We are on the hunt for segfault reasons now.</p>
<h2 id="more-ideas">More ideas</h2>
<p>We have concluded that the producer that we create is probably fine.</p>
<p>My suspicion is that there is something in the combination of MLT and GTK that causes the segfault. MLT and GTK are running in the same process, so it might be possible that they interfere with each other somehow. The backtrace got segfaulted inside the pthread library. So perhaps this is also timing related.</p>
<p>Let’s try a few things out.</p>
<h2 id="removing-the-player">Removing the player</h2>
<p>The thing that connects MLT and GTK is the player. We start an MLT SDL consumer and have it display it’s output in a GTK window.</p>
<p>I try to remove the player like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="c1">#mlt_player = MltPlayer(self.project, preview.get_window().get_xid())</span>
<span class="k">class</span> <span class="nc">MockPlayer</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">position</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="mi">0</span>
<span class="n">mlt_player</span> <span class="o">=</span> <span class="n">MockPlayer</span><span class="p">()</span>
</pre>
</div>
</div>
</div>
<p>And now the application starts!</p>
<p>But of course it doesn’t work properly.</p>
<p>However, it tells me that there is something about this combination that causes the segfault.</p>
<h2 id="timing">Timing</h2>
<p>I then try this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="gh">diff --git a/rlvideolib/gui/gtk.py b/rlvideolib/gui/gtk.py</span>
<span class="gh">index cb13bef..3feaf87 100644</span>
<span class="gd">--- a/rlvideolib/gui/gtk.py</span>
<span class="gi">+++ b/rlvideolib/gui/gtk.py</span>
<span class="gu">@@ -160,6 +160,9 @@ class MltPlayer:</span>
         # TODO: figure out why SDL consumer seems to produce brighter images (black -&gt; grey)
         self.project = project
         os.putenv(&quot;SDL_WINDOWID&quot;, str(window_id))
<span class="gi">+        GLib.idle_add(self.init_player)</span>
<span class="gi">+</span>
<span class="gi">+    def init_player(self):</span>
         self.consumer = mlt.Consumer(self.project.get_preview_profile(), &quot;sdl&quot;)
         self.consumer.start()
         self.producer = None
</pre>
</div>
</div>
</div>
<p>That is, I create the MLT consumer a little later, once GTK has had time to start up a bit more.</p>
<p>And wow, this actually works!</p>
<p>I though about this idea because I had come across this comment in the <a href="https://github.com/jliljebl/flowblade">Flowblade</a> source code:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="c1"># SDL 2 consumer needs to created after Gtk.main() has run enough for window to be visible</span>
<span class="c1">#if editorstate.get_sdl_version() == editorstate.SDL_2: # needs more state consideration still</span>
<span class="c1">#    print &quot;SDL2 timeout launch&quot;</span>
<span class="c1">#    global sdl2_timeout_id</span>
<span class="c1">#    sdl2_timeout_id = GLib.timeout_add(1500, create_sdl_2_consumer)</span>
</pre>
</div>
</div>
</div>
<p>The comment was for SDL2, and we are using SDL1, but I thought it was worth a try anyway.</p>
<p>Here is one reason that I think it is valuable documenting my work. I was able to get an idea from Flowblade. From a comment written in the source code. That was valuable to me. Maybe others will find similar value in what I write about. Maybe.</p>
<h2 id="solution-too-soon">Solution too soon?</h2>
<p>I try the <code>idle_add</code> solution a couple of times, and it seems like I was too fast to declare victory. It seems like it still segfaults sometimes.</p>
<p>Then I try to take the SDL consumer out of the picture by replacing it with this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">DummyConsumer</span><span class="p">:</span>

    <span class="k">def</span> <span class="nf">disconnect_all_producers</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Dummy disconnect&quot;</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">connect</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">producer</span><span class="p">):</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Dummy connect&quot;</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>And it still segfaults sometimes.</p>
<h2 id="delay-all-mlt-operations">Delay all MLT operations</h2>
<p>I’m thinking that we need to delay all MLT operations until GTK is properly initialized.</p>
<p>I try to get this to work, but I don’t manage. The code is too tangled together.</p>
<p>Many hours pass, and I don’t seem to be making any progress.</p>
<h2 id="overlap">Overlap</h2>
<p>I’m thinking that this segfault might have to do with the bug I talked about in the beginning about the wrong frame being rendered.</p>
<p>I find the problem in the code, write a test that exposes the bug, and then fix it.</p>
<p>That was good, but it did not resolve the segfault.</p>
<p>I keep scratching my head, thinking of things to try. Hours pass. Then I have a breakthrough.</p>
<h2 id="breakthrough">Breakthrough</h2>
<p>But some lucky guess, I find out that the segfault only happens when we have overlapping clips in our project. I decide to comment out transitions (the code that merges multiple, overlapping frames together), and suddenly, the reproducible segfault goes away. The problem seems to be with the <code>qtblend</code> transition. There is another one called <code>frei0r.cairoblend</code> which works as well for our purposes. I switch to that one and write this comment in the code about it.</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="c1"># &#39;qtblend&#39; that was first used first seems to give problems</span>
<span class="c1"># when used in a GTK context. The application segfaults when</span>
<span class="c1"># started.</span>
<span class="c1">#</span>
<span class="c1"># Steps to reproduce:</span>
<span class="c1">#</span>
<span class="c1"># 1. ./make.py rundev foo.rlvideo resources/*mp4</span>
<span class="c1">#</span>
<span class="c1"># 2. Move a cut so that there is a overlap somewhere</span>
<span class="c1">#</span>
<span class="c1"># 3. ./make.py rundev foo.rlvideo</span>
<span class="c1">#</span>
<span class="c1"># Boom! Stacktrace:</span>
<span class="c1">#</span>
<span class="c1">#     (gdb) bt</span>
<span class="c1">#     #0  0x00007ffff7a64474 in pthread_mutex_lock () at /lib64/libpthread.so.0</span>
<span class="c1">#     #1  0x00007fffe96866af in XrmQGetResource () at /lib64/libX11.so.6</span>
<span class="c1">#     #2  0x00007fffe9667fca in XGetDefault () at /lib64/libX11.so.6</span>
<span class="c1">#     #3  0x00007fffe9a5ae8a in _cairo_xlib_surface_get_font_options () at /lib64/libcairo.so.2</span>
<span class="c1">#     ...</span>
<span class="c1">#</span>
<span class="c1"># frei0r.cairoblend seems to work better.</span>
<span class="c1">#</span>
<span class="c1"># TODO: How to fix this problem? Is qtblend just incompatible?</span>
</pre>
</div>
</div>
</div>
<h2 id="summary">Summary</h2>
<p>I am extremely satisfied that we found the reason for the segfault and were able to fix it.</p>
<p>In the process we also found a couple of other bugs that we fixed and added the XML export for easier debugging.</p>
<p>After fixing the segfault I continue to edit. Unfortunately, I get other segfaults now. This time not reproducible, but more random. I conclude that I must learn better the internals of MLT to figure out what I’m doing wrong in the Python code. And after the things I learned from this session, I’m more prepared.</p>
]]></description>
    <pubDate>Thu, 03 Aug 2023 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/devlog-010-debugging-mlt-gtk-segfault/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>DevLog 009: Improve timeline scrubbing</title>
    <link>http://rickardlindberg.me/writing/devlog-009-improve-timeline-scrubbing/</link>
    <description><![CDATA[<h1>DevLog 009: Improve timeline scrubbing</h1>

<p><em>Published on  3 August 2023.</em></p>

<p>As a try to edit some footage with my <a href="/projects/rlvideo/index.html">video editor</a>, I get annoyed by a timeline scrubbing issue.</p>
<p>Scrubbing the timeline means clicking and dragging the playhead and then the frame at that position will play. This works fine today if you click and drag, but if you only click, nothing happens:</p>
<p>
<center>
<img src="scrub-problem.png" title="fig:" alt="Scrub problem." />
</center>
</p>
<p>Sometimes I just want to place the playhead at a certain position. And then I just want to click.</p>
<p>That’s what we’ll work on fixing today.</p>
<h2 id="reviewing-the-scrub-action">Reviewing the scrub action</h2>
<p>Here is the scrub action:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">ScrubAction</span><span class="p">(</span><span class="n">Action</span><span class="p">):</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">player</span><span class="p">,</span> <span class="n">scrollbar</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">player</span> <span class="o">=</span> <span class="n">player</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">scrollbar</span> <span class="o">=</span> <span class="n">scrollbar</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">mouse_up</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">left_mouse_down</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">x</span>

    <span class="k">def</span> <span class="nf">mouse_up</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="kc">None</span>

    <span class="k">def</span> <span class="nf">mouse_move</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">x</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">player</span><span class="o">.</span><span class="n">scrub</span><span class="p">(</span>
                <span class="nb">int</span><span class="p">(</span><span class="nb">round</span><span class="p">(</span>
                    <span class="bp">self</span><span class="o">.</span><span class="n">scrollbar</span><span class="o">.</span><span class="n">content_start</span>
                    <span class="o">+</span>
                    <span class="n">x</span><span class="o">/</span><span class="bp">self</span><span class="o">.</span><span class="n">scrollbar</span><span class="o">.</span><span class="n">one_length_in_pixels</span>
                <span class="p">))</span>
            <span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>We can see that the scrubbing is happening only when we move the mouse, not if we just left click.</p>
<p>The solution seems obvious: make sure to scrub on the click as well.</p>
<p>Let’s see how we can move slowly and carefully and pay attention to design as we go along. Let’s start with a test.</p>
<h2 id="testing-new-functionality">Testing new functionality</h2>
<p>This is the test that I come up with:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">I scrub the player when clicked:</span>

<span class="sd">&gt;&gt;&gt; class MockPlayer:</span>
<span class="sd">...     def scrub(self, position):</span>
<span class="sd">...         print(f&quot;scrub {position}&quot;)</span>
<span class="sd">&gt;&gt;&gt; class MockScrollbar:</span>
<span class="sd">...     content_start = 0</span>
<span class="sd">...     one_length_in_pixels = 1</span>
<span class="sd">&gt;&gt;&gt; action = ScrubAction(player=MockPlayer(), scrollbar=MockScrollbar())</span>
<span class="sd">&gt;&gt;&gt; action.simulate_click(x=10)</span>
<span class="sd">scrub 10</span>
<span class="sd">&quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<p>The <code>left_mouse_down</code> currently takes both the x and y coordinates. In this test, we only care about the x coordinate. That’s why I introduced <code>Action.simulate_click</code>. The idea is that it should simulate the calls that GTK does when a left click happens. My idea is to extend this further with something like <code>Action.simulate_drag</code> which will fire <code>left_mouse_down</code>, <code>mouse_move</code>, and <code>mouse_up</code> in the same way that GTK would do it.</p>
<p>I implement it like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">simulate_click</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">left_mouse_down</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="n">y</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>To make the test pass, I call <code>self.player.scrub</code> in the <code>left_mouse_down</code> event as well. I extract it to a common method to remove the duplication.</p>
<p>This passes the tests, and when I try it in the application, it works as intended.</p>
<p>Are we done?</p>
<h2 id="a-concern">A concern</h2>
<p>Let’s take a moment to think about some design issues.</p>
<p>One thing that worry me is that <code>Action.simulate_click</code> does not actually simulate clicks in the right way. That is, when we hook this up with GTK, the same kinds of events will not be generated.</p>
<p>Let’s have a look at how it works today.</p>
<p>Here is how <code>*_mouse_down</code> is handled:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="n">timeline</span> <span class="o">=</span> <span class="n">Gtk</span><span class="o">.</span><span class="n">DrawingArea</span><span class="p">()</span>
<span class="n">timeline</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s2">&quot;button-press-event&quot;</span><span class="p">,</span> <span class="n">timeline_button</span><span class="p">)</span>
<span class="n">timeline</span><span class="o">.</span><span class="n">add_events</span><span class="p">(</span>
    <span class="n">timeline</span><span class="o">.</span><span class="n">get_events</span><span class="p">()</span> <span class="o">|</span>
    <span class="n">Gdk</span><span class="o">.</span><span class="n">EventMask</span><span class="o">.</span><span class="n">SCROLL_MASK</span> <span class="o">|</span>
    <span class="n">Gdk</span><span class="o">.</span><span class="n">EventMask</span><span class="o">.</span><span class="n">BUTTON_PRESS_MASK</span> <span class="o">|</span>
    <span class="n">Gdk</span><span class="o">.</span><span class="n">EventMask</span><span class="o">.</span><span class="n">BUTTON_RELEASE_MASK</span> <span class="o">|</span>
    <span class="n">Gdk</span><span class="o">.</span><span class="n">EventMask</span><span class="o">.</span><span class="n">POINTER_MOTION_MASK</span>
<span class="p">)</span>
<span class="k">def</span> <span class="nf">timeline_button</span><span class="p">(</span><span class="n">widget</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>
    <span class="c1"># TODO: clarify what translate_coordinates do</span>
    <span class="k">if</span> <span class="n">event</span><span class="o">.</span><span class="n">button</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">timeline</span><span class="o">.</span><span class="n">left_mouse_down</span><span class="p">(</span><span class="o">*</span><span class="n">timeline</span><span class="o">.</span><span class="n">translate_coordinates</span><span class="p">(</span>
            <span class="n">main_window</span><span class="p">,</span>
            <span class="n">event</span><span class="o">.</span><span class="n">x</span><span class="p">,</span>
            <span class="n">event</span><span class="o">.</span><span class="n">y</span>
        <span class="p">))</span>
    <span class="k">elif</span> <span class="n">event</span><span class="o">.</span><span class="n">button</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">timeline</span><span class="o">.</span><span class="n">right_mouse_down</span><span class="p">(</span><span class="o">*</span><span class="n">timeline</span><span class="o">.</span><span class="n">translate_coordinates</span><span class="p">(</span>
            <span class="n">main_window</span><span class="p">,</span>
            <span class="n">event</span><span class="o">.</span><span class="n">x</span><span class="p">,</span>
            <span class="n">event</span><span class="o">.</span><span class="n">y</span>
        <span class="p">),</span> <span class="n">GtkGui</span><span class="p">(</span><span class="n">event</span><span class="p">))</span>
</pre>
</div>
</div>
</div>
<p>This code exists in a method which has a bunch of other GTK setup code and is quite long.</p>
<p>Let’s see if we can extract a GTK widget that has all the mechanisms for custom drawing and event handling.</p>
<p>I slowly start to extract pieces, and eventually end up with this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">CustomDrawWidget</span><span class="p">(</span><span class="n">Gtk</span><span class="o">.</span><span class="n">DrawingArea</span><span class="p">):</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">main_window</span><span class="p">,</span> <span class="n">custom_draw_handler</span><span class="p">):</span>
        <span class="n">Gtk</span><span class="o">.</span><span class="n">DrawingArea</span><span class="o">.</span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">add_events</span><span class="p">(</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">get_events</span><span class="p">()</span> <span class="o">|</span>
            <span class="n">Gdk</span><span class="o">.</span><span class="n">EventMask</span><span class="o">.</span><span class="n">SCROLL_MASK</span> <span class="o">|</span>
            <span class="n">Gdk</span><span class="o">.</span><span class="n">EventMask</span><span class="o">.</span><span class="n">BUTTON_PRESS_MASK</span> <span class="o">|</span>
            <span class="n">Gdk</span><span class="o">.</span><span class="n">EventMask</span><span class="o">.</span><span class="n">BUTTON_RELEASE_MASK</span> <span class="o">|</span>
            <span class="n">Gdk</span><span class="o">.</span><span class="n">EventMask</span><span class="o">.</span><span class="n">POINTER_MOTION_MASK</span>
        <span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s2">&quot;draw&quot;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">on_draw</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s2">&quot;button-press-event&quot;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">on_button_press_event</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s2">&quot;button-release-event&quot;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">on_button_release_event</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s2">&quot;motion-notify-event&quot;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">on_motion_notify_event</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">rectangle_map</span> <span class="o">=</span> <span class="n">RectangleMap</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">custom_draw_handler</span> <span class="o">=</span> <span class="n">custom_draw_handler</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">down_action</span> <span class="o">=</span> <span class="kc">None</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">main_window</span> <span class="o">=</span> <span class="n">main_window</span>

    <span class="k">def</span> <span class="nf">on_draw</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">widget</span><span class="p">,</span> <span class="n">context</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">rectangle_map</span><span class="o">.</span><span class="n">clear</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">custom_draw_handler</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">rectangle_map</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">on_button_press_event</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">widget</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>
        <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_coordinates_relative_self</span><span class="p">(</span><span class="n">event</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">event</span><span class="o">.</span><span class="n">button</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">down_action</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">rectangle_map</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">Action</span><span class="p">())</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">down_action</span><span class="o">.</span><span class="n">left_mouse_down</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">event</span><span class="o">.</span><span class="n">button</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">down_action</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">rectangle_map</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">Action</span><span class="p">())</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">down_action</span><span class="o">.</span><span class="n">right_mouse_down</span><span class="p">(</span><span class="n">GtkGui</span><span class="p">(</span><span class="n">event</span><span class="p">))</span>

    <span class="k">def</span> <span class="nf">on_motion_notify_event</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">widget</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>
        <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_coordinates_relative_self</span><span class="p">(</span><span class="n">event</span><span class="p">)</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">down_action</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">down_action</span><span class="o">.</span><span class="n">mouse_move</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">rectangle_map</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">Action</span><span class="p">())</span><span class="o">.</span><span class="n">mouse_move</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">on_button_release_event</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">widget</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">down_action</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">down_action</span><span class="o">.</span><span class="n">mouse_up</span><span class="p">()</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">down_action</span> <span class="o">=</span> <span class="kc">None</span>

    <span class="k">def</span> <span class="nf">get_coordinates_relative_self</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">translate_coordinates</span><span class="p">(</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">main_window</span><span class="p">,</span>
            <span class="n">event</span><span class="o">.</span><span class="n">x</span><span class="p">,</span>
            <span class="n">event</span><span class="o">.</span><span class="n">y</span>
        <span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>The timeline is then created like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="n">timeline</span> <span class="o">=</span> <span class="n">CustomDrawWidget</span><span class="p">(</span>
    <span class="n">main_window</span><span class="o">=</span><span class="n">main_window</span><span class="p">,</span>
    <span class="n">custom_draw_handler</span><span class="o">=</span><span class="n">timeline_draw</span><span class="p">,</span>
<span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>This part of the code base does not have many tests. I therefore moved slowly and tested my changes manually after each small step.</p>
<p>Let’s discuss some aspects of this and what we have done:</p>
<ul>
<li><p>The <code>CustomDrawWidget</code> now owns the rectangle map. (The timeline gets a reference to it, but there it only one instance, and it is created by <code>CustomDrawWidget</code>.)</p></li>
<li><p>The <code>CustomDrawWidget</code> can handle clearing of the rectangle map on redraw, something that the timeline previously did.</p></li>
<li><p>The <code>CustomDrawWidget</code> can handle mouse events and take the appropriate action by using the rectangle map.</p></li>
<li><p>The timeline widget no longer knows about mouse events. It just has a rectangle map that it can fill with actions to be performed.</p></li>
</ul>
<p>When I look at this, I feel like there are so many more things to improve. However, I will practice stopping here and think that I made a bit of improvement.</p>
<p>We can now see a bit more clearly the connection between GTK events, the rectangle map, and what methods are called on the action. And, if we need a second component that does custom drawing and handles events with a rectangle map, we can re-use <code>CustomDrawWidget</code> and do not need to duplicate as much.</p>
<h2 id="summary">Summary</h2>
<p>We improved the application a tiny bit by allowing click on the timeline to position the playhead. We also cleaned up the code base in the area we touched. It now reflects a little better the ideas that we have about the code. I’m happy with this progress.</p>
]]></description>
    <pubDate>Thu, 03 Aug 2023 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/devlog-009-improve-timeline-scrubbing/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>DevLog 008: How to overcome lack of motivation?</title>
    <link>http://rickardlindberg.me/writing/devlog-008-how-to-overcome-lack-of-motivation/</link>
    <description><![CDATA[<h1>DevLog 008: How to overcome lack of motivation?</h1>

<p><em>Published on  2 August 2023.</em></p>

<p>As I sit down this morning to continue work on my <a href="/projects/rlvideo/index.html">video editor</a>, I don’t feel motivated at all. I browse some code that I worked on yesterday, see problems with it, but can’t really see how to improve it. Everything feels complicated, and I don’t feel like programming at all.</p>
<p>What to do?</p>
<p>Well, this is just a hobby project of mine. I could just do something else today. But let’s pretend that it’s not. After all, I still have a desire to make progress on this project.</p>
<h2 id="options">Options</h2>
<p>Generally speaking, I can make two types of changes to the code:</p>
<ul>
<li>Refactoring to improve the design.</li>
<li>Adding a feature to improve the product.</li>
</ul>
<p>Yesterday, I spent most of the day refactoring and designing. I still feel that the design needs improvements in the area that I worked on, but I find that extra hard to motivate myself to work on today.</p>
<p>And perhaps that is also the wrong thing to do? Yesterday I improved the design a little to the point where fixing an actual problem was easier. Shouldn’t that be enough?</p>
<p>If we keep improving a little bit for every feature we work on, we never have to exclusively work on refactoring.</p>
<p>When I write that, it makes sense to me. I should practice feeling content with having made some improvements. I should practice not striving for perfection.</p>
<h2 id="how-to-improve-the-product">How to improve the product?</h2>
<p>So how can we improve the product? What is something that we can add that makes it easier, more pleasant, or more efficient for me to edit footage?</p>
<p>Yesterday I was annoyed by proxy clip loading time. I am still annoyed by that, but I have a feeling it will be a little difficult to fix. And I don’t feel up for it this morning.</p>
<p>Is there something easier that we can work on?</p>
<p>Yes, there is!</p>
<p>One common thing that happens when I shoot is that some clips turn out to be complete garbage. I might have pressed the record button by mistake or I might have an out of focus shot. In those cases I just want to discard the clip.</p>
<p>Say that clip <code>C0015.MP4</code> below is out of focus.</p>
<p>
<center>
<img src="discard.png" title="fig:" alt="Out of focus clip that I want to discard." />
</center>
</p>
<p>I want to open up the context menu for that cut and choose “ripple delete”. It should remove that cut from the timeline and move all cuts to the right of it left to fill up the space.</p>
<p>If we add this feature, I can actually start editing some footage. Because that is how I usually edit videos. I drop all clips on the timeline and then I cut things apart and make it shorter. With this new feature, I still can’t make any cuts, but I can discard clips.</p>
<h2 id="clips-and-cuts-again">Clips and cuts again</h2>
<p>I keep mixing the words clip and cut. A clip means a file on disk. When a clip is added to the timeline, a cut is created that spans the whole region of the clip. So in the beginning, the clip and the cut is of equal length. However, the cut can change in and out points of the clip, making it shorter.</p>
<h2 id="approach">Approach</h2>
<p>I will try to go slowly when working on this feature and pay attention to the design as I go along.</p>
<p>I will try to make small refactorings to improve the design along the way, but the focus will still be to implement this feature.</p>
<p>Let’s get started.</p>
<h2 id="starting-point">Starting point</h2>
<p>Let’s start with the context menu for a cut.</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">CutAction</span><span class="p">(</span><span class="n">Action</span><span class="p">):</span>

    <span class="o">...</span>

    <span class="k">def</span> <span class="nf">right_mouse_down</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">gui</span><span class="p">):</span>
        <span class="k">def</span> <span class="nf">mix_strategy_updater</span><span class="p">(</span><span class="n">value</span><span class="p">):</span>
            <span class="k">def</span> <span class="nf">update</span><span class="p">():</span>
                <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">project</span><span class="o">.</span><span class="n">new_transaction</span><span class="p">()</span> <span class="k">as</span> <span class="n">transaction</span><span class="p">:</span>
                    <span class="n">transaction</span><span class="o">.</span><span class="n">modify</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">cut</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="k">lambda</span> <span class="n">cut</span><span class="p">:</span>
                        <span class="n">cut</span><span class="o">.</span><span class="n">with_mix_strategy</span><span class="p">(</span><span class="n">value</span><span class="p">))</span>
            <span class="k">return</span> <span class="n">update</span>
        <span class="n">gui</span><span class="o">.</span><span class="n">show_context_menu</span><span class="p">([</span>
            <span class="n">MenuItem</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="s2">&quot;over&quot;</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="n">mix_strategy_updater</span><span class="p">(</span><span class="s2">&quot;over&quot;</span><span class="p">)),</span>
            <span class="n">MenuItem</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="s2">&quot;under&quot;</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="n">mix_strategy_updater</span><span class="p">(</span><span class="s2">&quot;under&quot;</span><span class="p">)),</span>
        <span class="p">])</span>
</pre>
</div>
</div>
</div>
<p>Aha, we are back to the <code>CutAction</code> that we worked on in the previous DevLog. This is an opportunity to make design improvements to it while still focusing on the new ripple delete feature.</p>
<p>Making design improvements is always easier when we have tests, and it is many times my preferred way of adding new functionality. So let’s start there. This is what I come up with:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">I show a menu item for ripple delete:</span>

<span class="sd">&gt;&gt;&gt; project = None</span>
<span class="sd">&gt;&gt;&gt; cut = None</span>
<span class="sd">&gt;&gt;&gt; scrollbar = None</span>
<span class="sd">&gt;&gt;&gt; action = CutAction(project, cut, scrollbar)</span>
<span class="sd">&gt;&gt;&gt; gui = TestGui()</span>
<span class="sd">&gt;&gt;&gt; action.right_mouse_down(x=None, y=None, gui=gui)</span>
<span class="sd">&gt;&gt;&gt; gui.print_context_menu_items()</span>
<span class="sd">over</span>
<span class="sd">under</span>
<span class="sd">ripple delete</span>
<span class="sd">&quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<p>At this point, I just want to assert that we have a ripple delete menu item.</p>
<p>I null out any parameters that are not used.</p>
<p>To make this test run, I also have to extend <code>TestGui</code> with <code>print_context_menu_items</code>:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="gh">diff --git a/rlvideolib/gui/testing.py b/rlvideolib/gui/testing.py</span>
<span class="gh">index aaba74d..0df0dda 100644</span>
<span class="gd">--- a/rlvideolib/gui/testing.py</span>
<span class="gi">+++ b/rlvideolib/gui/testing.py</span>
<span class="gu">@@ -4,7 +4,12 @@ class TestGui:</span>
         self.click_context_menu = click_context_menu

     def show_context_menu(self, menu):
<span class="gi">+        self.last_context_menu = menu</span>
         for item in menu:
             if item.label == self.click_context_menu:
                 item.action()
                 return
<span class="gi">+</span>
<span class="gi">+    def print_context_menu_items(self):</span>
<span class="gi">+        for item in self.last_context_menu:</span>
<span class="gi">+            print(item.label)</span>
</pre>
</div>
</div>
</div>
<p>Let’s make it pass:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="gu">@@ -290,6 +305,7 @@ class CutAction(Action):</span>
         gui.show_context_menu([
             MenuItem(label=&quot;over&quot;, action=mix_strategy_updater(&quot;over&quot;)),
             MenuItem(label=&quot;under&quot;, action=mix_strategy_updater(&quot;under&quot;)),
<span class="gi">+            MenuItem(label=&quot;ripple delete&quot;, action=lambda: None),</span>
         ])

     def mouse_up(self):
</pre>
</div>
</div>
</div>
<p>Just enough to make the test pass. We now have a context menu item that will do nothing when we click on it.</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m &#39;New ripple delete context menu item that does nothing.&#39;
.....................................................
----------------------------------------------------------------------
Ran 53 tests in 2.893s

OK
[main 2659383] New ripple delete context menu item that does nothing.
 2 files changed, 21 insertions(+)
</pre>
</div>
</div>
</div>
<h2 id="moving-slowly">Moving slowly</h2>
<p>The <code>TestGui</code> that we had to modify for this test lives in the <code>rlvideolib.gui.testing</code> module. The <code>rlvideolib.gui</code> package looks like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>rlvideolib/gui
├── framework.py
├── generic.py
├── gtk.py
├── __init__.py
└── testing.py
</pre>
</div>
</div>
</div>
<p>We recently extracted the framework module. It contains framework related GUI code that does not depend on GTK and does not depend on our application. It makes sense for a framework to include facilities to help testing, right?</p>
<p>Let’s get rid of the testing module and move its contents to the framework module.</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m &#39;Move TestGui to rlvideolib.gui.framework and get rid of the testing module.&#39;
.....................................................
----------------------------------------------------------------------
Ran 53 tests in 2.896s

OK
[main 3ea95fc] Move TestGui to rlvideolib.gui.framework and get rid of the testing module.
 4 files changed, 21 insertions(+), 3 deletions(-)
 rename rlvideolib/gui/{testing.py =&gt; framework.py} (58%)
</pre>
</div>
</div>
</div>
<p>We have made small progress towards the ripple delete feature and made the code base a little cleaner by indicating that test helpers are part of the GUI framework. Nice!</p>
<p>I feel much more motivated now than when I got started. But before I move on, I will take a break and have some breakfast.</p>
<h2 id="back-to-the-test">Back to the test</h2>
<p>Let’s go back to the test. This is what we have:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">&gt;&gt;&gt; project = None</span>
<span class="sd">&gt;&gt;&gt; cut = None</span>
<span class="sd">&gt;&gt;&gt; scrollbar = None</span>
<span class="sd">&gt;&gt;&gt; action = CutAction(project, cut, scrollbar)</span>
<span class="sd">&gt;&gt;&gt; gui = TestGui()</span>
<span class="sd">&gt;&gt;&gt; action.right_mouse_down(x=None, y=None, gui=gui)</span>
<span class="sd">&gt;&gt;&gt; gui.print_context_menu_items()</span>
<span class="sd">over</span>
<span class="sd">under</span>
<span class="sd">ripple delete</span>
<span class="sd">&quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<p>That feels like a lot of set up to me. And many of the parameters are <code>None</code>.</p>
<p>I take a closer look at the x and y coordinates. As far as I can tell, no action is using those in the <code>right_mouse_down</code> method. Let’s get rid of them.</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m &#39;Get rid of x and y coordinates in Action.right_mouse_down since they are never used.&#39;
.....................................................
----------------------------------------------------------------------
Ran 53 tests in 3.403s

OK
[main 2c4c80e] Get rid of x and y coordinates in Action.right_mouse_down since they are never used.
 3 files changed, 4 insertions(+), 4 deletions(-)
</pre>
</div>
</div>
</div>
<p>Let’s further refactor the test to this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">I show cut menu items on right click:</span>

<span class="sd">&gt;&gt;&gt; gui = TestGui()</span>
<span class="sd">&gt;&gt;&gt; action = CutAction(project=None, cut=None, scrollbar=None)</span>
<span class="sd">&gt;&gt;&gt; action.right_mouse_down(gui=gui)</span>
<span class="sd">&gt;&gt;&gt; gui.print_context_menu_items()</span>
<span class="sd">over</span>
<span class="sd">under</span>
<span class="sd">ripple delete</span>
<span class="sd">&quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<p>This indicates that the showing of the menu does not depend on the project, cut, or scrollbar. I think that it reads quite nicely.</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m &#39;Change cut action test to be assertion for menu items shown.&#39;
.....................................................
----------------------------------------------------------------------
Ran 53 tests in 3.411s

OK
[main 1708e0c] Change cut action test to be assertion for menu items shown.
 1 file changed, 2 insertions(+), 5 deletions(-)
</pre>
</div>
</div>
</div>
<p>Now we need a new test for clicking the ripple delete menu item.</p>
<h2 id="ripple-delete-test">Ripple delete test</h2>
<p>I write this test:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">I ripple delete:</span>

<span class="sd">&gt;&gt;&gt; gui = TestGui(click_context_menu=&quot;ripple delete&quot;)</span>
<span class="sd">&gt;&gt;&gt; action = CutAction(project=None, cut=None, scrollbar=None)</span>
<span class="sd">&gt;&gt;&gt; action.right_mouse_down(gui=gui)</span>
<span class="sd">do ripple delete</span>
<span class="sd">&quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<p>That is, I assert that “do ripple delete” is printed when we press that menu item. Baby steps.</p>
<p>I make it pass like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="gu">@@ -299,10 +306,12 @@ class CutAction(Action):</span>
                     transaction.modify(self.cut.id, lambda cut:
                         cut.with_mix_strategy(value))
             return update
<span class="gi">+        def ripple_delete():</span>
<span class="gi">+            print(&quot;do ripple delete&quot;)</span>
         gui.show_context_menu([
             MenuItem(label=&quot;over&quot;, action=mix_strategy_updater(&quot;over&quot;)),
             MenuItem(label=&quot;under&quot;, action=mix_strategy_updater(&quot;under&quot;)),
<span class="gd">-            MenuItem(label=&quot;ripple delete&quot;, action=lambda: None),</span>
<span class="gi">+            MenuItem(label=&quot;ripple delete&quot;, action=ripple_delete),</span>
         ])
</pre>
</div>
</div>
</div>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m &#39;Add non-empty action for ripple delete.&#39;
.....................................................
----------------------------------------------------------------------
Ran 53 tests in 2.909s

OK
[main 4c4e272] Add non-empty action for ripple delete.
 1 file changed, 10 insertions(+), 1 deletion(-)
</pre>
</div>
</div>
</div>
<h2 id="the-next-step">The next step</h2>
<p>Let’s take the next step and assert that it actually does a ripple delete.</p>
<p>I modify the test to this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">I ripple delete:</span>

<span class="sd">&gt;&gt;&gt; from rlvideolib.domain.project import Project</span>
<span class="sd">&gt;&gt;&gt; project = Project.new()</span>
<span class="sd">&gt;&gt;&gt; with project.new_transaction() as transaction:</span>
<span class="sd">...     hello_id = transaction.add_text_clip(&quot;hello&quot;, length=10, id=&quot;A&quot;)</span>
<span class="sd">...     _        = transaction.add_text_clip(&quot;there&quot;, length=10, id=&quot;B&quot;)</span>
<span class="sd">&gt;&gt;&gt; project.split_into_sections().to_ascii_canvas()</span>
<span class="sd">|&lt;-A0-----&gt;&lt;-B0-----&gt;|</span>

<span class="sd">&gt;&gt;&gt; CutAction(</span>
<span class="sd">...     project=project,</span>
<span class="sd">...     cut=project.project_data.get_cut(hello_id),</span>
<span class="sd">...     scrollbar=None</span>
<span class="sd">... ).right_mouse_down(</span>
<span class="sd">...     gui=TestGui(click_context_menu=&quot;ripple delete&quot;)</span>
<span class="sd">... )</span>
<span class="sd">&gt;&gt;&gt; project.split_into_sections().to_ascii_canvas()</span>
<span class="sd">|&lt;-B0-----&gt;|</span>
<span class="sd">&quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<p>This got quite messy. Let’s see if we can break it down. First we setup a new project with two clips next to each other. Then we simulate that the ripple delete menu item is clicked and assert that the first clip is removed and the second clip is moved to the beginning.</p>
<p>The setup of the project is kind of messy. For example, we have to do the import in the doctest to prevent a circular import. And we reach in to grab the project data to get the cut.</p>
<p>There are many things to improve here.</p>
<p>But I think I want to move on and get it to pass. We’ll get back to the issues above. I promise.</p>
<p>I make this change:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>         def ripple_delete():
<span class="gd">-            print(&quot;do ripple delete&quot;)</span>
<span class="gi">+            self.project.ripple_delete(self.cut.id)</span>
         gui.show_context_menu([
</pre>
</div>
</div>
</div>
<p>That tells me that ‘Project’ object has no attribute ‘ripple_delete’.</p>
<p>I add it like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">Project</span><span class="p">:</span>

    <span class="o">...</span>

    <span class="k">def</span> <span class="nf">ripple_delete</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">cut_id</span><span class="p">):</span>
        <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">new_transaction</span><span class="p">()</span> <span class="k">as</span> <span class="n">transaction</span><span class="p">:</span>
            <span class="n">transaction</span><span class="o">.</span><span class="n">ripple_delete</span><span class="p">(</span><span class="n">cut_id</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>That tells med that ‘Transaction’ object has no attribute ‘ripple_delete’.</p>
<p>We’re getting closer.</p>
<p>I can’t come up with the general solution for ripple delete, so I hard code a solution for the particular case where we only have two cuts in the project:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">Transaction</span><span class="p">:</span>

    <span class="o">...</span>

    <span class="k">def</span> <span class="nf">ripple_delete</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">cut_id</span><span class="p">):</span>
        <span class="n">data</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">project</span><span class="o">.</span><span class="n">project_data</span>
        <span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">remove_cut</span><span class="p">(</span><span class="n">cut_id</span><span class="p">)</span>
        <span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">modify_cut</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">cuts</span><span class="o">.</span><span class="n">cut_map</span><span class="o">.</span><span class="n">keys</span><span class="p">())[</span><span class="mi">0</span><span class="p">],</span> <span class="k">lambda</span> <span class="n">cut</span><span class="p">:</span> <span class="n">cut</span><span class="o">.</span><span class="n">move</span><span class="p">(</span><span class="o">-</span><span class="mi">10</span><span class="p">))</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">project</span><span class="o">.</span><span class="n">set_project_data</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>And also make a quick and dirty version of <code>remove_cut</code>.</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m &#39;Quick and dirty version of ripple delete that works in one case.&#39;
.....................................................
----------------------------------------------------------------------
Ran 53 tests in 3.902s

OK
[main 7ba45c9] Quick and dirty version of ripple delete that works in one case.
 2 files changed, 43 insertions(+), 5 deletions(-)
</pre>
</div>
</div>
</div>
<p>Here is the example project:</p>
<p>
<center>
<img src="ripple1.png" title="fig:" alt="Before ripple delete." />
</center>
</p>
<p>If we try to ripple delete the first clip in the GUI, we get this:</p>
<p>
<center>
<img src="ripple2.png" title="fig:" alt="After ripple delete." />
</center>
</p>
<p>Not quite right, but it shows progress in the right direction.</p>
<p>I think we can leave the cut action test alone for a while now. It is fine. Now we need to turn our attention to the ripple delete method in the transaction and make it work as intended.</p>
<h2 id="generalizing-ripple-delete">Generalizing ripple delete</h2>
<p>The project has a hierarchy of classes representing the different parts. The ripple delete only affects the cuts. I make that clear by just forwarding <code>ripple_delete</code> calls until we get to <code>Cuts</code>.</p>
<p>Transaction forwards to project data:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">Transaction</span><span class="p">:</span>

    <span class="o">...</span>

    <span class="k">def</span> <span class="nf">ripple_delete</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">cut_id</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">project</span><span class="o">.</span><span class="n">set_project_data</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">project</span><span class="o">.</span><span class="n">project_data</span><span class="o">.</span><span class="n">ripple_delete</span><span class="p">(</span><span class="n">cut_id</span><span class="p">))</span>
</pre>
</div>
</div>
</div>
<p>And project data forwards to cuts:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">ProjectData</span><span class="p">(</span><span class="n">namedtuple</span><span class="p">(</span><span class="s2">&quot;ProjectData&quot;</span><span class="p">,</span> <span class="s2">&quot;sources,cuts&quot;</span><span class="p">)):</span>

    <span class="o">...</span>

    <span class="k">def</span> <span class="nf">ripple_delete</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">cut_id</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_replace</span><span class="p">(</span><span class="n">cuts</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">cuts</span><span class="o">.</span><span class="n">ripple_delete</span><span class="p">(</span><span class="n">cut_id</span><span class="p">))</span>
</pre>
</div>
</div>
</div>
<p>And finally, the hard coded ripple delete is here:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">Cuts</span><span class="p">(</span><span class="n">namedtuple</span><span class="p">(</span><span class="s2">&quot;Cuts&quot;</span><span class="p">,</span> <span class="s2">&quot;cut_map,region_to_cuts,region_group_size&quot;</span><span class="p">)):</span>

    <span class="o">...</span>

    <span class="k">def</span> <span class="nf">ripple_delete</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">cut_id</span><span class="p">):</span>
        <span class="n">data</span> <span class="o">=</span> <span class="bp">self</span>
        <span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">cut_id</span><span class="p">)</span>
        <span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">modify</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">cut_map</span><span class="o">.</span><span class="n">keys</span><span class="p">())[</span><span class="mi">0</span><span class="p">],</span> <span class="k">lambda</span> <span class="n">cut</span><span class="p">:</span> <span class="n">cut</span><span class="o">.</span><span class="n">move</span><span class="p">(</span><span class="o">-</span><span class="mi">10</span><span class="p">))</span>
        <span class="k">return</span> <span class="n">data</span>
</pre>
</div>
</div>
</div>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m &#39;Move ripple_delete down to Cuts.&#39;
.....................................................
----------------------------------------------------------------------
Ran 53 tests in 3.397s

OK
[main c5deb77] Move ripple_delete down to Cuts.
 2 files changed, 10 insertions(+), 7 deletions(-)
</pre>
</div>
</div>
</div>
<p>If we can just get that one working properly, I think our feature is done.</p>
<h2 id="endless-sidetracks">Endless sidetracks?</h2>
<p>Implementing the ripple delete was much more difficult than I expected. I feel like I hit problem after problem that I need to solve before I can actually get to the ripple delete. I get tired and demotivated again.</p>
<p>Let’s recap what’s left on our imaginary TODO list.</p>
<p>First there is the issue of the messy cut action test, where it was particularly painful to setup a project.</p>
<p>And then there is the ripple delete in cuts that is not fully implemented.</p>
<p>I actually think that is it.</p>
<p>Not as much as I felt it was. Writing it down helped me realize that.</p>
<p>I think both of them might be a little difficult and take some time. Instead of documenting them in detail, I will just report on the status once done.</p>
<h2 id="report">Report</h2>
<p>I managed to generalize ripple delete and add some tests for it.</p>
<p>I’m not sure it’s perfect, but we can improve it later with the help of test. I’m sure it is not harmful at least.</p>
<p>However, it brings up another question. What if we do a ripple delete on the wrong clip? How to recover from that? The answer right now is that we can’t. Therefore, I think an undo function is high on the priority list. It should be relatively straight forward to implement thanks to the immutable data structures.</p>
<p>When it comes to the project setup, I just didn’t have the energy to do anything about it. I know this project setup is done in a few test, so I’m sure we will come across it later. Hopefully I have a better idea for how to improve it then. And some more energy. I’m OK leaving it like this. I don’t think we have made things worse. So much for a promise to get back to it.</p>
<h2 id="summary">Summary</h2>
<p>This change took longer than expected in part because the design was not clean enough in a few places, and in part because the project was lacking methods for modifying cuts because there had been no need for it.</p>
<p>We cleaned up the design in a few places add added a bit more functionality for project editing operations.</p>
<p>Next time we work in this area, I think we can move faster.</p>
<p>Is this evolutionary design?</p>
<p>This also gets me thinking about stories and estimating stories and how that does not make sense in this context. If things get easier and easier to implement over time, that would also mean that time to complete a story takes less and less time. So you can’t really estimate multiple stories, because the estimate changes once the previous story is completed. At least if stories somewhat overlap it terms of changes in the code base.</p>
]]></description>
    <pubDate>Wed, 02 Aug 2023 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/devlog-008-how-to-overcome-lack-of-motivation/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>DevLog 007: Which feature to work on next?</title>
    <link>http://rickardlindberg.me/writing/devlog-007-which-feature-to-work-on-next/</link>
    <description><![CDATA[<h1>DevLog 007: Which feature to work on next?</h1>

<p><em>Published on  1 August 2023.</em></p>

<p>In this session I will select what to work on next in my <a href="/projects/rlvideo/index.html">video editor</a> by trying to use it to edit some footage and see where I get stuck.</p>
<p>I’ve previously managed to create a project which has some footage imported and proxy clips generated. I can open that project like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ rlvideo my-project.rlvideo
</pre>
</div>
</div>
</div>
<p>When I do that, two things happen that annoy me.</p>
<p>First of all, there are lots of exceptions printed to the console:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>Traceback (most recent call last):
  File &quot;/home/rick/rlvideo/rlvideolib/gui/gtk.py&quot;, line 80, in timeline_draw
    self.timeline.draw_cairo(
  File &quot;/home/rick/rlvideo/rlvideolib/gui/generic.py&quot;, line 200, in draw_cairo
    self.draw_scrollbar(context, area, playhead_position)
  File &quot;/home/rick/rlvideo/rlvideolib/gui/generic.py&quot;, line 287, in draw_scrollbar
    self.rectangle_map.add(Rectangle(
  File &quot;/home/rick/rlvideo/rlvideolib/graphics/rectangle.py&quot;, line 19, in __init__
    raise ValueError(&quot;Width must be &gt; 0.&quot;)
ValueError: Width must be &gt; 0.
</pre>
</div>
</div>
</div>
<p>And second of all, it seems like it’s loading proxy clips again even though they are already generated:</p>
<p>
<center>
<img src="loading.png" title="fig:" alt="Loading." />
</center>
</p>
<p>Which one should I work on? Should I work on something else? What is most important?</p>
<h2 id="analysis">Analysis</h2>
<p>Let’s do an analysis of why the two problems occur.</p>
<p>The exception when drawing the scrollbar happens because there are too many clips in a too small window, so the width of the scrollbar handle gets smaller than 1 pixel. It can be worked around by zooming out a bit so that a larger portion of the timeline is visible.</p>
<p>This is obviously not good, but not the end of the world.</p>
<p>The fix probably involves setting a minimum width on the handle.</p>
<p>What about proxies?</p>
<p>Actually, proxies are not created again, but in order to find the correct proxy for a clip, the clip’s md5 sum has to be calculated. This is much faster than generating the proxy, but still takes some time, delaying me when I want to edit clips.</p>
<p>The fix probably involves storing the path of the proxy clip in the project file.</p>
<p>It is also not the end of the world. I can open the editor, go make some coffee, and maybe when I’m back, it’s done.</p>
<h2 id="strategy">Strategy</h2>
<p>So which should I work on?</p>
<p>If you work in an agile fashion, doing evolutionary design, what should happen is that it should get easier and easier to work with the code base and add new features. I learned that from <a href="https://www.jamesshore.com/v2/books/aoad2/design">James Shore</a>.</p>
<p>Say I start working on the scrollbar exception now. When I’m done with that, it should be easier to fix the proxy loading issue than it was before, assuming that the areas that need change overlap.</p>
<p>With that kind of thinking, it doesn’t matter that much what we choose to work on as long as we think it is somewhat important. Just pick one and the next thing will be easier.</p>
<p>It almost sounds too good to be true, but I believe in it. For this to work though, we need to practice evolutionary design. We’ll do that today.</p>
<p>Let’s pick the scrollbar issue.</p>
<h2 id="review">Review</h2>
<p>The error happens in <code>draw_scrollbar</code> which looks like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">draw_scrollbar</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">context</span><span class="p">,</span> <span class="n">area</span><span class="p">,</span> <span class="n">playhead_position</span><span class="p">):</span>
    <span class="n">x_start</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">scrollbar</span><span class="o">.</span><span class="n">region_shown</span><span class="o">.</span><span class="n">start</span> <span class="o">/</span> <span class="bp">self</span><span class="o">.</span><span class="n">scrollbar</span><span class="o">.</span><span class="n">whole_region</span><span class="o">.</span><span class="n">length</span> <span class="o">*</span> <span class="n">area</span><span class="o">.</span><span class="n">width</span>
    <span class="n">x_end</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">scrollbar</span><span class="o">.</span><span class="n">region_shown</span><span class="o">.</span><span class="n">end</span> <span class="o">/</span> <span class="bp">self</span><span class="o">.</span><span class="n">scrollbar</span><span class="o">.</span><span class="n">whole_region</span><span class="o">.</span><span class="n">length</span> <span class="o">*</span> <span class="n">area</span><span class="o">.</span><span class="n">width</span>
    <span class="n">playhead_x</span> <span class="o">=</span> <span class="n">playhead_position</span> <span class="o">/</span> <span class="bp">self</span><span class="o">.</span><span class="n">scrollbar</span><span class="o">.</span><span class="n">whole_region</span><span class="o">.</span><span class="n">length</span> <span class="o">*</span> <span class="n">area</span><span class="o">.</span><span class="n">width</span>

    <span class="c1"># TODO: add callback mechanism in rectangle map</span>
    <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">h</span> <span class="o">=</span> <span class="p">(</span>
        <span class="n">area</span><span class="o">.</span><span class="n">x</span><span class="o">+</span><span class="n">x_start</span><span class="p">,</span>
        <span class="n">area</span><span class="o">.</span><span class="n">y</span><span class="p">,</span>
        <span class="n">x_end</span><span class="o">-</span><span class="n">x_start</span><span class="p">,</span>
        <span class="n">area</span><span class="o">.</span><span class="n">height</span>
    <span class="p">)</span>
    <span class="n">rect_x</span><span class="p">,</span> <span class="n">rect_y</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">user_to_device</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
    <span class="n">rect_w</span><span class="p">,</span> <span class="n">rect_h</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">user_to_device_distance</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">)</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">rectangle_map</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Rectangle</span><span class="p">(</span>
        <span class="n">x</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_x</span><span class="p">),</span>
        <span class="n">y</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_y</span><span class="p">),</span>
        <span class="n">width</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_w</span><span class="p">),</span>
        <span class="n">height</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_h</span><span class="p">)</span>
    <span class="p">),</span> <span class="s2">&quot;position&quot;</span><span class="p">)</span>

    <span class="n">context</span><span class="o">.</span><span class="n">rectangle</span><span class="p">(</span><span class="n">area</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">area</span><span class="o">.</span><span class="n">y</span><span class="p">,</span> <span class="n">area</span><span class="o">.</span><span class="n">width</span><span class="p">,</span> <span class="n">area</span><span class="o">.</span><span class="n">height</span><span class="p">)</span>
    <span class="n">context</span><span class="o">.</span><span class="n">set_source_rgba</span><span class="p">(</span><span class="mf">0.4</span><span class="p">,</span> <span class="mf">0.9</span><span class="p">,</span> <span class="mf">0.4</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">)</span>
    <span class="n">context</span><span class="o">.</span><span class="n">fill</span><span class="p">()</span>

    <span class="n">scroll_box</span> <span class="o">=</span> <span class="n">Rectangle</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">)</span>
    <span class="n">context</span><span class="o">.</span><span class="n">rectangle</span><span class="p">(</span><span class="n">scroll_box</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">scroll_box</span><span class="o">.</span><span class="n">y</span><span class="p">,</span> <span class="n">scroll_box</span><span class="o">.</span><span class="n">width</span><span class="p">,</span> <span class="n">scroll_box</span><span class="o">.</span><span class="n">height</span><span class="p">)</span>
    <span class="n">context</span><span class="o">.</span><span class="n">set_source_rgba</span><span class="p">(</span><span class="mf">0.4</span><span class="p">,</span> <span class="mf">0.9</span><span class="p">,</span> <span class="mf">0.4</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">)</span>
    <span class="n">context</span><span class="o">.</span><span class="n">fill</span><span class="p">()</span>

    <span class="c1"># Playhead</span>
    <span class="n">context</span><span class="o">.</span><span class="n">set_source_rgb</span><span class="p">(</span><span class="mf">0.1</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">)</span>
    <span class="n">context</span><span class="o">.</span><span class="n">move_to</span><span class="p">(</span><span class="n">playhead_x</span><span class="p">,</span> <span class="n">area</span><span class="o">.</span><span class="n">top</span><span class="p">)</span>
    <span class="n">context</span><span class="o">.</span><span class="n">line_to</span><span class="p">(</span><span class="n">playhead_x</span><span class="p">,</span> <span class="n">area</span><span class="o">.</span><span class="n">bottom</span><span class="p">)</span>
    <span class="n">context</span><span class="o">.</span><span class="n">stroke</span><span class="p">()</span>

    <span class="n">context</span><span class="o">.</span><span class="n">set_source_rgb</span><span class="p">(</span><span class="mf">0.1</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">)</span>
    <span class="n">scroll_box</span><span class="o">.</span><span class="n">draw_pixel_perfect_border</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>When I look at this, it’s difficult for me to see what is going on. It is just too long and does too much. It doesn’t clearly represent what I had in mind when I wrote it.</p>
<p>If we are going to do evolutionary design, we have to pay more attention to design. All the time.</p>
<p>It’s fine that I didn’t pay too much attention last time I modified this method, but now that we are here again, let’s give it some extra love so that it is easier to work with next time.</p>
<h2 id="further-review">Further review</h2>
<p>The error happens when creating the rectangle in the following piece of code:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="c1"># TODO: add callback mechanism in rectangle map</span>
<span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">h</span> <span class="o">=</span> <span class="p">(</span>
    <span class="n">area</span><span class="o">.</span><span class="n">x</span><span class="o">+</span><span class="n">x_start</span><span class="p">,</span>
    <span class="n">area</span><span class="o">.</span><span class="n">y</span><span class="p">,</span>
    <span class="n">x_end</span><span class="o">-</span><span class="n">x_start</span><span class="p">,</span>
    <span class="n">area</span><span class="o">.</span><span class="n">height</span>
<span class="p">)</span>
<span class="n">rect_x</span><span class="p">,</span> <span class="n">rect_y</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">user_to_device</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
<span class="n">rect_w</span><span class="p">,</span> <span class="n">rect_h</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">user_to_device_distance</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">)</span>
<span class="bp">self</span><span class="o">.</span><span class="n">rectangle_map</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Rectangle</span><span class="p">(</span>
    <span class="n">x</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_x</span><span class="p">),</span>
    <span class="n">y</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_y</span><span class="p">),</span>
    <span class="n">width</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_w</span><span class="p">),</span>
    <span class="n">height</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_h</span><span class="p">)</span>
<span class="p">),</span> <span class="s2">&quot;position&quot;</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>Look, there is even a TODO comment there. Now that we are touching this piece of code again, perhaps it’s time to deal with it.</p>
<h2 id="the-rectangle-map">The rectangle map</h2>
<p>The rectangle map is used to store areas of the screen that the user can interact with. You can put objects at a given rectangle and retrieve them by position. Here is an example:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">&gt;&gt;&gt; r = RectangleMap()</span>
<span class="sd">&gt;&gt;&gt; r.add(Rectangle(x=0, y=0, width=10, height=10), &quot;item&quot;)</span>
<span class="sd">&gt;&gt;&gt; r.get(5, 5)</span>
<span class="sd">&#39;item&#39;</span>
<span class="sd">&gt;&gt;&gt; r.get(100, 100) is None</span>
<span class="sd">True</span>
<span class="sd">&quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<p>In the timeline area, each cut puts itself in a rectangle, allowing a context menu to be shown when it is right clicked like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">right_mouse_down</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">gui</span><span class="p">):</span>
    <span class="n">cut</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">rectangle_map</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
    <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">cut</span><span class="p">,</span> <span class="n">Cut</span><span class="p">):</span>
        <span class="c1"># show context menu</span>
</pre>
</div>
</div>
</div>
<p>The TODO comment that I wrote suggests that we should instead store objects that can handle <code>right_mouse_down</code> events for example so that we don’t need to check instances at the outermost event handler.</p>
<p>Let’s see if we can do it.</p>
<h2 id="action-test">Action test</h2>
<p>I sketch this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">Action</span><span class="p">:</span>

    <span class="k">def</span> <span class="nf">left_mouse_down</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
        <span class="k">pass</span>

    <span class="k">def</span> <span class="nf">right_mouse_down</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">gui</span><span class="p">):</span>
        <span class="k">pass</span>

    <span class="k">def</span> <span class="nf">mouse_move</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
        <span class="k">pass</span>

    <span class="k">def</span> <span class="nf">mouse_up</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">pass</span>

<span class="k">class</span> <span class="nc">ScrollbarDragAction</span><span class="p">(</span><span class="n">Action</span><span class="p">):</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">timeline</span><span class="p">,</span> <span class="n">scrollbar</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">timeline</span> <span class="o">=</span> <span class="n">timeline</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">scrollbar</span> <span class="o">=</span> <span class="n">scrollbar</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">mouse_up</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">left_mouse_down</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">x</span>

    <span class="k">def</span> <span class="nf">mouse_up</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="kc">None</span>

    <span class="k">def</span> <span class="nf">mouse_move</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">x</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">timeline</span><span class="o">.</span><span class="n">set_scrollbar</span><span class="p">(</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">scrollbar</span><span class="o">.</span><span class="n">move_scrollbar</span><span class="p">(</span>
                    <span class="n">x</span> <span class="o">-</span> <span class="bp">self</span><span class="o">.</span><span class="n">x</span>
                <span class="p">)</span>
            <span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>Let’s see if we can use it.</p>
<p>I modify <code>right_mouse_down</code> and all the other event handlers to this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">right_mouse_down</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">gui</span><span class="p">):</span>
    <span class="n">item</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">rectangle_map</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
    <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">Action</span><span class="p">):</span>
        <span class="n">item</span><span class="o">.</span><span class="n">right_mouse_down</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">gui</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">down_item</span> <span class="o">=</span> <span class="n">item</span>
        <span class="k">return</span>
    <span class="o">...</span>
</pre>
</div>
</div>
</div>
<p>This is special handling for the case where the entry in the rectangle map is an <code>Action</code>. Eventually, we want there to be only actions in there, and then the instance check can be removed.</p>
<p>Next I change what we put into the rectangle map for the scrollbar to this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="bp">self</span><span class="o">.</span><span class="n">rectangle_map</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Rectangle</span><span class="p">(</span>
    <span class="n">x</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_x</span><span class="p">),</span>
    <span class="n">y</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_y</span><span class="p">),</span>
    <span class="n">width</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_w</span><span class="p">),</span>
    <span class="n">height</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_h</span><span class="p">)</span>
<span class="p">),</span> <span class="n">ScrollbarDragAction</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">scrollbar</span><span class="p">))</span>
</pre>
</div>
</div>
</div>
<p>Boom! Test failure:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>Failed example:
    timeline.rectangle_map # doctest: +ELLIPSIS
Differences (ndiff with -expected +actual):
    ...
      Rectangle(x=0, y=0, width=300, height=20):
        scrub
      Rectangle(x=0, y=77, width=300, height=23):
    -   position
    +   &lt;rlvideolib.gui.generic.ScrollbarDragAction object at 0x7fd1f8891d00&gt;
</pre>
</div>
</div>
</div>
<p>There is now another object in the rectangle map. Let’s modify the test to assert that instead.</p>
<p>The question now is, will it work in the application?</p>
<p>This behavior I think lacks tests, so let’s try.</p>
<p>Nothing happens.</p>
<p>I review the code and find that I had forgotten the <code>mouse_move</code> event:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">mouse_move</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
    <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">down_item</span><span class="p">:</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">down_item</span><span class="o">.</span><span class="n">mouse_move</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
        <span class="k">return</span>
    <span class="o">...</span>
</pre>
</div>
</div>
</div>
<p>And that actually works!</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m &#39;Add a ScrollbarDragAction instead of position string.&#39;
...................................................
----------------------------------------------------------------------
Ran 51 tests in 3.405s

OK
[main 87c9b07] Add a ScrollbarDragAction instead of position string.
 1 file changed, 59 insertions(+), 2 deletions(-)
</pre>
</div>
</div>
</div>
<p>I make the same change for the remaining actions.</p>
<p>Here is the one for scrubbing the timeline:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">ScrubAction</span><span class="p">(</span><span class="n">Action</span><span class="p">):</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">player</span><span class="p">,</span> <span class="n">scrollbar</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">player</span> <span class="o">=</span> <span class="n">player</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">scrollbar</span> <span class="o">=</span> <span class="n">scrollbar</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">mouse_up</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">left_mouse_down</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">x</span>

    <span class="k">def</span> <span class="nf">mouse_up</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="kc">None</span>

    <span class="k">def</span> <span class="nf">mouse_move</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">x</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">player</span><span class="o">.</span><span class="n">scrub</span><span class="p">(</span>
                <span class="nb">int</span><span class="p">(</span><span class="nb">round</span><span class="p">(</span>
                    <span class="bp">self</span><span class="o">.</span><span class="n">scrollbar</span><span class="o">.</span><span class="n">content_start</span>
                    <span class="o">+</span>
                    <span class="n">x</span><span class="o">/</span><span class="bp">self</span><span class="o">.</span><span class="n">scrollbar</span><span class="o">.</span><span class="n">one_length_in_pixels</span>
                <span class="p">))</span>
            <span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>And here is the one for moving a cut and opening the context menu for a cut:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">CutAction</span><span class="p">(</span><span class="n">Action</span><span class="p">):</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">project</span><span class="p">,</span> <span class="n">cut</span><span class="p">,</span> <span class="n">scrollbar</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">project</span> <span class="o">=</span> <span class="n">project</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">cut</span> <span class="o">=</span> <span class="n">cut</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">scrollbar</span> <span class="o">=</span> <span class="n">scrollbar</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">mouse_up</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">left_mouse_down</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">transaction</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">project</span><span class="o">.</span><span class="n">new_transaction</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">x</span>

    <span class="k">def</span> <span class="nf">right_mouse_down</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">gui</span><span class="p">):</span>
        <span class="k">def</span> <span class="nf">mix_strategy_updater</span><span class="p">(</span><span class="n">value</span><span class="p">):</span>
            <span class="k">def</span> <span class="nf">update</span><span class="p">():</span>
                <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">project</span><span class="o">.</span><span class="n">new_transaction</span><span class="p">()</span> <span class="k">as</span> <span class="n">transaction</span><span class="p">:</span>
                    <span class="n">transaction</span><span class="o">.</span><span class="n">modify</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">cut</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="k">lambda</span> <span class="n">cut</span><span class="p">:</span>
                        <span class="n">cut</span><span class="o">.</span><span class="n">with_mix_strategy</span><span class="p">(</span><span class="n">value</span><span class="p">))</span>
            <span class="k">return</span> <span class="n">update</span>
        <span class="n">gui</span><span class="o">.</span><span class="n">show_context_menu</span><span class="p">([</span>
            <span class="n">MenuItem</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="s2">&quot;over&quot;</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="n">mix_strategy_updater</span><span class="p">(</span><span class="s2">&quot;over&quot;</span><span class="p">)),</span>
            <span class="n">MenuItem</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="s2">&quot;under&quot;</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="n">mix_strategy_updater</span><span class="p">(</span><span class="s2">&quot;under&quot;</span><span class="p">)),</span>
        <span class="p">])</span>

    <span class="k">def</span> <span class="nf">mouse_up</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">transaction</span> <span class="o">=</span> <span class="kc">None</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="kc">None</span>

    <span class="k">def</span> <span class="nf">mouse_move</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">transaction</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">transaction</span><span class="o">.</span><span class="n">rollback</span><span class="p">()</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">transaction</span><span class="o">.</span><span class="n">modify</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">cut</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="k">lambda</span> <span class="n">cut</span><span class="p">:</span>
                <span class="n">cut</span><span class="o">.</span><span class="n">move</span><span class="p">(</span><span class="nb">int</span><span class="p">((</span><span class="n">x</span><span class="o">-</span><span class="bp">self</span><span class="o">.</span><span class="n">x</span><span class="p">)</span><span class="o">/</span><span class="bp">self</span><span class="o">.</span><span class="n">scrollbar</span><span class="o">.</span><span class="n">one_length_in_pixels</span><span class="p">)))</span>
</pre>
</div>
</div>
</div>
<h2 id="clean-up">Clean up</h2>
<p>At this point, we only put actions into the rectangle map, and we can simplify the event handlers to this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">left_mouse_down</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">down_action</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">rectangle_map</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">Action</span><span class="p">())</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">down_action</span><span class="o">.</span><span class="n">left_mouse_down</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">right_mouse_down</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">gui</span><span class="p">):</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">down_action</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">rectangle_map</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">Action</span><span class="p">())</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">down_action</span><span class="o">.</span><span class="n">right_mouse_down</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">gui</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">mouse_move</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
    <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">down_action</span><span class="p">:</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">down_action</span><span class="o">.</span><span class="n">mouse_move</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">rectangle_map</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">Action</span><span class="p">())</span><span class="o">.</span><span class="n">mouse_move</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">mouse_up</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">down_action</span><span class="p">:</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">down_action</span><span class="o">.</span><span class="n">mouse_up</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">down_action</span> <span class="o">=</span> <span class="kc">None</span>
</pre>
</div>
</div>
</div>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m &#39;Timeline assumes there are Actions in rectangle map.&#39;
...................................................
----------------------------------------------------------------------
Ran 51 tests in 3.381s

OK
[main 3c8e9b9] Timeline assumes there are Actions in rectangle map.
 Date: Mon Jul 31 14:32:06 2023 +0200
 2 files changed, 14 insertions(+), 64 deletions(-)
</pre>
</div>
</div>
</div>
<h2 id="transaction-problem">Transaction problem</h2>
<p>Everything seems to work fine. However, I notice that the committing of the transaction has disappeared.</p>
<p>This is not tested anywhere, missed my manual tests, and is pretty severe.</p>
<p>Let’s see if we can make the code a little more reliable. I write this test:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">&gt;&gt;&gt; project = Project.new()</span>
<span class="sd">&gt;&gt;&gt; transaction = project.new_transaction()</span>
<span class="sd">&gt;&gt;&gt; transaction = project.new_transaction()</span>
<span class="sd">Traceback (most recent call last):</span>
<span class="sd">  ...</span>
<span class="sd">ValueError: transaction already in progress</span>
<span class="sd">&quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<p>I make it pass, and I am now more confident that this error will show up when testing in the application.</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m &#39;Ensure there can be only one transaction active at a time.&#39;
....................................................
----------------------------------------------------------------------
Ran 52 tests in 3.402s

OK
[main 2b36bdb] Ensure there can be only one transaction active at a time.
 2 files changed, 34 insertions(+), 7 deletions(-)
</pre>
</div>
</div>
</div>
<p>And sure enough, it does. The second time I try to drag a cut, I get the “transaction already in progress” error.</p>
<p>Nice!</p>
<p>The fix:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>     def mouse_up(self):
<span class="gi">+        if self.transaction:</span>
<span class="gi">+            self.transaction.commit()</span>
         self.transaction = None
         self.x = None
</pre>
</div>
</div>
</div>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m &#39;Ensure CutAction transaction is commited at mouse_up.&#39;
....................................................
----------------------------------------------------------------------
Ran 52 tests in 3.406s

OK
[main 5fd460d] Ensure CutAction transaction is commited at mouse_up.
 1 file changed, 4 insertions(+), 1 deletion(-)
</pre>
</div>
</div>
</div>
<p>Normally you use a transaction like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">with</span> <span class="n">project</span><span class="o">.</span><span class="n">new_transaction</span><span class="p">()</span> <span class="k">as</span> <span class="n">transaction</span><span class="p">:</span>
    <span class="n">_</span> <span class="o">=</span> <span class="n">transaction</span><span class="o">.</span><span class="n">add_text_clip</span><span class="p">(</span><span class="s2">&quot;hello&quot;</span><span class="p">,</span> <span class="n">length</span><span class="o">=</span><span class="mi">30</span><span class="p">)</span>
    <span class="n">x</span> <span class="o">=</span> <span class="n">transaction</span><span class="o">.</span><span class="n">add_text_clip</span><span class="p">(</span><span class="s2">&quot;world&quot;</span><span class="p">,</span> <span class="n">length</span><span class="o">=</span><span class="mi">35</span><span class="p">)</span>
    <span class="n">_</span> <span class="o">=</span> <span class="n">transaction</span><span class="o">.</span><span class="n">add_text_clip</span><span class="p">(</span><span class="s2">&quot;end&quot;</span><span class="p">,</span> <span class="n">length</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
    <span class="n">_</span> <span class="o">=</span> <span class="n">transaction</span><span class="o">.</span><span class="n">add_text_clip</span><span class="p">(</span><span class="s2">&quot;end&quot;</span><span class="p">,</span> <span class="n">length</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
    <span class="n">transaction</span><span class="o">.</span><span class="n">modify</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="k">lambda</span> <span class="n">cut</span><span class="p">:</span> <span class="n">cut</span><span class="o">.</span><span class="n">move</span><span class="p">(</span><span class="o">-</span><span class="mi">10</span><span class="p">))</span>
</pre>
</div>
</div>
</div>
<p>In that case a commit/rollback is guaranteed.</p>
<p>However, when dealing with mouse events, we can not use the context manager and instead have to deal with mouse events.</p>
<p>The new check that prevents multiple transactions ensures that everything stops working if we forget to close a transaction.</p>
<p>But I would like to come up with a nicer pattern for ensuring that transactions close.</p>
<p>I’ll add a TODO for it and maybe we can come up with a nicer solution later.</p>
<h2 id="further-cleanup">Further cleanup</h2>
<p>In order to satisfy Python’s import mechanism, I put <code>Action</code> and <code>MenuItem</code> in the <code>rlvideolib.domain.cut</code> module.</p>
<p>They obviously don’t belong there.</p>
<p>Here is what the gui package looks like now:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>rlvideolib/gui/
├── generic.py
├── gtk.py
├── __init__.py
└── testing.py
</pre>
</div>
</div>
</div>
<p>Previously <code>Action</code> and <code>MenuItem</code> were defined in <code>generic</code>. That makes sense. But now we have a dependency on them from <code>rlvideolib.domain.cut</code>. Should a domain object depend on GUI? Maybe that is ok.</p>
<p>I think what I’ll do is create another module inside the gui package called <code>framework</code>. It will contain generic GUI elements that do not depend on GTK or our application.</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m &#39;Move generic framework GUI code to new rlvideolib.gui.framework.&#39;
....................................................
----------------------------------------------------------------------
Ran 52 tests in 3.393s

OK
[main b1a8f5d] Move generic framework GUI code to new rlvideolib.gui.framework.
 5 files changed, 23 insertions(+), 19 deletions(-)
 create mode 100644 rlvideolib/gui/framework.py
</pre>
</div>
</div>
</div>
<h2 id="progress">Progress?</h2>
<p>Back to this code where we started:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="c1"># TODO: add callback mechanism in rectangle map</span>
<span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">h</span> <span class="o">=</span> <span class="p">(</span>
    <span class="n">area</span><span class="o">.</span><span class="n">x</span><span class="o">+</span><span class="n">x_start</span><span class="p">,</span>
    <span class="n">area</span><span class="o">.</span><span class="n">y</span><span class="p">,</span>
    <span class="n">x_end</span><span class="o">-</span><span class="n">x_start</span><span class="p">,</span>
    <span class="n">area</span><span class="o">.</span><span class="n">height</span>
<span class="p">)</span>
<span class="n">rect_x</span><span class="p">,</span> <span class="n">rect_y</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">user_to_device</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
<span class="n">rect_w</span><span class="p">,</span> <span class="n">rect_h</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">user_to_device_distance</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">)</span>
<span class="bp">self</span><span class="o">.</span><span class="n">rectangle_map</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Rectangle</span><span class="p">(</span>
    <span class="n">x</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_x</span><span class="p">),</span>
    <span class="n">y</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_y</span><span class="p">),</span>
    <span class="n">width</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_w</span><span class="p">),</span>
    <span class="n">height</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_h</span><span class="p">)</span>
<span class="p">),</span> <span class="n">ScrollbarDragAction</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">scrollbar</span><span class="p">))</span>
</pre>
</div>
</div>
</div>
<p>Ah, the TODO is actually done now.</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m &#39;Remove completed TODO about callback mechanism for rectangle map.&#39;
....................................................
----------------------------------------------------------------------
Ran 52 tests in 3.392s

OK
[main b757e3a] Remove completed TODO about callback mechanism for rectangle map.
 1 file changed, 1 deletion(-)
</pre>
</div>
</div>
</div>
<p>We still haven’t made any progress on the exception problem though. But we have fixed design issues in related areas.</p>
<p>Let’s focus again on the exception.</p>
<h2 id="a-common-pattern">A common pattern</h2>
<p>I think the following pattern exists in all places where we add actions to the rectangle map:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="n">rect_x</span><span class="p">,</span> <span class="n">rect_y</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">user_to_device</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
<span class="n">rect_w</span><span class="p">,</span> <span class="n">rect_h</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">user_to_device_distance</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">)</span>
<span class="bp">self</span><span class="o">.</span><span class="n">rectangle_map</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Rectangle</span><span class="p">(</span>
    <span class="n">x</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_x</span><span class="p">),</span>
    <span class="n">y</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_y</span><span class="p">),</span>
    <span class="n">width</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_w</span><span class="p">),</span>
    <span class="n">height</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_h</span><span class="p">)</span>
<span class="p">),</span> <span class="o">...</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>What about if we add a method to <code>RectangleMap</code> like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">add_from_context</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">,</span> <span class="n">context</span><span class="p">,</span> <span class="n">item</span><span class="p">):</span>
    <span class="n">rect_x</span><span class="p">,</span> <span class="n">rect_y</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">user_to_device</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
    <span class="n">rect_w</span><span class="p">,</span> <span class="n">rect_h</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">user_to_device_distance</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">)</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Rectangle</span><span class="p">(</span>
        <span class="n">x</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_x</span><span class="p">),</span>
        <span class="n">y</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_y</span><span class="p">),</span>
        <span class="n">width</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_w</span><span class="p">),</span>
        <span class="n">height</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_h</span><span class="p">)</span>
    <span class="p">),</span> <span class="n">item</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>We can use that method to add both the scroll action and the scrub action.</p>
<p>However, the cut action looks slightly different:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="n">rect_x</span><span class="p">,</span> <span class="n">rect_y</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">user_to_device</span><span class="p">(</span><span class="n">rectangle</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">rectangle</span><span class="o">.</span><span class="n">y</span><span class="p">)</span>
<span class="n">rect_w</span><span class="p">,</span> <span class="n">rect_h</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">user_to_device_distance</span><span class="p">(</span><span class="n">rectangle</span><span class="o">.</span><span class="n">width</span><span class="p">,</span> <span class="n">rectangle</span><span class="o">.</span><span class="n">height</span><span class="p">)</span>
<span class="k">if</span> <span class="nb">int</span><span class="p">(</span><span class="n">rect_w</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="nb">int</span><span class="p">(</span><span class="n">rect_h</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
    <span class="n">rectangle_map</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Rectangle</span><span class="p">(</span>
        <span class="n">x</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_x</span><span class="p">),</span>
        <span class="n">y</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_y</span><span class="p">),</span>
        <span class="n">width</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_w</span><span class="p">),</span>
        <span class="n">height</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_h</span><span class="p">)</span>
    <span class="p">),</span> <span class="n">CutAction</span><span class="p">(</span><span class="n">project</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_source_cut</span><span class="p">(),</span> <span class="n">scrollbar</span><span class="p">))</span>
</pre>
</div>
</div>
</div>
<p>It actually has the check that we also need for the scrollbar. That is, we only add the rectangle to the map if it has a width and height.</p>
<p>Let’s add those checks to <code>add_from_context</code>:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">add_from_context</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">,</span> <span class="n">context</span><span class="p">,</span> <span class="n">item</span><span class="p">):</span>
    <span class="n">rect_x</span><span class="p">,</span> <span class="n">rect_y</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">user_to_device</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
    <span class="n">rect_w</span><span class="p">,</span> <span class="n">rect_h</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">user_to_device_distance</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">)</span>
    <span class="k">if</span> <span class="nb">int</span><span class="p">(</span><span class="n">rect_w</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="nb">int</span><span class="p">(</span><span class="n">rect_h</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">add</span><span class="p">(</span>
            <span class="n">Rectangle</span><span class="p">(</span>
                <span class="n">x</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_x</span><span class="p">),</span>
                <span class="n">y</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_y</span><span class="p">),</span>
                <span class="n">width</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_w</span><span class="p">),</span>
                <span class="n">height</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">rect_h</span><span class="p">)</span>
            <span class="p">),</span>
            <span class="n">item</span>
        <span class="p">)</span>
</pre>
</div>
</div>
</div>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m &#39;Extract RectangleMap.add_from_context which does width/height checks.&#39;
....................................................
----------------------------------------------------------------------
Ran 52 tests in 3.498s

OK
[main cd38e3e] Extract RectangleMap.add_from_context which does width/height checks.
 3 files changed, 17 insertions(+), 25 deletions(-)
</pre>
</div>
</div>
</div>
<p>And this actually resolves the exception problem when I open my project.</p>
<h1 id="summary">Summary</h1>
<p>I don’t have much experience doing evolutionary design. My feeling right now is that I need to spend much more time designing than what I am currently doing. I feel like I need to do at least 60% designing and only 40% adding new features. If you are reading this and have any experience with evolutionary design, feel free to share it with me. I should probably also re-read the chapters in James’ book to refresh my memory.</p>
]]></description>
    <pubDate>Tue, 01 Aug 2023 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/devlog-007-which-feature-to-work-on-next/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>DevLog 006: Adding the concept of a clip</title>
    <link>http://rickardlindberg.me/writing/devlog-006-adding-the-concept-of-a-clip/</link>
    <description><![CDATA[<h1>DevLog 006: Adding the concept of a clip</h1>

<p><em>Published on 31 July 2023.</em></p>

<p>When working on the <a href="/projects/rlvideo/index.html">video editor</a> and writing about it, I keep talking about clips. But there is nothing called a clip in the source code. Today I will explore the idea of adding that as a concept and see what kind of functionality it will attract.</p>
<h2 id="finishing-ffmpeg-proxy-generation">Finishing FFmpeg proxy generation</h2>
<p>Here is the cleaned up diff from yesterday’s work on moving back to FFmpeg for proxy generation:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="gu">@@ -70,15 +70,16 @@ class FileSource(namedtuple(&quot;FileSource&quot;, &quot;id,path,number_of_frames_at_project_f</span>
         proxy_tmp_path = proxy_spec.get_tmp_path(checksum)
         if not os.path.exists(proxy_path):
             proxy_spec.ensure_dir()
<span class="gd">-            p = mlt.Profile()</span>
<span class="gd">-            p.from_producer(producer)</span>
<span class="gd">-            proxy_spec.adjust_profile(p)</span>
<span class="gd">-            producer = mlt.Producer(p, self.path)</span>
<span class="gd">-            consumer = mlt.Consumer(p, &quot;avformat&quot;)</span>
<span class="gd">-            consumer.set(&quot;target&quot;, proxy_tmp_path)</span>
<span class="gd">-            proxy_spec.adjust_consumer(consumer)</span>
<span class="gd">-            run_consumer(consumer, producer, progress)</span>
<span class="gd">-            self.create_producer(profile, proxy_tmp_path)</span>
<span class="gi">+            subprocess.check_call([</span>
<span class="gi">+                &quot;ffmpeg&quot;,</span>
<span class="gi">+                &quot;-y&quot;,</span>
<span class="gi">+                &quot;-i&quot;, self.path,</span>
<span class="gi">+                &quot;-vf&quot;, &quot;yadif,scale=960:540&quot;,</span>
<span class="gi">+                &quot;-q:v&quot;, &quot;3&quot;,</span>
<span class="gi">+                &quot;-vcodec&quot;, &quot;mjpeg&quot;,</span>
<span class="gi">+                &quot;-acodec&quot;, &quot;pcm_s16le&quot;,</span>
<span class="gi">+                proxy_tmp_path</span>
<span class="gi">+            ])</span>
             os.rename(proxy_tmp_path, proxy_path)
         return self.create_producer(profile, proxy_path)
</pre>
</div>
</div>
</div>
<p>Let’s commit that and see how we can refactor in this area.</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m &#39;Use FFmpeg for proxy generation.&#39;
...................................................
----------------------------------------------------------------------
Ran 51 tests in 2.959s

OK
[main 078c9f2] Use FFmpeg for proxy generation.
 1 file changed, 10 insertions(+), 9 deletions(-)
</pre>
</div>
</div>
</div>
<h2 id="the-start-of-clip">The start of Clip</h2>
<p>The proxy generation code has this line:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="n">checksum</span> <span class="o">=</span> <span class="n">md5</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">path</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>Where <code>md5</code> is a top level function.</p>
<p>Let’s extract a <code>Clip</code> class and put the <code>md5</code> method there. My idea is that a clip represents a file on disk that we can load into a <code>FileSource</code> and display on our timeline.</p>
<p>Here it is:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">Clip</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">path</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">path</span> <span class="o">=</span> <span class="n">path</span>

    <span class="k">def</span> <span class="nf">md5</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">check_output</span><span class="p">([</span><span class="s2">&quot;md5sum&quot;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">path</span><span class="p">])[:</span><span class="mi">32</span><span class="p">]</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s2">&quot;ascii&quot;</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>We can see again that we use an external program, <code>md5sum</code>, to calculate the md5. I think I did that because the Python module for calculating md5 did not have a convenient function for calculating the sum on large files. As I noted previously, I’m fine with this. We should probably add a test though to make sure it works with the external program.</p>
<p>Anyway, the proxy code can now be written like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="n">checksum</span> <span class="o">=</span> <span class="n">Clip</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">path</span><span class="p">)</span><span class="o">.</span><span class="n">md5</span><span class="p">()</span>
</pre>
</div>
</div>
</div>
<p>Perfect! Time to commit:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m &#39;Extract Clip and move the md5 function to it.&#39;
...................................................
----------------------------------------------------------------------
Ran 51 tests in 2.966s

OK
[main 6488c05] Extract Clip and move the md5 function to it.
 3 files changed, 12 insertions(+), 4 deletions(-)
 create mode 100644 rlvideolib/domain/clip.py
</pre>
</div>
</div>
</div>
<h2 id="revising-mlthelpers">Revising mlthelpers</h2>
<p>When working on proxies before, we extracted this module:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="n">rlvideolib</span><span class="o">.</span><span class="n">mlthelpers</span>
</pre>
</div>
</div>
</div>
<p>First of all, its <code>run_consumer</code> function is no longer used when we generate proxies with FFmpeg. Let’s remove it.</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m &#39;Remove rlvideolib.mlthelpers.run_consumer since it is no longer used.&#39;
...................................................
----------------------------------------------------------------------
Ran 51 tests in 2.974s

OK
[main aff41ef] Remove rlvideolib.mlthelpers.run_consumer since it is no longer used.
 2 files changed, 9 deletions(-)
</pre>
</div>
</div>
</div>
<p>The only thing left now is this class:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">FileInfo</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">path</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">path</span> <span class="o">=</span> <span class="n">path</span>

    <span class="k">def</span> <span class="nf">get_number_of_frames</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">profile</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">mlt</span><span class="o">.</span><span class="n">Producer</span><span class="p">(</span><span class="n">profile</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">path</span><span class="p">)</span><span class="o">.</span><span class="n">get_playtime</span><span class="p">()</span>
</pre>
</div>
</div>
</div>
<p>This looks a lot like it can be merged into our new <code>Clip</code>. Let’s see where it is used.</p>
<p>I find an unused import of it and remove it.</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m &#39;Remove unused import of FileInfo.&#39;
...................................................
----------------------------------------------------------------------
Ran 51 tests in 2.967s

OK
[main dda14cf] Remove unused import of FileInfo.
 1 file changed, 1 deletion(-)
</pre>
</div>
</div>
</div>
<p>I wonder if there is a tool that can automatically remove unused imports. Then we can include it in our test runner perhaps? Along with an auto formatter?</p>
<p>Anyway, the only other use is here:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">Transaction</span><span class="p">:</span>

    <span class="o">...</span>

    <span class="k">def</span> <span class="nf">add_clip</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="nb">id</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
        <span class="n">source</span> <span class="o">=</span> <span class="n">FileSource</span><span class="p">(</span>
            <span class="nb">id</span><span class="o">=</span><span class="nb">id</span><span class="p">,</span>
            <span class="n">path</span><span class="o">=</span><span class="n">path</span><span class="p">,</span>
            <span class="n">number_of_frames_at_project_fps</span><span class="o">=</span><span class="n">FileInfo</span><span class="p">(</span>
                <span class="n">path</span>
            <span class="p">)</span><span class="o">.</span><span class="n">get_number_of_frames</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">project</span><span class="o">.</span><span class="n">profile</span><span class="p">)</span>
        <span class="p">)</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">add_source</span><span class="p">(</span><span class="n">source</span><span class="p">,</span> <span class="n">source</span><span class="o">.</span><span class="n">number_of_frames_at_project_fps</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>Here we are actually talking about adding a clip. I had forgotten about that. It would make more sense to create a <code>Clip</code> then instead of a <code>FileInfo</code>. Let’s add <code>get_number_of_frames</code> to <code>Clip</code> and then we can get rid of <code>FileInfo</code> and <code>rlvideolib.mlthelpers</code> completely.</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m &#39;Move get_number_of_frames to Clip.&#39;
...................................................
----------------------------------------------------------------------
Ran 51 tests in 2.955s

OK
[main c13f4cb] Move get_number_of_frames to Clip.
 4 files changed, 7 insertions(+), 14 deletions(-)
 delete mode 100644 rlvideolib/mlthelpers.py
</pre>
</div>
</div>
</div>
<h2 id="thinking-about-number-of-frames">Thinking about number of frames</h2>
<p>We saw in an <a href="/writing/devlog-004-proxies-with-correct-fps/index.html">earlier devlog</a> that the number of frames that we store is actually the number of frames at the current project FPS. I dig into the MLT source code and see that the out point seems to be calculated based on the FPS:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="n">mlt_position</span> <span class="n">frames</span> <span class="o">=</span> <span class="p">(</span><span class="n">mlt_position</span><span class="p">)</span> <span class="n">lrint</span><span class="p">(</span><span class="n">format</span><span class="o">-&gt;</span><span class="n">duration</span> <span class="o">*</span> <span class="n">mlt_profile_fps</span><span class="p">(</span><span class="n">profile</span><span class="p">)</span>
                                           <span class="o">/</span> <span class="n">AV_TIME_BASE</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="n">mlt_properties_get_position</span><span class="p">(</span><span class="n">properties</span><span class="p">,</span> <span class="s">&quot;out&quot;</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span>
    <span class="n">mlt_properties_set_position</span><span class="p">(</span><span class="n">properties</span><span class="p">,</span> <span class="s">&quot;out&quot;</span><span class="p">,</span> <span class="n">frames</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="n">mlt_properties_get_position</span><span class="p">(</span><span class="n">properties</span><span class="p">,</span> <span class="s">&quot;length&quot;</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span>
    <span class="n">mlt_properties_set_position</span><span class="p">(</span><span class="n">properties</span><span class="p">,</span> <span class="s">&quot;length&quot;</span><span class="p">,</span> <span class="n">frames</span><span class="p">);</span>
</pre>
</div>
</div>
</div>
<p>I wonder if we can do the same calculation so that we don’t have to depend on MLT for <code>get_number_of_frames</code>?</p>
<p>I’m not ready for that. Let’s rewrite</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">get_number_of_frames</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">profile</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">mlt</span><span class="o">.</span><span class="n">Producer</span><span class="p">(</span><span class="n">profile</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">path</span><span class="p">)</span><span class="o">.</span><span class="n">get_playtime</span><span class="p">()</span>
</pre>
</div>
</div>
</div>
<p>to this</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">calculate_length_at_fps</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">mlt_profile</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">mlt</span><span class="o">.</span><span class="n">Producer</span><span class="p">(</span><span class="n">mlt_profile</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">path</span><span class="p">)</span><span class="o">.</span><span class="n">get_playtime</span><span class="p">()</span>
</pre>
</div>
</div>
</div>
<p>to clarify a bit more what it is actually doing.</p>
<p>With this change, I think that the previous rename we did of <code>FileSource.length</code> to <code>FileSource.number_of_frames_at_project_fps</code> can be reverted. I think it makes sense to talk about a length in terms of frames. If we change the project FPS, all lengths have to be recalculated, and I think this makes sense. With the new <code>calculate_length_at_fps</code> it is still clear that this length depends on the FPS I think.</p>
<p>Let’s commit:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m &#39;Rename Clip..get_number_of_frames to Clip..calculate_length_at_fps.&#39;
...................................................
----------------------------------------------------------------------
Ran 51 tests in 3.457s

OK
[main 94de3c1] Rename Clip..get_number_of_frames to Clip..calculate_length_at_fps.
 2 files changed, 3 insertions(+), 3 deletions(-)
</pre>
</div>
</div>
</div>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m &#39;Rename FileSource.number_of_frames_at_project_fps to FileSource.length.&#39;
...................................................
----------------------------------------------------------------------
Ran 51 tests in 2.952s

OK
[main 5bca102] Rename FileSource.number_of_frames_at_project_fps to FileSource.length.
 2 files changed, 12 insertions(+), 12 deletions(-)
</pre>
</div>
</div>
</div>
<p>Now when <code>Transaction.add_clip</code> reads like this</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">add_clip</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="nb">id</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
    <span class="n">source</span> <span class="o">=</span> <span class="n">FileSource</span><span class="p">(</span>
        <span class="nb">id</span><span class="o">=</span><span class="nb">id</span><span class="p">,</span>
        <span class="n">path</span><span class="o">=</span><span class="n">path</span><span class="p">,</span>
        <span class="n">length</span><span class="o">=</span><span class="n">Clip</span><span class="p">(</span>
            <span class="n">path</span>
        <span class="p">)</span><span class="o">.</span><span class="n">calculate_length_at_fps</span><span class="p">(</span><span class="n">mlt_profile</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">project</span><span class="o">.</span><span class="n">profile</span><span class="p">)</span>
    <span class="p">)</span>
    <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">add_source</span><span class="p">(</span><span class="n">source</span><span class="p">,</span> <span class="n">source</span><span class="o">.</span><span class="n">length</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>I don’t think we need this comment anymore:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="c1"># NOTE: The length depends on the FPS of the project. Once the first</span>
<span class="c1"># FileSource is added to the project, the FPS of the project can not be</span>
<span class="c1"># changed.</span>
</pre>
</div>
</div>
</div>
<p>I think the code above makes it clear enough that the length depends on the FPS of the project.</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m &#39;Remove note about length/FPS since this is clear enough in the code now.&#39;
...................................................
----------------------------------------------------------------------
Ran 51 tests in 2.955s

OK
[main ab10ec9] Remove note about length/FPS since this is clear enough in the code now.
 1 file changed, 4 deletions(-)
</pre>
</div>
</div>
</div>
<p>Sometimes I feel bad for changing the code back and forth. But I don’t think I should feel bad. I think it’s a good thing to always make the code express our intentions as well as possible. If that means that names change back and forth, that’s ok.</p>
<h2 id="clip-proxies">Clip proxies</h2>
<p>What more functionality can the clip class attract? How about proxy generation?</p>
<p>A proxy clip is an alternative version of a clip. An alternative file on disk that represents the same thing but in a format that is easier to work with.</p>
<p>It makes sense.</p>
<p>Let’s extract it:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">Clip</span><span class="p">:</span>

    <span class="o">...</span>

    <span class="k">def</span> <span class="nf">generate_proxy</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">proxy_spec</span><span class="p">,</span> <span class="n">progress</span><span class="p">):</span>
        <span class="c1"># TODO: call progress</span>
        <span class="n">checksum</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">md5</span><span class="p">()</span>
        <span class="n">proxy_path</span> <span class="o">=</span> <span class="n">proxy_spec</span><span class="o">.</span><span class="n">get_path</span><span class="p">(</span><span class="n">checksum</span><span class="p">)</span>
        <span class="n">proxy_tmp_path</span> <span class="o">=</span> <span class="n">proxy_spec</span><span class="o">.</span><span class="n">get_tmp_path</span><span class="p">(</span><span class="n">checksum</span><span class="p">)</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">proxy_path</span><span class="p">):</span>
            <span class="n">proxy_spec</span><span class="o">.</span><span class="n">ensure_dir</span><span class="p">()</span>
            <span class="n">subprocess</span><span class="o">.</span><span class="n">check_call</span><span class="p">([</span>
                <span class="s2">&quot;ffmpeg&quot;</span><span class="p">,</span>
                <span class="s2">&quot;-y&quot;</span><span class="p">,</span>
                <span class="s2">&quot;-i&quot;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">path</span><span class="p">,</span>
                <span class="s2">&quot;-vf&quot;</span><span class="p">,</span> <span class="s2">&quot;yadif,scale=960:540&quot;</span><span class="p">,</span>
                <span class="s2">&quot;-q:v&quot;</span><span class="p">,</span> <span class="s2">&quot;3&quot;</span><span class="p">,</span>
                <span class="s2">&quot;-vcodec&quot;</span><span class="p">,</span> <span class="s2">&quot;mjpeg&quot;</span><span class="p">,</span>
                <span class="s2">&quot;-acodec&quot;</span><span class="p">,</span> <span class="s2">&quot;pcm_s16le&quot;</span><span class="p">,</span>
                <span class="n">proxy_tmp_path</span>
            <span class="p">])</span>
            <span class="n">os</span><span class="o">.</span><span class="n">rename</span><span class="p">(</span><span class="n">proxy_tmp_path</span><span class="p">,</span> <span class="n">proxy_path</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">proxy_path</span>
</pre>
</div>
</div>
</div>
<p>And <code>FileSource.load_proxy</code> can be reduced to this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">load_proxy</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">profile</span><span class="p">,</span> <span class="n">proxy_spec</span><span class="p">,</span> <span class="n">progress</span><span class="p">):</span>
    <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">create_producer</span><span class="p">(</span>
        <span class="n">profile</span><span class="p">,</span>
        <span class="n">Clip</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">path</span><span class="p">)</span><span class="o">.</span><span class="n">generate_proxy</span><span class="p">(</span><span class="n">proxy_spec</span><span class="p">,</span> <span class="n">progress</span><span class="p">)</span>
    <span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>This reads quite nicely I think. Let’s commit:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m &#39;Extract Clip.generate_proxy.&#39;
...................................................
----------------------------------------------------------------------
Ran 51 tests in 2.929s

OK
[main cc85022] Extract Clip.generate_proxy.
 2 files changed, 25 insertions(+), 18 deletions(-)
</pre>
</div>
</div>
</div>
<h2 id="proxy-spec-location">Proxy spec location</h2>
<p>The <code>ProxySpec</code> class currently lives in <code>rlvideolib.domain.project</code>. I think a much better place would be <code>rlvideolib.domain.clip</code>.</p>
<p>Let’s move it over.</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m &#39;Move ProxySpec to rlvideolib.domain.clip.&#39;
...................................................
----------------------------------------------------------------------
Ran 51 tests in 2.903s

OK
[main 36932f0] Move ProxySpec to rlvideolib.domain.clip.
 2 files changed, 50 insertions(+), 49 deletions(-)
</pre>
</div>
</div>
</div>
<h2 id="proxy-spec-cleanup">Proxy spec cleanup</h2>
<p>The proxy spec has a method for setting properties on a consumer:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">adjust_consumer</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">consumer</span><span class="p">):</span>
    <span class="n">consumer</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;vcodec&quot;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">vcodec</span><span class="p">)</span>
    <span class="n">consumer</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;acodec&quot;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">acodec</span><span class="p">)</span>
    <span class="n">consumer</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;qscale&quot;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">qscale</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>Now when we use FFmpeg for proxy generation, this is no longer used.</p>
<p>But we did hardcode some values for FFmpeg, let’s change <code>adjust_consumer</code> to <code>get_ffmpeg_arguments</code>:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">get_ffmpeg_arguments</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="k">return</span> <span class="p">[</span>
        <span class="s2">&quot;-vf&quot;</span><span class="p">,</span> <span class="sa">f</span><span class="s2">&quot;yadif,scale=-1:</span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">height</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>
        <span class="s2">&quot;-q:v&quot;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">qscale</span><span class="p">,</span>
        <span class="s2">&quot;-vcodec&quot;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">vcodec</span><span class="p">,</span>
        <span class="s2">&quot;-acodec&quot;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">acodec</span><span class="p">,</span>
    <span class="p">]</span>
</pre>
</div>
</div>
</div>
<p>And use it like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">generate_proxy</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">proxy_spec</span><span class="p">,</span> <span class="n">progress</span><span class="p">):</span>

    <span class="o">...</span>

    <span class="n">subprocess</span><span class="o">.</span><span class="n">check_call</span><span class="p">(</span>
        <span class="p">[</span>
            <span class="s2">&quot;ffmpeg&quot;</span><span class="p">,</span>
            <span class="s2">&quot;-y&quot;</span><span class="p">,</span>
            <span class="s2">&quot;-i&quot;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">path</span><span class="p">,</span>
        <span class="p">]</span>
        <span class="o">+</span>
        <span class="n">proxy_spec</span><span class="o">.</span><span class="n">get_ffmpeg_arguments</span><span class="p">()</span>
        <span class="o">+</span>
        <span class="p">[</span>
            <span class="n">proxy_tmp_path</span>
        <span class="p">]</span>
    <span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>Commit:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ./make.py commit -m &#39;ProxySpec know how to generate FFmpeg arguments for conversion.&#39;
...................................................
----------------------------------------------------------------------
Ran 51 tests in 3.412s

OK
[main 6579178] ProxySpec know how to generate FFmpeg arguments for conversion.
 1 file changed, 20 insertions(+), 14 deletions(-)
</pre>
</div>
</div>
</div>
<h2 id="summary">Summary</h2>
<p>I am quite happy with the refactoring that we did in this session. We finally have a concept of a clip in the source code and it turned out that it attracted a bit of functionality that previously was spread across the code.</p>
<p>The code base is now a little cleaner.</p>
<p>Why is that important?</p>
<p>Because clear thinking is clear writing and vice versa. It applies to code as well. If we have expressed our thinking clear in code, thinking about it is easier, and so making the next change is easier. And to think clearly about it, we need to write about it, refactor it, until it expresses our ideas clearly. It’s a circle that probably never ends but perhaps slows down as our ideas and the expression of them in code approach each other.</p>
]]></description>
    <pubDate>Mon, 31 Jul 2023 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/devlog-006-adding-the-concept-of-a-clip/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>
<item>
    <title>DevLog 005: MLT proxy hell</title>
    <link>http://rickardlindberg.me/writing/devlog-005-mlt-proxy-hell/</link>
    <description><![CDATA[<h1>DevLog 005: MLT proxy hell</h1>

<p><em>Published on 31 July 2023.</em></p>

<p>I want to use the <a href="/projects/rlvideo/index.html">video editor</a> to edit footage that I have shot this summer. It starts out well, gives me a lot of problems, and resolves in the end.</p>
<h2 id="a-promising-start">A promising start</h2>
<p>To load all clips that I have, I try this command:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ rlvideo a6400/* hero8/*
</pre>
</div>
</div>
</div>
<p>It takes a while to load all the clips. This is expected. When we load a clip we need to figure out its length so that we can correctly place it on the timeline. This is a one time cost when adding new clips. And I have shot many clips this summer:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ ls a6400/* hero8/* | wc -l
270
</pre>
</div>
</div>
</div>
<p>I patiently wait.</p>
<p>After a while the GUI pops up and proxy clips start to render in the background. Meanwhile the GUI is quite snappy and we can start to make edits right away.</p>
<p>Aside from the lack of progress bar when loading clips, the application works as intended.</p>
<p>I figure it will take a while to render all proxy clips, so I leave it open and go do something else for a while.</p>
<p>
<center>
<img src="loading.png" title="fig:" alt="Loading clips." />
</center>
</p>
<h2 id="crashes">Crashes</h2>
<p>Then I hear that the fan stops making noises. Already done I think? Hmm. Where did my application go? The window is closed, and so is the terminal from which I opened it. How is that even possible? Reading the <code>dmesg</code> output, the application seems to have segfaulted.</p>
<p>I spend many hours trying to figure out what is going on. What is particularly annoying is that you have to wait a long time to reproduce it. The segfault does not happen right away.</p>
<p>Eventually I narrow down the problem to proxy generation. At least I think so. If I comment out generation of proxy clips, I can load many clips without a crash.</p>
<p>In an earlier version of the program, we generated proxy clips using FFmpeg. Then we switched over to using MLT. I got the idea that you can do it with MLT from <a href="http://jliljebl.github.io/flowblade/">Flowblade</a>. It also made it easier to show progress in the GUI.</p>
<p>When we made the switch, I noticed that something happened to the colors of the proxy clips. They seemed to look a little bleaker than the original. I don’t recall having this problem when we generated proxies using FFmpeg.</p>
<p>Odd looking colors and segfaults. I think it’s time to go back to generating proxy clips using FFmpeg.</p>
<h2 id="proxies-with-ffmpeg">Proxies with FFmpeg</h2>
<p>Here is what I’m trying right now.</p>
<p>Instead of this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">load_proxy</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">profile</span><span class="p">,</span> <span class="n">proxy_spec</span><span class="p">,</span> <span class="n">progress</span><span class="p">):</span>
    <span class="n">producer</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">create_producer</span><span class="p">(</span><span class="n">profile</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">path</span><span class="p">)</span>
    <span class="n">checksum</span> <span class="o">=</span> <span class="n">md5</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">path</span><span class="p">)</span>
    <span class="n">proxy_path</span> <span class="o">=</span> <span class="n">proxy_spec</span><span class="o">.</span><span class="n">get_path</span><span class="p">(</span><span class="n">checksum</span><span class="p">)</span>
    <span class="n">proxy_tmp_path</span> <span class="o">=</span> <span class="n">proxy_spec</span><span class="o">.</span><span class="n">get_tmp_path</span><span class="p">(</span><span class="n">checksum</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">proxy_path</span><span class="p">):</span>
        <span class="n">proxy_spec</span><span class="o">.</span><span class="n">ensure_dir</span><span class="p">()</span>
        <span class="n">p</span> <span class="o">=</span> <span class="n">mlt</span><span class="o">.</span><span class="n">Profile</span><span class="p">()</span>
        <span class="n">p</span><span class="o">.</span><span class="n">from_producer</span><span class="p">(</span><span class="n">producer</span><span class="p">)</span>
        <span class="n">proxy_spec</span><span class="o">.</span><span class="n">adjust_profile</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
        <span class="n">producer</span> <span class="o">=</span> <span class="n">mlt</span><span class="o">.</span><span class="n">Producer</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">path</span><span class="p">)</span>
        <span class="n">consumer</span> <span class="o">=</span> <span class="n">mlt</span><span class="o">.</span><span class="n">Consumer</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="s2">&quot;avformat&quot;</span><span class="p">)</span>
        <span class="n">consumer</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;target&quot;</span><span class="p">,</span> <span class="n">proxy_tmp_path</span><span class="p">)</span>
        <span class="n">proxy_spec</span><span class="o">.</span><span class="n">adjust_consumer</span><span class="p">(</span><span class="n">consumer</span><span class="p">)</span>
        <span class="n">run_consumer</span><span class="p">(</span><span class="n">consumer</span><span class="p">,</span> <span class="n">producer</span><span class="p">,</span> <span class="n">progress</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">create_producer</span><span class="p">(</span><span class="n">profile</span><span class="p">,</span> <span class="n">proxy_tmp_path</span><span class="p">)</span>
        <span class="n">os</span><span class="o">.</span><span class="n">rename</span><span class="p">(</span><span class="n">proxy_tmp_path</span><span class="p">,</span> <span class="n">proxy_path</span><span class="p">)</span>
    <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">create_producer</span><span class="p">(</span><span class="n">profile</span><span class="p">,</span> <span class="n">proxy_path</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>We do this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">load_proxy</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">profile</span><span class="p">,</span> <span class="n">proxy_spec</span><span class="p">,</span> <span class="n">progress</span><span class="p">):</span>
    <span class="n">producer</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">create_producer</span><span class="p">(</span><span class="n">profile</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">path</span><span class="p">)</span>
    <span class="n">checksum</span> <span class="o">=</span> <span class="n">md5</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">path</span><span class="p">)</span>
    <span class="n">proxy_path</span> <span class="o">=</span> <span class="n">proxy_spec</span><span class="o">.</span><span class="n">get_path</span><span class="p">(</span><span class="n">checksum</span><span class="p">)</span>
    <span class="n">proxy_tmp_path</span> <span class="o">=</span> <span class="n">proxy_spec</span><span class="o">.</span><span class="n">get_tmp_path</span><span class="p">(</span><span class="n">checksum</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">proxy_path</span><span class="p">):</span>
        <span class="n">proxy_spec</span><span class="o">.</span><span class="n">ensure_dir</span><span class="p">()</span>
        <span class="n">subprocess</span><span class="o">.</span><span class="n">check_call</span><span class="p">([</span>
            <span class="s2">&quot;ffmpeg&quot;</span><span class="p">,</span>
            <span class="s2">&quot;-y&quot;</span><span class="p">,</span>
            <span class="s2">&quot;-i&quot;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">path</span><span class="p">,</span>
            <span class="s2">&quot;-vf&quot;</span><span class="p">,</span> <span class="s2">&quot;yadif,scale=960:540&quot;</span><span class="p">,</span>
            <span class="s2">&quot;-q:v&quot;</span><span class="p">,</span> <span class="s2">&quot;3&quot;</span><span class="p">,</span>
            <span class="s2">&quot;-vcodec&quot;</span><span class="p">,</span> <span class="s2">&quot;mjpeg&quot;</span><span class="p">,</span>
            <span class="s2">&quot;-acodec&quot;</span><span class="p">,</span> <span class="s2">&quot;pcm_s16le&quot;</span><span class="p">,</span>
            <span class="n">proxy_tmp_path</span>
        <span class="p">])</span>
        <span class="n">os</span><span class="o">.</span><span class="n">rename</span><span class="p">(</span><span class="n">proxy_tmp_path</span><span class="p">,</span> <span class="n">proxy_path</span><span class="p">)</span>
    <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">create_producer</span><span class="p">(</span><span class="n">profile</span><span class="p">,</span> <span class="n">proxy_path</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>We can can let the <code>proxy_spec</code> set the FFmpeg options. The above is just an experiment to see if this works better.</p>
<p>So far, it looks promising. It has been working for a couple of hours and the proxy clips look better than before.</p>
<p>I’m gonna make some dinner and we’ll see the status later on.</p>
<h2 id="after-dinner">After dinner</h2>
<p>All proxy clips rendered successfully. The editor is still alive and I can scrub all the clips. Nice!</p>
<h2 id="summary">Summary</h2>
<p>Generating proxies using MLT always felt a little awkward. All we want to do is to scale the clip, encode it using a seek-friendly format, and leave everything else as is. With MLT we had to fiddle around with different profiles to make sure FPS was preserved and recreate producers with different profiles. It never felt like the proper solution.</p>
<p>Doing the conversion using FFmpeg is much more straight forward. There are two objections that I can have to that solution:</p>
<ol type="1">
<li>It calls an external process</li>
<li>We lost the call to <code>progress</code></li>
</ol>
<p>I browsed the web for solutions to the progress problem. And there seems to be many solutions for that. We can probably figure out one that works for us. And to be honest, right now, progress in the GUI is not the most important thing. Right now, FFmpeg outputs some statistics to the terminal, so we could have a look there for some kind of progress.</p>
<p>When it comes to calling external processes, I’m not sure what I think. I know I don’t have a problem with it. Why do I object then? Honestly, I don’t know. Something tells me that it is a little ugly.</p>
<p>When I started this project, I thought it would only be possible to do with the help of MLT. If the Python MLT bindings keep giving me segfaults and other hard times, will the project fail? Maybe. So what is my strategy? I think I will try to isolate the MLT code as much as possible and use other tools where possible (FFmpeg for proxy generation for example). If I manage to isolate the core of a video editor that is not depending on MLT, then perhaps I can also make it work with another video library if there is one. It will be an interesting exercise.</p>
]]></description>
    <pubDate>Mon, 31 Jul 2023 00:00:00 UT</pubDate>
    <guid>http://rickardlindberg.me/writing/devlog-005-mlt-proxy-hell/</guid>
    <dc:creator>Rickard Lindberg</dc:creator>
</item>

    </channel>
</rss>
