<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Rickard's personal homepage: latest posts tagged newsletter</title>
    <link href="http://rickardlindberg.me/tags/newsletter/atom.xml" rel="self" />
    <link href="http://rickardlindberg.me" />
    <id>http://rickardlindberg.me/tags/newsletter/atom.xml</id>
    <author>
        <name>Rickard Lindberg</name>
        <email>rickard@rickardlindberg.me</email>
    </author>
    <updated>2024-08-01T00:00:00Z</updated>
    <entry>
    <title>Newsletter July 2024: Note Making Re-Visited</title>
    <link href="http://rickardlindberg.me/writing/newsletter/july-2024/index.html" />
    <id>http://rickardlindberg.me/writing/newsletter/july-2024/index.html</id>
    <published>2024-08-01T00:00:00Z</published>
    <updated>2024-08-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Newsletter July 2024: Note Making Re-Visited</h1>

<p><em>Published on  1 August 2024.</em></p>

<p>July means vacation. Vacation means more time for recreational activities and working on things I enjoy.</p>
<p>For the recreational part, I’ve spend a lot of time away from the computer. One thing I’ve been doing quite a lot more is running. Here I am participating in a trail race:</p>
<center>
<p>
<img src="/writing/newsletter/july-2024/kolmarden.jpg">
</p>
</center>
<p>For the working on things I enjoy part, I’ve done some development on my note taking application and practiced taking better notes. I also managed to finish up an old blog post.</p>
<h2 id="note-taking-application">Note Taking Application</h2>
<p>In 2020 I read the book <em>How to Take Smart Notes</em> by Sönke Ahrens. It describes a specific way to take notes with the intent to turn those notes into new texts. I wanted a program that closely mimicked this method but couldn’t find one. So I set out to create my own. You can see a demo of it in this video that I made in 2021:</p>
<center>
<iframe width="560" height="315" src="https://www.youtube.com/embed/Xh2bik1cOl0" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write;
encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen>
</iframe>
</center>
<p>This month my interest for smart notes resurfaced. I use the program regularly, but I find that I mostly collect notes, and don’t do much with them. I read more about the approach in the book and in articles I found online. And in my own notes. I made some small improvements to my program to better support the smart notes workflow. I made text rendering more pretty and added the ability to color notes differently depending on the kind of note.</p>
<h2 id="literate-programming">Literate Programming</h2>
<p>Then I thought I should practice actually producing some text from my notes. One area of interest to me is literate programming. I started collecting notes on the topic, organizing them in my program, reading more articles about literate programming, and taking more notes. Here is a current snapshot:</p>
<center>
<p>
<img
src="/writing/newsletter/july-2024/smartnotes.png">
</p>
</center>
<p>I though I would write a blog post about literate programming. So I started to build a table of contents out of my different notes. But when I did that, I found that I couldn’t piece together a narrative. But I did find another possible narrative that includes topics from literate programming.</p>
<p>I hope this process will eventually generate a few blog posts as output.</p>
<h2 id="one-file-programs">One-File Programs</h2>
<p>One idea that came from the literate programming research is what I call one-file programs. I asked myself what makes programs easier to read and understand. I though of these characteristics:</p>
<ul>
<li><p>Small: Fits in a single file</p></li>
<li><p>Standalone: With as few dependencies as possible</p></li>
<li><p>Custom for me: fork and make changes for yourself</p></li>
</ul>
<p>I’m currently experimenting with writing such programs, and you can find the repo here: <a href="https://github.com/rickardlindberg/one-file-programs">one-file-programs repo</a>.</p>
<p>This style of programming is also inspired by <a href="https://akkartik.name/freewheeling/">freewheeling apps</a> that I wrote about in the <a href="/writing/newsletter/june-2024/index.html">June newsletter</a>.</p>
<h2 id="output-tracking-vs-mocks">Output Tracking vs Mocks</h2>
<p>I also finished the blog post about <a href="/writing/output-tracking-vs-mocks/index.html">Output Tracking vs Mocks</a>. I started writing it many months ago, and then my motivation dropped, so I’m glad I managed to finish it.</p>
<p>As most of the times, writing about the topic helped me clarify my thinking about it and I learned something new. That’s the main reason that I write.</p>
<p>I also got some <a href="https://discord.com/channels/897648912851173408/1266778182934073365">feedback</a> on Discord.</p>
<h2 id="inventing-on-principle">Inventing on Principle</h2>
<p>I re-watched parts of <a href="https://www.youtube.com/watch?v=PUv66718DII">Inventing on Principle</a> by Bret Victor.</p>
<p>I was reminded that creators need to be able to see what they are doing without any mental mapping.</p>
<p>That is why one problem with literate programming is the mental burden of double compilation. You can’t run your debugger on the literate source, so you have to first compile it, and then do the mental mapping in the debugger.</p>
<p>This mental burden of course exists for regular programs as well. You have to imagine what the source code instructions would do.</p>
<p>A live system, like Smalltalk, is better in this regard. I want to explore more how to incorporate liveness in programming.</p>
]]></summary>
</entry>
<entry>
    <title>Newsletter June 2024: Quines and Smalltalk</title>
    <link href="http://rickardlindberg.me/writing/newsletter/june-2024/index.html" />
    <id>http://rickardlindberg.me/writing/newsletter/june-2024/index.html</id>
    <published>2024-07-02T00:00:00Z</published>
    <updated>2024-07-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Newsletter June 2024: Quines and Smalltalk</h1>

<p><em>Published on  2 July 2024.</em></p>

<p>I subscribe to <a href="https://avdi.codes/newsletters/">Avdi’s newsletter</a> because I find some of his writing and links interesting. I was clicking around on his site from one of the links in a newsletter and rediscovered <a href="https://avdi.codes/your-newsletter/">Your Newsletter (A Pattern Language of Banana Stands)</a>. This prompted me to try again to create a proper newsletter from these posts, and this one will be the first after a long break to also go out as en email.</p>
<h2 id="quine-wiki">Quine Wiki</h2>
<p>I came across <a href="https://merveilles.town/@m15o/112592228824944602">this toot</a> that says that the <a href="https://m15o.ichi.city/yon/">Yon</a> wiki is now implemented as a <a href="https://en.wikipedia.org/wiki/Quine_(computing)">quine</a> meaning that when you save a page in the wiki, it generates a new html file which is the new wiki, complete with source code for the wiki itself.</p>
<p>If you want to edit pages, you can do it through the user interface, but if you want to change other parts of the wiki, you have to to edit the source code (html file with Javascript).</p>
<p>That got me thinking. What would it take to make the whole wiki system editable from within itself? You would have to also embed the whole programming environment in the interface. Something like what Smalltalk did.</p>
<h2 id="view-source-code">View Source Code</h2>
<p>It also got be thinking of discoverable source code. If an application allowed modifications of itself from within itself, then source code must be present. “View source” in the browser was how I fist started learning programming. In Smalltalk you can “view source” for anything (almost). Wouldn’t that be a nicer (programming) world to live in?</p>
<h2 id="readable-code">Readable Code</h2>
<p>That led me to think about how to write code that is also easy to read. And I remembered <a href="https://viewsourcecode.org/snaptoken/kilo/">Build Your Own Text Editor</a> which is a sort of literate programming approach to explaining how to build a text editor. One problem with the literate programming approach is that is seems to take much more effort to create such programs and maintain them. Is there another way to make programs easier to understand?</p>
<p>One idea that came to mind was stripping features. Smaller programs are easier to read and understand than bigger ones. What if we can remove all but the most basic features? That would be a much smaller codebase to study. Then we can gradually add features once we understand the base.</p>
<p>One approach that I thought of to do this in practice is if test cases are somehow organized by feature. Then you can run the tests for the features that you are interested in, notice what code is covered, and delete all code which is not executed. Then you can study that.</p>
<p>Another thing that came to mind was how to organize code by features.</p>
<p>I might experiment with some of this for <a href="/projects/rlselect/index.html">rlselect</a>. I would like for people to know how this program works and be able to customize it to their needs. But I would like the customizations to be local to all users by forking instead of growing the code base for rlselect. This might be similar to what Kartik is doing with <a href="https://akkartik.name/freewheeling/">freewheeling apps</a>.</p>
]]></summary>
</entry>
<entry>
    <title>May 2024 Update</title>
    <link href="http://rickardlindberg.me/writing/newsletter/may-2024/index.html" />
    <id>http://rickardlindberg.me/writing/newsletter/may-2024/index.html</id>
    <published>2024-06-08T00:00:00Z</published>
    <updated>2024-06-08T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>May 2024 Update</h1>

<p><em>Published on  8 June 2024.</em></p>

<p>This is what I’ve been up to in May 2024:</p>
<ul>
<li><p>I made a video and blog post about <a href="/writing/function-to-oop-refactoring/index.html">refactoring a function to 6 classes</a>.</p></li>
<li><p>I continued writing on the blog post about <a href="/writing/output-tracking-vs-mocks/index.html">output tracking vs mocks</a>.</p></li>
<li><p>I started working on a new project: <a href="https://github.com/rickardlindberg/ride/">RIDE</a>. The goal is to create an IDE that suites my needs. Most likely, the project will not be successful, but it’s fun trying. The firsts component I started working on was a file tree where the whole structure is always shown. If it doesn’t fit on the screen, the text get smaller, and you can magnify parts of the tree by hoovering it.</p>
<center>
<p><img src="ride.png" alt="RIDE" /></p>
</center></li>
<li><p>I watched <a href="https://youtu.be/eJm44LJDU44">Bootstrapping Research &amp; Dynamicland, Dec 2019</a>. The idea of physical programming intrigued me.</p></li>
</ul>
]]></summary>
</entry>
<entry>
    <title>April 2024 Update</title>
    <link href="http://rickardlindberg.me/writing/newsletter/april-2024/index.html" />
    <id>http://rickardlindberg.me/writing/newsletter/april-2024/index.html</id>
    <published>2024-05-01T00:00:00Z</published>
    <updated>2024-05-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>April 2024 Update</h1>

<p><em>Published on  1 May 2024.</em></p>

<p>This is what I’ve been up to in April 2024:</p>
<ul>
<li><p>I started writing about <a href="/writing/output-tracking-vs-mocks/index.html">Output Tracking vs Mocks</a> (working title). I’m mainly writing it to refine my thinking on <a href="https://www.jamesshore.com/v2/projects/nullables/testing-without-mocks">Testing Without Mocks</a> patterns.</p></li>
<li><p>I watched <a href="https://youtu.be/P1vES9AgfC4">Moving IO to the edges of your app: Functional Core, Imperative Shell - Scott Wlaschin</a>. In it, Scott says that the functional core should return a decision that is then executed by the imperative shell. I want to explore that approach more. Perhaps in the above mentioned blog post.</p></li>
</ul>
]]></summary>
</entry>
<entry>
    <title>March 2024 Update</title>
    <link href="http://rickardlindberg.me/writing/newsletter/march-2024/index.html" />
    <id>http://rickardlindberg.me/writing/newsletter/march-2024/index.html</id>
    <published>2024-04-02T00:00:00Z</published>
    <updated>2024-04-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>March 2024 Update</h1>

<p><em>Published on  2 April 2024.</em></p>

<p>This is what I’ve been up to in March 2024:</p>
<ul>
<li><p>I wanted to learn more about the roots of CI/CD (Continuous Integration/Delivery/Deployment).</p>
<ul>
<li><p>I read the chapter <a href="https://www.jamesshore.com/v2/books/aoad2/continuous_integration">Continuous Integration</a> from James Shore’s book The Art of Agile Development.</p></li>
<li><p>I read <a href="https://continuousdelivery.com/">Continuous Delivery</a> by Jez Humble and David Farley.</p></li>
<li><p>I learned from both sources, and I’m eager to start applying those ideas to various projects.</p></li>
</ul></li>
<li><p>I started reading <a href="https://samnewman.io/books/building_microservices_2nd_edition/">Building Microservices</a> by Sam Newman. I wanted to learn what microservices are all about. So far, my impression is that it is an exercise in building distributed systems, and many projects will be better of by not using it since distributed systems come with a cost.</p></li>
<li><p>I studied <a href="https://www.jamesshore.com/v2/projects/nullables/testing-without-mocks">Testing Without Mocks</a> more. In particular <a href="https://www.jamesshore.com/v2/projects/nullables/testing-without-mocks#output-tracking">Output Tracking</a>. Output Tracking is currently the most difficult aspect for me to know if I use correctly. I’ve previously touched on this subject in <a href="/writing/how-to-test-a-router/index.html">How to test a router?</a> I will probably write another blog post to refine my thinking.</p></li>
</ul>
]]></summary>
</entry>
<entry>
    <title>February 2024 Update</title>
    <link href="http://rickardlindberg.me/writing/newsletter/february-2024/index.html" />
    <id>http://rickardlindberg.me/writing/newsletter/february-2024/index.html</id>
    <published>2024-03-01T00:00:00Z</published>
    <updated>2024-03-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>February 2024 Update</h1>

<p><em>Published on  1 March 2024.</em></p>

<p>This is what I’ve been up to in February 2024:</p>
<ul>
<li><p>For the first time since I started writing these newsletters in <a href="/writing/newsletter/june-2019/index.html">June 2019</a> I haven’t really got anything to write here. Even though I’ve been busy with other things in previous months as well, I’ve usually done something related to programming that is worth writing about. But not this month.</p></li>
<li><p>Oh, wait. I did actually browse through a book about Smalltalk and though about how it was way ahead of its time and that we still lack things in our development environments that were present in Smalltalk.</p></li>
</ul>
]]></summary>
</entry>
<entry>
    <title>January 2024 Update</title>
    <link href="http://rickardlindberg.me/writing/newsletter/january-2024/index.html" />
    <id>http://rickardlindberg.me/writing/newsletter/january-2024/index.html</id>
    <published>2024-02-07T00:00:00Z</published>
    <updated>2024-02-07T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>January 2024 Update</h1>

<p><em>Published on  7 February 2024.</em></p>

<p>This is what I’ve been up to in January 2024:</p>
<ul>
<li>I tried to solve <a href="https://adventofcode.com/">Advent of Code</a> day 21, part 2, but failed. I decided to stop here for now. I will perhaps give it another try next year.</li>
</ul>
]]></summary>
</entry>
<entry>
    <title>December 2023 Update</title>
    <link href="http://rickardlindberg.me/writing/newsletter/december-2023/index.html" />
    <id>http://rickardlindberg.me/writing/newsletter/december-2023/index.html</id>
    <published>2024-01-02T00:00:00Z</published>
    <updated>2024-01-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>December 2023 Update</h1>

<p><em>Published on  2 January 2024.</em></p>

<p>This is what I’ve been up to in December 2023:</p>
<ul>
<li><p>This month I’ve been all consumed by <a href="https://adventofcode.com/">Advent of Code</a>. This year was the first year that I tried to solve all puzzles from beginning to end. At the time of this writing, I have completely solved day 1-20 and part 1 of day 21.</p></li>
<li><p>I solved all puzzles in my <a href="https://github.com/rickardlindberg/linda-meta-oop">experimental programming language</a>. One reason I did that was to see how good a fit the language was and also get feedback on how the language could be improved to be a better fit for a broader range of problems.</p></li>
<li><p>The Advent of Code experience has been as expected: fun, challenging, frustrating, and stressful. The most fun thing I learned was an algorithm for <a href="https://en.wikipedia.org/wiki/Point_in_polygon">filling polygons</a>. It was useful for two problems, but only fast enough for one.</p></li>
<li><p>The experience of developing my language at the same time has also been fun, but the pressure of completing the puzzles has given me less focus on the language itself. But I managed to add some features to the language that were direct needs that came up when solving the puzzles. One was a simple, built-in test framework. Another was nicer syntax. Most of the time though, it was not limitations in the language that made solving the puzzles hard. However, sometimes the solution would have been more straightforward in a better suited language.</p></li>
</ul>
]]></summary>
</entry>
<entry>
    <title>November 2023 Update</title>
    <link href="http://rickardlindberg.me/writing/newsletter/november-2023/index.html" />
    <id>http://rickardlindberg.me/writing/newsletter/november-2023/index.html</id>
    <published>2023-12-12T00:00:00Z</published>
    <updated>2023-12-12T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>November 2023 Update</h1>

<p><em>Published on 12 December 2023.</em></p>

<p>This is what I’ve been up to in November 2023:</p>
<ul>
<li><p>I continued work on my <a href="https://github.com/rickardlindberg/linda-meta-oop">experimental programming language</a> which is based on <a href="/writing/rlmeta/index.html">RLMeta</a>.</p>
<ul>
<li><p>I did more research on the paradigm of the <a href="https://en.wikipedia.org/wiki/Linda_(coordination_language)">Linda programming language</a> and how it would fit together with RLMeta.</p></li>
<li><p>I started evolving the RLMeta implementation to support the paradigm of Linda. I realized that RLMeta could itself be implemented in this paradigm and started to evolve the code base in that direction.</p></li>
<li><p>I plan on solving <a href="https://adventofcode.com/">Advent of Code</a> puzzles using this language to see how problems from different domains can be expressed.</p></li>
<li><p>I really should document this language and my work on it better.</p></li>
</ul></li>
</ul>
]]></summary>
</entry>
<entry>
    <title>October 2023 Update</title>
    <link href="http://rickardlindberg.me/writing/newsletter/october-2023/index.html" />
    <id>http://rickardlindberg.me/writing/newsletter/october-2023/index.html</id>
    <published>2023-11-06T00:00:00Z</published>
    <updated>2023-11-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>October 2023 Update</h1>

<p><em>Published on  6 November 2023.</em></p>

<p>This is what I’ve been up to in October 2023:</p>
<ul>
<li><p>Somehow videos from <a href="https://computerhistory.org/">Computer History Museum</a> showed up in my Youtube feed and I once again got sucked into the world of <a href="/writing/alan-kay-notes/index.html">Alan Kay</a> and Smalltalk. Here are (some of?) the videos that I watched:</p>
<ul>
<li><a href="https://youtu.be/PaOMiNku1_M">CHM Live | Making Smalltalk</a></li>
<li><a href="https://youtu.be/loEREmEPEOY">CHM Live | Making Smalltalk: Member Event</a></li>
<li><a href="https://youtu.be/uknEhXyZgsg">Alto System Project: Dan Ingalls demonstrates Smalltalk</a></li>
</ul></li>
<li><p>I found the <a href="https://archive.org/details/byte-magazine-1981-08">Byte Magazine Volume 06 Number 08 - Smalltalk</a> online which covers many topics from Smalltalk. So interesting.</p></li>
<li><p>I played with some Smalltalks from <a href="https://smalltalkzoo.thechm.org/">the Smalltalk zoo</a>, and also with <a href="https://squeak.org/">Squeak</a>.</p></li>
<li><p>I played with RLMeta and worked on a <a href="https://github.com/rickardlindberg/rlmeta/tree/main/simpler_base">simpler base version</a>.</p></li>
<li><p>Revisiting Alan Kay, I once again was inspired by his ideas. What triggered it this time was re-watching <a href="https://www.youtube.com/watch?v=fhOHn9TClXY">Joe Armstrong &amp; Alan Kay - Joe Armstrong interviews Alan Kay</a>. In it, he mentions the <a href="https://en.wikipedia.org/wiki/Linda_(coordination_language)">Linda programming language</a> and how it relates to META II (which I’ve previously explored in <a href="/projects/rlmeta/index.html">RLMeta</a>). I decided to try to explore those ideas further in a new project: <a href="https://github.com/rickardlindberg/linda-meta-oop">https://github.com/rickardlindberg/linda-meta-oop</a>. Perhaps more to come there soon.</p></li>
<li><p>I watched <a href="https://youtu.be/CmIGPGPdxTI">Is Software Engineering Real Engineering? • Hillel Wayne • YOW! 2023</a>. What I remember from it now is that other engineering disciplines envy that software engineering has version control.</p></li>
<li><p>I had the realization that creating a DSL <em>might</em> be like science. You observe how a certain problem is solved or how a certain thing works. Then you try to <strong>describe</strong> that <strong>phenomena</strong> in a new language, the <strong>DSL</strong>. Then you make it run by <strong>writing a compiler</strong>. The new language allow people to solve problems that they might not have been able to do before. It allows them to think in a different way. The group of people who can <strong>create</strong> a DSL is most likely smaller than the group of people who can do useful work with one. Similar to how many people can use math today to solve useful problems, but might not have been able to invent math itself.</p></li>
</ul>
]]></summary>
</entry>
<entry>
    <title>September 2023 Update</title>
    <link href="http://rickardlindberg.me/writing/newsletter/september-2023/index.html" />
    <id>http://rickardlindberg.me/writing/newsletter/september-2023/index.html</id>
    <published>2023-10-10T00:00:00Z</published>
    <updated>2023-10-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>September 2023 Update</h1>

<p><em>Published on 10 October 2023.</em></p>

<p>This is what I’ve been up to in September 2023:</p>
<ul>
<li><p>I wrote another devlog about my <a href="/writing/devlog-013-raspberrypi-game-console/index.html">Raspberry Pi game console</a>.</p></li>
<li><p>I watched <a href="https://www.youtube.com/watch?v=3gib0hKYjB0">Continued Learning: The Beauty of Maintenance - Kent Beck - DDD Europe 2020</a>. What stuck in my mind was the metaphor that software development is like a swan. You can watch the beauty as it moves across the water. That represents the behavior of the software system. The features. But to make that happen, lots of things is going on under the surface that you don’t see. The swan paddles its feet (?) to go forward, poop comes out, it is messy. That is the structural changes needed in software to make the features possible. Refactoring.</p></li>
<li><p>I started reading <a href="https://www.davefarley.net/?p=352">Modern Software Engineering</a> by Dave Farley. So far, I’ve gotten a few useful ideas out of it.</p></li>
<li><p>When I started reading about software engineering, <a href="/writing/alan-kay-notes/index.html">Alan Kay</a> came to mind again. I revisited some of his talks, trying to find things about science and engineering in particular. I admire Alan’s work, and I also like the Agile concepts that Dave talks about. I’m interested in figuring out if they contradict, or if I can happily continue to admire both.</p></li>
<li><p>When reading about Alan Kay again, Bret Victor came to mind, and I watched his talk <a href="https://www.youtube.com/watch?v=agOdP2Bmieg">The Humane Representation of Thought</a>. I feel like his and Kay’s work are worth revisiting from time to time. For inspiration for better ways of doing things. And for inspiration of things to try to do differently.</p></li>
</ul>
]]></summary>
</entry>
<entry>
    <title>August 2023 Update</title>
    <link href="http://rickardlindberg.me/writing/newsletter/august-2023/index.html" />
    <id>http://rickardlindberg.me/writing/newsletter/august-2023/index.html</id>
    <published>2023-09-04T00:00:00Z</published>
    <updated>2023-09-04T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>August 2023 Update</h1>

<p><em>Published on  4 September 2023.</em></p>

<p>This is what I’ve been up to in August 2023:</p>
<ul>
<li><p>I continued writing <a href="/tags/devlog/index.html">DevLogs</a>. All about the development of my <a href="/projects/rlvideo/index.html">video editor</a>.</p></li>
<li><p>I wrote the perhaps <a href="/writing/agdpp-the-end/index.html">final article</a> in my <em>Agile Game Development with Python and Pygame</em> series. I will most like continue the series in the form of DevLogs.</p></li>
<li><p>I decided that I need to use more of my free time for other things than programming. I still want to continue writing though but, most likely, program a bit less.</p></li>
</ul>
]]></summary>
</entry>
<entry>
    <title>July 2023 Update</title>
    <link href="http://rickardlindberg.me/writing/newsletter/july-2023/index.html" />
    <id>http://rickardlindberg.me/writing/newsletter/july-2023/index.html</id>
    <published>2023-08-05T00:00:00Z</published>
    <updated>2023-08-05T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>July 2023 Update</h1>

<p><em>Published on  5 August 2023.</em></p>

<p>This is what I’ve been up to in July 2023:</p>
<ul>
<li><p>I continued work on my <a href="/projects/rlvideo/index.html">video editor</a>. Here is the initial blog post about it: <a href="/writing/writing-my-own-video-editor/index.html">Writing my own video editor</a>.</p></li>
<li><p>I started writing <a href="/tags/devlog/index.html">DevLogs</a>. DevLogs is an experiment to try to document development that I do on various projects. I will try to write what is going on in my head as I do various development tasks. So far, they have all been about development of the video editor.</p></li>
<li><p>I wrote a blog post called <a href="/writing/fast-feedback-on-graphical-code/index.html">How to get fast feedback on graphical code?</a> I share a technique that I started using while developing the video editor.</p></li>
</ul>
]]></summary>
</entry>
<entry>
    <title>June 2023 Update</title>
    <link href="http://rickardlindberg.me/writing/newsletter/june-2023/index.html" />
    <id>http://rickardlindberg.me/writing/newsletter/june-2023/index.html</id>
    <published>2023-07-04T00:00:00Z</published>
    <updated>2023-07-04T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>June 2023 Update</h1>

<p><em>Published on  4 July 2023.</em></p>

<p>This is what I’ve been up to in June 2023:</p>
<ul>
<li><p>I continued writing about the development of the <a href="/projects/agdpp/index.html">balloon shooter game</a>. The actual development is already done, and I’m still playing catch up with the articles. Here are the ones that I wrote this month:</p>
<ul>
<li><a href="/writing/agdpp-tdd-and-games/index.html">Does TDD work when building a game?</a></li>
<li><a href="/writing/agdpp-spawn-multiple-balloons/index.html">Spawn multiple balloons</a></li>
<li><a href="/writing/agdpp-multiplayer/index.html">Multiplayer</a></li>
</ul></li>
<li><p>I had a discussion with <a href="https://www.ronjeffries.com/">Ron</a> about high-level vs micro-tests. I wrote about it in <a href="/writing/high-level-low-level-ron-reply/index.html">High-level or micro-tests? A discussion with Ron.</a></p></li>
<li><p>I couldn’t resist the <a href="https://hachyderm.io/@rickardlindberg/110447282439624451">urge</a> to start working on my own video editor software. I will write a blog post (or maybe a new series?) about it. In the meantime, the code is on <a href="https://github.com/rickardlindberg/rlvideo">GitHub</a>. I am really not that good at naming my projects. They all start with “rl” plus the general function of the software:</p>
<ul>
<li><code>rlvideo</code>: My video editor.</li>
<li><a href="/projects/rlmeta/index.html">rlmeta</a>: My meta compiler.</li>
<li><a href="/projects/rliterate/index.html">rliterate</a>: My literate programming tool.</li>
<li><a href="/projects/rlselect/index.html">rlselect</a>: My interactive line searcher tool.</li>
<li>…</li>
</ul></li>
<li><p><a href="/writing/newsletter/may-2023/index.html">Last month</a> I wrote about that I started a new project: animation studio. I have since successfully used it to create some animations for a video. Now that I’ve started working on my own video editor, I’m thinking that I want to integrate that functionality into the video editor instead of developing it further. We’ll see.</p></li>
<li><p>I published one programming video on my <a href="https://www.youtube.com/channel/UC4XI09URnsM_YYTSizAMliA">Youtube channel</a>:</p>
<ul>
<li><a href="https://youtu.be/unYD_bPyadc">Spawn multiple balloons | Agile Game Development with Python and Pygame (part 5)</a></li>
</ul></li>
</ul>
]]></summary>
</entry>
<entry>
    <title>May 2023 Update</title>
    <link href="http://rickardlindberg.me/writing/newsletter/may-2023/index.html" />
    <id>http://rickardlindberg.me/writing/newsletter/may-2023/index.html</id>
    <published>2023-06-06T00:00:00Z</published>
    <updated>2023-06-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>May 2023 Update</h1>

<p><em>Published on  6 June 2023.</em></p>

<p>This is what I’ve been up to in May 2023:</p>
<ul>
<li><p>I continued working on the Balloon shooter game in my <a href="/projects/agdpp/index.html">Agile Game Development with Python and Pygame</a> series. I wrote 6 blog posts about it! The blog posts are a bit behind development. I still have some catch up to do. One thing that I will probably cover later is how we recorded sound effects for shooting a balloon. Here are the blog posts I wrote this month:</p>
<ul>
<li><a href="/writing/agdpp-game-over/index.html">Game over?</a></li>
<li><a href="/writing/agdpp-hit-balloon-and-score-points/index.html">Hit balloon and score points</a></li>
<li><a href="/writing/agdpp-turning-arrow/index.html">Turning arrow</a></li>
<li><a href="/writing/agdpp-wrapper-pygame-draw-circle-bug/index.html">A case for the infrastructure wrapper</a></li>
<li><a href="/writing/agdpp-logitech-gamepad-f310/index.html">Programming a Logitech Gamepad F310</a></li>
<li><a href="/writing/agdpp-score-as-text/index.html">Score as text</a></li>
</ul></li>
<li><p>I started a new project: animation studio. The purpose is to be able to create animations programmatically for use in my videos. Things like text appearing and animating away. It has a preview mode where I can work on an animation, and when I am happy with the result, I can press a key to export a set of images that I can then import as a video in my video editor. I think the version I have now can actually be usable for some things. I will probably write more about it later. In the meantime, here is the project on <a href="https://github.com/rickardlindberg/animate">GitHub</a>.</p></li>
<li><p>I wrote about <a href="/writing/how-to-test-a-router/index.html">how to test a router</a>. This is an example of how writing things down clarified my thinking and provided me with an answer. I’m glad I did it.</p></li>
<li><p>I published no videos on my <a href="https://www.youtube.com/channel/UC4XI09URnsM_YYTSizAMliA">Youtube channel</a>. Recently I’ve found it more valuable to blog. It is easier for me to write blogs and I think that I also find more value in going back to blogs (which are easily searchable). I think I will keep trying to make videos and find a good balance with blogging, but for now, I focus more on blogging.</p></li>
</ul>
]]></summary>
</entry>

</feed>
