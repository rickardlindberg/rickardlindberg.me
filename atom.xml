<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Rickard's personal homepage: latest posts</title>
    <link href="http://rickardlindberg.me/atom.xml" rel="self" />
    <link href="http://rickardlindberg.me" />
    <id>http://rickardlindberg.me/atom.xml</id>
    <author>
        <name>Rickard Lindberg</name>
        <email>rickard@rickardlindberg.me</email>
    </author>
    <updated>2023-04-24T00:00:00Z</updated>
    <entry>
    <title>Demo and game idea</title>
    <link href="http://rickardlindberg.me/writing/agdpp-demo-and-game-idea/" />
    <id>http://rickardlindberg.me/writing/agdpp-demo-and-game-idea/</id>
    <published>2023-04-24T00:00:00Z</published>
    <updated>2023-04-24T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Demo and game idea</h1>

<p><em>Published on 24 April 2023 in <a href="/projects/agdpp/index.html">Agile Game Development with Python and Pygame</a>.</em></p>

<p>In this episode we demo the “game” for our customer. We get some feedback on it and start evolving the game to meet our customer’s vision.</p>
<h2 id="video-version">Video version</h2>
<p>The video version of this episode:</p>
<center>
<iframe width="560" height="315" src="https://www.youtube.com/embed/z20IocFrKLY" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write;
encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen>
</iframe>
</center>
<h2 id="demo">Demo</h2>
<p>I mentioned to my son that I had started working on a game. He wanted to see it. I told him that there isn’t much to play yet, but that I can show him what it looks like.</p>
<p>I started the “game” and he watched the circle going back and forth.</p>
<p>For reference, this is what the “game” looks like now:</p>
<center>
<img src="animation.png" title="fig:" alt="Animated circle." />
</center>
<p>Then he tried to interact with the circle. He grabbed the mouse and clicked away and was disappointed that nothing happened. I told him that you can’t do anything yet, that it’s just an animation.</p>
<p>He looked at me sad and said “Dad, this game is boring.”</p>
<p>Initially I wasn’t planning on showing him the game because in this early stage there is not much to play, and I knew he was not going to like it. Did I ruin it?</p>
<p>Then I asked him, “What would you like to do with the circle?”</p>
<p>The sadness in his face disappeared and he started talking about balloons. He said that he wanted the circle to be a balloon and that he wanted to shoot down balloons with arrows.</p>
<p>I think we have an idea for a game.</p>
<h2 id="on-early-feedback">On early feedback</h2>
<p>My initial idea for the game was some kind of tetris variant. I was thinking that you have two boards and that you could help each other out by clearing blocks on each other’s boards. Cooperation seems more fun that competition.</p>
<p>Turns out, the customer wants a balloon shooter. If we hadn’t shown the demo, we might have never found that out.</p>
<h2 id="simplest-possible-version">Simplest possible version</h2>
<p>In the spirit of <a href="https://www.artima.com/articles/the-simplest-thing-that-could-possibly-work#part3">Ward</a> we ask ourselves what the simplest possible balloon shooter could look like. What is the absolute minimum version that I can give to my son and he can somewhat enjoy playing or at least recognize as a balloon shooter? (The goal is to create a game that <em>we</em> can enjoy playing together. That means some kind of multiplayer mode. But that is another for a later story.)</p>
<p>Here is what I’m thinking:</p>
<ul>
<li>1 balloon falling down the screen</li>
<li>1 arrow pointing in a fixed direction</li>
<li>1 button to shoot that single arrow</li>
<li>Then game over</li>
</ul>
<p>So the only challenge will be to fire the arrow at the right time for it to hit the balloon. You will either hit and get a point or miss and it’ll be game over.</p>
<p>Oh, and circles for the graphics is probably fine. The balloon can be drawn with one big circle, and the arrow maybe with three smaller circles in a row. If I tell my son to imagine they are balloons and arrows, I think he’ll accept that.</p>
<h2 id="first-story">First story</h2>
<p>To make progress towards a balloon shooter, I want to work on a story that is about drawing a balloon and an arrow. Create the initial scene of the game sort of.</p>
<p>Our game already animates a circle. Let’s put all behavior related to that circle into its own class called <code>Balloon</code>. Here is how our game <code>tick</code> method looks like now:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">tick</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">,</span> <span class="n">events</span><span class="p">):</span>
    <span class="o">...</span>
    <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">x</span> <span class="o">&gt;</span> <span class="mi">500</span><span class="p">:</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="mi">50</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">x</span> <span class="o">+=</span> <span class="n">dt</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">loop</span><span class="o">.</span><span class="n">clear_screen</span><span class="p">()</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">loop</span><span class="o">.</span><span class="n">draw_circle</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">x</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>After we extract the balloon class, it looks like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">tick</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">,</span> <span class="n">events</span><span class="p">):</span>
    <span class="o">...</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">balloon</span><span class="o">.</span><span class="n">tick</span><span class="p">(</span><span class="n">dt</span><span class="p">)</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">loop</span><span class="o">.</span><span class="n">clear_screen</span><span class="p">()</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">balloon</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">loop</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>And here is the balloon class:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">Balloon</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="mi">50</span>

    <span class="k">def</span> <span class="nf">tick</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">):</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">x</span> <span class="o">&gt;</span> <span class="mi">500</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="mi">50</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">x</span> <span class="o">+=</span> <span class="n">dt</span>

    <span class="k">def</span> <span class="nf">draw</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">loop</span><span class="p">):</span>
        <span class="n">loop</span><span class="o">.</span><span class="n">draw_circle</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">x</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>Any behavior that the balloon should have, we can now test at this lower level. We can instantiate a balloon, call its tick method, and observe that the right thing happens. There is no need to involve the game or the game loop. (At least if we accept exposing somewhat internal state like the x variable.)</p>
<p>With the balloon object in place, it is natural to create a new object called <code>Arrow</code> for our other piece in the balloon shooter game. We create a version that just draws a circle:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">Arrow</span><span class="p">:</span>

    <span class="k">def</span> <span class="nf">tick</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">):</span>
        <span class="k">pass</span>

    <span class="k">def</span> <span class="nf">draw</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">loop</span><span class="p">):</span>
        <span class="n">loop</span><span class="o">.</span><span class="n">draw_circle</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>We make sure it is included in the game by modifying the tick method of the game to also tick and draw the arrow:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">tick</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">,</span> <span class="n">events</span><span class="p">):</span>
    <span class="o">...</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">balloon</span><span class="o">.</span><span class="n">tick</span><span class="p">(</span><span class="n">dt</span><span class="p">)</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">arrow</span><span class="o">.</span><span class="n">tick</span><span class="p">(</span><span class="n">dt</span><span class="p">)</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">loop</span><span class="o">.</span><span class="n">clear_screen</span><span class="p">()</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">balloon</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">loop</span><span class="p">)</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">tick</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">loop</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>We notice a pattern here. It seems like the responsibility of the game is to call tick and draw on a set of objects. In games (or in Pygame) those objects are referred to as sprites. My understanding is that a sprite is any visual element that shows up in the game.</p>
<p>We refactor our game to reflect this new understanding:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">Game</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">loop</span><span class="p">):</span>
        <span class="o">...</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">balloon</span> <span class="o">=</span> <span class="n">Balloon</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">arrow</span> <span class="o">=</span> <span class="n">Arrow</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">sprites</span> <span class="o">=</span> <span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">balloon</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">arrow</span><span class="p">]</span>

    <span class="k">def</span> <span class="nf">tick</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">,</span> <span class="n">events</span><span class="p">):</span>
        <span class="o">...</span>
        <span class="k">for</span> <span class="n">sprite</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">sprites</span><span class="p">:</span>
            <span class="n">sprite</span><span class="o">.</span><span class="n">tick</span><span class="p">(</span><span class="n">dt</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">loop</span><span class="o">.</span><span class="n">clear_screen</span><span class="p">()</span>
        <span class="k">for</span> <span class="n">sprite</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">sprites</span><span class="p">:</span>
            <span class="n">sprite</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">loop</span><span class="p">)</span>

    <span class="o">...</span>
</pre>
</div>
</div>
</div>
<p>Is our game class just becoming a thing layer of loops? Can we move some of that responsibility to the game loop? I’m not certain yet, so we will leave it like this for now.</p>
<p>If we run the game now, this is what we see:</p>
<center>
<img src="scene1.png" title="fig:" alt="First scene of balloon shooter." />
</center>
<p>Not very pretty. What is that?</p>
<p>Let’s see if we can improve the drawing of the arrow. But remember, not perfection, but improvement. If I look at the game now, I don’t get an idea what the game is about. We just want to make the arrow slightly more realistic to convey the meaning of the object. We are still restricted to drawing circles. The current <code>draw_circle</code> looks like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">draw_circle</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">notify</span><span class="p">(</span><span class="s2">&quot;DRAW_CIRCLE&quot;</span><span class="p">,</span> <span class="p">{</span><span class="s2">&quot;x&quot;</span><span class="p">:</span> <span class="n">x</span><span class="p">})</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">pygame</span><span class="o">.</span><span class="n">draw</span><span class="o">.</span><span class="n">circle</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">screen</span><span class="p">,</span> <span class="s2">&quot;red&quot;</span><span class="p">,</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">50</span><span class="p">),</span> <span class="mi">40</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>That’s stupid! Why is there no ability to specify anything but the x-coordinate? Well, until now, we haven’t needed that. Now that we do need it, let’s add it. No biggie:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">draw_circle</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mi">50</span><span class="p">,</span> <span class="n">radius</span><span class="o">=</span><span class="mi">40</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s2">&quot;red&quot;</span><span class="p">):</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">notify</span><span class="p">(</span><span class="s2">&quot;DRAW_CIRCLE&quot;</span><span class="p">,</span> <span class="p">{</span><span class="s2">&quot;x&quot;</span><span class="p">:</span> <span class="n">x</span><span class="p">,</span> <span class="s2">&quot;y&quot;</span><span class="p">:</span> <span class="n">y</span><span class="p">,</span> <span class="s2">&quot;radius&quot;</span><span class="p">:</span> <span class="n">radius</span><span class="p">,</span> <span class="s2">&quot;color&quot;</span><span class="p">:</span> <span class="n">color</span><span class="p">})</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">pygame</span><span class="o">.</span><span class="n">draw</span><span class="o">.</span><span class="n">circle</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">screen</span><span class="p">,</span> <span class="n">color</span><span class="p">,</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">),</span> <span class="n">radius</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>We experiment with three circles for the arrow and tweak the numbers until we think it looks good. Here is the result:</p>
<center>
<img src="scene2.png" title="fig:" alt="Improved drawing of arrow." />
</center>
<p>I don’t know about you, but when I see this, I want to press a button to fire that arrow so it hits the balloon. I’m convinced this is a balloon shooter now. I hope our customer is as well.</p>
<p>Right, balloon shooter. Before we didn’t know what game we should write, so our game class was just called <code>Game</code>. Let’s fix that:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span> from gameloop import GameLoop
 
<span class="gd">-class Game:</span>
<span class="gi">+class BalloonShooter:</span>
</pre>
</div>
</div>
</div>
<p>There! Now the code more accurately represent the ideas that we have in our minds about this game.</p>
<p>I forget to mention anything about testing. (For the complete workflow, check out the video.) But here is what the test for the balloon shooter looks like now:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">I draw the initial scene of the game which consists of a balloon and an</span>
<span class="sd">arrow and quit when the user closes the window.</span>

<span class="sd">&gt;&gt;&gt; loop = GameLoop.create_null(</span>
<span class="sd">...     events=[</span>
<span class="sd">...         [],</span>
<span class="sd">...         [GameLoop.create_event_user_closed_window()],</span>
<span class="sd">...     ]</span>
<span class="sd">... )</span>
<span class="sd">&gt;&gt;&gt; events = loop.track_events()</span>
<span class="sd">&gt;&gt;&gt; BalloonShooter(loop).run()</span>
<span class="sd">&gt;&gt;&gt; events</span>
<span class="sd">GAMELOOP_INIT =&gt;</span>
<span class="sd">    resolution: (1280, 720)</span>
<span class="sd">    fps: 60</span>
<span class="sd">CLEAR_SCREEN =&gt;</span>
<span class="sd">DRAW_CIRCLE =&gt;</span>
<span class="sd">    x: 50</span>
<span class="sd">    y: 50</span>
<span class="sd">    radius: 40</span>
<span class="sd">    color: &#39;red&#39;</span>
<span class="sd">DRAW_CIRCLE =&gt;</span>
<span class="sd">    x: 500</span>
<span class="sd">    y: 500</span>
<span class="sd">    radius: 10</span>
<span class="sd">    color: &#39;blue&#39;</span>
<span class="sd">DRAW_CIRCLE =&gt;</span>
<span class="sd">    x: 500</span>
<span class="sd">    y: 520</span>
<span class="sd">    radius: 15</span>
<span class="sd">    color: &#39;blue&#39;</span>
<span class="sd">DRAW_CIRCLE =&gt;</span>
<span class="sd">    x: 500</span>
<span class="sd">    y: 540</span>
<span class="sd">    radius: 20</span>
<span class="sd">    color: &#39;blue&#39;</span>
<span class="sd">GAMELOOP_QUIT =&gt;</span>
<span class="sd">&quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<p>We both changed the description, becasue we have a balloon shooter now, not a generic game, and added checks for it drawing both the balloon and the arrow.</p>
<p>It might be too specific to assert on exact coordinates here. We have to visually inspect the output and see if we think it looks good. That’s what I did here. And when I was happy, I copied the coordinates into the test.</p>
<h2 id="summary">Summary</h2>
<p>We have completed a first vertical slice of our balloon shooter. There is now a balloon and an arrow on the screen. This is new behavior that we could show to our customer and get feedback on. Perhaps he doesn’t like the position of the arrow. If so, we can adjust. Perhaps he can’t imagine that the circle is actually a balloon. If so, we can work on improving the graphics.</p>
<p>What else do we think we need before we have the first version of the balloon shooter?</p>
<ul>
<li>Balloon moves downwards</li>
<li>Arrow animates when shot</li>
<li>Arrow can hit balloon</li>
<li>Point is given for hit</li>
<li>Game over when miss</li>
<li>Real graphics instead of circles</li>
</ul>
<p>Which one is the most important one to work on next? We’ll tackle that one in the next episode!</p>
<p>You can browse the <a href="https://github.com/rickardlindberg/agdpp/tree/initial-balloon-shooter-story">complete source code</a> from this episode.</p>
<p>See you!</p>
]]></summary>
</entry>
<entry>
    <title>Separating pygame completely from the rest of the game</title>
    <link href="http://rickardlindberg.me/writing/agdpp-pygame-separation-design/" />
    <id>http://rickardlindberg.me/writing/agdpp-pygame-separation-design/</id>
    <published>2023-04-20T00:00:00Z</published>
    <updated>2023-04-20T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Separating pygame completely from the rest of the game</h1>

<p><em>Published on 20 April 2023 in <a href="/projects/agdpp/index.html">Agile Game Development with Python and Pygame</a>.</em></p>

<p>In this episode we reflect on our current design. I see something that bothers me. We talk about it and how to fix it.</p>
<h2 id="the-problem">The problem</h2>
<p>Right now our game is split up into two main classes: the game and the game loop. The game contains the logic of our game, while the game loop is responsible for setting up pygame and calling our game on every frame.</p>
<p>Almost all references to pygame are contained in the game loop class. Our game knows almost nothing about pygame. Almost. And that bothers me.</p>
<p>Let’s have a look at the test for our game:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">I draw an animated circle until the user closes the window.</span>

<span class="sd">&gt;&gt;&gt; loop = GameLoop.create_null(</span>
<span class="sd">...     events=[</span>
<span class="sd">...         [],</span>
<span class="sd">...         [],</span>
<span class="sd">...         [pygame.event.Event(pygame.QUIT)],</span>
<span class="sd">...     ]</span>
<span class="sd">... )</span>
<span class="sd">&gt;&gt;&gt; events = loop.track_events()</span>
<span class="sd">&gt;&gt;&gt; Game(loop).run()</span>
<span class="sd">&gt;&gt;&gt; events</span>
<span class="sd">PYGAME_INIT =&gt;</span>
<span class="sd">CLEAR_SCREEN =&gt;</span>
<span class="sd">DRAW_CIRCLE =&gt;</span>
<span class="sd">    x: 50</span>
<span class="sd">CLEAR_SCREEN =&gt;</span>
<span class="sd">DRAW_CIRCLE =&gt;</span>
<span class="sd">    x: 51</span>
<span class="sd">PYGAME_QUIT =&gt;</span>
<span class="sd">&quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<p>We can see references to pygame in two places. First when we create the quit event. We create an instance of a pygame event and pass that to the null version of the game loop. Later in the events that we assert on, there are event names mentioning pygame (<code>PYGAME_INIT</code> and <code>PYGAME_QUIT</code>).</p>
<p>Why does this bother me?</p>
<p>One purpose of introducing the game loop class was to separate pygame code from our game. One reason to do that is that our game becomes easier to test. And if it’s easier to test, it suggests that the design is also better. (People claim at least. So let’s go with that here.)</p>
<p>But some details of pygame are leaking out.</p>
<p>If <code>GameLoop</code> were instead called <code>PygameGameLoop</code>, I would be more fine with this. But I think the design would be more clear if the game didn’t know anything at all about pygame.</p>
<p>Our game loop uses the <a href="https://www.jamesshore.com/v2/projects/nullables/testing-without-mocks#infrastructure-wrappers">infrastructure wrapper</a> pattern. One purpose of that pattern is to isolate and contain infrastructure code so that the user of it can be provided an interface that is optimal for its consumption. In our case we want to design our game loop to fit exactly what our game needs. And the loop should encapsulate all the details of how to make that happen (using pygame).</p>
<p>Our game now needs to know that the pygame quit event is fired when the user closes the window. But wouldn’t it be more clear if that could be expressed in the code something like this instead?</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">if</span> <span class="n">event</span><span class="o">.</span><span class="n">is_user_closed_window</span><span class="p">():</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">loop</span><span class="o">.</span><span class="n">quit</span><span class="p">()</span>
</pre>
</div>
</div>
</div>
<p>Above, the game does not need to know about pygame and can directly express the idea that if the user closes the window, the game loop should be quit.</p>
<p>Enough talking, let’s see if we can fix this.</p>
<h2 id="wrapping-events">Wrapping events</h2>
<p>The tick method of our game now looks like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">tick</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">,</span> <span class="n">events</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">events</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">event</span><span class="o">.</span><span class="n">type</span> <span class="o">==</span> <span class="n">pygame</span><span class="o">.</span><span class="n">QUIT</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">loop</span><span class="o">.</span><span class="n">quit</span><span class="p">()</span>
    <span class="o">...</span>
</pre>
</div>
</div>
</div>
<p>The interface is that events is a list of pygame event instances.</p>
<p>Let’s change that to instead be instances of a new event class that we control. Here is a first version:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">Event</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">pygame_event</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">pygame_event</span> <span class="o">=</span> <span class="n">pygame_event</span>

    <span class="k">def</span> <span class="nf">is_user_closed_window</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">pygame_event</span><span class="o">.</span><span class="n">type</span> <span class="o">==</span> <span class="n">pygame</span><span class="o">.</span><span class="n">QUIT</span>

    <span class="k">def</span> <span class="fm">__repr__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="nb">repr</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">pygame_event</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>Now we can change how the game loop calls the game from this</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="n">game</span><span class="o">.</span><span class="n">tick</span><span class="p">(</span><span class="n">dt</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">pygame</span><span class="o">.</span><span class="n">event</span><span class="o">.</span><span class="n">get</span><span class="p">())</span>
</pre>
</div>
</div>
</div>
<p>to this</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="n">game</span><span class="o">.</span><span class="n">tick</span><span class="p">(</span><span class="n">dt</span><span class="p">,</span> <span class="p">[</span><span class="n">Event</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">pygame</span><span class="o">.</span><span class="n">event</span><span class="o">.</span><span class="n">get</span><span class="p">()])</span>
</pre>
</div>
</div>
</div>
<p>This breaks our tests saying that</p>
<pre><code>AttributeError: &#39;Event&#39; object has no attribute &#39;type&#39;</code></pre>
<p>We modify our game to use our new method instead:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">tick</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">,</span> <span class="n">events</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">events</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">event</span><span class="o">.</span><span class="n">is_user_closed_window</span><span class="p">():</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">loop</span><span class="o">.</span><span class="n">quit</span><span class="p">()</span>
</pre>
</div>
</div>
</div>
<p>All tests are passing again.</p>
<p>We can rely on our tests for this refactoring.</p>
<p><a
href="https://github.com/rickardlindberg/agdpp/commit/ac00de877b8f4ee58716c0030c8b2ecab19a318e"><code>git commit -a -m ‘Wrap events to tick for a nicer interface.’</code></a></p>
<h2 id="test-still-mentions-pygame">Test still mentions pygame</h2>
<p>Our test for the game still creates pygame events:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">&gt;&gt;&gt; loop = GameLoop.create_null(</span>
<span class="sd">...     events=[</span>
<span class="sd">...         [],</span>
<span class="sd">...         [],</span>
<span class="sd">...         [pygame.event.Event(pygame.QUIT)],</span>
<span class="sd">...     ]</span>
<span class="sd">... )</span>
<span class="sd">&quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<p>Here we would like to instead express the idea that we want to simulate a user closes the window event without mentioning any more details.</p>
<p>Here is one attempt:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">&gt;&gt;&gt; loop = GameLoop.create_null(</span>
<span class="sd">...     events=[</span>
<span class="sd">...         [],</span>
<span class="sd">...         [],</span>
<span class="sd">...         [GameLoop.create_event_user_closed_window()],</span>
<span class="sd">...     ]</span>
<span class="sd">... )</span>
<span class="sd">&quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<p>And in game loop, we add this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="nd">@staticmethod</span>
<span class="k">def</span> <span class="nf">create_event_user_closed_window</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">pygame</span><span class="o">.</span><span class="n">event</span><span class="o">.</span><span class="n">Event</span><span class="p">(</span><span class="n">pygame</span><span class="o">.</span><span class="n">QUIT</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>Now the game loop knows the details of how to create pygame events. I think this is better. But there is one thing that still bothers me.</p>
<p>The tick method expects a list of events with the interface that we make up, but <code>create_event_user_closed_window</code> creates a pygame event. So right now, there is no way for us to test the tick method in isolation, because there is no way to create events. If we expose the <code>Event</code> class we could do something like this in a test:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">&gt;&gt;&gt; game.tick(dt=1, events=[Event(GameLoop.create_user_close_window())])</span>
<span class="sd">&quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<p>I’m not sure I like that. I think I would feel better if <code>create_event_user_closed_window</code> returned an event with our interface. Let’s try that.</p>
<p>We modify it:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="nd">@staticmethod</span>
<span class="k">def</span> <span class="nf">create_event_user_closed_window</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">Event</span><span class="p">(</span><span class="n">pygame</span><span class="o">.</span><span class="n">event</span><span class="o">.</span><span class="n">Event</span><span class="p">(</span><span class="n">pygame</span><span class="o">.</span><span class="n">QUIT</span><span class="p">))</span>
</pre>
</div>
</div>
</div>
<p>Test fail:</p>
<pre><code>AttributeError: &#39;Event&#39; object has no attribute &#39;type&#39;</code></pre>
<p>I think we are now wrapping events in events. Let’s unpack the pygame event when creating the null version, going from this</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">NullEvent</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">events</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">events</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
        <span class="k">return</span> <span class="p">[]</span>
</pre>
</div>
</div>
</div>
<p>to this</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">NullEvent</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">events</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">[</span><span class="n">x</span><span class="o">.</span><span class="n">pygame_event</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">events</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">)]</span>
        <span class="k">return</span> <span class="p">[]</span>
</pre>
</div>
</div>
</div>
<p>Now another test fails:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="o">&gt;&gt;&gt;</span> <span class="n">GameLoop</span><span class="o">.</span><span class="n">create_null</span><span class="p">(</span><span class="n">events</span><span class="o">=</span><span class="p">[[</span><span class="s2">&quot;some event&quot;</span><span class="p">]])</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">game</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>We just changed the interface of <code>create_null</code> to expect <code>Event</code> instances. Here we are passing a string. It should really be a pygame event. But we ignore that for now and just change to this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="o">&gt;&gt;&gt;</span> <span class="n">GameLoop</span><span class="o">.</span><span class="n">create_null</span><span class="p">(</span><span class="n">events</span><span class="o">=</span><span class="p">[[</span><span class="n">Event</span><span class="p">(</span><span class="s2">&quot;some event&quot;</span><span class="p">)]])</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">game</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>All tests are passing. Success!</p>
<p>We add a test to illustrate the usage of the factory method:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="nd">@staticmethod</span>
<span class="k">def</span> <span class="nf">create_event_user_closed_window</span><span class="p">():</span>
    <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">    &gt;&gt;&gt; GameLoop.create_event_user_closed_window().is_user_closed_window()</span>
<span class="sd">    True</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="k">return</span> <span class="n">Event</span><span class="p">(</span><span class="n">pygame</span><span class="o">.</span><span class="n">event</span><span class="o">.</span><span class="n">Event</span><span class="p">(</span><span class="n">pygame</span><span class="o">.</span><span class="n">QUIT</span><span class="p">))</span>
</pre>
</div>
</div>
</div>
<p>At this point our game no longer depends on pygame. It only depends on the game loop which provides the infrastructure needed for writing a game (graphics, user input, music, etc). We can remove the import of pygame so the top of the file now looks like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="ch">#!/usr/bin/env python3</span>

<span class="kn">from</span> <span class="nn">gameloop</span> <span class="kn">import</span> <span class="n">GameLoop</span>

<span class="k">class</span> <span class="nc">Game</span><span class="p">:</span>
    <span class="o">...</span>
</pre>
</div>
</div>
</div>
<p><a
href="https://github.com/rickardlindberg/agdpp/commit/3686e4d1f5740301f2177810cfa26fa093153c17"><code>git commit -a -m ‘Wrap events so that our game now longer knows about pygame.’</code></a></p>
<h2 id="get-rid-of-last-pygame-reference">Get rid of last pygame reference</h2>
<p>There is still one place left where our game test refers to pygame:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">...</span>
<span class="sd">&gt;&gt;&gt; events</span>
<span class="sd">PYGAME_INIT =&gt;</span>
<span class="sd">CLEAR_SCREEN =&gt;</span>
<span class="sd">DRAW_CIRCLE =&gt;</span>
<span class="sd">    x: 50</span>
<span class="sd">CLEAR_SCREEN =&gt;</span>
<span class="sd">DRAW_CIRCLE =&gt;</span>
<span class="sd">    x: 51</span>
<span class="sd">PYGAME_QUIT =&gt;</span>
<span class="sd">&quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<p>Some events that the game loop emits have pygame in their name.</p>
<p>Imagine that we could plug any game loop implementation into our game and from the game’s perspective, they all worked the same. Then it doesn’t make sense for it to emit events that talk about the underlying technology to realize the game loop.</p>
<p>Let’s rename <code>PYGAME_INIT</code> to <code>GAMELOOP_INIT</code> and <code>PYGAME_QUIT</code> to <code>GAMELOOP_QUIT</code>. And while we are improving events, let’s also add the resolution and fps to the init event so that we can observe them.</p>
<p>Here is how the test reads then:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">...</span>
<span class="sd">&gt;&gt;&gt; events</span>
<span class="sd">GAMELOOP_INIT =&gt;</span>
<span class="sd">    resolution: (1280, 720)</span>
<span class="sd">    fps: 60</span>
<span class="sd">CLEAR_SCREEN =&gt;</span>
<span class="sd">DRAW_CIRCLE =&gt;</span>
<span class="sd">    x: 50</span>
<span class="sd">CLEAR_SCREEN =&gt;</span>
<span class="sd">DRAW_CIRCLE =&gt;</span>
<span class="sd">    x: 51</span>
<span class="sd">GAMELOOP_QUIT =&gt;</span>
<span class="sd">&quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<p><a
href="https://github.com/rickardlindberg/agdpp/commit/b6ef6430ee93bf9b933f5f06d69d9666ca2d1cd2"><code>git commit -a -m ‘Game loop emits events with clearer names.’</code></a></p>
<h2 id="unnecessary-work">Unnecessary work?</h2>
<p>At this point, our game knows nothing about pygame. It only relies on the interface of the game loop. That is something that we control and can design specifically for what our game needs. And should we want to switch out pygame for another graphics library, we only need to modify the game loop, not our game.</p>
<p>You might object that this seems like too much speculative design. What is the likelyhood that we want to switch graphics package? And can’t we deal with those problems when they arise?</p>
<p>On the one hand, I think that objection is valid. But I would like to see this from another angle. The purpose of this change was not to make pygame easily replaceable. The purpose of the change was to design a clean interface for our game where the different classes had different responsibilities. Only as a side effect pygame became more replaceable.</p>
<p>Had we designed a base class <code>GameLoop</code> and then derived a <code>PygameGameLoop</code> from it, then I think we would have designed speculatively. There is only one implementation of the game loop right now. We don’t even anticipate any more implementations, so why make a “placeholder” in our design where a second implementation could be plugged in?</p>
<h2 id="summary">Summary</h2>
<p>Making design changes in the beginning is generally easier. The further you go in the wrong direction, the harder it is to undo. (But with careful refactoring, it is always possible.) One problem is that it might be harder to see problems with the design early on. How are a few references to pygame problematic? I think thinking in terms of code smells instead of in terms of speculative design is useful here.</p>
<p>By the way, I’m not sure the design I choose here is the “correct” one. I’m just trying to learn and practice here and explain my thinking. But I think if I give attention to design early on, the future will be easier.</p>
<p>See you in the next episode!</p>
]]></summary>
</entry>
<entry>
    <title>Test driving the game loop</title>
    <link href="http://rickardlindberg.me/writing/agdpp-game-loop/" />
    <id>http://rickardlindberg.me/writing/agdpp-game-loop/</id>
    <published>2023-04-19T00:00:00Z</published>
    <updated>2023-04-19T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Test driving the game loop</h1>

<p><em>Published on 19 April 2023 in <a href="/projects/agdpp/index.html">Agile Game Development with Python and Pygame</a>.</em></p>

<p>In this episode we look at how to set up the game loop, draw something on the screen, and test it. We begin with a spike to learn Pygame fundamentals and then we look at how to set up tests for it.</p>
<h2 id="video-version">Video version</h2>
<p>The video version of this episode:</p>
<center>
<iframe width="560" height="315" src="https://www.youtube.com/embed/Q0347KVq7oU" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write;
encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen>
</iframe>
</center>
<h2 id="hello-world">Hello World</h2>
<p>We start with this example straight from the <a href="https://www.pygame.org/docs/">Pygame docs</a>:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="c1"># Example file showing a basic pygame &quot;game loop&quot;</span>
<span class="kn">import</span> <span class="nn">pygame</span>

<span class="c1"># pygame setup</span>
<span class="n">pygame</span><span class="o">.</span><span class="n">init</span><span class="p">()</span>
<span class="n">screen</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">display</span><span class="o">.</span><span class="n">set_mode</span><span class="p">((</span><span class="mi">1280</span><span class="p">,</span> <span class="mi">720</span><span class="p">))</span>
<span class="n">clock</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">time</span><span class="o">.</span><span class="n">Clock</span><span class="p">()</span>
<span class="n">running</span> <span class="o">=</span> <span class="kc">True</span>

<span class="k">while</span> <span class="n">running</span><span class="p">:</span>
    <span class="c1"># poll for events</span>
    <span class="c1"># pygame.QUIT event means the user clicked X to close your window</span>
    <span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">pygame</span><span class="o">.</span><span class="n">event</span><span class="o">.</span><span class="n">get</span><span class="p">():</span>
        <span class="k">if</span> <span class="n">event</span><span class="o">.</span><span class="n">type</span> <span class="o">==</span> <span class="n">pygame</span><span class="o">.</span><span class="n">QUIT</span><span class="p">:</span>
            <span class="n">running</span> <span class="o">=</span> <span class="kc">False</span>

    <span class="c1"># fill the screen with a color to wipe away anything from last frame</span>
    <span class="n">screen</span><span class="o">.</span><span class="n">fill</span><span class="p">(</span><span class="s2">&quot;purple&quot;</span><span class="p">)</span>

    <span class="c1"># RENDER YOUR GAME HERE</span>

    <span class="c1"># flip() the display to put your work on screen</span>
    <span class="n">pygame</span><span class="o">.</span><span class="n">display</span><span class="o">.</span><span class="n">flip</span><span class="p">()</span>

    <span class="n">clock</span><span class="o">.</span><span class="n">tick</span><span class="p">(</span><span class="mi">60</span><span class="p">)</span>  <span class="c1"># limits FPS to 60</span>

<span class="n">pygame</span><span class="o">.</span><span class="n">quit</span><span class="p">()</span>
</pre>
</div>
</div>
</div>
<p>When we run it, it shows an empty screen:</p>
<center>
<img src="tutorial.png" title="fig:" alt="Tutorial output." />
</center>
<h2 id="draw-something">Draw something</h2>
<p>An empty screen is not that interesting, so let’s see if we can get an animation going.</p>
<p>We add a call to draw a circle and some logic to animate it:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="o">...</span>

<span class="n">pos_x</span> <span class="o">=</span> <span class="mi">50</span>
<span class="n">dt</span> <span class="o">=</span> <span class="mi">0</span>

<span class="k">while</span> <span class="n">running</span><span class="p">:</span>

    <span class="o">...</span>

    <span class="k">if</span> <span class="n">pos_x</span> <span class="o">&gt;</span> <span class="mi">500</span><span class="p">:</span>
        <span class="n">pos_x</span> <span class="o">=</span> <span class="mi">50</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">pos_x</span> <span class="o">+=</span> <span class="n">dt</span><span class="o">*</span><span class="mf">0.3</span>

    <span class="n">pygame</span><span class="o">.</span><span class="n">draw</span><span class="o">.</span><span class="n">circle</span><span class="p">(</span><span class="n">screen</span><span class="p">,</span> <span class="s2">&quot;red&quot;</span><span class="p">,</span> <span class="p">(</span><span class="n">pos_x</span><span class="p">,</span> <span class="mi">50</span><span class="p">),</span> <span class="mi">40</span><span class="p">)</span>

    <span class="o">...</span>

    <span class="n">dt</span> <span class="o">=</span> <span class="n">clock</span><span class="o">.</span><span class="n">tick</span><span class="p">(</span><span class="mi">60</span><span class="p">)</span>  <span class="c1"># limits FPS to 60</span>

<span class="o">...</span>
</pre>
</div>
</div>
</div>
<p>This seems to work. We get an animated circle:</p>
<center>
<img src="animation.png" title="fig:" alt="Animated circle." />
</center>
<h2 id="refactor-to-clarify">Refactor to clarify</h2>
<p>Next we separate the logic of the game loop from the logic of our game. We refactor in small steps, testing manually that everything works, and end up with this for our game:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">Game</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">loop</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">loop</span> <span class="o">=</span> <span class="n">loop</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">pos_x</span> <span class="o">=</span> <span class="mi">50</span>

    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">loop</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">tick</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">,</span> <span class="n">screen</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">pygame</span><span class="o">.</span><span class="n">event</span><span class="o">.</span><span class="n">get</span><span class="p">():</span>
            <span class="k">if</span> <span class="n">event</span><span class="o">.</span><span class="n">type</span> <span class="o">==</span> <span class="n">pygame</span><span class="o">.</span><span class="n">QUIT</span><span class="p">:</span>
                <span class="k">return</span> <span class="kc">True</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">pos_x</span> <span class="o">&gt;</span> <span class="mi">500</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">pos_x</span> <span class="o">=</span> <span class="mi">50</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">pos_x</span> <span class="o">+=</span> <span class="n">dt</span><span class="o">*</span><span class="mf">0.3</span>
        <span class="n">screen</span><span class="o">.</span><span class="n">fill</span><span class="p">(</span><span class="s2">&quot;purple&quot;</span><span class="p">)</span>
        <span class="n">pygame</span><span class="o">.</span><span class="n">draw</span><span class="o">.</span><span class="n">circle</span><span class="p">(</span><span class="n">screen</span><span class="p">,</span> <span class="s2">&quot;red&quot;</span><span class="p">,</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">pos_x</span><span class="p">,</span> <span class="mi">50</span><span class="p">),</span> <span class="mi">40</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>And this for our game loop:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">GameLoop</span><span class="p">:</span>

    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">game</span><span class="p">):</span>
        <span class="n">pygame</span><span class="o">.</span><span class="n">init</span><span class="p">()</span>
        <span class="n">screen</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">display</span><span class="o">.</span><span class="n">set_mode</span><span class="p">((</span><span class="mi">1280</span><span class="p">,</span> <span class="mi">720</span><span class="p">))</span>
        <span class="n">clock</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">time</span><span class="o">.</span><span class="n">Clock</span><span class="p">()</span>
        <span class="n">running</span> <span class="o">=</span> <span class="kc">True</span>
        <span class="n">dt</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="n">running</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">game</span><span class="o">.</span><span class="n">tick</span><span class="p">(</span><span class="n">dt</span><span class="p">,</span> <span class="n">screen</span><span class="p">):</span>
                <span class="n">running</span> <span class="o">=</span> <span class="kc">False</span>
            <span class="n">pygame</span><span class="o">.</span><span class="n">display</span><span class="o">.</span><span class="n">flip</span><span class="p">()</span>
            <span class="n">dt</span> <span class="o">=</span> <span class="n">clock</span><span class="o">.</span><span class="n">tick</span><span class="p">(</span><span class="mi">60</span><span class="p">)</span>
        <span class="n">pygame</span><span class="o">.</span><span class="n">quit</span><span class="p">()</span>
</pre>
</div>
</div>
</div>
<p>And it is all used like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="n">Game</span><span class="p">(</span><span class="n">GameLoop</span><span class="p">())</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</pre>
</div>
</div>
</div>
<p>Remember, we are only doing a spike here. We are trying to learn Pygame and how we could split the different responsibilities into different classes and how to possibly test it.</p>
<p>With this refactoring, the game is now responsible for handling events and drawing the animated circle and the game loop is responsible for setting up Pygame and calling the game in a loop.</p>
<p>I think we have learned enough about this setup and I think I know how we could test it. Let’s see.</p>
<h2 id="how-to-test-this">How to test this?</h2>
<p>So now we start completely from scratch, test driving our game. We know roughly what we want to do from the spike.</p>
<p>Where to start?</p>
<p>I find it easiest to start from the outside when writing tests. What should the system do? What should our game do?</p>
<p>Well, our game draws a circle on the screen until the user closes the window. Let’s start there.</p>
<p>Here is how we get some basic structure in place:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">Game</span><span class="p">:</span>

    <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">    I draw an animated circle until the user closes the window.</span>

<span class="sd">    &gt;&gt;&gt; game = Game(GameLoop())</span>
<span class="sd">    &gt;&gt;&gt; game.run()</span>
<span class="sd">    DRAW_CIRCLE</span>
<span class="sd">    EXIT</span>
<span class="sd">    &quot;&quot;&quot;</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">loop</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">loop</span> <span class="o">=</span> <span class="n">loop</span>

    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">loop</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">tick</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;DRAW_CIRCLE&quot;</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">GameLoop</span><span class="p">:</span>

    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">game</span><span class="p">):</span>
        <span class="n">game</span><span class="o">.</span><span class="n">tick</span><span class="p">()</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;EXIT&quot;</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>Instead of actually drawing and exiting, we just print the action. We fake it. The point of this is to get some basic structure in place with tests. From the spike we know in which direction to go. Let’s continue.</p>
<h2 id="remove-fakes">Remove fakes</h2>
<p>Eventually we want to turn <code>GameLoop</code> into an infrastructure wrapper. This will give us the ability to conveniently use it in tests. This pattern is explained in depth in <a href="https://www.jamesshore.com/v2/projects/nullables/testing-without-mocks">Testing Without Mocks</a>.</p>
<p>One part of that pattern is that we should be able to observe what <code>GameLoop</code> is doing.</p>
<p>Here is how we rewrite the test for our game to assert on events fired from <code>GameLoop</code> instead of print statements:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">I draw an animated circle until the user closes the window.</span>

<span class="sd">&gt;&gt;&gt; loop = GameLoop()</span>
<span class="sd">&gt;&gt;&gt; events = loop.track_events()</span>
<span class="sd">&gt;&gt;&gt; Game(loop).run()</span>
<span class="sd">&gt;&gt;&gt; events</span>
<span class="sd">DRAW_CIRCLE =&gt;</span>
<span class="sd">EXIT =&gt;</span>
<span class="sd">&quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<p>The <code>GameLoop</code> now looks like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">GameLoop</span><span class="p">(</span><span class="n">Observable</span><span class="p">):</span>

    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">game</span><span class="p">):</span>
        <span class="n">game</span><span class="o">.</span><span class="n">tick</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">notify</span><span class="p">(</span><span class="s2">&quot;EXIT&quot;</span><span class="p">,</span> <span class="p">{})</span>

    <span class="k">def</span> <span class="nf">draw_circle</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">notify</span><span class="p">(</span><span class="s2">&quot;DRAW_CIRCLE&quot;</span><span class="p">,</span> <span class="p">{})</span>
</pre>
</div>
</div>
</div>
<p>Instead of printing actions, it notifies about its actions via an observable pattern.</p>
<p>We also moved the circle drawing code to the game loop and have the game call that method instead. The game loop will be responsible for drawing things on the current frame.</p>
<p>But we are still not doing anything real, we are just firing events and asserting on them. Time to fix that.</p>
<h2 id="flesh-out-pygame-calls">Flesh out pygame calls</h2>
<p>Continuing the pattern of an infrastructure wrapper, we add an argument to <code>GameLoop</code> which is the Pygame module. We provide an embedded stub for the null version that does nothing:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">GameLoop</span><span class="p">(</span><span class="n">Observable</span><span class="p">):</span>

    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">create</span><span class="p">():</span>
        <span class="k">return</span> <span class="n">GameLoop</span><span class="p">(</span><span class="n">pygame</span><span class="p">)</span>

    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">create_null</span><span class="p">():</span>
        <span class="k">class</span> <span class="nc">NullPygame</span><span class="p">:</span>
            <span class="o">...</span>
        <span class="k">return</span> <span class="n">GameLoop</span><span class="p">(</span><span class="n">NullPygame</span><span class="p">())</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">pygame</span><span class="p">):</span>
        <span class="n">Observable</span><span class="o">.</span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">pygame</span> <span class="o">=</span> <span class="n">pygame</span>

    <span class="o">...</span>
</pre>
</div>
</div>
</div>
<p>We write a test for the game loop that checks that the proper events are fired:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">I init and clean up pygame:</span>

<span class="sd">&gt;&gt;&gt; loop = GameLoop.create_null()</span>
<span class="sd">&gt;&gt;&gt; events = loop.track_events()</span>
<span class="sd">&gt;&gt;&gt; loop.run(NullGame())</span>
<span class="sd">&gt;&gt;&gt; events</span>
<span class="sd">PYGAME_INIT =&gt;</span>
<span class="sd">EXIT =&gt;</span>
<span class="sd">&quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<p>And we also create a test that uses the real Pygame module:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">&gt;&gt;&gt; GameLoop.create().run(NullGame())</span>
<span class="sd">&quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<p>This test will actually cause a window to pop up on the screen, so it is a bit distracting, but it makes sure we are calling Pygame correctly.</p>
<p>The game loop now looks like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">GameLoop</span><span class="p">(</span><span class="n">Observable</span><span class="p">):</span>

    <span class="o">...</span>

    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">game</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">notify</span><span class="p">(</span><span class="s2">&quot;PYGAME_INIT&quot;</span><span class="p">,</span> <span class="p">{})</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">pygame</span><span class="o">.</span><span class="n">init</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">screen</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">pygame</span><span class="o">.</span><span class="n">display</span><span class="o">.</span><span class="n">set_mode</span><span class="p">((</span><span class="mi">1280</span><span class="p">,</span> <span class="mi">720</span><span class="p">))</span>
        <span class="n">game</span><span class="o">.</span><span class="n">tick</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">pygame</span><span class="o">.</span><span class="n">display</span><span class="o">.</span><span class="n">flip</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">notify</span><span class="p">(</span><span class="s2">&quot;EXIT&quot;</span><span class="p">,</span> <span class="p">{})</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">pygame</span><span class="o">.</span><span class="n">quit</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">draw_circle</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">notify</span><span class="p">(</span><span class="s2">&quot;DRAW_CIRCLE&quot;</span><span class="p">,</span> <span class="p">{})</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">pygame</span><span class="o">.</span><span class="n">draw</span><span class="o">.</span><span class="n">circle</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">screen</span><span class="p">,</span> <span class="s2">&quot;red&quot;</span><span class="p">,</span> <span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="mi">50</span><span class="p">),</span> <span class="mi">40</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>We are getting closer. If we run the game now and look carefully, we can see that a circle is drawn on the screen for a split second before it closes. That is because there is no loop yet. We just render one frame and then exit. Time to fix that.</p>
<h2 id="loop-and-events">Loop and events</h2>
<p>Let’s start with our game. The test for it should simulate an event that the user closes the window, and first then exit the application:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">I draw an animated circle until the user closes the window.</span>

<span class="sd">&gt;&gt;&gt; loop = GameLoop.create_null(</span>
<span class="sd">...     events=[</span>
<span class="sd">...         [],</span>
<span class="sd">...         [pygame.event.Event(pygame.QUIT)],</span>
<span class="sd">...     ]</span>
<span class="sd">... )</span>
<span class="sd">&gt;&gt;&gt; events = loop.track_events()</span>
<span class="sd">&gt;&gt;&gt; Game(loop).run()</span>
<span class="sd">&gt;&gt;&gt; events</span>
<span class="sd">PYGAME_INIT =&gt;</span>
<span class="sd">DRAW_CIRCLE =&gt;</span>
<span class="sd">PYGAME_QUIT =&gt;</span>
<span class="sd">&quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<p>The <code>tick</code> method is modified to look like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">tick</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">events</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">events</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">event</span><span class="o">.</span><span class="n">type</span> <span class="o">==</span> <span class="n">pygame</span><span class="o">.</span><span class="n">QUIT</span><span class="p">:</span>
            <span class="k">return</span> <span class="kc">True</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">loop</span><span class="o">.</span><span class="n">draw_circle</span><span class="p">()</span>
</pre>
</div>
</div>
</div>
<p>So we made the decision that the game loop should exit if the tick method returns true.</p>
<p>We add the ability for the null version of the game loop to simulate events:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="nd">@staticmethod</span>
<span class="k">def</span> <span class="nf">create_null</span><span class="p">(</span><span class="n">events</span><span class="o">=</span><span class="p">[]):</span>
    <span class="k">class</span> <span class="nc">NullPygame</span><span class="p">:</span>
        <span class="k">def</span> <span class="nf">init</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">event</span> <span class="o">=</span> <span class="n">NullEvent</span><span class="p">()</span>
            <span class="o">...</span>
    <span class="k">class</span> <span class="nc">NullEvent</span><span class="p">:</span>
        <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">events</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">events</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
            <span class="k">return</span> <span class="p">[]</span>
    <span class="k">return</span> <span class="n">GameLoop</span><span class="p">(</span><span class="n">NullPygame</span><span class="p">())</span>
</pre>
</div>
</div>
</div>
<p>And we modify the run method to actually do a loop and pass events to the <code>tick</code> method:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">game</span><span class="p">):</span>
    <span class="o">...</span>
    <span class="n">running</span> <span class="o">=</span> <span class="kc">True</span>
    <span class="k">while</span> <span class="n">running</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">game</span><span class="o">.</span><span class="n">tick</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">pygame</span><span class="o">.</span><span class="n">event</span><span class="o">.</span><span class="n">get</span><span class="p">()):</span>
            <span class="n">running</span> <span class="o">=</span> <span class="kc">False</span>
    <span class="o">...</span>
</pre>
</div>
</div>
</div>
<p>If we do not configure tests for our game to simulate the quit event, the test will hang in an infinite loop.</p>
<p>If we run the game now, the circle stays on the screen until we close the window. But it doesn’t move. Let’s work on that.</p>
<h2 id="test-animation">Test animation</h2>
<p>We modify the test for our game by simulating one more event so that one more frame is rendered. That gives us two calls to draw circle:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">I draw an animated circle until the user closes the window.</span>

<span class="sd">&gt;&gt;&gt; loop = GameLoop.create_null(</span>
<span class="sd">...     events=[</span>
<span class="sd">...         [],</span>
<span class="sd">...         [],</span>
<span class="sd">...         [pygame.event.Event(pygame.QUIT)],</span>
<span class="sd">...     ]</span>
<span class="sd">... )</span>
<span class="sd">&gt;&gt;&gt; events = loop.track_events()</span>
<span class="sd">&gt;&gt;&gt; Game(loop).run()</span>
<span class="sd">&gt;&gt;&gt; events</span>
<span class="sd">PYGAME_INIT =&gt;</span>
<span class="sd">CLEAR_SCREEN =&gt;</span>
<span class="sd">DRAW_CIRCLE =&gt;</span>
<span class="sd">    x: 50</span>
<span class="sd">CLEAR_SCREEN =&gt;</span>
<span class="sd">DRAW_CIRCLE =&gt;</span>
<span class="sd">    x: 51</span>
<span class="sd">PYGAME_QUIT =&gt;</span>
<span class="sd">&quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<p>We had to add the <code>x</code> argument to the <code>DRAW_CIRCLE</code> event so that we could observe that it changed:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">draw_circle</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">notify</span><span class="p">(</span><span class="s2">&quot;DRAW_CIRCLE&quot;</span><span class="p">,</span> <span class="p">{</span><span class="s2">&quot;x&quot;</span><span class="p">:</span> <span class="n">x</span><span class="p">})</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">pygame</span><span class="o">.</span><span class="n">draw</span><span class="o">.</span><span class="n">circle</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">screen</span><span class="p">,</span> <span class="s2">&quot;red&quot;</span><span class="p">,</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">50</span><span class="p">),</span> <span class="mi">40</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>We also had to make a new call to clear the screen. If we don’t clear the screen we end up with circles drawn on top of each other. Clearing the screen works like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">clear_screen</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">notify</span><span class="p">(</span><span class="s2">&quot;CLEAR_SCREEN&quot;</span><span class="p">,</span> <span class="p">{})</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">screen</span><span class="o">.</span><span class="n">fill</span><span class="p">(</span><span class="s2">&quot;purple&quot;</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>And the implementation for the animation looks like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">Game</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">loop</span><span class="p">):</span>
        <span class="o">...</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="mi">50</span>

    <span class="k">def</span> <span class="nf">tick</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">,</span> <span class="n">events</span><span class="p">):</span>
        <span class="o">...</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">x</span> <span class="o">&gt;</span> <span class="mi">500</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="mi">50</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">x</span> <span class="o">+=</span> <span class="n">dt</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">loop</span><span class="o">.</span><span class="n">clear_screen</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">loop</span><span class="o">.</span><span class="n">draw_circle</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">x</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>To make the animation frame rate independent, we also had to include the delta time. This is implemented in the game loop similar to how we did it in the spike:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">game</span><span class="p">):</span>
    <span class="o">...</span>
    <span class="n">dt</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">while</span> <span class="n">running</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">game</span><span class="o">.</span><span class="n">tick</span><span class="p">(</span><span class="n">dt</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">pygame</span><span class="o">.</span><span class="n">event</span><span class="o">.</span><span class="n">get</span><span class="p">()):</span>
            <span class="n">running</span> <span class="o">=</span> <span class="kc">False</span>
        <span class="o">...</span>
        <span class="n">dt</span> <span class="o">=</span> <span class="n">clock</span><span class="o">.</span><span class="n">tick</span><span class="p">(</span><span class="mi">60</span><span class="p">)</span>
    <span class="o">...</span>
</pre>
</div>
</div>
</div>
<p>At this point our test-driven implementation does the same thing that our spike does. We are now in a good place to move forward.</p>
<h2 id="refactor-exit">Refactor exit</h2>
<p>Before closing this episode, let’s take advantage of our test suite and explore an alternative way to exit the application. Instead of having a boolean return from <code>tick</code> indicating if we should exit or not, which I think is a bit unclear, let’s try an exception. Here it is:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">ExitGameLoop</span><span class="p">(</span><span class="ne">Exception</span><span class="p">):</span>
    <span class="k">pass</span>
</pre>
</div>
</div>
</div>
<p>The tick method then turns into this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">tick</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">,</span> <span class="n">events</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">events</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">event</span><span class="o">.</span><span class="n">type</span> <span class="o">==</span> <span class="n">pygame</span><span class="o">.</span><span class="n">QUIT</span><span class="p">:</span>
            <span class="k">raise</span> <span class="n">ExitGameLoop</span><span class="p">()</span>
    <span class="o">...</span>
</pre>
</div>
</div>
</div>
<p>And the game loop into this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">game</span><span class="p">):</span>
    <span class="o">...</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
            <span class="n">game</span><span class="o">.</span><span class="n">tick</span><span class="p">(</span><span class="n">dt</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">pygame</span><span class="o">.</span><span class="n">event</span><span class="o">.</span><span class="n">get</span><span class="p">())</span>
            <span class="o">...</span>
    <span class="k">except</span> <span class="n">ExitGameLoop</span><span class="p">:</span>
        <span class="k">pass</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">notify</span><span class="p">(</span><span class="s2">&quot;PYGAME_QUIT&quot;</span><span class="p">,</span> <span class="p">{})</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">pygame</span><span class="o">.</span><span class="n">quit</span><span class="p">()</span>
</pre>
</div>
</div>
</div>
<p>I like this better. And all the tests still pass, unchanged.</p>
<h2 id="summary">Summary</h2>
<p>We have now recreated the functionality that we had in the spike, added the ability to test it, and improved the design with the safety net of our tests. Great success!</p>
<p>You can browse the <a href="https://github.com/rickardlindberg/agdpp/tree/initial-game-loop">complete source code</a> from this episode.</p>
<p>See you in the next episode!</p>
]]></summary>
</entry>
<entry>
    <title>Trying Ron's Python Asteroids</title>
    <link href="http://rickardlindberg.me/writing/trying-rons-python-asteroids/" />
    <id>http://rickardlindberg.me/writing/trying-rons-python-asteroids/</id>
    <published>2023-04-18T00:00:00Z</published>
    <updated>2023-04-18T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Trying Ron's Python Asteroids</h1>

<p><em>Published on 18 April 2023.</em></p>

<p><a href="https://www.ronjeffries.com/">Ron</a> is working on an Asteroids game in Python and also <a href="https://www.ronjeffries.com/categories/python/">writing</a> about it. I’m interested in his workflow, so I follow along.</p>
<p>He recently published the code on <a href="https://github.com/RonJeffries/python-asteroids-1">Github</a>.</p>
<p>I thought I would have a look.</p>
<h2 id="first-look">First look</h2>
<p>I clone the repo and see a bunch of Python files and an <code>.idea</code> folder.</p>
<p>I’ve never been a fan of IDEs. Perhaps I should learn one properly. In any case I find it useful to be able to run commands from the command line as well.</p>
<p>First, I want to see if I can get this game running:</p>
<pre><code>$ python game.py
AttributeError: &#39;pygame.math.Vector2&#39; object has no attribute &#39;copy&#39;</code></pre>
<p>I suspect I’m using a different version of pygame that lacks the copy method on vectors.</p>
<p>I try to run the test to see if I get the same failure there. How to run the tests? I think Ron mentioned that he uses <a href="https://pytest.org/">pytets</a>. I try:</p>
<pre><code>$ pytest
===================================================================== test session starts =====================================================================
platform linux -- Python 3.9.10, pytest-6.2.2, py-1.11.0, pluggy-0.13.1
rootdir: /home/rick/downloads/python-asteroids-1
collected 3 items / 3 errors
...</code></pre>
<p>I see the same error about the copy method of vector and some more in the same style.</p>
<p>I read about the copy method in the pygame manual and conclude that it was added in a later version.</p>
<h2 id="upgrade-pygame">Upgrade pygame</h2>
<p>I think I’ve installed pygame via Fedora’s package manager. That doesn’t have a more recent version of pygame.</p>
<p>I try to install it using pip instead:</p>
<pre><code>$ pip install --user pygame
Requirement already satisfied: pygame in /usr/lib64/python3.9/site-packages (2.0.3)</code></pre>
<p>I add <code>--user</code> because I don’t want to install anything globally using pip. I suppose I should create a virtual environment, but I haven’t worked much with them. This will do.</p>
<p>It indeed tells me that I already have pygame installed. How do I upgrade? Ah, the <code>--upgrade</code> flag:</p>
<pre><code>$ pip install --user --upgrade pygame
Requirement already satisfied: pygame in /usr/lib64/python3.9/site-packages (2.0.3)
Collecting pygame
  Downloading pygame-2.3.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (13.8 MB)
     |████████████████████████████████| 13.8 MB 692 kB/s 
Installing collected packages: pygame
Successfully installed pygame-2.3.0</code></pre>
<p>Sometimes I hesitate to install Python packages via pip. Especially when they are not pure Python packages (like pygame which depends on SDL and C libraries). Mostly because it hasn’t worked so well for me in the past. Maybe things are better now. And maybe it depends on the library. Let’s see how this works now.</p>
<h2 id="testing-the-game-again">Testing the game again</h2>
<p>I try running the game again:</p>
<pre><code>$ python game.py 
pygame 2.3.0 (SDL 2.24.2, Python 3.9.10)
Hello from the pygame community. https://www.pygame.org/contribute.html</code></pre>
<p>Success! Or, I don’t get any errors at least. But it exits right away. Am I running the wrong file?</p>
<p>Ah, there is a <code>main.py</code>. Let’s try that.</p>
<p>It works!</p>
<center>
<img src="game.png" title="fig:" alt="Ron’s Asteroids game." />
</center>
<h2 id="zero-friction">Zero friction</h2>
<p>I’m quite familiar with both Python and pygame, so it was not that difficult for me to get started. But I think we can improve.</p>
<p>One idea that I got from James Shore’s writing about a <a href="https://www.jamesshore.com/v2/books/aoad2/zero_friction">zero friction</a> development is that you should have scripts for doing common tasks like running your tests.</p>
<p>Let’s <a href="https://github.com/RonJeffries/python-asteroids-1/pull/1">see</a> if Ron likes that as well. I add one script to test</p>
<div class="rliterate-code">
<div class="rliterate-code-header">
<ol class="rliterate-code-path">
<li>
<span class="cp">build.sh </span>
</li>
</ol>
</div>
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="ch">#!/usr/bin/env bash</span>

<span class="nb">set</span> -e

pytest
</pre>
</div>
</div>
</div>
<p>and one to run the application</p>
<div class="rliterate-code">
<div class="rliterate-code-header">
<ol class="rliterate-code-path">
<li>
<span class="cp">rundev.sh </span>
</li>
</ol>
</div>
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="ch">#!/usr/bin/env bash</span>

<span class="nb">exec</span> python main.py
</pre>
</div>
</div>
</div>
<p>Should the way to run tests or the application change, only those files need to be changed, and the usage of the developer stays the same.</p>
]]></summary>
</entry>
<entry>
    <title>TDD trick: fake it!</title>
    <link href="http://rickardlindberg.me/writing/tdd-fake-it/" />
    <id>http://rickardlindberg.me/writing/tdd-fake-it/</id>
    <published>2023-04-17T00:00:00Z</published>
    <updated>2023-04-17T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>TDD trick: fake it!</h1>

<p><em>Published on 17 April 2023.</em></p>

<ul>
<li><a href="#the-example">The example</a></li>
<li><a href="#fake-it">Fake it!</a></li>
<li><a href="#refactor">Refactor</a></li>
<li><a href="#infrastructure-wrapper">Infrastructure wrapper</a></li>
<li><a href="#make-game-loop-more-real">Make game loop more real</a></li>
<li><a href="#looping-and-animation">Looping and animation</a></li>
<li><a href="#summary">Summary</a></li>
</ul>
<p>The first step in the TDD loop is to think about what test to write. I find it easiest to do that from the outside-in. I might not yet know what different parts my system will consist of (especially in the beginning), but I do know some behavior of the entire system.</p>
<p>The problem with outside-in is that the test might be difficult to write because we don’t have enough infrastructure in place to make the appropriate assertions.</p>
<p>In this blog post I want to show you a trick to overcome that problem: fake it! (This is also similar to what James describes in <a href="https://www.jamesshore.com/v2/projects/nullables/testing-without-mocks#grow-seeds">Grow Evolutionary Seeds</a>.)</p>
<h2 id="the-example">The example</h2>
<p>I will illustrate this trick with an example from a <a href="/projects/agdpp/index.html">game</a> that I’m working on.</p>
<p>So far, the game doesn’t do much. It just animates a circle:</p>
<center>
<img src="animation.png" title="fig:" alt="Animated circle." />
</center>
<p>The behavior of the game can be described as this:</p>
<blockquote>
<p>I draw an animated circle until the user closes the window.</p>
</blockquote>
<h2 id="fake-it">Fake it!</h2>
<p>With an empty project, it seems quite difficult to write a test that actually checks for that. What to do? Let’s fake it! Here it is:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">Game</span><span class="p">:</span>

    <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">    I draw an animated circle until the user closes the window.</span>

<span class="sd">    &gt;&gt;&gt; game = Game()</span>
<span class="sd">    &gt;&gt;&gt; game.run()</span>
<span class="sd">    DRAW_CIRCLE</span>
<span class="sd">    EXIT</span>
<span class="sd">    &quot;&quot;&quot;</span>

    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;DRAW_CIRCLE&quot;</span><span class="p">)</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;EXIT&quot;</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>Really? How is this useful?</p>
<p>First of all we have got a description of one behavior of our system. We also have code that verifies that behavior, even though it is not yet complete. (The example shown in the docstring of the game class is actually an executable test written using Python’s <a href="https://docs.python.org/3/library/doctest.html">doctest</a> module.)</p>
<p>From here it is usually easier to see what to continue with. When we have <a href="https://www.artima.com/articles/the-simplest-thing-that-could-possibly-work">something on the screen</a>, we can more easily criticize it and improve it.</p>
<p>So, what next?</p>
<h2 id="refactor">Refactor</h2>
<p>Are you kidding? Refactor already?</p>
<p>To make this game testable, I want to separate the logic of the game from the infrastructure needed to initialize and use a graphics library. I imagine a game loop class that is responsible for that.</p>
<p>We can evolve the design in that direction even with what we have now. Here it is:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">Game</span><span class="p">:</span>

    <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">    I draw an animated circle until the user closes the window.</span>

<span class="sd">    &gt;&gt;&gt; game = Game(GameLoop())</span>
<span class="sd">    &gt;&gt;&gt; game.run()</span>
<span class="sd">    DRAW_CIRCLE</span>
<span class="sd">    EXIT</span>
<span class="sd">    &quot;&quot;&quot;</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">loop</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">loop</span> <span class="o">=</span> <span class="n">loop</span>

    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">loop</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">tick</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">loop</span><span class="o">.</span><span class="n">draw_circle</span><span class="p">()</span>

<span class="k">class</span> <span class="nc">GameLoop</span><span class="p">:</span>

    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">game</span><span class="p">):</span>
        <span class="n">game</span><span class="o">.</span><span class="n">tick</span><span class="p">()</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;EXIT&quot;</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">draw_circle</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;DRAW_CIRCLE&quot;</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>The game now gets a loop as a dependency. Can you see how this would be possible to test now? We could inject some kind of test double as the loop and verify that it is called correctly.</p>
<p>Notice that we were able to do this refactoring with the safety net of the test. We have one teeny, tiny test that asserts something fake, but it still helped us do this refactoring.</p>
<h2 id="infrastructure-wrapper">Infrastructure wrapper</h2>
<p>For the test double version of the game loop, I want to use some patterns from <a href="https://www.jamesshore.com/v2/projects/nullables/testing-without-mocks">Testing Without Mocks</a>.</p>
<p>I want to turn the game loop into an infrastructure wrapper. One part of that pattern is that it should emit events of what it’s doing so that tests can observe it.</p>
<p>Let’s replace the print statements, that we used to fake actions, with events. Here it is:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">GameLoop</span><span class="p">(</span><span class="n">Observable</span><span class="p">):</span>

    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">game</span><span class="p">):</span>
        <span class="n">game</span><span class="o">.</span><span class="n">tick</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">notify</span><span class="p">(</span><span class="s2">&quot;EXIT&quot;</span><span class="p">,</span> <span class="p">{})</span>

    <span class="k">def</span> <span class="nf">draw_circle</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">notify</span><span class="p">(</span><span class="s2">&quot;DRAW_CIRCLE&quot;</span><span class="p">,</span> <span class="p">{})</span>
</pre>
</div>
</div>
</div>
<p>The test for the game then changes to this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">I draw an animated circle until the user closes the window.</span>

<span class="sd">&gt;&gt;&gt; loop = GameLoop()</span>
<span class="sd">&gt;&gt;&gt; events = loop.track_events()</span>
<span class="sd">&gt;&gt;&gt; Game(loop).run()</span>
<span class="sd">&gt;&gt;&gt; events</span>
<span class="sd">DRAW_CIRCLE =&gt;</span>
<span class="sd">EXIT =&gt;</span>
<span class="sd">&quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<p>(I won’t show the code for <code>Observable</code>. If you are curious to know the details, you can look <a href="https://github.com/rickardlindberg/agdpp/blob/initial-game-loop/events.py">here</a>.)</p>
<p>And this is starting to look more real now. There is no real faking going on in the game or its test any more. It seems logical to assert that the game loop emits those events.</p>
<p>But the game loop is still just emitting events, it’s not actually doing anything.</p>
<h2 id="make-game-loop-more-real">Make game loop more real</h2>
<p>The game loop should initialize a graphics library and provide to the game a way to draw on the screen. We will use <a href="https://www.pygame.org/news">pygame</a> for that. So our game loop will be an infrastructure wrapper around pygame providing a clean interface for our game to draw on the screen.</p>
<p>We need to make the <code>run</code> method and the <code>draw_circle</code> method do something real. Here is a first version:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">GameLoop</span><span class="p">(</span><span class="n">Observable</span><span class="p">):</span>

    <span class="o">...</span>

    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">game</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">notify</span><span class="p">(</span><span class="s2">&quot;PYGAME_INIT&quot;</span><span class="p">,</span> <span class="p">{})</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">pygame</span><span class="o">.</span><span class="n">init</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">screen</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">pygame</span><span class="o">.</span><span class="n">display</span><span class="o">.</span><span class="n">set_mode</span><span class="p">((</span><span class="mi">1280</span><span class="p">,</span> <span class="mi">720</span><span class="p">))</span>
        <span class="n">game</span><span class="o">.</span><span class="n">tick</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">pygame</span><span class="o">.</span><span class="n">display</span><span class="o">.</span><span class="n">flip</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">notify</span><span class="p">(</span><span class="s2">&quot;EXIT&quot;</span><span class="p">,</span> <span class="p">{})</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">pygame</span><span class="o">.</span><span class="n">quit</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">draw_circle</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">notify</span><span class="p">(</span><span class="s2">&quot;DRAW_CIRCLE&quot;</span><span class="p">,</span> <span class="p">{})</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">pygame</span><span class="o">.</span><span class="n">draw</span><span class="o">.</span><span class="n">circle</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">screen</span><span class="p">,</span> <span class="s2">&quot;red&quot;</span><span class="p">,</span> <span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="mi">50</span><span class="p">),</span> <span class="mi">40</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>Notice that have an instance variable called <code>pygame</code>.</p>
<p>When we test our game class, we don’t actually want to execute any pygame code that creates windows and draws circles on the screen. Therefore we use another pattern of an infrastructure wrapper which is that it can be nullable. That means that we can instantiate two version of our game loop:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="n">GameLoop</span><span class="o">.</span><span class="n">create</span><span class="p">()</span>
<span class="n">GameLoop</span><span class="o">.</span><span class="n">create_null</span><span class="p">()</span>
</pre>
</div>
</div>
</div>
<p>The creation methods look like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">class</span> <span class="nc">GameLoop</span><span class="p">(</span><span class="n">Observable</span><span class="p">):</span>

    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">create</span><span class="p">():</span>
        <span class="k">return</span> <span class="n">GameLoop</span><span class="p">(</span><span class="n">pygame</span><span class="p">)</span>

    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">create_null</span><span class="p">():</span>
        <span class="k">class</span> <span class="nc">NullPygame</span><span class="p">:</span>
            <span class="k">def</span> <span class="nf">init</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
                <span class="k">pass</span> <span class="c1"># Do nothing</span>
            <span class="o">...</span>
        <span class="k">return</span> <span class="n">GameLoop</span><span class="p">(</span><span class="n">NullPygame</span><span class="p">())</span>

    <span class="o">...</span>
</pre>
</div>
</div>
</div>
<p>The null version works exactly the same as the real version except it nulls out all the calls that actually do anything with pygame. This is useful in tests so that we don’t open windows and actually draw graphics when we don’t need to.</p>
<p>Our game test can use the null version of the game loop and will continue to work as it did before.</p>
<p>When actually running our game, we create the real version of the game loop which will include all the real calls to pygame.</p>
<p>We can also test the real game loop in isolation, passing it a test game, to make sure that we call pygame correctly:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">&gt;&gt;&gt; GameLoop.create().run(TestGame())</span>
<span class="sd">&quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<p>This will actually open a window and draw whatever the test game draws. We can program the test game to exit immediately so that the test suite will not hang waiting for user input. But we will still see a flashing window which is a bit distracting.</p>
<p>To verify that our implementation of <code>draw_circle</code> works, we have to inspect the output visually. A test like the one above only asserts that we call pygame functions correctly, not that the output looks the way we want.</p>
<p>This is a general problem with infrastructure that it is difficult to test, because it involves the real world.</p>
<p>Anyway, that’s a little beside the point of this article. Where were we?</p>
<h2 id="looping-and-animation">Looping and animation</h2>
<p>If we run our game now, it will actually show a window with a circle on it. But the window will close immediately.</p>
<p>That is because the game loop still doesn’t implement a loop.</p>
<p>Let’s have a look at our game test again:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">I draw an animated circle until the user closes the window.</span>

<span class="sd">&gt;&gt;&gt; loop = GameLoop()</span>
<span class="sd">&gt;&gt;&gt; events = loop.track_events()</span>
<span class="sd">&gt;&gt;&gt; Game(loop).run()</span>
<span class="sd">&gt;&gt;&gt; events</span>
<span class="sd">DRAW_CIRCLE =&gt;</span>
<span class="sd">EXIT =&gt;</span>
<span class="sd">&quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<p>It talks about <em>animating</em> a circle, and about <em>waiting</em> for the user to close the window. But there is nothing in the setup or assertions about this. We are missing something.</p>
<p>Hopefully, at this point, it is a bit more clear where to continue.</p>
<p>Once we implement the loop and some event handling, I think the initial behavior of our game will actually be fully realized.</p>
<p>Here is what the final test for the game looks like when I continued fleshing out all the fakes and missing pieces:</p>
<div class="rliterate-code">
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">I draw an animated circle until the user closes the window.</span>

<span class="sd">&gt;&gt;&gt; loop = GameLoop.create_null(</span>
<span class="sd">...     events=[</span>
<span class="sd">...         [],</span>
<span class="sd">...         [],</span>
<span class="sd">...         [pygame.event.Event(pygame.QUIT)],</span>
<span class="sd">...     ]</span>
<span class="sd">... )</span>
<span class="sd">&gt;&gt;&gt; events = loop.track_events()</span>
<span class="sd">&gt;&gt;&gt; Game(loop).run()</span>
<span class="sd">&gt;&gt;&gt; events</span>
<span class="sd">PYGAME_INIT =&gt;</span>
<span class="sd">CLEAR_SCREEN =&gt;</span>
<span class="sd">DRAW_CIRCLE =&gt;</span>
<span class="sd">    x: 50</span>
<span class="sd">CLEAR_SCREEN =&gt;</span>
<span class="sd">DRAW_CIRCLE =&gt;</span>
<span class="sd">    x: 51</span>
<span class="sd">PYGAME_QUIT =&gt;</span>
<span class="sd">&quot;&quot;&quot;</span>
</pre>
</div>
</div>
</div>
<h2 id="summary">Summary</h2>
<p>We started with something fake, then did a bit of design, then removed one fake at a time until there were no fakes left.</p>
<p>I find this a useful way of working, especially when getting started. Once you have some structure in place it is easier to see where you need to add additional tests and functionality.</p>
<p>(If you want more details about this example in particular, check out my <a href="/writing/agdpp-game-loop/index.html">article</a> about how I implemented this part of the game.)</p>
]]></summary>
</entry>
<entry>
    <title>Introducing Agile Game Development with Python and Pygame</title>
    <link href="http://rickardlindberg.me/writing/agdpp-introduction/" />
    <id>http://rickardlindberg.me/writing/agdpp-introduction/</id>
    <published>2023-04-09T00:00:00Z</published>
    <updated>2023-04-09T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Introducing Agile Game Development with Python and Pygame</h1>

<p><em>Published on  9 April 2023 in <a href="/projects/agdpp/index.html">Agile Game Development with Python and Pygame</a>.</em></p>

<p>I recently started playing computer games with my son. That sparked an interest in me to create a game myself that we can play together. Mostly because I think this will be a <strong>fun project</strong>, but also to show my son that you can actually make your own games. It’s not something that you <em>only</em> consume.</p>
<p>I thought I would also document this journey in a series of blog posts and videos.</p>
<h2 id="video-version">Video version</h2>
<p>The video version of this episode:</p>
<center>
<iframe width="560" height="315" src="https://www.youtube.com/embed/9DZ81lOPfmo" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write;
encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen>
</iframe>
</center>
<h2 id="the-challenge">The challenge</h2>
<p>The challenge is to create a game that me and my son will enjoy playing together.</p>
<h2 id="the-method">The method</h2>
<p>I want to develop this game using Agile methodology.</p>
<p>It means that instead of first figuring out what game I want to write, I will develop it incrementally and guide development by feedback.</p>
<p>It also means that I will rely heavily on self-testing code and TDD.</p>
<h2 id="my-background-in-games">My background in games</h2>
<p>I’m by no means an expert in creating games. I don’t even play games that much. But I have enjoyed creating some simple games in the past, like a Tetris clone and some kind of Asteroids.</p>
<p>I was actually able to restore an old copy of one of my Tetris games. It is written using Python and Pygame (which I also plan to use for my new game). I just needed to make a few small adjustments to make it work with Python 3. This is what it looks like:</p>
<center>
<img src="tetris1.png" title="fig:" alt="Intro screen of my Tetris game." />
</center>
<center>
<img src="tetris2.png" title="fig:" alt="Gameplay screen of my Tetris game." />
</center>
<h2 id="series-overview">Series overview</h2>
<p>So this series will cover how to create a game from the perspective of someone who has much experience programming, but not that much knowledge in the game domain.</p>
<p>Here is a list of topics off the top of my head that I imagine I will cover:</p>
<ul>
<li>Game loop and how to test it</li>
<li>Can you really use TDD for games?</li>
<li>Learn to capture events from Logitech controller</li>
<li>How to come up with an idea for a game?</li>
<li>Performance: background erase vs redraw?</li>
<li>Resolution: what to choose?</li>
<li>How to incrementally develop a game idea?</li>
<li>Particle effects</li>
</ul>
<p>This list is just the beginning of my journey. I hope will enjoy following along.</p>
<p>See you in the next episode!</p>
]]></summary>
</entry>
<entry>
    <title>What should a Continuous Integration (CI) server do?</title>
    <link href="http://rickardlindberg.me/writing/what-should-a-ci-server-do/" />
    <id>http://rickardlindberg.me/writing/what-should-a-ci-server-do/</id>
    <published>2023-04-06T00:00:00Z</published>
    <updated>2023-04-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>What should a Continuous Integration (CI) server do?</h1>

<p><em>Published on  6 April 2023.</em></p>

<ul>
<li><a href="#what-is-ci">What is CI?</a></li>
<li><a href="#what-does-integrate-mean">What does integrate mean?</a></li>
<li><a href="#how-often-should-you-integrate">How often should you integrate?</a></li>
<li><a href="#how-to-keep-the-main-branch-working">How to keep the main branch working?</a></li>
<li><a href="#attitude-not-a-tool">Attitude, not a tool</a></li>
<li><a href="#ci-server-functionality">CI server functionality</a>
<ul>
<li><a href="#basic-workflow">Basic workflow</a></li>
<li><a href="#clean-environments">Clean environments</a></li>
<li><a href="#multiple-environments">Multiple environments</a></li>
<li><a href="#pipeline-language">Pipeline language</a></li>
<li><a href="#objection">Objection!?</a></li>
<li><a href="#communication">Communication</a></li>
<li><a href="#multiple-test-suites">Multiple test suites</a></li>
</ul></li>
<li><a href="#common-ci-workflows-and-their-problems">Common “CI” workflows and their problems</a>
<ul>
<li><a href="#run-pipeline-after-commit">Run pipeline after commit</a></li>
<li><a href="#run-pipeline-on-branch-then-again-after-merge">Run pipeline on branch, then again after merge</a></li>
</ul></li>
<li><a href="#why-dont-tools-for-ci-work-like-this">Why don’t tools for CI work like this?</a></li>
<li><a href="#what-about-pull-requests">What about pull requests?</a></li>
</ul>
<p><em>After drafting this article, I asked for feedback on <a href="https://discord.com/channels/897648912851173408/897648913799077930/1076788077353246760">James’ Discord</a>. <a href="https://coding-is-like-cooking.info/">Emily</a> <a href="https://discord.com/channels/897648912851173408/897648913799077930/1078285384527650877">wrote</a> back and said that this sounded a lot like pre-tested integration that she had written about (<a href="https://www.eficode.com/blog/pre-tested-integration">here</a> and <a href="https://www.eficode.com/blog/pre-tested-integration2">here</a>) earlier. She describes almost the exact same workflow as I imagine with this CI server, and there is also a Jenkins plugin to support that workflow. I encourage you the check out her writing as well.</em></p>
<p>I think I have figured out what a Continuous Integration (CI) server <em>should</em> do. It is very simple. Yet common tools used for CI, like Jenkins, make it hard or near impossible.</p>
<h2 id="what-is-ci">What is CI?</h2>
<p>CI probably means different things to different people.</p>
<p>I’ve tried to find the root of the practice, and a lot of my thoughts here are based on James Shore’s descriptions in <a href="https://www.jamesshore.com/v2/books/aoad2/continuous_integration">AOAD2</a>.</p>
<p>So with that in mind, CI to me is about two things:</p>
<ol type="1">
<li>Integrate often.</li>
<li>Promise to keep the main branch working at all times.</li>
</ol>
<h2 id="what-does-integrate-mean">What does integrate mean?</h2>
<p>Integrate means to merge your changes into the main branch. This branch is commonly also referred to as master or trunk.</p>
<h2 id="how-often-should-you-integrate">How often should you integrate?</h2>
<p>From what I’ve read, the consensus seems to be that you should integrate at least once a day. If you do it less frequently, you are not doing <em>continuous</em> integration.</p>
<h2 id="how-to-keep-the-main-branch-working">How to keep the main branch working?</h2>
<p>Every time you integrate, you have to make sure that the main branch is still working. This is the second aspect of CI.</p>
<p>How can you do that?</p>
<p>The only way to do that, and still integrate often, is with an automatic test suite.</p>
<p>When you integrate your code, you want to run the test suite to make sure that everything still works.</p>
<p><strong>The test suite should give you confidence that when it’s time to deploy to production, it will just work.</strong></p>
<p>I’m using the term test suite here to include everything you need to gain that confidence, so it includes compiling, linting, static analysis, unit tests, deploy to test environment, smoke test… <em>everything</em>.</p>
<h2 id="attitude-not-a-tool">Attitude, not a tool</h2>
<p>James Shore writes that <a href="https://www.jamesshore.com/v2/blog/2005/continuous-integration-is-an-attitude">Continuous Integration is an Attitude, Not a Tool</a> and points out that <a href="https://www.jamesshore.com/v2/blog/2006/continuous-integration-on-a-dollar-a-day">you can do CI without a tool</a>.</p>
<p>No tool can choose to integrate your changes often. You have to change your way of working so that you <em>can</em> integrate more often and also do so. This requires practice.</p>
<p>No tool can enforce that your main branch is always working. You have to have a mindset of working like that. This requires practice.</p>
<p>However, there are some things that a tool can help with. To make it easier to work in this way.</p>
<h2 id="ci-server-functionality">CI server functionality</h2>
<p><strong>A CI server should merge changes to the main branch in a “safe” way.</strong></p>
<h3 id="basic-workflow">Basic workflow</h3>
<p>Here is pseudo code for how a CI server should integrate changes from a branch in a Git repo:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="kw">def</span> integrate(repo, branch):</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a>    <span class="cf">with</span> lock(repo):</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>        sh(<span class="st">&quot;git clone </span><span class="sc">{repo}</span><span class="st">&quot;</span>)</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a>        sh(<span class="st">&quot;git merge origin/</span><span class="sc">{branch}</span><span class="st">&quot;</span>)</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a>        sh(<span class="st">&quot;&lt;command to run test suite&gt;&quot;</span>)</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a>        sh(<span class="st">&quot;git push&quot;</span>)</span></code></pre></div>
<p>The lock step ensures that only one integration can happen at a time. If you have two branches that want to integrate, one has to wait for the other to be integrated first.</p>
<p>The branch is then integrated by performing a <code>git merge</code>.</p>
<p>To make sure the new main branch works, a test suite is then run. This test suite should be defined in the repo.</p>
<p>If the test suite passes, a <code>git push</code> is performed to “publish” the new main branch.</p>
<p>This workflow ensures that every change that is merged into the main branch works. Where “works” is defined as passing the test suite.</p>
<p>That is the basic function that I think a CI server should perform. Let’s look at some directions where this design can be evolved to make a more full fledged CI server.</p>
<h3 id="clean-environments">Clean environments</h3>
<p>One thing that a dedicated CI server helps prevent is the problem that code works on one developer’s machine, but not on another’s. Perhaps it is due to a dependency missing on one developer’s machine.</p>
<p>With a CI server, the one true environment is the CI server’s environment.</p>
<p>Preferably, this should also be set up in the exact same way before every test run so that two test runs have the exact same clean environment.</p>
<p>Clean environments make test runs more predictable and helps make integrations safe.</p>
<p>Setting up a clean environment looks different in different contexts. One option would be to use Docker containers. In the Python world, virtual environments could be set up for each test run.</p>
<p>Any function that a CI server can perform to help set up a clean environment is useful.</p>
<h3 id="multiple-environments">Multiple environments</h3>
<p>Another advantage of a dedicated CI server is that you can make sure that your code works in an environment that you don’t have access to on your development machine.</p>
<p>You might write Python code that should work on both Windows and Linux, but your laptop only runs Windows.</p>
<p>A CI server should have functionality to run the test suite in different environments.</p>
<h3 id="pipeline-language">Pipeline language</h3>
<p>To take full advantage of the CI server, the “command to run the test suite” should be written in a “pipeline language” that the CI server understands.</p>
<p>Consider this pseudo example:</p>
<pre><code>step(&#39;compile&#39;) {
    sh(&#39;make&#39;)
}
parallel {
    step(&#39;test unix&#39;) {
        environment(&#39;unix&#39;) {
            sh(&#39;./test&#39;)
        }
    }
    step(&#39;test windows&#39;) {
        environment(&#39;windows&#39;) {
            sh(&#39;test.exe&#39;)
        }
    }
}</code></pre>
<p>This script could not have been written as a Bash script for example, because then it could not have taken advantage of the CI server functionality to run commands in different environments.</p>
<h3 id="objection">Objection!?</h3>
<p>When I asked for feedback on this article, I got some objections about a CI server being responsible for environments and a pipeline language.</p>
<p>One person wrote <a href="https://discord.com/channels/897648912851173408/897648913799077930/1077685040311435314">this</a> and <a href="https://discord.com/channels/897648912851173408/897648913799077930/1078738880653693060">this</a>:</p>
<blockquote>
<p>… having a pipeline script that works <em>only</em> with the ci software seems like a huge lockin and risk</p>
</blockquote>
<blockquote>
<p>I feel that the moment I say I can’t do this locally and I need a pre-configured build server, I am violating the basic principles of development.</p>
</blockquote>
<p>I partly agree with those objections.</p>
<p>It would be better if you could run your whole pipeline locally and have it set up all the clean environments for you. With virtualisation technology, this is becoming more and more possible.</p>
<p>If you manage to get this setup, then the CI server only functions as a single integration point that everyone has to go through.</p>
<p>I still think that a pipeline language would be useful for programming your pipeline. However, it could be used outside the CI server as well. That way you could also debug your pipeline locally without involving the CI server. If a pipeline step requires a specific environment that you can’t get locally, that step could be skipped when run locally.</p>
<h3 id="communication">Communication</h3>
<p>Another aspect of continuous integration is communication.</p>
<p>For example, when you integrate, you want to tell your team members about the change so that they can pull your changes and test their code against it.</p>
<p>A CI server can help communicate. It can for example do the following:</p>
<ul>
<li>Notify the team on a successful integration.</li>
<li>Show today’s integrations in a dashboard to visualize what’s happening.</li>
<li>Show success rate of integrations to give an idea of how the team is doing.</li>
<li>Present clear errors when an integration fails.</li>
<li>Present a clear view of a pipeline and what steps were run.</li>
</ul>
<h3 id="multiple-test-suites">Multiple test suites</h3>
<p>The lock step in the basic workflow ensures that only one integration can happen at a time.</p>
<p>In some situations you might have a longer running test suite that you don’t want to block further integrations.</p>
<p>A CI server could support that something like this:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="kw">def</span> integrate(repo, branch):</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a>    <span class="cf">with</span> lock(repo):</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a>        sh(<span class="st">&quot;git clone </span><span class="sc">{repo}</span><span class="st">&quot;</span>)</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a>        sh(<span class="st">&quot;git merge origin/</span><span class="sc">{branch}</span><span class="st">&quot;</span>)</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a>        sh(<span class="st">&quot;&lt;command to run fast test suite&gt;&quot;</span>)</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true"></a>        sh(<span class="st">&quot;git push&quot;</span>)</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true"></a>    sh(<span class="st">&quot;&lt;command to run slow test suite&gt;&quot;</span>)</span></code></pre></div>
<p>Of course, when you do this, you risk breaking the main branch since all tests are not run before the change is integrated.</p>
<p>One scenario where this could be useful is if you have a slow running test suite today that you can’t make instantly faster. You can start using this pattern with the goal of making all your slow tests fast. As a rule of thumb, the fast test suite should not take more than 10 minutes. If it takes longer for an integration to complete, chances are that you start multitasking because you don’t want to wait for it.</p>
<p>Some tests might also be impossible to run in less than 10 minutes. In that case, this pattern is also good. But make sure that all basic functionality is tested in the fast test suite.</p>
<h2 id="common-ci-workflows-and-their-problems">Common “CI” workflows and their problems</h2>
<p>When it comes to tools commonly used for CI, I primarily have experience with Jenkins. And the two most common patterns in Jenkins, which a believe are not unique to Jenkins, prevent you from doing continuous integration. Let’s have a look.</p>
<h3 id="run-pipeline-after-commit">Run pipeline after commit</h3>
<p>This pattern runs a pipeline only after you have merged your changes to the main branch.</p>
<p>If the test suite fails, your main branch is broken, and everyone who pulls your changes will base their work on something broken.</p>
<p>If you are serious about continuous integration, you fix this problem immediately. Either by reverting the change or merging a fix. It might not be too big a problem.</p>
<p>If you are not serious about continuous integration, you might leave the main branch broken and hope that someone else fixes it.</p>
<p>With a CI server I describe in this article, it is simply impossible to merge something broken. (Given that your test suite will catch the broken things.)</p>
<h3 id="run-pipeline-on-branch-then-again-after-merge">Run pipeline on branch, then again after merge</h3>
<p>This patterns runs a pipeline on every branch so that you know that your changes work before you merge them. And when you merge them, the pipeline is run again.</p>
<p>This is a slight improvement over the previous pattern, but it still has a flaw. Consider this scenario:</p>
<pre><code>0---0
     \
      \---A
       \
        \---B</code></pre>
<p><code>A</code> and <code>B</code> are two branches that both have passing test suites, so they both go ahead and merge, resulting in this:</p>
<pre><code>0---0-------A&#39;---B&#39;
     \     /    /
      \---A    /
       \      /
        \----B</code></pre>
<p><code>A'</code> has already been tested on the branch, but <code>B'</code> has never been tested. That is, the combination of <code>A</code>’s and <code>B</code>’s changes has never been tested, until they are both merged.</p>
<p>With a CI server I describe in this article, this problem is solved with the lock where multiple integrations have to wait for each other.</p>
<p>If you use the multiple test suites pattern, you still have this problem. At least for functionality only covered by the slow test suite. But then it’s a choice you make. You decide if the trade off is worth it for you or not.</p>
<h2 id="why-dont-tools-for-ci-work-like-this">Why don’t tools for CI work like this?</h2>
<p>I think that tools for CI should help you do CI well. Why don’t they?</p>
<p>I have two speculations.</p>
<p>First, if your team is committed to doing continuous integration, a broken main branch might not be too big a deal since everyone is committed to fixing it fast.</p>
<p>Second, back in the day of using SVN (which was my fist version control system), branching was expensive. The default way to share changes was to push directly to the main branch. Having a CI tool do the actual integration was probably technically more difficult. However, now with Git, that is no longer true.</p>
<p>Do you know why tools for CI don’t work like I describe in this article? Please let me know.</p>
<p>Emily <a href="https://discord.com/channels/897648912851173408/897648913799077930/1078571337989234780">responded</a> the following to that question:</p>
<blockquote>
<p>I think it’s hard to tell at this distance, but I suspect the people building the tools weren’t always the same people who really understood what CI is, and there was a communication gap. The tools that ended up becoming popular were perhaps the easiest to adopt and had the best marketing?</p>
</blockquote>
<p>That sounds reasonable to me.</p>
<p>Another person <a href="https://discord.com/channels/897648912851173408/897648913799077930/1077685040311435314">responded</a> with this:</p>
<blockquote>
<p>i think most [build servers] can be configured that way [proper CI]. many users do not want to because they don’t understand the ci process. instead they regard the build server as some central platform on which development is done.</p>
</blockquote>
<p>So people find value in build servers even though they are not designed explicitly for CI. That also makes sense.</p>
<p>So perhaps the reason why we don’t have better tools for CI is that people don’t understand the value of CI or don’t want to adopt it?</p>
<h2 id="what-about-pull-requests">What about pull requests?</h2>
<p>Pull requests are a common way of working, but they don’t play nicely together with CI.</p>
<p>First of all, when working with pull requests, you integrate your code by pressing a button that will perform the merge. With a CI tool like the one I describe in this article, the CI tool performs the merge. With the former, no tool can prevent broken code on the main branch. (The best they can do is test the branch, then test again after merge.)</p>
<p>Second of all, pull requests, at least blocking ones, add delay to the process of integrating code, making it difficult to integrate often.</p>
<p>Pull requests are often used to review changes before they are merged. In a CI server that I describe in this article, there is nothing preventing you from having a manual review step before the CI server is allowed to merge. However, a manual review step adds delays and makes it difficult to integrate often.</p>
]]></summary>
</entry>
<entry>
    <title>March 2023 Update</title>
    <link href="http://rickardlindberg.me/writing/newsletter/march-2023/" />
    <id>http://rickardlindberg.me/writing/newsletter/march-2023/</id>
    <published>2023-04-02T00:00:00Z</published>
    <updated>2023-04-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>March 2023 Update</h1>

<p><em>Published on  2 April 2023.</em></p>

<p>This is what I’ve been up to in March 2023:</p>
<ul>
<li><p>I got interested in building a game using <a href="https://www.pygame.org">Pygame</a>. I’ve started playing computer games with my son, so I thought it would be a fun challenge to see if I can build a game that we both enjoy playing. I think this will be my next side project.</p></li>
<li><p>I watched <a href="https://youtu.be/guycIP56YeY">Kent Beck On The FIRST Testing Frameworks, TDD, Waterfall &amp; MORE | The Engineering Room Ep. 16</a>. Listening to Kent Beck is always interesting since many of the practices in the software world come from him.</p></li>
<li><p>I published no programming videos on my <a href="https://www.youtube.com/channel/UC4XI09URnsM_YYTSizAMliA">Youtube channel</a>. But I suspect upcoming ones will be about agile game development.</p></li>
</ul>
]]></summary>
</entry>
<entry>
    <title>February 2023 Update</title>
    <link href="http://rickardlindberg.me/writing/newsletter/february-2023/" />
    <id>http://rickardlindberg.me/writing/newsletter/february-2023/</id>
    <published>2023-03-05T00:00:00Z</published>
    <updated>2023-03-05T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>February 2023 Update</h1>

<p><em>Published on  5 March 2023.</em></p>

<p>This is what I’ve been up to in February 2023:</p>
<ul>
<li><p>I started reading <a href="https://joyofagility.com/">Joy of Agility</a>. It has many interesting stories that provide valuable lessons.</p></li>
<li><p>I continued writing my blog post <a href="/writing/what-should-a-ci-server-do/index.html">What should a Continuous Integration (CI) server do?</a>. I also asked for feedback on <a href="https://www.jamesshore.com/">James’</a> Discord server and got many useful responses. In particular i learned about <a href="https://www.eficode.com/blog/pre-tested-integration">pre-tested integration</a> which looks very similar to what I tried to describe. I will update my blog post with feedback, and then I will call it done.</p></li>
<li><p>I <a href="https://hachyderm.io/@rickardlindberg/109846707922919650">asked Allen Holub</a> how to think about work that is not a story. Agile is about constantly providing value via stories, but what about work that needs to be done that doesn’t fit that category?</p></li>
<li><p>I read <a href="https://computerhistory.org/blog/postscript-a-digital-printing-press/">PostScript: A Digital Printing Press</a>. It was a bit of computer history that I enjoyed.</p></li>
<li><p>I published another two programming videos on my <a href="https://www.youtube.com/channel/UC4XI09URnsM_YYTSizAMliA">Youtube channel</a>:</p>
<ul>
<li><a href="https://youtu.be/2VrKIIMTFUI">What should a Continuous Integration (CI) server do?</a></li>
<li><a href="https://youtu.be/_uB1KGPjJjw">How TDD helps me solve programming problems.</a></li>
</ul></li>
</ul>
]]></summary>
</entry>
<entry>
    <title>January 2023 Update</title>
    <link href="http://rickardlindberg.me/writing/newsletter/january-2023/" />
    <id>http://rickardlindberg.me/writing/newsletter/january-2023/</id>
    <published>2023-02-11T00:00:00Z</published>
    <updated>2023-02-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>January 2023 Update</h1>

<p><em>Published on 11 February 2023.</em></p>

<p>This is what I’ve been up to in January 2023:</p>
<ul>
<li><p>I started working on my <a href="https://github.com/rickardlindberg/projects">ideal code hosting platform</a>. I’ve attempted to do this once before and failed. I got the urge to give it another try. With my new experience of working in an agile way, I think my chance of succeeding this time is higher. But as always, you need to keep working on the project if it’s not going to die. Anyway, I am happy with the experience of trying and will for sure learn something.</p></li>
<li><p>I watched <a href="https://youtu.be/yXrY5pT88vA">AgileByExample 2021: J.B. Rainsberger - Unlocking the Awesome Power of Refactoring</a>. I learned about the idea of practice. If something you do regularly requires conscious brain effort, practice it until it becomes boring. That frees up brain capacity to think about more high-level problems.</p></li>
<li><p>I started reading <em>Extreme Programming Explained</em> (Second Edition) by Kent Beck. I wanted to learn more about XP since it seems to be the origin of “real” agile. I wanted to learn more about how accurate <a href="https://twitter.com/christianhujer/status/1614888741126176771">this tweet</a> was:</p>
<blockquote>
<p>• DevOps is just whole team+CI from XP.<br> • Teaming is whole team+pair programming from XP.<br> • TBD is just CI from XP.<br> • BDD is TDD+ATDD from XP.<br> <br> ⇒ 20+ years later, XP is still leading the way.</p>
</blockquote></li>
<li><p>I made some progress on my thinking about continuous integration and have a post about it in progress titled <a href="/writing/what-should-a-ci-server-do/index.html">What should a Continuous Integration (CI) server do?</a></p></li>
<li><p>I published another two programming videos on my <a href="https://www.youtube.com/channel/UC4XI09URnsM_YYTSizAMliA">Youtube channel</a>:</p>
<ul>
<li><a href="https://youtu.be/Hdg0LNga2dQ">My experience of one year on Youtube.</a></li>
<li><a href="https://youtu.be/ZvowW_toPmQ">How I start a new programming project. Building my ideal code hosting platform.</a></li>
</ul></li>
</ul>
]]></summary>
</entry>
<entry>
    <title>December 2022 Update</title>
    <link href="http://rickardlindberg.me/writing/newsletter/december-2022/" />
    <id>http://rickardlindberg.me/writing/newsletter/december-2022/</id>
    <published>2023-01-09T00:00:00Z</published>
    <updated>2023-01-09T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>December 2022 Update</h1>

<p><em>Published on  9 January 2023.</em></p>

<p>This is what I’ve been up to in December 2022:</p>
<ul>
<li><p>I finished writing my blog post <a href="/writing/evolving-design-of-projectional-editor/index.html">How should I evolve the design of my projectional editor?</a></p></li>
<li><p>I studied <a href="https://www.jamesshore.com/v2/projects/testing-without-mocks/testing-without-mocks">Testing Without Mocks: A Pattern Language</a> a bit more as James published a draft update of his article. I also watched some episodes of <a href="https://www.jamesshore.com/v2/projects/nullables-livestream">Nullables &amp; A-Frame Architecture Livestream</a>.</p></li>
<li><p>I got the urge to build a new home for <a href="/projects/timeline/index.html">Timeline</a>. Many years ago a <a href="/writing/new-home-for-timeline/index.html">wrote</a> about what I want from a new home. I have tried building it once before but failed. Now with my updated knowledge of Agile development, I think I might be able to pull it off. (But most likely I will fail again. If I try.)</p></li>
<li><p>I solved Advent of Code <a href="https://adventofcode.com/2022/day/17">day 17</a> and published my <a href="https://github.com/rickardlindberg/aoc/blob/main/2022/17.py">solution</a> on Github.</p></li>
<li><p>I published another two programming videos on my <a href="https://www.youtube.com/channel/UC4XI09URnsM_YYTSizAMliA">Youtube channel</a>:</p>
<ul>
<li><a href="https://youtu.be/PG3XvSd7Mns">This refactoring uncovered another problem.</a></li>
<li><a href="https://youtu.be/AuuLTUSfBjs">How blogging helped me solve a programming problem.</a></li>
</ul></li>
</ul>
]]></summary>
</entry>
<entry>
    <title>How should I evolve the design of my projectional editor?</title>
    <link href="http://rickardlindberg.me/writing/evolving-design-of-projectional-editor/" />
    <id>http://rickardlindberg.me/writing/evolving-design-of-projectional-editor/</id>
    <published>2022-12-15T00:00:00Z</published>
    <updated>2022-12-15T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>How should I evolve the design of my projectional editor?</h1>

<p><em>Published on 15 December 2022.</em></p>

<ul>
<li><a href="#background">Background</a></li>
<li><a href="#the-next-thing-i-wanted-my-editor-to-do">The next thing I wanted my editor to do</a></li>
<li><a href="#a-note-on-getting-stuck">A note on getting stuck</a></li>
<li><a href="#a-previous-problem-i-had-noticed">A previous problem I had noticed</a></li>
<li><a href="#making-the-split-work-sensible">Making the split work sensible</a></li>
<li><a href="#how-do-projections-hold-state">How do projections hold state?</a></li>
<li><a href="#ideas-to-move-forward-with">Ideas to move forward with</a></li>
<li><a href="#moving-projection-state-into-documents">Moving projection state into documents</a></li>
<li><a href="#where-to-store-editor-state">Where to store editor state?</a></li>
<li><a href="#how-long-is-this-going-to-take">How long is this going to take?</a></li>
<li><a href="#switching-event-driver-safely">Switching event driver safely</a></li>
<li><a href="#was-a-blog-post-necessary">Was a blog post necessary?</a></li>
</ul>
<p>I am writing this blog post to help me get unstuck.</p>
<p>I tried to implement the next thing in my projectional editor and I felt like I had hit the limit of what the design was capable of. There was no way I could add this next thing.</p>
<p>I had to modify the design.</p>
<p>The problem, though, was that I was not able to figure out <em>how</em> to modify the design. I didn’t even know how to move it in the right direction.</p>
<p>So, now I’m writing this blog post to help me find a solution.</p>
<h2 id="background">Background</h2>
<p>I am building a <a href="https://github.com/rickardlindberg/rlproject">projectional editor</a>. It currently looks like this:</p>
<center>
<img src="rlproject-base.png" title="fig:" alt="My projectional editor." />
</center>
<p>A projectional editor differs from a text editor in that it can project the data structure being edited in different ways. It is not limited to syntax highlighted lines of text for example.</p>
<p>In the screenshot above, you see the same document being projected in two different ways. The first one as multiple lines, and the second one as a single-line string.</p>
<p>The whole editor is created like this:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a>Editor.project(</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a>    Split.project([</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>        ClipScroll.project(</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a>            LinesToTerminal.project(</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a>                StringToLines.project(</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a>                    String.from_file(path)</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a>                )</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true"></a>            ),</span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true"></a>        ),</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true"></a>        ClipScroll.project(</span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true"></a>            StringToTerminal.project(</span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true"></a>                String.from_file(path)</span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true"></a>            ),</span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true"></a>        ),</span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true"></a>    ])</span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true"></a>)</span></code></pre></div>
<p>The <code>Editor.project</code> creates a document that the user can interact with via the GUI. So when the user presses a key on the keyboard, for example, the document responds by modifying itself and returning a new version of itself that the GUI can then render.</p>
<p>The driver for this in the GUI is implemented like this:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="kw">def</span> on_char(<span class="va">self</span>, evt):</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a>    <span class="va">self</span>.terminal <span class="op">=</span> <span class="va">self</span>.terminal.keyboard_event(KeyboardEvent(</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a>        unicode_character<span class="op">=</span><span class="bu">chr</span>(evt.GetUnicodeKey())</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a>    ))</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a>    <span class="va">self</span>.repaint_bitmap()</span></code></pre></div>
<p>The document is called <code>self.terminal</code> here because <code>Editor.project</code> creates a document of type <code>Terminal</code>. It contains fragments at given positions that can be displayed in a terminal-like GUI.</p>
<p>The drawing in the GUI looks like this:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="cf">for</span> fragment <span class="kw">in</span> <span class="va">self</span>.terminal.fragments:</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a>    ...</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a>    memdc.DrawText(fragment.text, fragment.x<span class="op">*</span>char_width, fragment.y<span class="op">*</span>char_height)</span></code></pre></div>
<p>The <code>Editor</code> adds the status bar that you see in the screenshot on the first line. The rest of the window is filled with the document that is passed to the editor which in turn is created by <code>Split.project</code>. And so on.</p>
<h2 id="the-next-thing-i-wanted-my-editor-to-do">The next thing I wanted my editor to do</h2>
<p>The power of a projectional editor comes from projections, and being able to combine projections in various ways to easily create custom editors for different data structures and scenarios.</p>
<p>The next thing I wanted to try in my editor was to filter the lines in the top split.</p>
<p>Put in other words, I wanted to insert a filter projection in the chain of projections. Something like this (<code>Filter.project</code> added):</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a>Editor.project(</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a>    Split.project([</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a>        ClipScroll.project(</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a>            LinesToTerminal.project(</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true"></a>                Filter.project(</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true"></a>                    StringToLines.project(</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true"></a>                        String.from_file(path)</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true"></a>                    )</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true"></a>                )</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true"></a>            ),</span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true"></a>        ),</span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true"></a>        ClipScroll.project(</span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true"></a>            StringToTerminal.project(</span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true"></a>                String.from_file(path)</span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true"></a>            ),</span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true"></a>        ),</span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true"></a>    ])</span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true"></a>)</span></code></pre></div>
<p>This could be useful in a search and replace scenario for example. Instead of scrolling through the document for matches, you could instead only show the lines that match and make the edit right there. And now you can see how this starts to differ from a plain text editor.</p>
<p>I started working on how to input the text to use in the filter. I came up with this:</p>
<center>
<img src="rlproject-filter.png" title="fig:" alt="New filter input field." />
</center>
<p>The idea is that as you type characters in the filter input field, the lines that do not match get excluded from the top split.</p>
<p>When I made the modification to add the input field, I had to force it in. I didn’t find any clean way to do it using the current design. Forcing it in at first is fine. But I couldn’t find a way to refactor towards a better design either. Furthermore, I was unable to implement the actual filtering part. I just couldn’t figure out how. I was stuck.</p>
<h2 id="a-note-on-getting-stuck">A note on getting stuck</h2>
<p>When I end up in a stuck situation like this, I wonder if I’m doing something wrong.</p>
<p>Sometimes when I’m reading Agile literature, and maybe TDD literature in particular, I get the feeling that it should always be possible to make progress. Even if just a tiny bit. And if you get stuck, it’s because you ignored earlier signs that you should have refactored or evolved your design in a certain direction.</p>
<p>Well, now I am stuck, and I can’t figure out a test to write to make even tiny progress. So I am turning to my blog for advice and guidance. By writing about the problem, perhaps I can get some clarity and ideas for how to move forward.</p>
<h2 id="a-previous-problem-i-had-noticed">A previous problem I had noticed</h2>
<p>One problem that I had noticed before starting working on filtering lines, but thought was not significant, is partially seen in the creation of the editor:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a>Editor.project(</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a>    Split.project([</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a>        ClipScroll.project(</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true"></a>            LinesToTerminal.project(</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true"></a>                StringToLines.project(</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true"></a>                    String.from_file(path)</span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true"></a>                )</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true"></a>            ),</span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true"></a>        ),</span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true"></a>        ClipScroll.project(</span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true"></a>            StringToTerminal.project(</span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true"></a>                String.from_file(path)</span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true"></a>            ),</span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true"></a>        ),</span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true"></a>    ])</span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true"></a>)</span></code></pre></div>
<p>The idea is to create an editor for a file at the given <code>path</code>. This editor provides two projections of this file (one with lines, and one with a string). But the idea is to edit a single file. The different projections give different views of the data structure, but the underlying data structure is the same.</p>
<p>Except, in this case it isn’t. You can see that <code>String.from_file(path)</code> is called twice. And the <code>Split</code> projection forwards key events to both child documents. (Not shown in the code above.) The child documents are actually edited separately, but it looks like they are the same document because they receive the same events and change in the same way.</p>
<p>In most cases, it is probably not useful to have a split that forwards events to all its children. It is probably mostly confusing. I thought that <code>Split</code> would be temporarily useful as way to test multiple projections, and that it could be replaced with something better later on.</p>
<p>But I might have been wrong.</p>
<p>Perhaps there was something more fundamentally wrong with the design here.</p>
<h2 id="making-the-split-work-sensible">Making the split work sensible</h2>
<p>Say we want to modify the <code>Split</code> to only forward events to the top split and have the bottom split be just another view. How would we do that?</p>
<p>First of all, there can be only one document, so something like this:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a>document <span class="op">=</span> String.from_file(path)</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a>Editor.project(</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a>    Split.project([</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true"></a>        ClipScroll.project(</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true"></a>            LinesToTerminal.project(</span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true"></a>                StringToLines.project(</span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true"></a>                    document</span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true"></a>                )</span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true"></a>            ),</span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true"></a>        ),</span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true"></a>        ClipScroll.project(</span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true"></a>            StringToTerminal.project(</span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true"></a>                document</span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true"></a>            ),</span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true"></a>        ),</span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true"></a>    ])</span>
<span id="cb6-17"><a href="#cb6-17" aria-hidden="true"></a>)</span></code></pre></div>
<p>But this doesn’t help at all. It is because all documents in this design are immutable. So even if we modify <code>Split</code> to only pass events along to the top split, when the second split renders, it will do so with the original version of the document.</p>
<p>What if we create a projection function like this:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a><span class="kw">def</span> create_editor(document):</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a>    Editor.project(</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true"></a>        Split.project([</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true"></a>            ClipScroll.project(</span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true"></a>                LinesToTerminal.project(</span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true"></a>                    StringToLines.project(</span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true"></a>                        document</span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true"></a>                    )</span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true"></a>                ),</span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true"></a>            ),</span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true"></a>            ClipScroll.project(</span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true"></a>                StringToTerminal.project(</span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true"></a>                    document</span>
<span id="cb7-14"><a href="#cb7-14" aria-hidden="true"></a>                ),</span>
<span id="cb7-15"><a href="#cb7-15" aria-hidden="true"></a>            ),</span>
<span id="cb7-16"><a href="#cb7-16" aria-hidden="true"></a>        ])</span>
<span id="cb7-17"><a href="#cb7-17" aria-hidden="true"></a>    )</span></code></pre></div>
<p>That way, the same document would always be used.</p>
<p>But creating projections in this way is not possible with the current design.</p>
<p>Let’s look at the driver again to see why:</p>
<pre><code>def on_char(self, evt):
    self.terminal = self.terminal.keyboard_event(KeyboardEvent(
        unicode_character=chr(evt.GetUnicodeKey())
    ))
    self.repaint_bitmap()</code></pre>
<p>In this version, the terminal document returns a new version of itself in the response to a key event. So there is no way to apply the new style projection because it is currently embedded in the document.</p>
<p>What if we write the driver like this instead:</p>
<pre><code>def on_char(self, evt):
    new_document = self.terminal.keyboard_event(KeyboardEvent(
        unicode_character=chr(evt.GetUnicodeKey())
    ))
    self.terminal = create_editor(new_document)
    self.repaint_bitmap()</code></pre>
<p>In this design, we need to supply two things to the driver:</p>
<ol type="1">
<li>The document to edit</li>
<li>A projection function that projects the document to a terminal document</li>
</ol>
<p>In this design, we can probably modify <code>Split</code> to behave as we want.</p>
<h2 id="how-do-projections-hold-state">How do projections hold state?</h2>
<p>In the current design, there is a slight distinction between a document and a projection, but they are related. Let’s have a look.</p>
<p>Here is what a <code>Terminal</code> document looks like:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true"></a><span class="kw">class</span> Terminal(</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true"></a>    namedtuple(<span class="st">&quot;Terminal&quot;</span>, <span class="st">&quot;fragments cursors&quot;</span>),</span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true"></a>):</span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true"></a></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true"></a>    <span class="kw">def</span> print_fragments_and_cursors(<span class="va">self</span>):</span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true"></a>        ...</span></code></pre></div>
<p>It has a list of fragments, a list of cursors, and methods that operate on the document.</p>
<p>Now, let’s look at a projection from lines to terminal:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true"></a><span class="kw">class</span> LinesToTerminal(</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true"></a>    namedtuple(<span class="st">&quot;LinesToTerminal&quot;</span>, <span class="st">&quot;projection lines&quot;</span>),</span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true"></a>    Projection</span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true"></a>):</span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true"></a></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true"></a>    <span class="at">@staticmethod</span></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true"></a>    <span class="kw">def</span> project(lines):</span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true"></a>        ...</span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true"></a>        <span class="cf">return</span> LinesToTerminal(</span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true"></a>            ...</span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true"></a>        )</span></code></pre></div>
<p>It has a projection (the terminal document), a lines document (which was used as input), and a <code>project</code> function.</p>
<p>It is used something like this:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true"></a>terminal <span class="op">=</span> LinesToTerminal.project(lines)</span></code></pre></div>
<p>It projects a lines document to a terminal document. So the input to the <code>project</code> function is a <code>Lines</code> document and the output is a <code>Terminal</code> document.</p>
<p>Except the <code>project</code> function returns an instance of itself, a <code>LinesToTerminal</code>. What’s going on?</p>
<p>Notice the second base class to <code>LinesToTerminal</code>: <code>Projection</code>. It looks like this:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true"></a><span class="kw">class</span> Projection:</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true"></a></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true"></a>    <span class="at">@property</span></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true"></a>    <span class="kw">def</span> fragments(<span class="va">self</span>):</span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true"></a>        <span class="cf">return</span> <span class="va">self</span>.projection.fragments</span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true"></a></span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true"></a>    ...</span></code></pre></div>
<p>It adds methods to <code>LinesToTerminal</code> so that it behaves like <code>Terminal</code> document even though it is not. (It assumes that the <code>Terminal</code> document is stored in the <code>projection</code> field.)</p>
<p>So why can’t we just return a <code>Terminal</code> document?</p>
<p>Because the projection needs to hold some state. In this case it holds a copy of the <code>Lines</code> document that was passed as input. It needs that to be able to handle events appropriately. (I think this state is what <a href="https://github.com/projectured/projectured/wiki/Projection">ProjecturEd</a> calls an IO map.)</p>
<p>Needing this wrapper <code>Projection</code> to make “projection objects” behave as document objects annoys me.</p>
<p>Can we invert it? What if all documents had an extra field, called <code>meta</code> maybe, that projections could use to store whatever they need to appropriately handle events? That would require all documents to have such a field, but then the wrapper would not be needed and code would be a bit more clean.</p>
<h2 id="ideas-to-move-forward-with">Ideas to move forward with</h2>
<p>Writing this blog post has yielded some results.</p>
<p>Now I have two ideas to move forward with:</p>
<ol type="1">
<li>Move projection state to documents</li>
<li>Change event driver to make events return a new version of the document being edited instead of a projection</li>
</ol>
<p>How can I make tiny progress on any of the two ideas?</p>
<p>Changing how the driver works seems like a big task that is hard to do in small steps. But moving projection state to documents seems like something that could quite easily be done.</p>
<h2 id="moving-projection-state-into-documents">Moving projection state into documents</h2>
<p>There are currently 3 types of documents:</p>
<ul>
<li>String</li>
<li>Lines</li>
<li>Terminal</li>
</ul>
<p>I decide to start with <code>String</code> to test out this idea. I change</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true"></a><span class="kw">class</span> String(</span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true"></a>    namedtuple(<span class="st">&quot;String&quot;</span>, <span class="st">&quot;string selections&quot;</span>)</span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true"></a>):</span></code></pre></div>
<p>to</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true"></a><span class="kw">class</span> String(</span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true"></a>    namedtuple(<span class="st">&quot;String&quot;</span>, <span class="st">&quot;meta string selections&quot;</span>)</span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true"></a>):</span></code></pre></div>
<p>Immediately tests break because I have not supplied the <code>meta</code> field anywhere. I supply <code>None</code> as a value in all cases, and now everything is back to green.</p>
<p>Unfortunately, there are no projections to <code>String</code>, so there are no projections that would have use for this new <code>meta</code> field. Bad first choice. Never mind.</p>
<p>I do the same change to <code>Lines</code> instead. It turns out to be even easier since I already had factory method and only needed to modify that in one place.</p>
<p>There is only one projection that projects to <code>Lines</code>, and that is <code>StringToLines</code>. I modify it to store its state in the <code>meta</code> field of the <code>Lines</code> document instead of in the projection by changing this</p>
<pre class="pyton"><code>class StringToLines(
    namedtuple(&quot;StringToLines&quot;, &quot;projection string&quot;),
    Projection
)

    ...
    @staticmethod
    def project(string):
        return StringToLines(
            projection=Lines.create(
                lines=(line[0] for line in lines),
                selections=selections
            ),
            string=string,
        )</code></pre>
<p>to this</p>
<pre class="pyton"><code>class StringToLines(Lines):

    ...
    @staticmethod
    def project(string):
        return StringToLines.create(
            lines=(line[0] for line in lines),
            selections=selections,
            meta=Meta(string=string)
        )</code></pre>
<p>The <code>Meta</code> class is defined like this:</p>
<pre class="pyton"><code>class Meta(
    namedtuple(&quot;Meta&quot;, &quot;string&quot;)
):
    pass</code></pre>
<p>Notice the change in base class. A <code>StringToLines</code> projection is now of type <code>Lines</code>. It <em>is</em> a <code>Lines</code> document. It does not need to add wrappers to act like one.</p>
<p>Why return a <code>StringToLines</code> at all? Why not just return <code>Lines</code>? Because it needs to override methods to handle events. Projections need to implement unique event handles because they handle events differently. But the data that the event handlers need to properly handle events are now stored in the <code>meta</code> field of the document.</p>
<p>I realize that storing the projection state in the document <code>meta</code> field or in the projection wouldn’t matter. Different event handlers would need to be associated with different projections anyway.</p>
<p>I’m not sure we are much closer to solving the problem of a sane split view, but I think storing state in documents provides a slightly cleaner design (<a href="https://github.com/rickardlindberg/rlproject/compare/1ab0ca6f57f33318fc87aa9c9913189cf08c99d3...df15b3f663855cd5e54c3b711e9a042afeee96fa">complete diff</a>), so it should help us think a bit more clearly.</p>
<h2 id="where-to-store-editor-state">Where to store editor state?</h2>
<p>The next thing to try is to change the behavior of event handlers to return a new version of the document being edited instead of a new projection. The document can then be converted to a <code>Terminal</code> document using the projection function which in turn can be rendered by the GUI.</p>
<p>The new <code>meta</code> field might come in handy here.</p>
<p>Let’s explore.</p>
<p>In our target design, the driver looks like this:</p>
<pre><code>def on_char(self, evt):
    new_document = self.terminal.keyboard_event(KeyboardEvent(
        unicode_character=chr(evt.GetUnicodeKey())
    ))
    self.terminal = create_editor(new_document)
    self.repaint_bitmap()</code></pre>
<p>Say that the document is a <code>String</code> and that it is read from a file. The <code>create_editor</code> function is completely stateless, so all information about how to render this document through a series of projections must be contained in the document. But a <code>String</code> document has no information about the editor. And the editor would for sure need some state unrelated to the document. One such state would be if the filter input dialog should be shown or not. Another might be which projection to use. Imagine that you can press a key to cycle through different projections for example. The one chosen must be stored somewhere.</p>
<p>We can use the new <code>meta</code> field for this.</p>
<h2 id="how-long-is-this-going-to-take">How long is this going to take?</h2>
<p>I feel like I’ve done a lot of work, and I’m still not confident that this is a good way forward. I feel like I keep trying things and just run into new problems.</p>
<p>I’m trying to think 10 steps ahead to see if the new design will serve all the things that I potentially want to do. I end up just thinking without actually doing anything. Perhaps I shouldn’t. Perhaps I should just focus on the next thing, and then, eventually, I will have reached my end goal. I guess that is the TDD way of doing it. One tiny test at a time. At least now, I have a direction to try. I know one test to write.</p>
<p>But I’m frustrated that I can’t clearly see how this new design will solve even my immediate problems.</p>
<p>But my confidence is starting to grow that this is a promising direction.</p>
<h2 id="switching-event-driver-safely">Switching event driver safely</h2>
<p>We can’t just change how the event driver works in a small step. It would require changes in many places.</p>
<p>What we can do is do a completely parallel implementation of event handlers. We can test drive those, and when we are confident that they work, we can switch over to use them in the driver and remove the old event handlers.</p>
<p>I start with this test:</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> project, document <span class="op">=</span> Editor.create_projection_document(<span class="st">&quot;rlproject.py&quot;</span>)</span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> terminal <span class="op">=</span> project(document)</span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> <span class="bu">isinstance</span>(terminal, Terminal)</span>
<span id="cb20-4"><a href="#cb20-4" aria-hidden="true"></a><span class="va">True</span></span></code></pre></div>
<p><code>Editor.create_projection_document</code> is a completely new function. It returns a projection function and a document. This is what the new event driver requires.</p>
<p>I add another test:</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> document <span class="op">=</span> terminal.new_size_event(SizeEvent(<span class="dv">10</span>, <span class="dv">10</span>))</span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> <span class="bu">isinstance</span>(document, String)</span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true"></a><span class="va">True</span></span></code></pre></div>
<p>This test uses the 2 things like the event driver would. It sends an event to the projection (<code>terminal</code>) and receives a new version of the document being edited (<code>document</code>). The assert checks that we get back a document of the correct type.</p>
<p>The event is called <code>new_size_event</code>. The old one is called <code>size_event</code>. Here the parallelism comes in. We have to duplicate event handlers because they have different signatures.</p>
<p>I am interested in getting some feedback if the new event driver will actually work for real, so I make it possible to use the new driver via a GUI flag:</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true"></a><span class="cf">if</span> <span class="st">&quot;--new-style-driver&quot;</span> <span class="kw">in</span> sys.argv[<span class="dv">1</span>:]:</span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true"></a>    driver <span class="op">=</span> Editor.create_driver(path)</span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true"></a><span class="cf">else</span>:</span>
<span id="cb22-4"><a href="#cb22-4" aria-hidden="true"></a>    driver <span class="op">=</span> Editor.from_file(path)</span></code></pre></div>
<p>This of course does not work fully, but it actually uses the new driver to project something on the screen! I’m starting to feel more confidence in the solution as I can test it for real.</p>
<p>I’m not there yet tho. All events are not fully implemented. I write more tests for those and then try them in the GUI to get the satisfaction of seeing the changes actually work.</p>
<p>I get so excited that I fix some things without writing tests for them. I just check them in the GUI. That’s fine. At least I get quick feedback.</p>
<p>Then I reach a point where the new version is as functional as the old one. It actually works!</p>
<p>I remove the GUI flag and the old event driver implementation and clean up the code base a bit.</p>
<p>I can now also see how to proceed with filtering lines and how that would work in this new design. I’m unstuck!</p>
<h2 id="was-a-blog-post-necessary">Was a blog post necessary?</h2>
<p>The blog post forced me to explain things so that it would be clear to someone else. It forced me to think more clearly.</p>
<p>By doing so, I noticed a problem in the code and a possible way forward.</p>
<p>I don’t think I could have done that using TDD only.</p>
<p><strong>Maybe writing was my way of listening to the code.</strong> It was my way of thinking of what test to write next. Writing made it more clear in what direction to move, then TDD helped me move in that direction safely and steadily.</p>
<p>On the other hand, thinking is not forbidden in TDD. And if writing gives better thinking, is it thinking or writing?</p>
]]></summary>
</entry>
<entry>
    <title>November 2022 Update</title>
    <link href="http://rickardlindberg.me/writing/newsletter/november-2022/" />
    <id>http://rickardlindberg.me/writing/newsletter/november-2022/</id>
    <published>2022-12-02T00:00:00Z</published>
    <updated>2022-12-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>November 2022 Update</h1>

<p><em>Published on  2 December 2022.</em></p>

<p>This is what I’ve been up to in November 2022:</p>
<ul>
<li><p>I continued programming on my <a href="https://github.com/rickardlindberg/rlproject">projectional editor</a>. I had so many ideas I wanted to try, but I got stuck with the design. I started writing a <a href="/writing/evolving-design-of-projectional-editor/index.html">blog post</a> explaining the problem. The blog post helped me get unstuck and I was able to move forward with my ideas.</p></li>
<li><p>I struggled with my writing in the before mentioned blog post. I got a <a href="https://hachyderm.io/@estherschindler/109424345364034217">tip</a> to read a book called “Bird by Bird”. It is a bit unlike other books I usually read in that it paints a picture of what it is like to be a writer. It doesn’t just give you the facts how to become a (better) writer. Sometimes I enjoy it and sometimes I just want the facts.</p></li>
<li><p>I created a Mastodon account to explore this other federated version of microblogging. You can find me at <a
href="https://hachyderm.io/@rickardlindberg"><span class="citation" data-cites="rickardlindberg">@rickardlindberg</span><span class="citation" data-cites="hachyderm.io">@hachyderm.io</span></a>.</p></li>
<li><p>I published just one programming video on my <a href="https://www.youtube.com/channel/UC4XI09URnsM_YYTSizAMliA">Youtube channel</a>:</p>
<ul>
<li><a href="https://youtu.be/qa_2Bk4bLyw">My projectional editor can do this now?!</a></li>
</ul></li>
</ul>
]]></summary>
</entry>
<entry>
    <title>October 2022 Update</title>
    <link href="http://rickardlindberg.me/writing/newsletter/october-2022/" />
    <id>http://rickardlindberg.me/writing/newsletter/october-2022/</id>
    <published>2022-11-10T00:00:00Z</published>
    <updated>2022-11-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>October 2022 Update</h1>

<p><em>Published on 10 November 2022.</em></p>

<p>This is what I’ve been up to in October 2022:</p>
<ul>
<li><p>I started exploring projectional editing with <a href="https://github.com/rickardlindberg/rlproject">rlproject</a>. For now, I’m trying to implement something like what <a href="https://github.com/projectured/projectured/wiki">ProjecturEd</a> describes in its documentation to learn how that might work.</p></li>
<li><p>I watched <a href="https://youtu.be/8Ab3ArE8W3s">“Stop Writing Dead Programs” by Jack Rusher (Strange Loop 2022)</a>. It showed what a better development environment might look like. It also showed that a projectional editor might make your program feel more alive than a plain text editor. Hillel Wayne <a href="https://www.hillelwayne.com/post/strangeloop-22/">points out</a> that the talk has factual errors. Nevertheless, I found it inspiring.</p></li>
<li><p>I watched <a href="https://youtu.be/Fk4rCn4YLLU">End to end functional tests that can run in milliseconds | Nat Pryce | CukenFest London 2017</a>. Nat showed an interesting approach to testing you application in a flexible way.</p></li>
<li><p>I watched <a href="https://youtu.be/9fJntxnH4wY">Pairin’ with Aaron: Messing with Language Servers</a>. I learned about languages servers (LPS’s) and their integration with the development environment.</p></li>
<li><p>I watched some episodes of the <a href="https://www.youtube.com/channel/UCgt1lVMrdwlZKBaerxxp2iQ">Mob Mentality Show</a> and found them interesting.</p></li>
<li><p>I published another four programming videos on my <a href="https://www.youtube.com/channel/UC4XI09URnsM_YYTSizAMliA">Youtube channel</a>:</p>
<ul>
<li><a href="https://youtu.be/DowzqlHr67k">Writing and testing a tiny application without mocks.</a></li>
<li><a href="https://youtu.be/3060LO0PZaY">I demo a tool that makes me super quick at the command line and more.</a></li>
<li><a href="https://youtu.be/1_LAeMUdbH0">How to check balanced string TDD style + a bonus.</a></li>
<li><a href="https://youtu.be/GUX3DQjVg4c">Demo of new project that explores projectional, structured editing.</a></li>
</ul></li>
</ul>
]]></summary>
</entry>
<entry>
    <title>September 2022 Update</title>
    <link href="http://rickardlindberg.me/writing/newsletter/september-2022/" />
    <id>http://rickardlindberg.me/writing/newsletter/september-2022/</id>
    <published>2022-10-08T00:00:00Z</published>
    <updated>2022-10-08T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>September 2022 Update</h1>

<p><em>Published on  8 October 2022.</em></p>

<p>This is what I’ve been up to in September 2022:</p>
<ul>
<li><p>I finally finished writing <a href="/writing/reliable-socket-servers/index.html">How to write reliable socket servers that survive crashes and restarts?</a></p></li>
<li><p>I watched <a href="https://youtu.be/ulRCs7xQA74">Continuous Delivery vs. Gitflow &amp; CD At Scale | Bryan Finster In The Engineering Room Ep. 11</a>. In it, Bryan mention a metaphor with flying cards. The idea was that it is difficult to explain the concept of a flying car to someone who has never experienced it. It’s too foreign. I thought about how I could expose people to more “flying cars”. Make them experience TDD, CI/CD, etc, so that they never wanting to go back.</p></li>
<li><p>I think it was also in the video above that Dave said something along the lines that it’s amazing how much you start caring about testing if you are the one on call. That resonated with me. If you are responsible, you start caring. It also reminded me of another concept about how much to test, where the advice was something like test until fear turns into boredom. (I think I read it from <a href="https://twitter.com/jbrains">jbrains</a>, but <a href="https://twitter.com/jbrains/status/663451314341416960">it seems</a> to originally be from someone else.)</p></li>
<li><p>I published another five programming videos on my <a href="https://www.youtube.com/channel/UC4XI09URnsM_YYTSizAMliA">Youtube channel</a>:</p>
<ul>
<li><a href="https://youtu.be/tu3Sbm78SpY">How to write reliable socket servers that survive crashes and restarts?</a></li>
<li><a href="https://youtu.be/X5yIEELf4t0">What does working in small steps look like?</a></li>
<li><a href="https://youtu.be/IWAx1-thc_w">Are you running your tests often enough?</a></li>
<li><a href="https://youtu.be/1bDEHWKjbyQ">My continuous integration workflow.</a></li>
<li><a href="https://youtu.be/kdYE7_9-5Ng">My workflow for making changes to software.</a></li>
</ul></li>
</ul>
]]></summary>
</entry>

</feed>
