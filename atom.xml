<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Rickard's personal homepage: latest posts</title>
    <link href="http://rickardlindberg.me/atom.xml" rel="self" />
    <link href="http://rickardlindberg.me" />
    <id>http://rickardlindberg.me/atom.xml</id>
    <author>
        <name>Rickard Lindberg</name>
        <email>rickard@rickardlindberg.me</email>
    </author>
    <updated>2023-03-05T00:00:00Z</updated>
    <entry>
    <title>February 2023 Update</title>
    <link href="http://rickardlindberg.me/writing/newsletter/february-2023/" />
    <id>http://rickardlindberg.me/writing/newsletter/february-2023/</id>
    <published>2023-03-05T00:00:00Z</published>
    <updated>2023-03-05T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>February 2023 Update</h1>

<p><em>Published on  5 March 2023.</em></p>

<p>This is what I’ve been up to in February 2023:</p>
<ul>
<li><p>I started reading <a href="https://joyofagility.com/">Joy of Agility</a>. It has many interesting stories that provide valuable lessons.</p></li>
<li><p>I continued writing my blog post <a href="/writing/what-should-a-ci-server-do/index.html">What should a Continuous Integration (CI) server do?</a>. I also asked for feedback on <a href="https://www.jamesshore.com/">James’</a> Discord server and got many useful responses. In particular i learned about <a href="https://www.eficode.com/blog/pre-tested-integration">pre-tested integration</a> which looks very similar to what I tried to describe. I will update my blog post with feedback, and then I will call it done.</p></li>
<li><p>I <a href="https://hachyderm.io/@rickardlindberg/109846707922919650">asked Allen Holub</a> how to think about work that is not a story. Agile is about constantly providing value via stories, but what about work that needs to be done that doesn’t fit that category?</p></li>
<li><p>I read <a href="https://computerhistory.org/blog/postscript-a-digital-printing-press/">PostScript: A Digital Printing Press</a>. It was a bit of computer history that I enjoyed.</p></li>
<li><p>I published another two programming videos on my <a href="https://www.youtube.com/channel/UC4XI09URnsM_YYTSizAMliA">Youtube channel</a>:</p>
<ul>
<li><a href="https://youtu.be/2VrKIIMTFUI">What should a Continuous Integration (CI) server do?</a></li>
<li><a href="https://youtu.be/_uB1KGPjJjw">How TDD helps me solve programming problems.</a></li>
</ul></li>
</ul>
]]></summary>
</entry>
<entry>
    <title>January 2023 Update</title>
    <link href="http://rickardlindberg.me/writing/newsletter/january-2023/" />
    <id>http://rickardlindberg.me/writing/newsletter/january-2023/</id>
    <published>2023-02-11T00:00:00Z</published>
    <updated>2023-02-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>January 2023 Update</h1>

<p><em>Published on 11 February 2023.</em></p>

<p>This is what I’ve been up to in January 2023:</p>
<ul>
<li><p>I started working on my <a href="https://github.com/rickardlindberg/projects">ideal code hosting platform</a>. I’ve attempted to do this once before and failed. I got the urge to give it another try. With my new experience of working in an agile way, I think my chance of succeeding this time is higher. But as always, you need to keep working on the project if it’s not going to die. Anyway, I am happy with the experience of trying and will for sure learn something.</p></li>
<li><p>I watched <a href="https://youtu.be/yXrY5pT88vA">AgileByExample 2021: J.B. Rainsberger - Unlocking the Awesome Power of Refactoring</a>. I learned about the idea of practice. If something you do regularly requires conscious brain effort, practice it until it becomes boring. That frees up brain capacity to think about more high-level problems.</p></li>
<li><p>I started reading <em>Extreme Programming Explained</em> (Second Edition) by Kent Beck. I wanted to learn more about XP since it seems to be the origin of “real” agile. I wanted to learn more about how accurate <a href="https://twitter.com/christianhujer/status/1614888741126176771">this tweet</a> was:</p>
<blockquote>
<p>• DevOps is just whole team+CI from XP.<br> • Teaming is whole team+pair programming from XP.<br> • TBD is just CI from XP.<br> • BDD is TDD+ATDD from XP.<br> <br> ⇒ 20+ years later, XP is still leading the way.</p>
</blockquote></li>
<li><p>I made some progress on my thinking about continuous integration and have a post about it in progress titled <a href="/writing/what-should-a-ci-server-do/index.html">What should a Continuous Integration (CI) server do?</a></p></li>
<li><p>I published another two programming videos on my <a href="https://www.youtube.com/channel/UC4XI09URnsM_YYTSizAMliA">Youtube channel</a>:</p>
<ul>
<li><a href="https://youtu.be/Hdg0LNga2dQ">My experience of one year on Youtube.</a></li>
<li><a href="https://youtu.be/ZvowW_toPmQ">How I start a new programming project. Building my ideal code hosting platform.</a></li>
</ul></li>
</ul>
]]></summary>
</entry>
<entry>
    <title>December 2022 Update</title>
    <link href="http://rickardlindberg.me/writing/newsletter/december-2022/" />
    <id>http://rickardlindberg.me/writing/newsletter/december-2022/</id>
    <published>2023-01-09T00:00:00Z</published>
    <updated>2023-01-09T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>December 2022 Update</h1>

<p><em>Published on  9 January 2023.</em></p>

<p>This is what I’ve been up to in December 2022:</p>
<ul>
<li><p>I finished writing my blog post <a href="/writing/evolving-design-of-projectional-editor/index.html">How should I evolve the design of my projectional editor?</a></p></li>
<li><p>I studied <a href="https://www.jamesshore.com/v2/projects/testing-without-mocks/testing-without-mocks">Testing Without Mocks: A Pattern Language</a> a bit more as James published a draft update of his article. I also watched some episodes of <a href="https://www.jamesshore.com/v2/projects/nullables-livestream">Nullables &amp; A-Frame Architecture Livestream</a>.</p></li>
<li><p>I got the urge to build a new home for <a href="/projects/timeline/index.html">Timeline</a>. Many years ago a <a href="/writing/new-home-for-timeline/index.html">wrote</a> about what I want from a new home. I have tried building it once before but failed. Now with my updated knowledge of Agile development, I think I might be able to pull it off. (But most likely I will fail again. If I try.)</p></li>
<li><p>I solved Advent of Code <a href="https://adventofcode.com/2022/day/17">day 17</a> and published my <a href="https://github.com/rickardlindberg/aoc/blob/main/2022/17.py">solution</a> on Github.</p></li>
<li><p>I published another two programming videos on my <a href="https://www.youtube.com/channel/UC4XI09URnsM_YYTSizAMliA">Youtube channel</a>:</p>
<ul>
<li><a href="https://youtu.be/PG3XvSd7Mns">This refactoring uncovered another problem.</a></li>
<li><a href="https://youtu.be/AuuLTUSfBjs">How blogging helped me solve a programming problem.</a></li>
</ul></li>
</ul>
]]></summary>
</entry>
<entry>
    <title>How should I evolve the design of my projectional editor?</title>
    <link href="http://rickardlindberg.me/writing/evolving-design-of-projectional-editor/" />
    <id>http://rickardlindberg.me/writing/evolving-design-of-projectional-editor/</id>
    <published>2022-12-15T00:00:00Z</published>
    <updated>2022-12-15T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>How should I evolve the design of my projectional editor?</h1>

<p><em>Published on 15 December 2022.</em></p>

<ul>
<li><a href="#background">Background</a></li>
<li><a href="#the-next-thing-i-wanted-my-editor-to-do">The next thing I wanted my editor to do</a></li>
<li><a href="#a-note-on-getting-stuck">A note on getting stuck</a></li>
<li><a href="#a-previous-problem-i-had-noticed">A previous problem I had noticed</a></li>
<li><a href="#making-the-split-work-sensible">Making the split work sensible</a></li>
<li><a href="#how-do-projections-hold-state">How do projections hold state?</a></li>
<li><a href="#ideas-to-move-forward-with">Ideas to move forward with</a></li>
<li><a href="#moving-projection-state-into-documents">Moving projection state into documents</a></li>
<li><a href="#where-to-store-editor-state">Where to store editor state?</a></li>
<li><a href="#how-long-is-this-going-to-take">How long is this going to take?</a></li>
<li><a href="#switching-event-driver-safely">Switching event driver safely</a></li>
<li><a href="#was-a-blog-post-necessary">Was a blog post necessary?</a></li>
</ul>
<p>I am writing this blog post to help me get unstuck.</p>
<p>I tried to implement the next thing in my projectional editor and I felt like I had hit the limit of what the design was capable of. There was no way I could add this next thing.</p>
<p>I had to modify the design.</p>
<p>The problem, though, was that I was not able to figure out <em>how</em> to modify the design. I didn’t even know how to move it in the right direction.</p>
<p>So, now I’m writing this blog post to help me find a solution.</p>
<h2 id="background">Background</h2>
<p>I am building a <a href="https://github.com/rickardlindberg/rlproject">projectional editor</a>. It currently looks like this:</p>
<center>
<img src="rlproject-base.png" title="fig:" alt="My projectional editor." />
</center>
<p>A projectional editor differs from a text editor in that it can project the data structure being edited in different ways. It is not limited to syntax highlighted lines of text for example.</p>
<p>In the screenshot above, you see the same document being projected in two different ways. The first one as multiple lines, and the second one as a single-line string.</p>
<p>The whole editor is created like this:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a>Editor.project(</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a>    Split.project([</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>        ClipScroll.project(</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a>            LinesToTerminal.project(</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a>                StringToLines.project(</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a>                    String.from_file(path)</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a>                )</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true"></a>            ),</span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true"></a>        ),</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true"></a>        ClipScroll.project(</span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true"></a>            StringToTerminal.project(</span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true"></a>                String.from_file(path)</span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true"></a>            ),</span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true"></a>        ),</span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true"></a>    ])</span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true"></a>)</span></code></pre></div>
<p>The <code>Editor.project</code> creates a document that the user can interact with via the GUI. So when the user presses a key on the keyboard, for example, the document responds by modifying itself and returning a new version of itself that the GUI can then render.</p>
<p>The driver for this in the GUI is implemented like this:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="kw">def</span> on_char(<span class="va">self</span>, evt):</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a>    <span class="va">self</span>.terminal <span class="op">=</span> <span class="va">self</span>.terminal.keyboard_event(KeyboardEvent(</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a>        unicode_character<span class="op">=</span><span class="bu">chr</span>(evt.GetUnicodeKey())</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a>    ))</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a>    <span class="va">self</span>.repaint_bitmap()</span></code></pre></div>
<p>The document is called <code>self.terminal</code> here because <code>Editor.project</code> creates a document of type <code>Terminal</code>. It contains fragments at given positions that can be displayed in a terminal-like GUI.</p>
<p>The drawing in the GUI looks like this:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="cf">for</span> fragment <span class="kw">in</span> <span class="va">self</span>.terminal.fragments:</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a>    ...</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a>    memdc.DrawText(fragment.text, fragment.x<span class="op">*</span>char_width, fragment.y<span class="op">*</span>char_height)</span></code></pre></div>
<p>The <code>Editor</code> adds the status bar that you see in the screenshot on the first line. The rest of the window is filled with the document that is passed to the editor which in turn is created by <code>Split.project</code>. And so on.</p>
<h2 id="the-next-thing-i-wanted-my-editor-to-do">The next thing I wanted my editor to do</h2>
<p>The power of a projectional editor comes from projections, and being able to combine projections in various ways to easily create custom editors for different data structures and scenarios.</p>
<p>The next thing I wanted to try in my editor was to filter the lines in the top split.</p>
<p>Put in other words, I wanted to insert a filter projection in the chain of projections. Something like this (<code>Filter.project</code> added):</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a>Editor.project(</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a>    Split.project([</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a>        ClipScroll.project(</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a>            LinesToTerminal.project(</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true"></a>                Filter.project(</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true"></a>                    StringToLines.project(</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true"></a>                        String.from_file(path)</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true"></a>                    )</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true"></a>                )</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true"></a>            ),</span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true"></a>        ),</span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true"></a>        ClipScroll.project(</span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true"></a>            StringToTerminal.project(</span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true"></a>                String.from_file(path)</span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true"></a>            ),</span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true"></a>        ),</span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true"></a>    ])</span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true"></a>)</span></code></pre></div>
<p>This could be useful in a search and replace scenario for example. Instead of scrolling through the document for matches, you could instead only show the lines that match and make the edit right there. And now you can see how this starts to differ from a plain text editor.</p>
<p>I started working on how to input the text to use in the filter. I came up with this:</p>
<center>
<img src="rlproject-filter.png" title="fig:" alt="New filter input field." />
</center>
<p>The idea is that as you type characters in the filter input field, the lines that do not match get excluded from the top split.</p>
<p>When I made the modification to add the input field, I had to force it in. I didn’t find any clean way to do it using the current design. Forcing it in at first is fine. But I couldn’t find a way to refactor towards a better design either. Furthermore, I was unable to implement the actual filtering part. I just couldn’t figure out how. I was stuck.</p>
<h2 id="a-note-on-getting-stuck">A note on getting stuck</h2>
<p>When I end up in a stuck situation like this, I wonder if I’m doing something wrong.</p>
<p>Sometimes when I’m reading Agile literature, and maybe TDD literature in particular, I get the feeling that it should always be possible to make progress. Even if just a tiny bit. And if you get stuck, it’s because you ignored earlier signs that you should have refactored or evolved your design in a certain direction.</p>
<p>Well, now I am stuck, and I can’t figure out a test to write to make even tiny progress. So I am turning to my blog for advice and guidance. By writing about the problem, perhaps I can get some clarity and ideas for how to move forward.</p>
<h2 id="a-previous-problem-i-had-noticed">A previous problem I had noticed</h2>
<p>One problem that I had noticed before starting working on filtering lines, but thought was not significant, is partially seen in the creation of the editor:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a>Editor.project(</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a>    Split.project([</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a>        ClipScroll.project(</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true"></a>            LinesToTerminal.project(</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true"></a>                StringToLines.project(</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true"></a>                    String.from_file(path)</span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true"></a>                )</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true"></a>            ),</span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true"></a>        ),</span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true"></a>        ClipScroll.project(</span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true"></a>            StringToTerminal.project(</span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true"></a>                String.from_file(path)</span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true"></a>            ),</span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true"></a>        ),</span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true"></a>    ])</span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true"></a>)</span></code></pre></div>
<p>The idea is to create an editor for a file at the given <code>path</code>. This editor provides two projections of this file (one with lines, and one with a string). But the idea is to edit a single file. The different projections give different views of the data structure, but the underlying data structure is the same.</p>
<p>Except, in this case it isn’t. You can see that <code>String.from_file(path)</code> is called twice. And the <code>Split</code> projection forwards key events to both child documents. (Not shown in the code above.) The child documents are actually edited separately, but it looks like they are the same document because they receive the same events and change in the same way.</p>
<p>In most cases, it is probably not useful to have a split that forwards events to all its children. It is probably mostly confusing. I thought that <code>Split</code> would be temporarily useful as way to test multiple projections, and that it could be replaced with something better later on.</p>
<p>But I might have been wrong.</p>
<p>Perhaps there was something more fundamentally wrong with the design here.</p>
<h2 id="making-the-split-work-sensible">Making the split work sensible</h2>
<p>Say we want to modify the <code>Split</code> to only forward events to the top split and have the bottom split be just another view. How would we do that?</p>
<p>First of all, there can be only one document, so something like this:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a>document <span class="op">=</span> String.from_file(path)</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a>Editor.project(</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a>    Split.project([</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true"></a>        ClipScroll.project(</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true"></a>            LinesToTerminal.project(</span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true"></a>                StringToLines.project(</span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true"></a>                    document</span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true"></a>                )</span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true"></a>            ),</span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true"></a>        ),</span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true"></a>        ClipScroll.project(</span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true"></a>            StringToTerminal.project(</span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true"></a>                document</span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true"></a>            ),</span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true"></a>        ),</span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true"></a>    ])</span>
<span id="cb6-17"><a href="#cb6-17" aria-hidden="true"></a>)</span></code></pre></div>
<p>But this doesn’t help at all. It is because all documents in this design are immutable. So even if we modify <code>Split</code> to only pass events along to the top split, when the second split renders, it will do so with the original version of the document.</p>
<p>What if we create a projection function like this:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a><span class="kw">def</span> create_editor(document):</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a>    Editor.project(</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true"></a>        Split.project([</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true"></a>            ClipScroll.project(</span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true"></a>                LinesToTerminal.project(</span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true"></a>                    StringToLines.project(</span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true"></a>                        document</span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true"></a>                    )</span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true"></a>                ),</span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true"></a>            ),</span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true"></a>            ClipScroll.project(</span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true"></a>                StringToTerminal.project(</span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true"></a>                    document</span>
<span id="cb7-14"><a href="#cb7-14" aria-hidden="true"></a>                ),</span>
<span id="cb7-15"><a href="#cb7-15" aria-hidden="true"></a>            ),</span>
<span id="cb7-16"><a href="#cb7-16" aria-hidden="true"></a>        ])</span>
<span id="cb7-17"><a href="#cb7-17" aria-hidden="true"></a>    )</span></code></pre></div>
<p>That way, the same document would always be used.</p>
<p>But creating projections in this way is not possible with the current design.</p>
<p>Let’s look at the driver again to see why:</p>
<pre><code>def on_char(self, evt):
    self.terminal = self.terminal.keyboard_event(KeyboardEvent(
        unicode_character=chr(evt.GetUnicodeKey())
    ))
    self.repaint_bitmap()</code></pre>
<p>In this version, the terminal document returns a new version of itself in the response to a key event. So there is no way to apply the new style projection because it is currently embedded in the document.</p>
<p>What if we write the driver like this instead:</p>
<pre><code>def on_char(self, evt):
    new_document = self.terminal.keyboard_event(KeyboardEvent(
        unicode_character=chr(evt.GetUnicodeKey())
    ))
    self.terminal = create_editor(new_document)
    self.repaint_bitmap()</code></pre>
<p>In this design, we need to supply two things to the driver:</p>
<ol type="1">
<li>The document to edit</li>
<li>A projection function that projects the document to a terminal document</li>
</ol>
<p>In this design, we can probably modify <code>Split</code> to behave as we want.</p>
<h2 id="how-do-projections-hold-state">How do projections hold state?</h2>
<p>In the current design, there is a slight distinction between a document and a projection, but they are related. Let’s have a look.</p>
<p>Here is what a <code>Terminal</code> document looks like:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true"></a><span class="kw">class</span> Terminal(</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true"></a>    namedtuple(<span class="st">&quot;Terminal&quot;</span>, <span class="st">&quot;fragments cursors&quot;</span>),</span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true"></a>):</span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true"></a></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true"></a>    <span class="kw">def</span> print_fragments_and_cursors(<span class="va">self</span>):</span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true"></a>        ...</span></code></pre></div>
<p>It has a list of fragments, a list of cursors, and methods that operate on the document.</p>
<p>Now, let’s look at a projection from lines to terminal:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true"></a><span class="kw">class</span> LinesToTerminal(</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true"></a>    namedtuple(<span class="st">&quot;LinesToTerminal&quot;</span>, <span class="st">&quot;projection lines&quot;</span>),</span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true"></a>    Projection</span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true"></a>):</span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true"></a></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true"></a>    <span class="at">@staticmethod</span></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true"></a>    <span class="kw">def</span> project(lines):</span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true"></a>        ...</span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true"></a>        <span class="cf">return</span> LinesToTerminal(</span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true"></a>            ...</span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true"></a>        )</span></code></pre></div>
<p>It has a projection (the terminal document), a lines document (which was used as input), and a <code>project</code> function.</p>
<p>It is used something like this:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true"></a>terminal <span class="op">=</span> LinesToTerminal.project(lines)</span></code></pre></div>
<p>It projects a lines document to a terminal document. So the input to the <code>project</code> function is a <code>Lines</code> document and the output is a <code>Terminal</code> document.</p>
<p>Except the <code>project</code> function returns an instance of itself, a <code>LinesToTerminal</code>. What’s going on?</p>
<p>Notice the second base class to <code>LinesToTerminal</code>: <code>Projection</code>. It looks like this:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true"></a><span class="kw">class</span> Projection:</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true"></a></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true"></a>    <span class="at">@property</span></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true"></a>    <span class="kw">def</span> fragments(<span class="va">self</span>):</span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true"></a>        <span class="cf">return</span> <span class="va">self</span>.projection.fragments</span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true"></a></span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true"></a>    ...</span></code></pre></div>
<p>It adds methods to <code>LinesToTerminal</code> so that it behaves like <code>Terminal</code> document even though it is not. (It assumes that the <code>Terminal</code> document is stored in the <code>projection</code> field.)</p>
<p>So why can’t we just return a <code>Terminal</code> document?</p>
<p>Because the projection needs to hold some state. In this case it holds a copy of the <code>Lines</code> document that was passed as input. It needs that to be able to handle events appropriately. (I think this state is what <a href="https://github.com/projectured/projectured/wiki/Projection">ProjecturEd</a> calls an IO map.)</p>
<p>Needing this wrapper <code>Projection</code> to make “projection objects” behave as document objects annoys me.</p>
<p>Can we invert it? What if all documents had an extra field, called <code>meta</code> maybe, that projections could use to store whatever they need to appropriately handle events? That would require all documents to have such a field, but then the wrapper would not be needed and code would be a bit more clean.</p>
<h2 id="ideas-to-move-forward-with">Ideas to move forward with</h2>
<p>Writing this blog post has yielded some results.</p>
<p>Now I have two ideas to move forward with:</p>
<ol type="1">
<li>Move projection state to documents</li>
<li>Change event driver to make events return a new version of the document being edited instead of a projection</li>
</ol>
<p>How can I make tiny progress on any of the two ideas?</p>
<p>Changing how the driver works seems like a big task that is hard to do in small steps. But moving projection state to documents seems like something that could quite easily be done.</p>
<h2 id="moving-projection-state-into-documents">Moving projection state into documents</h2>
<p>There are currently 3 types of documents:</p>
<ul>
<li>String</li>
<li>Lines</li>
<li>Terminal</li>
</ul>
<p>I decide to start with <code>String</code> to test out this idea. I change</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true"></a><span class="kw">class</span> String(</span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true"></a>    namedtuple(<span class="st">&quot;String&quot;</span>, <span class="st">&quot;string selections&quot;</span>)</span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true"></a>):</span></code></pre></div>
<p>to</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true"></a><span class="kw">class</span> String(</span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true"></a>    namedtuple(<span class="st">&quot;String&quot;</span>, <span class="st">&quot;meta string selections&quot;</span>)</span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true"></a>):</span></code></pre></div>
<p>Immediately tests break because I have not supplied the <code>meta</code> field anywhere. I supply <code>None</code> as a value in all cases, and now everything is back to green.</p>
<p>Unfortunately, there are no projections to <code>String</code>, so there are no projections that would have use for this new <code>meta</code> field. Bad first choice. Never mind.</p>
<p>I do the same change to <code>Lines</code> instead. It turns out to be even easier since I already had factory method and only needed to modify that in one place.</p>
<p>There is only one projection that projects to <code>Lines</code>, and that is <code>StringToLines</code>. I modify it to store its state in the <code>meta</code> field of the <code>Lines</code> document instead of in the projection by changing this</p>
<pre class="pyton"><code>class StringToLines(
    namedtuple(&quot;StringToLines&quot;, &quot;projection string&quot;),
    Projection
)

    ...
    @staticmethod
    def project(string):
        return StringToLines(
            projection=Lines.create(
                lines=(line[0] for line in lines),
                selections=selections
            ),
            string=string,
        )</code></pre>
<p>to this</p>
<pre class="pyton"><code>class StringToLines(Lines):

    ...
    @staticmethod
    def project(string):
        return StringToLines.create(
            lines=(line[0] for line in lines),
            selections=selections,
            meta=Meta(string=string)
        )</code></pre>
<p>The <code>Meta</code> class is defined like this:</p>
<pre class="pyton"><code>class Meta(
    namedtuple(&quot;Meta&quot;, &quot;string&quot;)
):
    pass</code></pre>
<p>Notice the change in base class. A <code>StringToLines</code> projection is now of type <code>Lines</code>. It <em>is</em> a <code>Lines</code> document. It does not need to add wrappers to act like one.</p>
<p>Why return a <code>StringToLines</code> at all? Why not just return <code>Lines</code>? Because it needs to override methods to handle events. Projections need to implement unique event handles because they handle events differently. But the data that the event handlers need to properly handle events are now stored in the <code>meta</code> field of the document.</p>
<p>I realize that storing the projection state in the document <code>meta</code> field or in the projection wouldn’t matter. Different event handlers would need to be associated with different projections anyway.</p>
<p>I’m not sure we are much closer to solving the problem of a sane split view, but I think storing state in documents provides a slightly cleaner design (<a href="https://github.com/rickardlindberg/rlproject/compare/1ab0ca6f57f33318fc87aa9c9913189cf08c99d3...df15b3f663855cd5e54c3b711e9a042afeee96fa">complete diff</a>), so it should help us think a bit more clearly.</p>
<h2 id="where-to-store-editor-state">Where to store editor state?</h2>
<p>The next thing to try is to change the behavior of event handlers to return a new version of the document being edited instead of a new projection. The document can then be converted to a <code>Terminal</code> document using the projection function which in turn can be rendered by the GUI.</p>
<p>The new <code>meta</code> field might come in handy here.</p>
<p>Let’s explore.</p>
<p>In our target design, the driver looks like this:</p>
<pre><code>def on_char(self, evt):
    new_document = self.terminal.keyboard_event(KeyboardEvent(
        unicode_character=chr(evt.GetUnicodeKey())
    ))
    self.terminal = create_editor(new_document)
    self.repaint_bitmap()</code></pre>
<p>Say that the document is a <code>String</code> and that it is read from a file. The <code>create_editor</code> function is completely stateless, so all information about how to render this document through a series of projections must be contained in the document. But a <code>String</code> document has no information about the editor. And the editor would for sure need some state unrelated to the document. One such state would be if the filter input dialog should be shown or not. Another might be which projection to use. Imagine that you can press a key to cycle through different projections for example. The one chosen must be stored somewhere.</p>
<p>We can use the new <code>meta</code> field for this.</p>
<h2 id="how-long-is-this-going-to-take">How long is this going to take?</h2>
<p>I feel like I’ve done a lot of work, and I’m still not confident that this is a good way forward. I feel like I keep trying things and just run into new problems.</p>
<p>I’m trying to think 10 steps ahead to see if the new design will serve all the things that I potentially want to do. I end up just thinking without actually doing anything. Perhaps I shouldn’t. Perhaps I should just focus on the next thing, and then, eventually, I will have reached my end goal. I guess that is the TDD way of doing it. One tiny test at a time. At least now, I have a direction to try. I know one test to write.</p>
<p>But I’m frustrated that I can’t clearly see how this new design will solve even my immediate problems.</p>
<p>But my confidence is starting to grow that this is a promising direction.</p>
<h2 id="switching-event-driver-safely">Switching event driver safely</h2>
<p>We can’t just change how the event driver works in a small step. It would require changes in many places.</p>
<p>What we can do is do a completely parallel implementation of event handlers. We can test drive those, and when we are confident that they work, we can switch over to use them in the driver and remove the old event handlers.</p>
<p>I start with this test:</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> project, document <span class="op">=</span> Editor.create_projection_document(<span class="st">&quot;rlproject.py&quot;</span>)</span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> terminal <span class="op">=</span> project(document)</span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> <span class="bu">isinstance</span>(terminal, Terminal)</span>
<span id="cb20-4"><a href="#cb20-4" aria-hidden="true"></a><span class="va">True</span></span></code></pre></div>
<p><code>Editor.create_projection_document</code> is a completely new function. It returns a projection function and a document. This is what the new event driver requires.</p>
<p>I add another test:</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> document <span class="op">=</span> terminal.new_size_event(SizeEvent(<span class="dv">10</span>, <span class="dv">10</span>))</span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> <span class="bu">isinstance</span>(document, String)</span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true"></a><span class="va">True</span></span></code></pre></div>
<p>This test uses the 2 things like the event driver would. It sends an event to the projection (<code>terminal</code>) and receives a new version of the document being edited (<code>document</code>). The assert checks that we get back a document of the correct type.</p>
<p>The event is called <code>new_size_event</code>. The old one is called <code>size_event</code>. Here the parallelism comes in. We have to duplicate event handlers because they have different signatures.</p>
<p>I am interested in getting some feedback if the new event driver will actually work for real, so I make it possible to use the new driver via a GUI flag:</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true"></a><span class="cf">if</span> <span class="st">&quot;--new-style-driver&quot;</span> <span class="kw">in</span> sys.argv[<span class="dv">1</span>:]:</span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true"></a>    driver <span class="op">=</span> Editor.create_driver(path)</span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true"></a><span class="cf">else</span>:</span>
<span id="cb22-4"><a href="#cb22-4" aria-hidden="true"></a>    driver <span class="op">=</span> Editor.from_file(path)</span></code></pre></div>
<p>This of course does not work fully, but it actually uses the new driver to project something on the screen! I’m starting to feel more confidence in the solution as I can test it for real.</p>
<p>I’m not there yet tho. All events are not fully implemented. I write more tests for those and then try them in the GUI to get the satisfaction of seeing the changes actually work.</p>
<p>I get so excited that I fix some things without writing tests for them. I just check them in the GUI. That’s fine. At least I get quick feedback.</p>
<p>Then I reach a point where the new version is as functional as the old one. It actually works!</p>
<p>I remove the GUI flag and the old event driver implementation and clean up the code base a bit.</p>
<p>I can now also see how to proceed with filtering lines and how that would work in this new design. I’m unstuck!</p>
<h2 id="was-a-blog-post-necessary">Was a blog post necessary?</h2>
<p>The blog post forced me to explain things so that it would be clear to someone else. It forced me to think more clearly.</p>
<p>By doing so, I noticed a problem in the code and a possible way forward.</p>
<p>I don’t think I could have done that using TDD only.</p>
<p><strong>Maybe writing was my way of listening to the code.</strong> It was my way of thinking of what test to write next. Writing made it more clear in what direction to move, then TDD helped me move in that direction safely and steadily.</p>
<p>On the other hand, thinking is not forbidden in TDD. And if writing gives better thinking, is it thinking or writing?</p>
]]></summary>
</entry>
<entry>
    <title>November 2022 Update</title>
    <link href="http://rickardlindberg.me/writing/newsletter/november-2022/" />
    <id>http://rickardlindberg.me/writing/newsletter/november-2022/</id>
    <published>2022-12-02T00:00:00Z</published>
    <updated>2022-12-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>November 2022 Update</h1>

<p><em>Published on  2 December 2022.</em></p>

<p>This is what I’ve been up to in November 2022:</p>
<ul>
<li><p>I continued programming on my <a href="https://github.com/rickardlindberg/rlproject">projectional editor</a>. I had so many ideas I wanted to try, but I got stuck with the design. I started writing a <a href="/writing/evolving-design-of-projectional-editor/index.html">blog post</a> explaining the problem. The blog post helped me get unstuck and I was able to move forward with my ideas.</p></li>
<li><p>I struggled with my writing in the before mentioned blog post. I got a <a href="https://hachyderm.io/@estherschindler/109424345364034217">tip</a> to read a book called “Bird by Bird”. It is a bit unlike other books I usually read in that it paints a picture of what it is like to be a writer. It doesn’t just give you the facts how to become a (better) writer. Sometimes I enjoy it and sometimes I just want the facts.</p></li>
<li><p>I created a Mastodon account to explore this other federated version of microblogging. You can find me at <a
href="https://hachyderm.io/@rickardlindberg"><span class="citation" data-cites="rickardlindberg">@rickardlindberg</span><span class="citation" data-cites="hachyderm.io">@hachyderm.io</span></a>.</p></li>
<li><p>I published just one programming video on my <a href="https://www.youtube.com/channel/UC4XI09URnsM_YYTSizAMliA">Youtube channel</a>:</p>
<ul>
<li><a href="https://youtu.be/qa_2Bk4bLyw">My projectional editor can do this now?!</a></li>
</ul></li>
</ul>
]]></summary>
</entry>
<entry>
    <title>October 2022 Update</title>
    <link href="http://rickardlindberg.me/writing/newsletter/october-2022/" />
    <id>http://rickardlindberg.me/writing/newsletter/october-2022/</id>
    <published>2022-11-10T00:00:00Z</published>
    <updated>2022-11-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>October 2022 Update</h1>

<p><em>Published on 10 November 2022.</em></p>

<p>This is what I’ve been up to in October 2022:</p>
<ul>
<li><p>I started exploring projectional editing with <a href="https://github.com/rickardlindberg/rlproject">rlproject</a>. For now, I’m trying to implement something like what <a href="https://github.com/projectured/projectured/wiki">ProjecturEd</a> describes in its documentation to learn how that might work.</p></li>
<li><p>I watched <a href="https://youtu.be/8Ab3ArE8W3s">“Stop Writing Dead Programs” by Jack Rusher (Strange Loop 2022)</a>. It showed what a better development environment might look like. It also showed that a projectional editor might make your program feel more alive than a plain text editor. Hillel Wayne <a href="https://www.hillelwayne.com/post/strangeloop-22/">points out</a> that the talk has factual errors. Nevertheless, I found it inspiring.</p></li>
<li><p>I watched <a href="https://youtu.be/Fk4rCn4YLLU">End to end functional tests that can run in milliseconds | Nat Pryce | CukenFest London 2017</a>. Nat showed an interesting approach to testing you application in a flexible way.</p></li>
<li><p>I watched <a href="https://youtu.be/9fJntxnH4wY">Pairin’ with Aaron: Messing with Language Servers</a>. I learned about languages servers (LPS’s) and their integration with the development environment.</p></li>
<li><p>I watched some episodes of the <a href="https://www.youtube.com/channel/UCgt1lVMrdwlZKBaerxxp2iQ">Mob Mentality Show</a> and found them interesting.</p></li>
<li><p>I published another four programming videos on my <a href="https://www.youtube.com/channel/UC4XI09URnsM_YYTSizAMliA">Youtube channel</a>:</p>
<ul>
<li><a href="https://youtu.be/DowzqlHr67k">Writing and testing a tiny application without mocks.</a></li>
<li><a href="https://youtu.be/3060LO0PZaY">I demo a tool that makes me super quick at the command line and more.</a></li>
<li><a href="https://youtu.be/1_LAeMUdbH0">How to check balanced string TDD style + a bonus.</a></li>
<li><a href="https://youtu.be/GUX3DQjVg4c">Demo of new project that explores projectional, structured editing.</a></li>
</ul></li>
</ul>
]]></summary>
</entry>
<entry>
    <title>September 2022 Update</title>
    <link href="http://rickardlindberg.me/writing/newsletter/september-2022/" />
    <id>http://rickardlindberg.me/writing/newsletter/september-2022/</id>
    <published>2022-10-08T00:00:00Z</published>
    <updated>2022-10-08T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>September 2022 Update</h1>

<p><em>Published on  8 October 2022.</em></p>

<p>This is what I’ve been up to in September 2022:</p>
<ul>
<li><p>I finally finished writing <a href="/writing/reliable-socket-servers/index.html">How to write reliable socket servers that survive crashes and restarts?</a></p></li>
<li><p>I watched <a href="https://youtu.be/ulRCs7xQA74">Continuous Delivery vs. Gitflow &amp; CD At Scale | Bryan Finster In The Engineering Room Ep. 11</a>. In it, Bryan mention a metaphor with flying cards. The idea was that it is difficult to explain the concept of a flying car to someone who has never experienced it. It’s too foreign. I thought about how I could expose people to more “flying cars”. Make them experience TDD, CI/CD, etc, so that they never wanting to go back.</p></li>
<li><p>I think it was also in the video above that Dave said something along the lines that it’s amazing how much you start caring about testing if you are the one on call. That resonated with me. If you are responsible, you start caring. It also reminded me of another concept about how much to test, where the advice was something like test until fear turns into boredom. (I think I read it from <a href="https://twitter.com/jbrains">jbrains</a>, but <a href="https://twitter.com/jbrains/status/663451314341416960">it seems</a> to originally be from someone else.)</p></li>
<li><p>I published another five programming videos on my <a href="https://www.youtube.com/channel/UC4XI09URnsM_YYTSizAMliA">Youtube channel</a>:</p>
<ul>
<li><a href="https://youtu.be/tu3Sbm78SpY">How to write reliable socket servers that survive crashes and restarts?</a></li>
<li><a href="https://youtu.be/X5yIEELf4t0">What does working in small steps look like?</a></li>
<li><a href="https://youtu.be/IWAx1-thc_w">Are you running your tests often enough?</a></li>
<li><a href="https://youtu.be/1bDEHWKjbyQ">My continuous integration workflow.</a></li>
<li><a href="https://youtu.be/kdYE7_9-5Ng">My workflow for making changes to software.</a></li>
</ul></li>
</ul>
]]></summary>
</entry>
<entry>
    <title>August 2022 Update</title>
    <link href="http://rickardlindberg.me/writing/newsletter/august-2022/" />
    <id>http://rickardlindberg.me/writing/newsletter/august-2022/</id>
    <published>2022-09-09T00:00:00Z</published>
    <updated>2022-09-09T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>August 2022 Update</h1>

<p><em>Published on  9 September 2022.</em></p>

<p>This is what I’ve been up to in August 2022:</p>
<ul>
<li><p>I was interested in learning more how to slice stories to make them smaller but still valuable. I found Ron’s article <a href="https://ronjeffries.com/xprog/articles/getting-small-stories/">Getting Small Stories</a> very useful. Having one “dumb” idea can change the conversation from “that is impossible” to “how can we make it better”.</p></li>
<li><p>I also read Ron’s book <a href="https://pragprog.com/titles/rjnsd/the-nature-of-software-development/">The Nature of Software Development</a>. In it he talks about focusing on value and that value is something that <em>we want</em>. But who is <em>we</em>? When I am working on software that I use, I can ask myself what I want. But in most cases I’m not the only user of the software that I write. <em>We</em> are probably many different people.</p></li>
<li><p>I’ve though about writing a book about how to implement programming languages. It would use <a href="/projects/rlmeta/index.html">RLMeta</a> for the examples. But writing a book seems like a daunting task. I started thinking that I could approach writing the book the same way I approach writing software in an agile fashion with small stories. I can create the first version of the “book” in one day. Then I can improve it by writing more chapters and going into more details.</p></li>
<li><p>I continued writing <a href="/writing/reliable-socket-servers/index.html">How to write reliable socket servers that survive crashes and restarts?</a></p></li>
<li><p>I watched the Mob Mentality Show <a href="https://youtu.be/nLUFPHUS2Pk">Agile vs. Agility with Allen Holub</a>. I’ve been inspired by Allen’s talk about Agile, and I got value from this episode.</p></li>
<li><p>I published another four programming videos on my <a href="https://www.youtube.com/channel/UC4XI09URnsM_YYTSizAMliA">Youtube channel</a>:</p>
<ul>
<li><a href="https://youtu.be/BXyiqhqXT0U">I did the simplest thing that could possibly work. Here’s what happened.</a></li>
<li><a href="https://youtu.be/XldYdxAlH2o">Converting RLCI to client/server architecture (part 1/3).</a></li>
<li><a href="https://youtu.be/9HQB9pt4v30">Converting RLCI to client/server architecture (part 2/3).</a></li>
<li><a href="https://youtu.be/GBfUerlQfuI">Converting RLCI to client/server architecture (part 3/3).</a></li>
</ul></li>
</ul>
]]></summary>
</entry>
<entry>
    <title>How to write reliable socket servers that survive crashes and restarts?</title>
    <link href="http://rickardlindberg.me/writing/reliable-socket-servers/" />
    <id>http://rickardlindberg.me/writing/reliable-socket-servers/</id>
    <published>2022-09-02T00:00:00Z</published>
    <updated>2022-09-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>How to write reliable socket servers that survive crashes and restarts?</h1>

<p><em>Published on  2 September 2022.</em></p>

<ul>
<li><a href="#video-version">Video version</a></li>
<li><a href="#the-problem-with-a-crashing-server">The problem with a crashing server</a></li>
<li><a href="#solution-restart-the-server-in-a-loop">Solution: restart the server in a loop</a></li>
<li><a href="#the-problem-with-a-restarting-server">The problem with a restarting server</a></li>
<li><a href="#solution-separate-listening-on-a-socket-and-accepting-connections">Solution: separate listening on a socket and accepting connections</a></li>
<li><a href="#questions-answers">Questions &amp; Answers</a>
<ul>
<li><a href="#how-long-will-a-socket-wait-before-timing-out">How long will a socket wait before timing out?</a></li>
<li><a href="#can-we-decrease-the-startup-time">Can we decrease the startup time?</a></li>
<li><a href="#can-we-use-this-technique-to-create-a-load-balancer">Can we use this technique to create a load balancer?</a></li>
<li><a href="#why-do-we-need-to-move-the-socket-file-descriptor">Why do we need to move the socket file descriptor?</a></li>
<li><a href="#why-is-execvp-needed">Why is execvp needed?</a></li>
<li><a href="#why-socket-option-reuse">Why socket option REUSE?</a></li>
<li><a href="#is-this-how-supervisor-works">Is this how Supervisor works?</a></li>
<li><a href="#why-not-make-the-server-more-reliable">Why not make the server more reliable?</a></li>
<li><a href="#can-this-approach-be-used-for-zero-downtime-deployments">Can this approach be used for zero-downtime deployments</a></li>
<li><a href="#can-we-use-a-unix-domain-socket-instead-of-a-tcp-socket">Can we use a Unix domain socket instead of a TCP socket?</a></li>
</ul></li>
</ul>
<p>A few months ago, I was researching how to do zero-downtime deployments and found the wonderful blog post <a href="https://alangrow.com/blog/dream-deploys-atomic-zero-downtime-deployments">Dream Deploys: Atomic, Zero-Downtime Deployments</a>.</p>
<p>In it, Alan describes how separating listening on a socket and accepting connections on it into different processes can keep a socket “live” at all times even during a restart.</p>
<p>In this blog post I want to document that trick and my understanding of it.</p>
<h2 id="video-version">Video version</h2>
<p>If you prefer a video version covering this topic:</p>
<center>
<iframe width="560" height="315" src="https://www.youtube.com/embed/tu3Sbm78SpY" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write;
encrypted-media; gyroscope; picture-in-picture" allowfullscreen>
</iframe>
</center>
<h2 id="the-problem-with-a-crashing-server">The problem with a crashing server</h2>
<p>To illustrate the problem with a crashing server, we use the example below:</p>
<div class="rliterate-code">
<div class="rliterate-code-header">
<ol class="rliterate-code-path">
<li>
server-listen.py
</li>
</ol>
</div>
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="kn">import</span> <span class="nn">socket</span>

<span class="k">with</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">()</span> <span class="k">as</span> <span class="n">s</span><span class="p">:</span>
    <span class="n">s</span><span class="o">.</span><span class="n">setsockopt</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">SOL_SOCKET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SO_REUSEADDR</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">s</span><span class="o">.</span><span class="n">bind</span><span class="p">((</span><span class="s2">&quot;localhost&quot;</span><span class="p">,</span> <span class="mi">9000</span><span class="p">))</span>
    <span class="n">s</span><span class="o">.</span><span class="n">listen</span><span class="p">()</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;listening on port 9000&quot;</span><span class="p">)</span>
    <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
        <span class="n">conn</span><span class="p">,</span> <span class="n">addr</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">accept</span><span class="p">()</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;accepting connection&quot;</span><span class="p">)</span>
        <span class="k">with</span> <span class="n">conn</span><span class="p">:</span>
            <span class="n">data</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
            <span class="n">number</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
            <span class="n">conn</span><span class="o">.</span><span class="n">sendall</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">number</span><span class="si">}</span><span class="s2">*</span><span class="si">{</span><span class="n">number</span><span class="si">}</span><span class="s2">=</span><span class="si">{</span><span class="n">number</span><span class="o">*</span><span class="n">number</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s2">&quot;ascii&quot;</span><span class="p">))</span>
</pre>
</div>
</div>
</div>
<p>This is a TCP server, listening on port 9000, reading numbers from clients, and returning the product of the two numbers. It assumes that numbers can be parsed as integers. If parsing fails, the server crashes.</p>
<p>To test the behavior of the server, we use the following client:</p>
<div class="rliterate-code">
<div class="rliterate-code-header">
<ol class="rliterate-code-path">
<li>
client.py
</li>
</ol>
</div>
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="kn">import</span> <span class="nn">socket</span>
<span class="kn">import</span> <span class="nn">time</span>

<span class="k">def</span> <span class="nf">make_request</span><span class="p">(</span><span class="n">number</span><span class="p">):</span>
    <span class="k">with</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">()</span> <span class="k">as</span> <span class="n">s</span><span class="p">:</span>
        <span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s2">&quot;localhost&quot;</span><span class="p">,</span> <span class="mi">9000</span><span class="p">))</span>
        <span class="k">if</span> <span class="n">number</span> <span class="o">==</span> <span class="mi">5</span><span class="p">:</span>
            <span class="n">s</span><span class="o">.</span><span class="n">sendall</span><span class="p">(</span><span class="sa">b</span><span class="s2">&quot;five</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">s</span><span class="o">.</span><span class="n">sendall</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">number</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s2">&quot;ascii&quot;</span><span class="p">))</span>
        <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s2">&quot;ascii&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">rstrip</span><span class="p">()</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">20</span><span class="p">):</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">time_start</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">perf_counter</span><span class="p">()</span>
        <span class="n">message</span> <span class="o">=</span> <span class="n">make_request</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
        <span class="n">time_end</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">perf_counter</span><span class="p">()</span>
        <span class="n">diff</span> <span class="o">=</span> <span class="nb">int</span><span class="p">((</span><span class="n">time_end</span> <span class="o">-</span> <span class="n">time_start</span><span class="p">)</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">message</span><span class="p">:</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">message</span><span class="si">}</span><span class="s2"> (request took </span><span class="si">{</span><span class="n">diff</span><span class="si">}</span><span class="s2">ms)&quot;</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;No response for </span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Connection failed for </span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.01</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>It sends 20 requests to the server with a 10ms delay between them. However, for request with number 5, instead of sending the number <code>5</code> it sends the string <code>five</code> to cause the server to crash.</p>
<p>If we start the server, then the client, the output looks as follows:</p>
<div class="rliterate-code">
<div class="rliterate-code-header">
<ol class="rliterate-code-path">
<li>
<span class="cp">server output </span>
</li>
</ol>
</div>
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ python server-listen.py 
listening on port 9000
accepting connection
accepting connection
accepting connection
accepting connection
accepting connection
accepting connection
Traceback (most recent call last):
  File &quot;/home/rick/rickardlindberg.me/writing/reliable-socket-servers/server-listen.py&quot;, line 13, in &lt;module&gt;
    number = int(data)
ValueError: invalid literal for int() with base 10: b&#39;five\n&#39;
</pre>
</div>
</div>
</div>
<div class="rliterate-code">
<div class="rliterate-code-header">
<ol class="rliterate-code-path">
<li>
<span class="cp">client output </span>
</li>
</ol>
</div>
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ python client.py 
0*0=0 (request took 1ms)
1*1=1 (request took 0ms)
2*2=4 (request took 0ms)
3*3=9 (request took 0ms)
4*4=16 (request took 0ms)
No response for 5
Connection failed for 6
Connection failed for 7
Connection failed for 8
Connection failed for 9
Connection failed for 10
Connection failed for 11
Connection failed for 12
Connection failed for 13
Connection failed for 14
Connection failed for 15
Connection failed for 16
Connection failed for 17
Connection failed for 18
Connection failed for 19
</pre>
</div>
</div>
</div>
<p>In the client output, we see that request with number 5 never receives a response from the server and that subsequent requests fail because the server has crashed, and there is no one listening on port 9000.</p>
<h2 id="solution-restart-the-server-in-a-loop">Solution: restart the server in a loop</h2>
<p>In order for subsequent requests to succeed, we need to start the server again after it has crashed. One way to do that is to run the server program in an infinite loop using a script like the one below:</p>
<div class="rliterate-code">
<div class="rliterate-code-header">
<ol class="rliterate-code-path">
<li>
loop.sh
</li>
</ol>
</div>
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">while</span> true<span class="p">;</span> <span class="k">do</span>
    <span class="nb">echo</span> <span class="s2">&quot;</span><span class="nv">$@</span><span class="s2">&quot;</span>
    <span class="s2">&quot;</span><span class="nv">$@</span><span class="s2">&quot;</span> <span class="o">||</span> <span class="nb">true</span>
    <span class="nb">echo</span> <span class="s2">&quot;restarting&quot;</span>
<span class="k">done</span>
</pre>
</div>
</div>
</div>
<p>This Bash script takes a command to run as argument and runs that command in a loop, ignoring any exit code.</p>
<p>Invoking the server and client again, we get the following output:</p>
<div class="rliterate-code">
<div class="rliterate-code-header">
<ol class="rliterate-code-path">
<li>
<span class="cp">server output </span>
</li>
</ol>
</div>
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ bash loop.sh python server-listen.py
python server-listen.py
listening on port 9000
accepting connection
accepting connection
accepting connection
accepting connection
accepting connection
accepting connection
Traceback (most recent call last):
  File &quot;/home/rick/rickardlindberg.me/writing/reliable-socket-servers/server-listen.py&quot;, line 13, in &lt;module&gt;
    number = int(data)
ValueError: invalid literal for int() with base 10: b&#39;five\n&#39;
restarting
python server-listen.py
listening on port 9000
accepting connection
accepting connection
accepting connection
accepting connection
accepting connection
accepting connection
</pre>
</div>
</div>
</div>
<div class="rliterate-code">
<div class="rliterate-code-header">
<ol class="rliterate-code-path">
<li>
<span class="cp">client output </span>
</li>
</ol>
</div>
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ python client.py 
0*0=0 (request took 1ms)
1*1=1 (request took 0ms)
2*2=4 (request took 0ms)
3*3=9 (request took 1ms)
4*4=16 (request took 0ms)
No response for 5
Connection failed for 6
Connection failed for 7
Connection failed for 8
Connection failed for 9
Connection failed for 10
Connection failed for 11
Connection failed for 12
Connection failed for 13
14*14=196 (request took 0ms)
15*15=225 (request took 0ms)
16*16=256 (request took 0ms)
17*17=289 (request took 0ms)
18*18=324 (request took 0ms)
19*19=361 (request took 1ms)
</pre>
</div>
</div>
</div>
<p>In the server output, we see that the server starts again after the crash and starts listening on port 9000.</p>
<p>In the client output, we see that request with number 5 fails the same way, but after a few more requests, it starts getting responses again at request with number 14.</p>
<h2 id="the-problem-with-a-restarting-server">The problem with a restarting server</h2>
<p>Running the server in a loop is an improvement. Instead of dropping all subsequent requests, we only drop a few.</p>
<p>But during the time between the server crash and a new server being up, there is no one listening on port 9000 and we still drop connections.</p>
<p>How can we make sure to handle all requests?</p>
<h2 id="solution-separate-listening-on-a-socket-and-accepting-connections">Solution: separate listening on a socket and accepting connections</h2>
<p>The trick, as also demonstrated in Alan’s blog post, is to listen on the socket in one process and accept connections and processing requests in another process. That way, if processing fails, and that process dies, the socket still stays open because it is managed by another process.</p>
<p>Here is a program that listens on a socket and then spawns server processes in a loop to accept connections:</p>
<div class="rliterate-code">
<div class="rliterate-code-header">
<ol class="rliterate-code-path">
<li>
server-listen-loop.py
</li>
</ol>
</div>
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">socket</span>

<span class="k">with</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">()</span> <span class="k">as</span> <span class="n">s</span><span class="p">:</span>
    <span class="n">s</span><span class="o">.</span><span class="n">setsockopt</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">SOL_SOCKET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SO_REUSEADDR</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">s</span><span class="o">.</span><span class="n">bind</span><span class="p">((</span><span class="s2">&quot;localhost&quot;</span><span class="p">,</span> <span class="mi">9000</span><span class="p">))</span>
    <span class="n">s</span><span class="o">.</span><span class="n">listen</span><span class="p">()</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;listening on port 9000&quot;</span><span class="p">)</span>
    <span class="n">os</span><span class="o">.</span><span class="n">dup2</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">fileno</span><span class="p">(),</span> <span class="mi">0</span><span class="p">)</span>
    <span class="n">os</span><span class="o">.</span><span class="n">close</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">fileno</span><span class="p">())</span>
    <span class="n">os</span><span class="o">.</span><span class="n">execvp</span><span class="p">(</span><span class="s2">&quot;bash&quot;</span><span class="p">,</span> <span class="p">[</span><span class="s2">&quot;bash&quot;</span><span class="p">,</span> <span class="s2">&quot;loop.sh&quot;</span><span class="p">,</span> <span class="s2">&quot;python&quot;</span><span class="p">,</span> <span class="s2">&quot;server-accept.py&quot;</span><span class="p">])</span>
</pre>
</div>
</div>
</div>
<p>The first part of this program creates a socket and starts listening. This is what we had in the previous example.</p>
<p>The second part moves the file descriptor of the socket to file descriptor 0 (stdin) to make it available to child processes.</p>
<p>The third part replaces the current process with <code>bash loop.sh python server-accept.py</code>. At this point the process is listening on the socket and starts the <code>server-accept.py</code> program in a loop. As long as the <code>loop.sh</code> script doesn’t exit, there will be someone listening on port 9000.</p>
<p>The <code>server-accept.py</code> program is similar to <code>server-listen.py</code>, but instead of listening on port 9000, it just accepts connections on the socket which is passed to it as file descriptor 0 (stdin):</p>
<p>Here is <code>server-accept.py</code>:</p>
<div class="rliterate-code">
<div class="rliterate-code-header">
<ol class="rliterate-code-path">
<li>
server-accept.py
</li>
</ol>
</div>
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="kn">import</span> <span class="nn">socket</span>

<span class="k">with</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">fileno</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="k">as</span> <span class="n">s</span><span class="p">:</span>
    <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
        <span class="n">conn</span><span class="p">,</span> <span class="n">addr</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">accept</span><span class="p">()</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;accepting connection&quot;</span><span class="p">)</span>
        <span class="k">with</span> <span class="n">conn</span><span class="p">:</span>
            <span class="n">data</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
            <span class="n">number</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
            <span class="n">conn</span><span class="o">.</span><span class="n">sendall</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">number</span><span class="si">}</span><span class="s2">*</span><span class="si">{</span><span class="n">number</span><span class="si">}</span><span class="s2">=</span><span class="si">{</span><span class="n">number</span><span class="o">*</span><span class="n">number</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s2">&quot;ascii&quot;</span><span class="p">))</span>
</pre>
</div>
</div>
</div>
<p>Invoking the server and client again, we get the following output:</p>
<div class="rliterate-code">
<div class="rliterate-code-header">
<ol class="rliterate-code-path">
<li>
<span class="cp">server output </span>
</li>
</ol>
</div>
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ python server-listen-loop.py
listening on port 9000
python server-accept.py
accepting connection
accepting connection
accepting connection
accepting connection
accepting connection
accepting connection
Traceback (most recent call last):
  File &quot;/home/rick/rickardlindberg.me/writing/reliable-socket-servers/server-accept.py&quot;, line 9, in &lt;module&gt;
    number = int(data)
ValueError: invalid literal for int() with base 10: b&#39;five\n&#39;
restarting
python server-accept.py
accepting connection
accepting connection
accepting connection
accepting connection
accepting connection
accepting connection
accepting connection
accepting connection
accepting connection
accepting connection
accepting connection
accepting connection
accepting connection
accepting connection
</pre>
</div>
</div>
</div>
<div class="rliterate-code">
<div class="rliterate-code-header">
<ol class="rliterate-code-path">
<li>
<span class="cp">client output </span>
</li>
</ol>
</div>
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>$ python client.py 
0*0=0 (request took 0ms)
1*1=1 (request took 0ms)
2*2=4 (request took 1ms)
3*3=9 (request took 0ms)
4*4=16 (request took 0ms)
No response for 5
6*6=36 (request took 106ms)
7*7=49 (request took 0ms)
8*8=64 (request took 1ms)
9*9=81 (request took 0ms)
10*10=100 (request took 0ms)
11*11=121 (request took 1ms)
12*12=144 (request took 0ms)
13*13=169 (request took 0ms)
14*14=196 (request took 0ms)
15*15=225 (request took 0ms)
16*16=256 (request took 1ms)
17*17=289 (request took 0ms)
18*18=324 (request took 0ms)
19*19=361 (request took 1ms)
</pre>
</div>
</div>
</div>
<p>Now all requests (except the one that causes a crash) get a response. We see that request with number six takes longer to complete. That is because <code>server-accept.py</code> needs time to start up (by the loop script) and call <code>accept</code> on the socket. But the request doesn’t fail. The client will not get a connection error.</p>
<p>And this is one way to write reliable socket servers that survive crashes and restarts.</p>
<h2 id="questions-answers">Questions &amp; Answers</h2>
<h3 id="how-long-will-a-socket-wait-before-timing-out">How long will a socket wait before timing out?</h3>
<p>I tried to modify the loop script to sleep for 60 seconds before restarting the server:</p>
<div class="rliterate-code">
<div class="rliterate-code-header">
<ol class="rliterate-code-path">
<li>
loop-sleep.sh
</li>
</ol>
</div>
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="k">while</span> true<span class="p">;</span> <span class="k">do</span>
    <span class="nb">echo</span> <span class="s2">&quot;</span><span class="nv">$@</span><span class="s2">&quot;</span>
    <span class="s2">&quot;</span><span class="nv">$@</span><span class="s2">&quot;</span> <span class="o">||</span> <span class="nb">true</span>
    <span class="nb">echo</span> <span class="s2">&quot;restarting&quot;</span>
    sleep <span class="m">60</span>
<span class="k">done</span>
</pre>
</div>
</div>
</div>
<p>The client output looked like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-header">
<ol class="rliterate-code-path">
<li>
<span class="cp">client output </span>
</li>
</ol>
</div>
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span>...
No response for 5
6*6=36 (request took 60123ms)
7*7=49 (request took 0ms)
...
</pre>
</div>
</div>
</div>
<p>So it seems that the client got no errors even though the request took 60 seconds to be responded to.</p>
<p>I suppose you can put a timeout in the client code. But this question was about how long the operating system on the server will keep the connection “alive” even though no one calls <code>accept</code>.</p>
<p>I suppose the operating system has some kind of buffer. Say that there are multiple clients making requests at the same time and the server never calls <code>accept</code> during that time. Eventually some buffer must be exceeded and connections get dropped.</p>
<p>(It seems that the client hangs on the <code>s.recv</code> call. That means that the request was sent to the server and must have filled up some buffer.)</p>
<p>If anyone can point me to documentation where I can read about this behavior, please drop me a line.</p>
<h3 id="can-we-decrease-the-startup-time">Can we decrease the startup time?</h3>
<p>When the loop script restarts the server, it takes ~100ms for it to come up and process requests. How can we decrease that time?</p>
<p>One way would be to modify the loop script to spawn multiple server processes. That way, if one crashes, the other can serve the next request.</p>
<p>This would also make the server code concurrent. That is, no “global” state can reside in the server process, because we don’t know which server process will serve the next request.</p>
<p>Another solution might be to have a second process in standby mode. So the loop script starts a second server process, but it stops it right before calling accept. But then we would need a way to signal to the process to resume operation. Perhaps by sending it a signal?</p>
<div class="rliterate-code">
<div class="rliterate-code-header">
<ol class="rliterate-code-path">
<li>
server-accept-standby.py
</li>
</ol>
</div>
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="kn">import</span> <span class="nn">socket</span>

<span class="k">with</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">fileno</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="k">as</span> <span class="n">s</span><span class="p">:</span>
    <span class="c1"># wait for signal before proceeding</span>
    <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
        <span class="n">conn</span><span class="p">,</span> <span class="n">addr</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">accept</span><span class="p">()</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;accepting connection&quot;</span><span class="p">)</span>
        <span class="k">with</span> <span class="n">conn</span><span class="p">:</span>
            <span class="n">data</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
            <span class="n">number</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
            <span class="n">conn</span><span class="o">.</span><span class="n">sendall</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">number</span><span class="si">}</span><span class="s2">*</span><span class="si">{</span><span class="n">number</span><span class="si">}</span><span class="s2">=</span><span class="si">{</span><span class="n">number</span><span class="o">*</span><span class="n">number</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s2">&quot;ascii&quot;</span><span class="p">))</span>
</pre>
</div>
</div>
</div>
<p>Both of these make the loop script more complicated. And if it gets more complicated, it is more likely to crash. And if it crashes, the socket gets closed, and subsequent requests will get connection errors.</p>
<h3 id="can-we-use-this-technique-to-create-a-load-balancer">Can we use this technique to create a load balancer?</h3>
<p>Well, yes.</p>
<p>If the loop script spawns multiple server processes, the operating system will load balance between them.</p>
<p>No fancy load balancing software needed.</p>
<p>More info in <a href="https://relaxdiego.com/2017/02/load-balancing-sockets.html">this blog post</a>.</p>
<h3 id="why-do-we-need-to-move-the-socket-file-descriptor">Why do we need to move the socket file descriptor?</h3>
<p>In the middle of <code>server-listen-loop.py</code> we move the file descriptor of the socket, <code>s.fileno()</code>, to file descriptor 0 (stdin):</p>
<div class="rliterate-code">
<div class="rliterate-code-header">
<ol class="rliterate-code-path">
<li>
server-listen-loop.py
</li>
</ol>
</div>
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">socket</span>

<span class="k">with</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">()</span> <span class="k">as</span> <span class="n">s</span><span class="p">:</span>
    <span class="n">s</span><span class="o">.</span><span class="n">setsockopt</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">SOL_SOCKET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SO_REUSEADDR</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">s</span><span class="o">.</span><span class="n">bind</span><span class="p">((</span><span class="s2">&quot;localhost&quot;</span><span class="p">,</span> <span class="mi">9000</span><span class="p">))</span>
    <span class="n">s</span><span class="o">.</span><span class="n">listen</span><span class="p">()</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;listening on port 9000&quot;</span><span class="p">)</span>
    <span class="n">os</span><span class="o">.</span><span class="n">dup2</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">fileno</span><span class="p">(),</span> <span class="mi">0</span><span class="p">)</span>
    <span class="n">os</span><span class="o">.</span><span class="n">close</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">fileno</span><span class="p">())</span>
    <span class="n">os</span><span class="o">.</span><span class="n">execvp</span><span class="p">(</span><span class="s2">&quot;bash&quot;</span><span class="p">,</span> <span class="p">[</span><span class="s2">&quot;bash&quot;</span><span class="p">,</span> <span class="s2">&quot;loop.sh&quot;</span><span class="p">,</span> <span class="s2">&quot;python&quot;</span><span class="p">,</span> <span class="s2">&quot;server-accept.py&quot;</span><span class="p">])</span>
</pre>
</div>
</div>
</div>
<p>We do that to make the file descriptor available to child processes so that they can create a socket using it and then call <code>accept</code>.</p>
<p>In Python, the file descriptor of the socket is <a href="https://docs.python.org/3/library/os.html#fd-inheritance">not inheritable by default</a>. That is, a child process will not be able to access the socket file descriptor. That is why we have to move it to file descriptor 0 (stdin) which is inherited.</p>
<p>Another option might be to make the file descriptor inheritable. Something like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-header">
<ol class="rliterate-code-path">
<li>
server-listen-loop-inherit.py
</li>
</ol>
</div>
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">socket</span>

<span class="k">with</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">()</span> <span class="k">as</span> <span class="n">s</span><span class="p">:</span>
    <span class="n">s</span><span class="o">.</span><span class="n">setsockopt</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">SOL_SOCKET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SO_REUSEADDR</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">s</span><span class="o">.</span><span class="n">bind</span><span class="p">((</span><span class="s2">&quot;localhost&quot;</span><span class="p">,</span> <span class="mi">9000</span><span class="p">))</span>
    <span class="n">s</span><span class="o">.</span><span class="n">listen</span><span class="p">()</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;listening on port 9000&quot;</span><span class="p">)</span>
    <span class="n">os</span><span class="o">.</span><span class="n">set_inheritable</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">fileno</span><span class="p">(),</span> <span class="kc">True</span><span class="p">)</span>
    <span class="n">os</span><span class="o">.</span><span class="n">execvp</span><span class="p">(</span><span class="s2">&quot;bash&quot;</span><span class="p">,</span> <span class="p">[</span><span class="s2">&quot;bash&quot;</span><span class="p">,</span> <span class="s2">&quot;loop.sh&quot;</span><span class="p">,</span> <span class="s2">&quot;python&quot;</span><span class="p">,</span> <span class="s2">&quot;server-accept-inherit.py&quot;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">fileno</span><span class="p">())])</span>
</pre>
</div>
</div>
</div>
<p>Then the file descriptor must also be passed to the server processes and used there instead of stdin:</p>
<div class="rliterate-code">
<div class="rliterate-code-header">
<ol class="rliterate-code-path">
<li>
server-accept-inherit.py
</li>
</ol>
</div>
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="kn">import</span> <span class="nn">socket</span>
<span class="kn">import</span> <span class="nn">sys</span>

<span class="k">with</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">fileno</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span> <span class="k">as</span> <span class="n">s</span><span class="p">:</span>
    <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
        <span class="n">conn</span><span class="p">,</span> <span class="n">addr</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">accept</span><span class="p">()</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;accepting connection&quot;</span><span class="p">)</span>
        <span class="k">with</span> <span class="n">conn</span><span class="p">:</span>
            <span class="n">data</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
            <span class="n">number</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
            <span class="n">conn</span><span class="o">.</span><span class="n">sendall</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">number</span><span class="si">}</span><span class="s2">*</span><span class="si">{</span><span class="n">number</span><span class="si">}</span><span class="s2">=</span><span class="si">{</span><span class="n">number</span><span class="o">*</span><span class="n">number</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s2">&quot;ascii&quot;</span><span class="p">))</span>
</pre>
</div>
</div>
</div>
<p>This seems to work as well.</p>
<p>I think I choose the first approach because that is how <a href="https://github.com/acg/dream-deploys/blob/master/tcplisten">Alan did it</a>.</p>
<p>Not having to pass the file descriptor to the child processes might be preferable in some situations. I don’t know.</p>
<h3 id="why-is-execvp-needed">Why is execvp needed?</h3>
<p>At the end of <code>server-listen-loop.py</code> we call <code>execvp</code> to start executing the loop script in the same process that started listening on the socket:</p>
<div class="rliterate-code">
<div class="rliterate-code-header">
<ol class="rliterate-code-path">
<li>
server-listen-loop.py
</li>
</ol>
</div>
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">socket</span>

<span class="k">with</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">()</span> <span class="k">as</span> <span class="n">s</span><span class="p">:</span>
    <span class="n">s</span><span class="o">.</span><span class="n">setsockopt</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">SOL_SOCKET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SO_REUSEADDR</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">s</span><span class="o">.</span><span class="n">bind</span><span class="p">((</span><span class="s2">&quot;localhost&quot;</span><span class="p">,</span> <span class="mi">9000</span><span class="p">))</span>
    <span class="n">s</span><span class="o">.</span><span class="n">listen</span><span class="p">()</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;listening on port 9000&quot;</span><span class="p">)</span>
    <span class="n">os</span><span class="o">.</span><span class="n">dup2</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">fileno</span><span class="p">(),</span> <span class="mi">0</span><span class="p">)</span>
    <span class="n">os</span><span class="o">.</span><span class="n">close</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">fileno</span><span class="p">())</span>
    <span class="n">os</span><span class="o">.</span><span class="n">execvp</span><span class="p">(</span><span class="s2">&quot;bash&quot;</span><span class="p">,</span> <span class="p">[</span><span class="s2">&quot;bash&quot;</span><span class="p">,</span> <span class="s2">&quot;loop.sh&quot;</span><span class="p">,</span> <span class="s2">&quot;python&quot;</span><span class="p">,</span> <span class="s2">&quot;server-accept.py&quot;</span><span class="p">])</span>
</pre>
</div>
</div>
</div>
<p>Why do we do that?</p>
<p>I did it because that is how <a href="https://github.com/acg/dream-deploys/blob/master/tcplisten">Alan did it</a>. But now that I think about it, I think we can just as well inline the loop script in <code>server-listen-loop.py</code>. That, of course, requires the loop script to be written in Python. Something like this:</p>
<div class="rliterate-code">
<div class="rliterate-code-header">
<ol class="rliterate-code-path">
<li>
server-listen-loop-python.py
</li>
</ol>
</div>
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">socket</span>
<span class="kn">import</span> <span class="nn">subprocess</span>

<span class="k">with</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">()</span> <span class="k">as</span> <span class="n">s</span><span class="p">:</span>
    <span class="n">s</span><span class="o">.</span><span class="n">setsockopt</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">SOL_SOCKET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SO_REUSEADDR</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">s</span><span class="o">.</span><span class="n">bind</span><span class="p">((</span><span class="s2">&quot;localhost&quot;</span><span class="p">,</span> <span class="mi">9000</span><span class="p">))</span>
    <span class="n">s</span><span class="o">.</span><span class="n">listen</span><span class="p">()</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;listening on port 9000&quot;</span><span class="p">)</span>
    <span class="n">os</span><span class="o">.</span><span class="n">dup2</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">fileno</span><span class="p">(),</span> <span class="mi">0</span><span class="p">)</span>
    <span class="n">os</span><span class="o">.</span><span class="n">close</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">fileno</span><span class="p">())</span>
    <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
        <span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">([</span><span class="s2">&quot;python&quot;</span><span class="p">,</span> <span class="s2">&quot;server-accept.py&quot;</span><span class="p">])</span><span class="o">.</span><span class="n">wait</span><span class="p">()</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;restarting&quot;</span><span class="p">)</span>
</pre>
</div>
</div>
</div>
<p>It seems to work as well.</p>
<p>If the loop script is a simple loop like this, perhaps it makes sense to inline it. But if the loop script is more complex, perhaps even a third party product to manage server processes, it makes sense to do the <code>execvp</code>.</p>
<h3 id="why-socket-option-reuse">Why socket option REUSE?</h3>
<p>In <code>server-listen.py</code>, we set the socket option <code>SO_REUSEADDR</code>:</p>
<div class="rliterate-code">
<div class="rliterate-code-header">
<ol class="rliterate-code-path">
<li>
server-listen.py
</li>
</ol>
</div>
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="kn">import</span> <span class="nn">socket</span>

<span class="k">with</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">()</span> <span class="k">as</span> <span class="n">s</span><span class="p">:</span>
    <span class="n">s</span><span class="o">.</span><span class="n">setsockopt</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">SOL_SOCKET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SO_REUSEADDR</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">s</span><span class="o">.</span><span class="n">bind</span><span class="p">((</span><span class="s2">&quot;localhost&quot;</span><span class="p">,</span> <span class="mi">9000</span><span class="p">))</span>
    <span class="n">s</span><span class="o">.</span><span class="n">listen</span><span class="p">()</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;listening on port 9000&quot;</span><span class="p">)</span>
    <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
        <span class="n">conn</span><span class="p">,</span> <span class="n">addr</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">accept</span><span class="p">()</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;accepting connection&quot;</span><span class="p">)</span>
        <span class="k">with</span> <span class="n">conn</span><span class="p">:</span>
            <span class="n">data</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
            <span class="n">number</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
            <span class="n">conn</span><span class="o">.</span><span class="n">sendall</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">number</span><span class="si">}</span><span class="s2">*</span><span class="si">{</span><span class="n">number</span><span class="si">}</span><span class="s2">=</span><span class="si">{</span><span class="n">number</span><span class="o">*</span><span class="n">number</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s2">&quot;ascii&quot;</span><span class="p">))</span>
</pre>
</div>
</div>
</div>
<p>Why?</p>
<p>I think <a href="https://stackoverflow.com/a/3229926">this Stackoverflow answer</a> explains it well:</p>
<blockquote>
<p>This socket option tells the kernel that even if this port is busy (in the TIME_WAIT state), go ahead and reuse it anyway. If it is busy, but with another state, you will still get an address already in use error. It is useful if your server has been shut down, and then restarted right away while sockets are still active on its port.</p>
</blockquote>
<p>Without it, it can not be run in a loop, and will get this error:</p>
<pre><code>OSError: [Errno 98] Address already in use</code></pre>
<h3 id="is-this-how-supervisor-works">Is this how Supervisor works?</h3>
<p><a href="http://supervisord.org/">Supervisor</a> can create a process that listens on a socket and then pass that socket to child processes. For example like this:</p>
<pre><code>[fcgi-program:test]
socket=tcp://localhost:9000
command=python server-accept.py</code></pre>
<p>The <code>server-accept.py</code> program will get a socket passed to it as file descriptor 0 (stdin).</p>
<p>However, if <code>server-accept.py</code> crashes, it seems like Supervisor closes the socket and creates it again upon restart:</p>
<pre><code>2022-05-10 21:46:28,734 INFO exited: test (exit status 1; not expected)
2022-05-10 21:46:28,734 INFO Closing socket tcp://localhost:9000
2022-05-10 21:46:29,736 INFO Creating socket tcp://localhost:9000
2022-05-10 21:46:29,737 INFO spawned: &#39;test&#39; with pid 561624
2022-05-10 21:46:30,740 INFO success: test entered RUNNING state, process has stayed up for &gt; than 1 seconds (startsecs)</code></pre>
<p>So in this setup, we would still drop connections.</p>
<h3 id="why-not-make-the-server-more-reliable">Why not make the server more reliable?</h3>
<p>We could make the server more reliable so that it doesn’t crash. But sometimes a server needs to be restarted anyway. For example when configuration changes or a new version of the server should be deployed. The approach described in this blog post makes it possible to do those kinds of things without ever dropping connections as well.</p>
<h3 id="can-this-approach-be-used-for-zero-downtime-deployments">Can this approach be used for zero-downtime deployments</h3>
<p>Well, yes, that is how I learned about it in <a href="https://alangrow.com/blog/dream-deploys-atomic-zero-downtime-deployments">Alan’s blog post</a>.</p>
<h3 id="can-we-use-a-unix-domain-socket-instead-of-a-tcp-socket">Can we use a Unix domain socket instead of a TCP socket?</h3>
<p>Well, yes.</p>
<p>In fact, the accepting server doesn’t know what kind of socket is passed to it. It could be either a Unix domain socket or a TCP socket:</p>
<div class="rliterate-code">
<div class="rliterate-code-header">
<ol class="rliterate-code-path">
<li>
server-accept.py
</li>
</ol>
</div>
<div class="rliterate-code-body">
<div class="highlight">
<pre><span></span><span class="kn">import</span> <span class="nn">socket</span>

<span class="k">with</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">fileno</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="k">as</span> <span class="n">s</span><span class="p">:</span>
    <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
        <span class="n">conn</span><span class="p">,</span> <span class="n">addr</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">accept</span><span class="p">()</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;accepting connection&quot;</span><span class="p">)</span>
        <span class="k">with</span> <span class="n">conn</span><span class="p">:</span>
            <span class="n">data</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
            <span class="n">number</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
            <span class="n">conn</span><span class="o">.</span><span class="n">sendall</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">number</span><span class="si">}</span><span class="s2">*</span><span class="si">{</span><span class="n">number</span><span class="si">}</span><span class="s2">=</span><span class="si">{</span><span class="n">number</span><span class="o">*</span><span class="n">number</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s2">&quot;ascii&quot;</span><span class="p">))</span>
</pre>
</div>
</div>
</div>
<p>(<a href="https://eli.thegreenplace.net/2019/unix-domain-sockets-in-go/">Unix domain sockets are probably faster than TCP sockets when running on the same machine.</a>)</p>
]]></summary>
</entry>
<entry>
    <title>July 2022 Update</title>
    <link href="http://rickardlindberg.me/writing/newsletter/july-2022/" />
    <id>http://rickardlindberg.me/writing/newsletter/july-2022/</id>
    <published>2022-08-02T00:00:00Z</published>
    <updated>2022-08-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>July 2022 Update</h1>

<p><em>Published on  2 August 2022.</em></p>

<p>This is what I’ve been up to in July 2022:</p>
<ul>
<li><p>I continued practicing Agile software development with <a href="https://github.com/rickardlindberg/rlci/">RLCI</a>. I slowly get the feeling that Agile is not really what most people think it is. Some things I read and watched this month in that vein:</p>
<ul>
<li><p>A <a href="https://twitter.com/allenholub/status/1546604233323032576">few</a> <a href="https://twitter.com/allenholub/status/1552432052762320896">tweets</a> by Allen Holub and a <a href="https://youtu.be/hxXmTnb3mFU">conversation</a> he had with Dave Farley gave me some insights into what “real” Agile is about.</p></li>
<li><p><a href="https://www.sicpers.info/2022/07/phrases-in-computing-that-might-need-retiring/">Phrases in computing that might need retiring</a> by Graham Lee indicated to me that the term “Agile” has changed meaning over the years.</p></li>
<li><p><a href="https://www.ronjeffries.com/articles/-z022/0222ff/gotta-be-good/">Gotta Be Good</a> by Ron Reffries indicated to me that “real” Agile is actually HARD and need to be practiced to get good at.</p></li>
</ul></li>
<li><p>I published another five programming videos on my <a href="https://www.youtube.com/channel/UC4XI09URnsM_YYTSizAMliA">Youtube channel</a>:</p>
<ul>
<li><a href="https://youtu.be/d7fq8JyU9jg">How to write tests that allow refactoring your code?</a></li>
<li><a href="https://youtu.be/BmUz4my7eko">Deploying my continuous integration software to a server.</a></li>
<li><a href="https://youtu.be/C05OD7h0-gg">Therapeutic refactoring and polishing of a feature.</a></li>
<li><a href="https://youtu.be/h_oRLiJo3Tc">How to incorporate evolutionary design into the development process?</a></li>
<li><a href="https://youtu.be/WlvsjCeuT6w">I made a mistake when evolving the design of RLCI to support a database.</a></li>
</ul></li>
</ul>
]]></summary>
</entry>
<entry>
    <title>June 2022 Update</title>
    <link href="http://rickardlindberg.me/writing/newsletter/june-2022/" />
    <id>http://rickardlindberg.me/writing/newsletter/june-2022/</id>
    <published>2022-07-04T00:00:00Z</published>
    <updated>2022-07-04T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>June 2022 Update</h1>

<p><em>Published on  4 July 2022.</em></p>

<p>This is what I’ve been up to in June 2022:</p>
<ul>
<li><p>I started over with <a href="https://github.com/rickardlindberg/rlci/">RLCI</a> and tried to build it using an agile approach. The README has a bunch of more information about it. In this process, the following resources helped me:</p>
<ul>
<li><p><a href="https://www.jamesshore.com/v2/blog/2018/testing-without-mocks">Testing Without Mocks: A Pattern Language</a> Again from James Shore. Gave me insight into how to design and test.</p></li>
<li><p><a href="https://blog.thecodewhisperer.com/permalink/you-dont-hate-mocks-you-hate-side-effects">You Don’t Hate Mocks; You Hate Side-Effects</a> The following quote explained it well to me the design relationship between pure functions and functions with side effects:</p>
<blockquote>
<p>We always have the option of replacing a side-effect with returning a value that represents the effect, as long as we can instruct the clients to interpret that value as a command to execute.</p>
</blockquote></li>
<li><p><a href="https://stackoverflow.blog/2022/01/03/favor-real-dependencies-for-unit-testing/">Favor real dependencies for unit testing</a> This helped me solve a testing problem I had. More on that in an upcoming video.</p></li>
</ul></li>
<li><p>I discovered that one of the authors of <em>Continuous Delivery</em>, Dave Farley, has a <a href="https://www.youtube.com/c/ContinuousDelivery">Youtube channel</a>. I found some of his videos interesting.</p></li>
<li><p>I published another four programming videos on my <a href="https://www.youtube.com/channel/UC4XI09URnsM_YYTSizAMliA">Youtube channel</a>:</p>
<ul>
<li><a href="https://youtu.be/yKkGXn1zmaI">How James Shore ruined my RLCI project.</a></li>
<li><a href="https://youtu.be/Re7litDdulU">Rebooting RLCI with an agile approach using TDD and zero friction development.</a></li>
<li><a href="https://youtu.be/sokSvnAkd5E">Adding continuous integration functionality to RLCI.</a></li>
<li><a href="https://youtu.be/0jJEPgomRCc">Making RLCI pipelines run in isolation.</a></li>
</ul></li>
</ul>
]]></summary>
</entry>
<entry>
    <title>May 2022 Update</title>
    <link href="http://rickardlindberg.me/writing/newsletter/may-2022/" />
    <id>http://rickardlindberg.me/writing/newsletter/may-2022/</id>
    <published>2022-06-04T00:00:00Z</published>
    <updated>2022-06-04T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>May 2022 Update</h1>

<p><em>Published on  4 June 2022.</em></p>

<p>This is what I’ve been up to in May 2022:</p>
<ul>
<li><p>I rediscovered James Shore through his <a href="https://www.jamesshore.com/v2/books/aoad2/book_club/evolutionary_design">Agile Book Club: Evolutionary Design (with Kent Beck)</a>. I had stumbled upon his <a href="https://www.jamesshore.com/v2/projects/lunch-and-learn">TDD Lunch &amp; Learn</a> series before, and the book club made me revisit some of his work. This time I also bought his book <a href="https://www.jamesshore.com/v2/books/aoad2">The Art of Agile Development</a> which reignited my interest for agile methods (something that has diminished more and more since I first got into it).</p></li>
<li><p>I read <a href="https://alangrow.com/blog/dream-deploys-atomic-zero-downtime-deployments">Dream Deploys: Atomic, Zero-Downtime Deployments</a> and got inspired to try that approach. I also started working on a <a href="/writing/reliable-socket-servers/index.html">blog post</a> on my own to explore the topic.</p></li>
<li><p>I continued working on <a href="https://github.com/rickardlindberg/rlci/">RLCI</a> and worked on connecting the different pieces. However, after getting inspired by agile methods again and learning that continuous integration is not what I thought it was (thanks for the inspiration James!), I will have to rethink the project. I think I will start over from scratch and develop it with a slightly new approach.</p></li>
<li><p>I published another four programming videos on my <a href="https://www.youtube.com/channel/UC4XI09URnsM_YYTSizAMliA">Youtube channel</a>:</p>
<ul>
<li><a href="https://youtu.be/R-HCtiVzYuI">Connecting all the pieces in RLCI.</a></li>
<li><a href="https://youtu.be/BQ-wWIVQ_gs">Researching zero downtime deployments.</a></li>
<li><a href="https://youtu.be/S_R80ZhsmZo">Getting back to the roots of TDD.</a></li>
<li><a href="https://youtu.be/Xm8QGMzyxeI">Practicing TDD and testing without mocks.</a></li>
</ul></li>
</ul>
]]></summary>
</entry>
<entry>
    <title>April 2022 Update</title>
    <link href="http://rickardlindberg.me/writing/newsletter/april-2022/" />
    <id>http://rickardlindberg.me/writing/newsletter/april-2022/</id>
    <published>2022-05-01T00:00:00Z</published>
    <updated>2022-05-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>April 2022 Update</h1>

<p><em>Published on  1 May 2022.</em></p>

<p>This is what I’ve been up to in April 2022:</p>
<ul>
<li><p>I continued working on <a href="https://github.com/rickardlindberg/rlci/">RLCI</a>. In particular I started working on the server component and wrote it using <a href="https://docs.python.org/3/library/asyncio.html">asyncio</a>. So far, that feels like a good choice.</p></li>
<li><p>I read <a href="https://www.martinfowler.com/books/refactoringDatabases.html">Refactoring databases</a> and started reading <a href="https://www.martinfowler.com/books/nosql.html">NoSQL Distilled</a>. The reason I picked up the first one was that I sought to understand how you can do zero-downtime deployments and still evolve your database. That is, how can both an old version of an application and a new version of an application work with the same database? The answer was that you must evolve your database schema such that it is compatible with both versions. So if you move a column for example, you can create a trigger that make sure that both the old and the new column are in sync. And when a transition period is over, you can drop the old column, and the move column refactoring is complete. I picked up the second book to find if the answer was any different for NoSQL databases which generally are a bit more flexible when it comes to database schema. My guess is that a similar approach is needed. So far the book has given me some new ideas about what databases are for and how different databases serve different purposes. This will all be useful in going forward with a storage mechanism for RCLI.</p></li>
<li><p>I published another five programming videos on my Youtube channel:</p>
<ul>
<li><a href="https://youtu.be/lqV5c_fN29Q">How to find time to work on your hobby projects?</a></li>
<li><a href="https://youtu.be/aXkGdvKZu1A">How I got unstuck with RLCI.</a></li>
<li><a href="https://youtu.be/GO-sfUaqbvg">Learning Python asyncio when working on CI server.</a></li>
<li><a href="https://youtu.be/ihS0HagBfKY">What makes programming videos interesting?</a></li>
<li><a href="https://youtu.be/uV2eeAcrxzU">Refactoring a class to test in isolation: REAL WORLD EXAMPLE</a></li>
</ul></li>
</ul>
]]></summary>
</entry>
<entry>
    <title>March 2022 Update</title>
    <link href="http://rickardlindberg.me/writing/newsletter/march-2022/" />
    <id>http://rickardlindberg.me/writing/newsletter/march-2022/</id>
    <published>2022-04-02T00:00:00Z</published>
    <updated>2022-04-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>March 2022 Update</h1>

<p><em>Published on  2 April 2022.</em></p>

<p>This is what I’ve been up to in March 2022:</p>
<ul>
<li><p>I started prototyping <a href="https://github.com/rickardlindberg/rlci/">RLCI</a> which is an experimental CI/CD system designed to solve problems I’ve had with Jenkins. I made some videos about it too.</p></li>
<li><p>I published another four programming videos on my Youtube channel:</p>
<ul>
<li><a href="https://youtu.be/pZwjYknDxYo">Sharing thoughts about a new CI system that solves problems I’ve had with Jenkins.</a></li>
<li><a href="https://youtu.be/-iSgZkqlUVw">Thinking about representations for CI pipelines.</a></li>
<li><a href="https://youtu.be/oPX8bBTNBMI">Demoing prototype of CI/CD system.</a></li>
<li><a href="https://youtu.be/RHy-oryo5rI">How can a worker node execute code on behalf of a CI/CD server?</a></li>
</ul></li>
</ul>
]]></summary>
</entry>
<entry>
    <title>February 2022 Update</title>
    <link href="http://rickardlindberg.me/writing/newsletter/february-2022/" />
    <id>http://rickardlindberg.me/writing/newsletter/february-2022/</id>
    <published>2022-03-02T00:00:00Z</published>
    <updated>2022-03-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>February 2022 Update</h1>

<p><em>Published on  2 March 2022.</em></p>

<p>This is what I’ve been up to in February 2022:</p>
<ul>
<li><p>I finished the blog post about the new version of <a href="/writing/rlmeta-poster-2/index.html">RLMeta</a>.</p></li>
<li><p>I published another four programming videos on my Youtube channel:</p>
<ul>
<li><a href="https://youtu.be/stBGg7v-URg">How I got consumed by a programming problem and recovered.</a></li>
<li><a href="https://youtu.be/ACTO7AfB_zQ">Adding LISP-style function calls to RLMeta.</a></li>
<li><a href="https://youtu.be/riJUqBPx1uU">Solving Advent of Code 2021 Day 14 using Python without any libraries.</a></li>
<li><a href="https://youtu.be/84IUZVyFrh8">Demoing new image export dialog in Timeline version 2.6.0.</a></li>
</ul></li>
</ul>
]]></summary>
</entry>

</feed>
