<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Rickard's personal homepage: latest posts</title>
    <link href="http://rickardlindberg.me/atom.xml" rel="self" />
    <link href="http://rickardlindberg.me" />
    <id>http://rickardlindberg.me/atom.xml</id>
    <author>
        <name>Rickard Lindberg</name>
        <email>rickard@rickardlindberg.me</email>
    </author>
    <updated>2021-09-07T00:00:00Z</updated>
    <entry>
    <title>August 2021 Update</title>
    <link href="http://rickardlindberg.me/writing/newsletter/august-2021/" />
    <id>http://rickardlindberg.me/writing/newsletter/august-2021/</id>
    <published>2021-09-07T00:00:00Z</published>
    <updated>2021-09-07T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>August 2021 Update</h1>

<p><em>Published on  7 September 2021.</em></p>

<p>This is what I’ve been up to in August 2021:</p>
<ul>
<li><p>I continued with the draft post <a href="/writing/rlmeta-poster2/index.html">RLMeta poster 2</a>.</p>
<ul>
<li><p>I had some ideas of things I wanted to improve in the next version of RLMeta. But mainly, I just wanted to work on it again because I think it is a fun piece of software to work on.</p></li>
<li><p>Before I could continue to improve RLMeta, I first had to port it to Python 3 because my new laptop now runs Python 3. The port was rather small.</p></li>
<li><p>I then continued with various improvements that I plan to document in the blog post.</p></li>
<li><p>I’m not sure that the final product of the blog post is going to be a poster. Right now I’m thinking it should be some kind of interactive, live, demo that you can play with in your browser that illustrates, somewhat similar to the poster, how RLMeta works. That would also require a port of RLMeta to Javascript, which should be fun.</p></li>
<li><p>I find it difficult to know when to stop improving RLMeta. Sometimes I feel like I chase perfection. In every iteration, I get closer, but there seems to always be something left that annoys me.</p></li>
<li><p>My next big goal with RLMeta is to make it not depend on Python. In order for that to happen, I need to implement a subset of the Python language that RLMeta uses. All the way down to machine code. So it is a quite big project, but should be fun.</p></li>
</ul></li>
<li><p>I thought about where it makes sense to put CI/CD code. The most common place to put it in (that I’ve seen) is in the repository itself. But I feel like that is not the most logical place. Information about how to use a project in a CI/CD chain should not be coupled with the project itself. I feel like build scripts belong in the repository because how to build a piece of software feels related to the project itself. But in CI/CD, you often deal with larger aspects than the project in isolation. For example, in a CI/CD chain you might want to send email notifications upon build failure. That is not related to the project. It is related to how you implement CI/CD. So I’m thinking that a CI/CD system should be programmed separately from the project repos.</p></li>
<li><p>I got inspired by <a href="https://www.youtube.com/watch?v=bpbYyF-FBqU">this video</a> by Van Neistat about a tool he can’t live well without: the pencil. I could relate to that as I also feel that the pencil is “the pump that brings up the ideas from the well”, so I decided to buy a T-shirt:</p>
<center>
<p><img src="pencil.jpg"></p>
</center></li>
</ul>
]]></summary>
</entry>
<entry>
    <title>July 2021 Update</title>
    <link href="http://rickardlindberg.me/writing/newsletter/july-2021/" />
    <id>http://rickardlindberg.me/writing/newsletter/july-2021/</id>
    <published>2021-08-03T00:00:00Z</published>
    <updated>2021-08-03T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>July 2021 Update</h1>

<p><em>Published on  3 August 2021.</em></p>

<p>This is what I’ve been up to in July 2021:</p>
<ul>
<li><p>I cleaned up the rlselect repo and recorded a new demo gif. You can see it at the <a href="/projects/rlselect/index.html">project page</a>. I did not improve the literate document because I had no incentive to do so. The application does what I want it to do, and from a maintenance point of view, I can continue to improve it with smart notes literate programming support. But as long as there is nothing I want to improve in the application, I think I will leave it like this. I know the application does some trick with stdin/stdout that might be interesting to write a blog post about. If I decide to do that, I might start by explaining the trick inside the literate document, and then write the blog post.</p></li>
<li><p>I felt the urge to work on a Timeline canvas component. That is, only the timeline widget in <a href="/projects/timeline/index.html">Timeline</a>. It’s been a long time since I first started the project, and I would probably do some things differently today. An isolated component could also be useful for other projects.</p></li>
<li><p>I revisited RLMeta and wanted to work more on it. I have some ideas of what to work on next. We will see.</p></li>
<li><p>I decided to skip doing a video version of this update, and probably future updates as well. I don’t think the updates were a good fit for video. These updates are useful for me because I like to go back and get a quick overview of what I was doing. A bullet list works perfect for that. A non searchable video does not. I might record only demos if I have any and link them in the update. We will see. I still enjoy making videos.</p></li>
<li><p>I shot daily vlogs (not published online) during two weeks of my vacation, and that is something I enjoyed to do. So I got to practice shooting, editing, story telling, etc. I also watched much Casey Neistat and Peter Lindgren for inspiration.</p></li>
<li><p>I watched “The Social Dilemma” and though about how I missed when the internet was just a bunch of personal homepages not controlled by a few companies.</p></li>
</ul>
]]></summary>
</entry>
<entry>
    <title>Dogfooding Literate Programming Support in Smart Notes (June 2021 Update)</title>
    <link href="http://rickardlindberg.me/writing/newsletter/june-2021/" />
    <id>http://rickardlindberg.me/writing/newsletter/june-2021/</id>
    <published>2021-07-04T00:00:00Z</published>
    <updated>2021-07-04T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Dogfooding Literate Programming Support in Smart Notes (June 2021 Update)</h1>

<p><em>Published on  4 July 2021.</em></p>

<p>This is what I’ve been up to in June 2021.</p>
<p>
<center>
<iframe width="560" height="315" src="https://www.youtube.com/embed/yhMm1q3Na1Q" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen>
</iframe>
</center>
</p>
<h2 id="laptop-upgrade">Laptop Upgrade</h2>
<p>I switched my main laptop and also upgraded it to use the latest version of Fedora.</p>
<p>That led me to revisited and tweak my <a href="https://github.com/rickardlindberg/dotfiles/">dotfiles</a> for the new setup.</p>
<p>One tool that I rely on heavily is <a href="/projects/rlselect/index.html">rlselect</a>, and it only works with Python 2. The new version of Fedora doesn’t ship Python 2 with all the libraries that rlselect needs. And Python 2 is deprecated anyway. That gave me the urge to port rlselect to Python 3. But I also wanted to write the port using a literate programming tool. I had previously thought about trying to use <a href="https://github.com/rickardlindberg/smartnotes">Smart Notes</a> as a literate programming tool, but it lacked support now.</p>
<h2 id="literate-programming-support-in-smart-notes">Literate Programming Support in Smart Notes</h2>
<p>Because of my laptop upgrade, I had a new top priority for Smart Notes: implement some kind of literate programming support.</p>
<p>I started by adding a script to convert <a href="/projects/rliterate/index.html">RLiterate</a> (my previous attempt at a literate programming tool) documents to Smart Notes documents. That way I could convert my projects that use RLiterate to Smart Notes so that I could continue editing them from within Smart Notes.</p>
<p>I converted the Smart Notes RLiterate document to a Smart Notes document. Smart Notes was now written in itself. But there was no way to edit the code notes created by the convert script from within Smart Notes. The only way to edit the code was by editing the generated files. But if I did that, the code in the Smart Notes document and the generated files would be out of sync. So I decided to write a script that would examine changes in the external files and merge them back into the Smart Notes document. I got the idea that this was possible by reading about a similar approach used in <a href="https://leoeditor.com/appendices.html#the-mulder-ream-update-algorithm">Leo</a>.</p>
<p>I got the merge script working well enough. I was able to edit <code>smartnotes.py</code> and merge the changes back into <code>smartnotes.notes</code>. So that when <code>smartnotes.py</code> was generated from <code>smartnotes.notes</code> it would include the changes.</p>
<p>I used this workflow to add support to Smart Notes to create and edit code notes. At this point I was no longer in need of the merge script. I could do all the editing from within Smart Notes. However, as I talked about in the <a href="/writing/newsletter/may-2021/index.html">previous update</a>, such a merge script would be crucial for working with others not using Smart Notes. And I believe it will also come in handy to make editing external files from within Smart Notes more convenient. For example, it would allow a whole class to be edited even though that class is split into multiple code notes. When the whole class is saved, the merge script will merge changes back into the corresponding code notes.</p>
<h2 id="port-of-rlselect-to-python-3">Port of rlselect to Python 3</h2>
<p>At this point I could use Smart Notes as a literate programming tool to create a new version of rlselect that worked with Python 3.</p>
<p>I started by importing all the existing code into a new Smart Notes document. I did that by creating a minimal set of code notes. At this point, the code notes were large and didn’t really benefit from the literate approach.</p>
<p>Then I started making changes to make rlselect work with Python 3 and got it working quite easily.</p>
<p>The next step was to split the code notes into smaller chunks to be able to annotate and document smaller portions of the code. For that, Smart Notes needed some additional features. At least to make the process convenient.</p>
<h2 id="literate-programming-improvements">Literate Programming Improvements</h2>
<p>I added support in Smart Notes for splitting code notes and tried it on the Smart Notes document itself. I didn’t have time to use this feature to improve the rlselect document, but I plan to.</p>
<p>I also added virtual links so that code notes that are related are automatically linked.</p>
<p>This process of <a href="https://en.wikipedia.org/wiki/Eating_your_own_dog_food">dogfooding</a> is really useful and fun. It answers the question very clearly what to work on next.</p>
<h2 id="demo">Demo</h2>
<p>To see a demo of the literate programming features in Smart Notes, have a look at <a href="https://youtu.be/yhMm1q3Na1Q?t=314">5:14</a>.</p>
<h2 id="reflections-on-literate-programming">Reflections on Literate Programming</h2>
<p>I thought about how the literate programming in Smart Notes feels different from the literate programming in RLiterate. In Smart Notes you don’t create a single linear document. You connect pieces of information that are related to each other. It will therefore also be difficult to extract a single linear document from Smart Notes. So this kind of literate programming will not result in “a book” that is the whole application with source code explained. It will rather be annotated source code. Linear documents might help with understanding sometimes. So I’m not quite sure how it fits into the Smart Notes literate programming approach. One possibility is to generate documentation files using regular code notes. For example, a <code>README.md</code> could be generated by assembling code notes from Smart Notes. But that <code>README.md</code> would not contain the whole program with documentation. Just a small part. Perhaps that is ok. By using Smart Notes as my main literate programming tool, I will experiment and see what it feels like.</p>
<p>I am really happy with the progress I made on the literate programming support in Smart Notes. The script to convert RLiterate documents to Smart Notes documents and the script to merge changes from external files back into Smart Notes documents were killer features that allowed me to progress very fast.</p>
<h2 id="videography">Videography</h2>
<p>Aside from programming, I also continued to learn about my new hobby of videography:</p>
<ul>
<li><p>I learned more about how to properly use my camera when it comes to white balance and exposure. I also ordered white balance cards to help me with that.</p></li>
<li><p>I tried to figure out how to use different frame rates and shutter speeds to eliminate flicker from light sources. I found a good tool from RED to list good combinations: <a href="https://www.red.com/flicker-free-video">flicker free video</a>. I don’t fully understand the logic behind it, but at least I can now get rid of some flicker in practice.</p></li>
<li><p>I tested what happens to sound clips when cut in Kdenlive vs. in Ardour. Ardour adds short fade ins and fade outs, but Kdenlive doesn’t. So probably cuts in Kdenlive can create unwanted sounds if they don’t match up.</p></li>
<li><p>I thought that my Rode Vide Mic NTG sounded noisy. I tried a firmware update, but it didn’t help. I tried various methods of recording, and all the results were similar. Perhaps I just need to be closer to the microphone so that the main audio is much louder than the background noise. The other option would be to reduce background noise in post.</p></li>
</ul>
<h2 id="reflections-on-last-year">Reflections on Last Year</h2>
<p>This time <a href="/writing/newsletter/june-2020/index.html">last year</a> I was working on projectional editing support for RLiterate. I am no longer convinced that projectional editing is a good idea. It might just be that I am very comfortable with my current tools (Vim + command line tools) that I feel frustrated when I can’t use them. Or it might be that I haven’t used any good enough projectional editing system. My focus has at least shifted to build tools that are more practical and comfortable for <em>me</em> to use.</p>
<p>This time last year I also read about compilers. It is a topic that I am still interested in, and I hope to work more and write more about compiler related stuff in the future.</p>
]]></summary>
</entry>
<entry>
    <title>May 2021 Update</title>
    <link href="http://rickardlindberg.me/writing/newsletter/may-2021/" />
    <id>http://rickardlindberg.me/writing/newsletter/may-2021/</id>
    <published>2021-06-06T00:00:00Z</published>
    <updated>2021-06-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>May 2021 Update</h1>

<p><em>Published on  6 June 2021.</em></p>

<p>
<center>
<iframe width="560" height="315" src="https://www.youtube.com/embed/cMqtkyMyr-w" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen>
</iframe>
</center>
</p>
<p>This is what I’ve been up to in May 2021:</p>
<ul>
<li><p>I published a new video where I hack on Smart Notes: <a href="https://youtu.be/95l_XFtx-JQ">Smart Notes Hacking Session #13: Improve Search Bar Test</a>.</p></li>
<li><p>A consequence of trying to record hacking videos was that I ended up not doing any programming because I felt the barrier was too big. I felt pressure to record interesting sessions so instead I put it off and did no programming at all.</p></li>
<li><p>I still think video is an interesting format. So instead of more hacking sessions, this month, I tried to make a video version of this update where I also show what I’ve been working on. Let me know what you think.</p></li>
<li><p>I actually did program on Smart Notes, and the first version of the table view is now working. (<a href="https://youtu.be/cMqtkyMyr-w?t=68">Demo at 1:08</a>)</p></li>
<li><p>I had a few ideas for new features for Smart Notes:</p>
<ul>
<li><p>The possibility to pin notes so that they are easily accessible and linkable when navigating to other notes. (<a href="https://youtu.be/cMqtkyMyr-w?t=206">Explanation at 3:26</a>)</p></li>
<li><p>The possibility to go to a random note for leisure browsing. It might remind you of interesting things that you wouldn’t have otherwise looked at.</p></li>
<li><p>Add support for some kind of literate programming. I read (<a href="https://twitter.com/mpeytonjones/status/1379500747751092226">here</a>, <a href="https://twitter.com/khinsen/status/1379762605837983746">here</a>, and <a href="https://twitter.com/rob_rix/status/1379593489344819204">here</a>) about the idea that literate programming has focused more on a pedagogical presentation order and that that style is in conflict with what maintainers of software need. So I am thinking along the lines of having Smart Notes annotate code in some way. The focus should not be on a linear presentation style (as in <a href="/projects/rliterate/index.html">RLiterate</a>) that has to be carefully maintaned, but rather on annotating code and making useful connections. Imagine that every unit of a code base (function, class, etc) is represented as a note, and that there are links between notes to represent execution paths or related code. When working on a specific problem, you can gather the notes (parts of the code) that needs changing and you have all in one place. Another crucial feature to support maintainers (and working with others) is that it should be possible to edit code “as usual” without the need to use a literate programming tool. (<a href="https://youtu.be/cMqtkyMyr-w?t=310">Explanation at 5:10</a>)</p></li>
</ul></li>
<li><p>I learned more about video editing.</p>
<ul>
<li><p>I bought a new camera, a Sony A6400 with a Sigma lens, that I’ve been playing around with.</p></li>
<li><p>I learned about concepts such as exposure, shadows, midtones, highlights, RGB parade, white balance, and color correction through <a href="https://www.youtube.com/watch?v=Sy3ROPPRGXQ">numerous</a> <a href="https://www.youtube.com/watch?v=Gz_QzBdHDYc">videos</a> <a href="https://www.youtube.com/watch?v=w98TAEcNNLw">on</a> <a href="https://www.youtube.com/watch?v=B29lwatn9hs">You</a> <a href="https://www.youtube.com/watch?v=Rfx7wfFVO-E">Tube</a>.</p></li>
<li><p>I switched video editor to <a href="https://kdenlive.org/">Kdenlive</a> from <a href="https://shotcut.org/">Shotcut</a> that I was using before. Compared to Shotcut, it feels more professional and intuitive for me to use.</p></li>
</ul></li>
</ul>
]]></summary>
</entry>
<entry>
    <title>Newsletter April 2021</title>
    <link href="http://rickardlindberg.me/writing/newsletter/april-2021/" />
    <id>http://rickardlindberg.me/writing/newsletter/april-2021/</id>
    <published>2021-05-04T00:00:00Z</published>
    <updated>2021-05-04T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Newsletter April 2021</h1>

<p><em>Published on  4 May 2021.</em></p>

<p>This is what I’ve been up to in April 2021:</p>
<ul>
<li><p>I published 3 new videos where I hack on Smart Notes:</p>
<ul>
<li><a href="https://youtu.be/v0a904NB7Sc">Smart Notes Hacking Session #10: End-To-End Test Framework Embryo</a></li>
<li><a href="https://youtu.be/nIfk5zxGyB0">Smart Notes Hacking Session #11: Test Clean Up</a></li>
<li><a href="https://youtu.be/ryBlkGUJBz8">Smart Notes Hacking Session #12: Search Bar End-To-End Test</a></li>
</ul></li>
<li><p>I recorded many more sessions that I have not yet published. So I am a bit behind on the editing process.</p></li>
<li><p>I thought about different formats for the hacking sessions. Currently I do a bit of preparation off camera, then record one session, then repeat. So all changes to Smart Notes are recorded, but not my whole thinking process. I though about still doing the same recordings but editing them into more polished videos that might cover one topic or feature instead of just being time boxed. I think the verbatim hacking sessions might be more appropriate for live streams. I don’t know. If you have any feedback on this, please let me know.</p></li>
<li><p>I researched and ordered a camera (Sony A6400) and a microphone (Rode VideoMic NTG) so that I can hopefully produce videos of higher quality. I will experiment with it in the next month.</p></li>
<li><p>I watched <a href="https://youtu.be/5h8bo9OxCwI">Interview with JT: Andreas Kling of SerenityOS</a>. One interesting idea that I got from the interview was that open source projects might benefit from providing source code only, and no binary packages. Some people might not use the software at all then, but the ones that do are more likely to contribute changes because the friction to do so is much less once you have build from source.</p></li>
</ul>
]]></summary>
</entry>
<entry>
    <title>Newsletter March 2021</title>
    <link href="http://rickardlindberg.me/writing/newsletter/march-2021/" />
    <id>http://rickardlindberg.me/writing/newsletter/march-2021/</id>
    <published>2021-04-04T00:00:00Z</published>
    <updated>2021-04-04T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Newsletter March 2021</h1>

<p><em>Published on  4 April 2021.</em></p>

<p>This is what I’ve been up to in March 2021:</p>
<ul>
<li><p>I recorded and published 7 videos where I hack on Smart Notes:</p>
<ul>
<li><a href="https://youtu.be/Qsho_NbXj2M">Smart Notes Table Feature Session 2: Event Bubbling</a></li>
<li><a href="https://youtu.be/YdSgqCDQo8U">Smart Notes Table Feature Session 3: Parent</a></li>
<li><a href="https://youtu.be/6hnu9hbE3zI">Smart Notes Hacking Session #5: Bubble Base and Trouble Drawing</a></li>
<li><a href="https://youtu.be/AwtkiRIUFdQ">Smart Notes Hacking Session #6: Base Interaction 1</a></li>
<li><a href="https://youtu.be/iIlbNr9EM4E">Smart Notes Hacking Session #7: Base Interaction 2</a></li>
<li><a href="https://youtu.be/mOwefiHJ_YU">Smart Notes Hacking Session #8: Private Access Removal 1</a></li>
<li><a href="https://youtu.be/w6TNMC_MG9o">Smart Notes Hacking Session #9: Private Access Removal 2</a></li>
</ul></li>
<li><p>In the process of editing the videos, I learned about audio editing in Audacity and Ardour.</p></li>
</ul>
]]></summary>
</entry>
<entry>
    <title>Newsletter February 2021</title>
    <link href="http://rickardlindberg.me/writing/newsletter/february-2021/" />
    <id>http://rickardlindberg.me/writing/newsletter/february-2021/</id>
    <published>2021-03-02T00:00:00Z</published>
    <updated>2021-03-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Newsletter February 2021</h1>

<p><em>Published on  2 March 2021.</em></p>

<p>This is what I’ve been up to in February 2021:</p>
<ul>
<li><p>I recorded and published two videos where I hack on Smart Notes. In the <a href="https://youtu.be/yIeJYaht4RA">first</a> I fix a bug and in the <a href="https://youtu.be/uyRVhoWb4XY">second</a> I start implementing a new feature.</p></li>
<li><p>In the process of creating the videos, I also learned about video editing using <a href="https://shotcut.org/">Shotcut</a>.</p></li>
<li><p>I finished the <a href="/writing/kinesis-advantage-2-swedish-setup/index.html">blog post</a> about the configuration of my Kinesis Advantage 2 keyboard.</p></li>
<li><p>I played with <a href="https://docs.saltproject.io/en/latest/topics/ssh/">Salt SSH</a>. I’ve used Ansible in the past and I wanted to explore Salt to see how it compared.</p></li>
<li><p>I read more about taking smart notes and the Zettelkasten method. In particular, I read a few articles on <a href="https://zettelkasten.de/">zettelkasten.de</a> that helped me better understand some concepts.</p></li>
</ul>
]]></summary>
</entry>
<entry>
    <title>Kinesis Advantage 2 Swedish Setup</title>
    <link href="http://rickardlindberg.me/writing/kinesis-advantage-2-swedish-setup/" />
    <id>http://rickardlindberg.me/writing/kinesis-advantage-2-swedish-setup/</id>
    <published>2021-02-15T00:00:00Z</published>
    <updated>2021-02-15T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Kinesis Advantage 2 Swedish Setup</h1>

<p><em>Published on 15 February 2021.</em></p>

<p>In this article I explain how I have configured my Kinesis Advantage 2 keyboard (US version) to also type Swedish characters.</p>
<h2 id="tldr">TL;DR</h2>
<p>I have the following mappings and macros for Linux:</p>
<pre><code>[lalt]&gt;[kpshift]
[kp-lalt]&gt;[kpshift]

{kp-\}&gt;{speed9}{-lctrl}{-lshift}{u}{0}{0}{e}{5}{+lshift}{+lctrl}
{kp-lshift}{kp-\}&gt;{speed9}{-lctrl}{-lshift}{u}{0}{0}{c}{5}{+lshift}{+lctrl}
{lshift}{kp-\}&gt;{speed9}{-lctrl}{-lshift}{u}{0}{0}{c}{5}{+lshift}{+lctrl}

{kp-&#39;}&gt;{speed9}{-lctrl}{-lshift}{u}{0}{0}{e}{4}{+lshift}{+lctrl}
{kp-lshift}{kp-&#39;}&gt;{speed9}{-lctrl}{-lshift}{u}{0}{0}{c}{4}{+lshift}{+lctrl}
{lshift}{kp-&#39;}&gt;{speed9}{-lctrl}{-lshift}{u}{0}{0}{c}{4}{+lshift}{+lctrl}

{kpplus}&gt;{speed9}{-lctrl}{-lshift}{u}{0}{0}{f}{6}{+lshift}{+lctrl}
{kp-lshift}{kpplus}&gt;{speed9}{-lctrl}{-lshift}{u}{0}{0}{d}{6}{+lshift}{+lctrl}
{lshift}{kpplus}&gt;{speed9}{-lctrl}{-lshift}{u}{0}{0}{d}{6}{+lshift}{+lctrl}</code></pre>
<p>I have the following mappings and macros for Windows:</p>
<pre><code>[lalt]&gt;[kpshift]
[kp-lalt]&gt;[kpshift]

{kp-\}&gt;{speed9}{-lalt}{kp0}{kp2}{kp2}{kp9}{+lalt}
{kp-lshift}{kp-\}&gt;{speed9}{-lalt}{kp0}{kp1}{kp9}{kp7}{+lalt}
{lshift}{kp-\}&gt;{speed9}{-lalt}{kp0}{kp1}{kp9}{kp7}{+lalt}

{kp-&#39;}&gt;{speed9}{-lalt}{kp0}{kp2}{kp2}{kp8}{+lalt}
{kp-lshift}{kp-&#39;}&gt;{speed9}{-lalt}{kp0}{kp1}{kp9}{kp6}{+lalt}
{lshift}{kp-&#39;}&gt;{speed9}{-lalt}{kp0}{kp1}{kp9}{kp6}{+lalt}

{kpplus}&gt;{speed9}{-lalt}{kp0}{kp2}{kp4}{kp6}{+lalt}
{kp-lshift}{kpplus}&gt;{speed9}{-lalt}{kp0}{kp2}{kp1}{kp4}{+lalt}
{lshift}{kpplus}&gt;{speed9}{-lalt}{kp0}{kp2}{kp1}{kp4}{+lalt}</code></pre>
<p>Read on to learn how these mappings and macros work and the reasoning behind them.</p>
<h2 id="background">Background</h2>
<p>Even though I am a Swede, I am a long time user of the US keyboard layout. The reason that I switched was that many keys common when programming are more convenient to type on a US keyboard.</p>
<p>Because I am a Swede, I also have the need to type Swedish characters which are not available on a US keyboard. I have solved that by <a href="/writing/xmodmap-on-fedora/index.html">remapping keys</a> in software like this:</p>
<pre><code>      Alt_GR+[  =&gt;  &#39;å&#39;
      Alt_GR+&#39;  =&gt;  &#39;ä&#39;
      Alt_GR+;  =&gt;  &#39;ö&#39;
Shift+Alt_GR+[  =&gt;  &#39;Å&#39;
Shift+Alt_GR+&#39;  =&gt;  &#39;Ä&#39;
Shift+Alt_GR+;  =&gt;  &#39;Ö&#39;</code></pre>
<p>I use the modifier <code>Alt_GR</code> plus the key where the character is located on a Swedish keyboard. For example, on a Swedish keyboard, the key for <code>å</code> is located in the same position as the key for <code>[</code> on a US keyboard (to the right of <code>p</code>).</p>
<center>
<p>
<a href="https://en.wikipedia.org/wiki/File:KB_United_States.svg"><img src="us.png"></a>
</p>
<p>
<i>US layout with Swedish keys highlighted.</i>
<p>
</center>
<center>
<p>
<a href="https://en.wikipedia.org/wiki/File:KB_Sweden.svg"><img src="se.png"></a>
</p>
<p>
<i>Swedish layout with Swedish keys and modifier highlighted.</i>
<p>
</center>
<p>My solution only works on Linux, which was fine up until I had to use Windows on a regular basis.</p>
<p>Since I’m not that familiar with Windows, figuring out how to remap keys seemed difficult, so I started thinking of other solutions.</p>
<h2 id="universal-unicode-input">Universal unicode input</h2>
<p>Then I remembered that there is a universal way to enter any unicode character in Linux. Perhaps there is something similar for Windows as well? It turns out there is. The Wikipedia page <a href="https://en.wikipedia.org/wiki/Unicode_input">Unicode input</a> describes it well.</p>
<p>On Linux, the universal way to enter a unicode character is to press and hold <code>Ctrl+Shift</code>, then press <code>u</code>, then type the unicode character hex code, then release <code>Ctrl+Shift</code>.</p>
<p>To type ‘å’ on Linux, you use the key combination <code>Ctrl+Shift+u+00e5</code>.</p>
<p>On Windows, the universal way to enter a unicode character is to press and hold <code>Alt</code>, then type the unicode character decimal number on the <em>keypad</em>, then release <code>Alt</code>.</p>
<p>To type ‘å’ on Windows, you use the key combination <code>Alt+0229</code>.</p>
<p><code>00e5</code> is the hexadecimal number for the unicode character ‘å’ which is used by Linux. <code>0229</code> is the same decimal number used by Windows. The numbers for different unicode characters can be found on <a href="https://en.wikipedia.org/wiki/List_of_Unicode_characters">this Wikipedia page</a>.</p>
<p>Now I had figured out a way to enter all the Swedish characters on a US keyboard in both operating systems.</p>
<p>But typing the key combinations and remembering the unicode numbers was not very convenient.</p>
<h2 id="macros">Macros</h2>
<p>Luckily for me, I am also a long time user of the Kinesis Advantage 2 keyboard. One of its features is that it is programmable. You can make one key press on the physical keyboard produce multiple key presses as seen by the computer. This is known as macros.</p>
<p>Here is an example of a macro for producing an ‘å’ on Windows:</p>
<pre><code>{key to trigger the macro}&gt;{speed9}{-lalt}{kp0}{kp2}{kp2}{kp9}{+lalt}</code></pre>
<p>This instruct the keyboard to press and hold <code>LeftAlt</code>, then press keypad 0, keypad 2, keypad 2, keypad 9, and then release <code>LeftAlt</code>. And this at speed 9 which is the fastest speed. This macro can be triggered by any key of choice.</p>
<p>In total need 12 macros. First 3 macros for the lowercase ‘å’, ‘ä’, and ‘ö’. Then 3 more for the uppercase versions. And all those 6 are different on Linux and Windows, yielding in total 12 versions.</p>
<p>Now to the next question: How should I trigger these macros? How do I want to enter the characters?</p>
<p>I would like to enter them as I am used to. A modifier key + the key where the character is located on a Swedish keyboard.</p>
<h2 id="keypad-layer">Keypad layer</h2>
<p>The Kinesis Advantage 2 also has another feature known as the keypad layer. The keypad layer is a second layer with keys. It is toggled permanently with the <code>keyp</code> button. It can also be made active during the press and hold of a single button.</p>
<p>I designated the <code>LeftAlt</code> key to the button that, while pressed, would activate the keypad layer. It looks like this:</p>
<pre><code>[lalt]&gt;[kpshift]
[kp-lalt]&gt;[kpshift]</code></pre>
<p>(As the <a href="https://kinesis-ergo.com/support/advantage2/#manuals">manual</a> says, the button needs to be remapped in both layers to be able to have a shift-like behavior.)</p>
<p>When I have <code>LeftAlt</code> pressed, the keypad layer is active, and all the keys on the keyboard perform different functions. By default, the keypad layer has some mappings for digits. I don’t use them, so I can override them to mean something else.</p>
<p>The buttons corresponding to the Swedish characters have the following names in the standard layer and the keypad layer:</p>
<pre><code>       standard  keypad
å  =&gt;     \       kp-\
ä  =&gt;     &#39;       kp-&#39;
ö  =&gt;     ;       kpplus</code></pre>
<center>
<p>
<a href="https://en.wikipedia.org/wiki/File:KB_Sweden.svg"><img src="se.png"></a>
</p>
<p>
<i>Swedish layout with Swedish keys and modifier highlighted.</i>
<p>
</center>
<center>
<p>
<a href="https://kinesis-ergo.com/wp-content/uploads/Adv2-Users-Manual-fw1.0.521.us-9-16-20.pdf"><img src="kinesis-us.png"></a>
</p>
<p>
<i>Kinesis US layout with Swedish keys and modifier highlighted.</i>
<p>
</center>
<p>This is what a macro for producing an ‘å’ on Windows with the key combination <code>LeftAtl+\</code> looks like:</p>
<pre><code>{kp-\}&gt;{speed9}{-lalt}{kp0}{kp2}{kp2}{kp9}{+lalt}</code></pre>
<p>First, <code>LeftAlt</code> toggles the keypad layer on. Then, <code>kp-\</code>, the key for ‘å’ in the keypad layer, triggers the macro.</p>
<p>This is what macros for producing an ‘Å’ on Windows with the key combination <code>Shift+LeftAtl+\</code> looks like:</p>
<pre><code>{kp-lshift}{kp-\}&gt;{speed9}{-lalt}{kp0}{kp1}{kp9}{kp7}{+lalt}
{lshift}{kp-\}&gt;{speed9}{-lalt}{kp0}{kp1}{kp9}{kp7}{+lalt}</code></pre>
<p>I created two macros for the shifted uppercase letters. That is because I wanted to be sure to trigger it no matter if I activated the keypad layer before or after pressing <code>LeftShift</code>. I’m not sure if it matters, but I suspect it might.</p>
<p>New way to enter Swedish characters:</p>
<pre><code>          LeftAlt+\  =&gt;  &#39;å&#39;
          LeftAlt+&#39;  =&gt;  &#39;ä&#39;
          LeftAlt+;  =&gt;  &#39;ö&#39;
LeftShift+LeftAlt+\  =&gt;  &#39;Å&#39;
LeftShift+LeftAlt+&#39;  =&gt;  &#39;Ä&#39;
LeftShift+LeftAlt+;  =&gt;  &#39;Ö&#39;</code></pre>
<p>These are the same mappings as I had previously, but with a different modifier key.</p>
<p>How to know which macro to trigger, the Linux version or the Windows version?</p>
<h2 id="hotkey-layouts">Hotkey layouts</h2>
<p>Another feature of the Kinesis Advantage 2 keyboard is hotkey layouts. These are custom layouts that can be activated with a hotkey (<code>progm+&lt;key&gt;</code>).</p>
<p>I created two separate hotkey layouts: one for Linux and one for Windows. They have some remappings in common, but have specific macros for producing Swedish characters.</p>
<p>To switch between the layouts, I press <code>progm+L</code> for Linux and <code>progm+W</code> for Windows. Every time I switch operating system, I switch hotkey layout.</p>
<h2 id="general-problems-with-universal-input-method">General problems with universal input method</h2>
<p>On Linux, not all text entry fields support the universal input method. This is a bit annoying. Then I have to enter the text in another text field and copy paste the value. For the applications I use, it works most of the time, so I have tolerated it.</p>
<p>One place where it works but produces weird text is in Google Hangouts chat. When entering a unicode character, the text turns into underlined for some reason. I’m not sure if there is a problem with my version of Firefox or what is going on there.</p>
<p>On Windows, the universal input method have worked for me everywhere I’ve tried, but it is important to have the NumLock switched on. Otherwise the macros will not work. Sometimes NumLock gets turned off without me doing it, so sometimes the macros don’t work. I thought it was a problem in a certain text field, but it always turned out to be NumLock.</p>
<h2 id="problems-with-the-keypad-layer">Problems with the keypad layer</h2>
<p>When typing a Swedish character followed by a space, a ‘0’ is sometimes inserted instead. That is because the space key is mapped to the ‘0’ key in the keypad layer. I suspect that it happens if space is pressed quickly after triggering the macro so that the release of the <code>LeftAlt</code> key has not happened when the space is pressed.</p>
<p>This happens sometimes, and one solution would be to remap the keypad ‘0’ to produce a space instead.</p>
<p>The problem should arise with other characters as well, but the ‘0’ is the only one I have encountered.</p>
<h2 id="appendix-kinesis-commands">Appendix: Kinesis Commands</h2>
<p>This is how to create a new hotkey layout:</p>
<pre><code>progm + Shift + Esc          (Enter Power User Mode)
progm + F2
&lt;press hot key&gt;
progm + Shift + Esc          (Exit Power User Mode)</code></pre>
<p>Once that is done, the files can be edited with v-Drive:</p>
<pre><code>progm + Shift + Esc          (Enter Power User Mode)
progm + F1                   (Mount v-Drive)
&lt;edit active/l_qwerty.txt&gt;
&lt;edit active/w_qwerty.txt&gt;
&lt;eject&gt;
progm + F1                   (Unmount v-Drive)
progm + Shift + Esc          (Exit Power User Mode)</code></pre>
]]></summary>
</entry>
<entry>
    <title>Newsletter January 2021</title>
    <link href="http://rickardlindberg.me/writing/newsletter/january-2021/" />
    <id>http://rickardlindberg.me/writing/newsletter/january-2021/</id>
    <published>2021-02-02T00:00:00Z</published>
    <updated>2021-02-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Newsletter January 2021</h1>

<p><em>Published on  2 February 2021.</em></p>

<p>This is what I’ve been up to in January 2021:</p>
<ul>
<li><p>I posted a <a href="https://www.youtube.com/watch?v=Xh2bik1cOl0">video</a> demoing my note taking application. I have a few ideas of things I would like to improve in it. I’m thinking about recording some hacking sessions and publishing them. Let me know if you would be interested in that.</p></li>
<li><p>I created a simple HTML file upload form to learn more how file transfer over HTTP works. I have an idea for a different kind of CI system that I would like to try and implement. It is a big project and I’ve not committed to anything, so it will likely not happen anytime soon. But I’ve had the idea for a while and felt the urge multiple times to attempt to implement it. Anyway, file transfer over HTTP might be one part of that system.</p></li>
<li><p>I read parts of Clean Code again. Readability is important, but when reading the examples, I couldn’t help to think that no matter how clean we write our code, it would benefit from a description in prose as well. I’m thinking about Literate Programming. Why has it not caught on? Why is nobody using it? I might want to research this topic a bit. I have some practical experience with LP through RLiterate. Perhaps RLiterate can solve some problems with LP. At least it can be a playground for trying out new ideas.</p></li>
<li><p>I continued work on the <a href="/writing/kinesis-advantage-2-swedish-setup/index.html">blog post</a> about the configuration of my Kinesis Advantage 2 keyboard.</p></li>
</ul>
]]></summary>
</entry>
<entry>
    <title>Newsletter December 2020</title>
    <link href="http://rickardlindberg.me/writing/newsletter/december-2020/" />
    <id>http://rickardlindberg.me/writing/newsletter/december-2020/</id>
    <published>2021-01-01T00:00:00Z</published>
    <updated>2021-01-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Newsletter December 2020</h1>

<p><em>Published on  1 January 2021.</em></p>

<p>This is what I’ve been up to in December 2020:</p>
<ul>
<li><p>I continued work on the note taking application.</p>
<ul>
<li><p>I added the remaining editing capabilities and also added a search feature so that any note could be found and opened. I am particularly happy with how the linking feature turned out. The application is now feature complete to the point where it is usable for me. I plan to do a video demo of it, so stay tuned for that.</p></li>
<li><p>I figured out how to properly use pygame and Pycairo together. I was mislead by the example in the Pycairo documentation, but eventually figured out how to do it for my particular use case. I might write about it in a blog post. Let me know if you would be interested in that.</p></li>
</ul></li>
<li><p>I discovered <a href="https://www.youtube.com/channel/UC3ts8coMP645hZw9JSD3pqQ">Andreas Kling’s videos</a> where he hacks on his SerenityOS operating system. I have only watched a few, but I find them quite interesting.</p></li>
</ul>
]]></summary>
</entry>
<entry>
    <title>Newsletter November 2020</title>
    <link href="http://rickardlindberg.me/writing/newsletter/november-2020/" />
    <id>http://rickardlindberg.me/writing/newsletter/november-2020/</id>
    <published>2020-12-03T00:00:00Z</published>
    <updated>2020-12-03T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Newsletter November 2020</h1>

<p><em>Published on  3 December 2020.</em></p>

<p>This is what I’ve been up to in November 2020:</p>
<ul>
<li><p>I continued work on the prototype of the note taking application.</p>
<ul>
<li><p>I added navigation support and worked on the animations:</p>
<p><img src="smart-notes-navigation-animations.gif" /></p></li>
<li><p>I added basic editing capabilities via an external editor. Now you can add a new note, add a new child note, and edit an existing note. Basic editing capabilities left to implement is linking two arbitrary notes and deleting links.</p></li>
<li><p>In addition to visual aspects, I also fleshed out the data model so that notes are read and written to file.</p></li>
</ul></li>
<li><p>I read <a href="https://buttondown.email/hillelwayne/archive/why-i-still-use-vim/">Why I Still Use Vim</a>. The point being made is that that development tools must be easily customizable.</p></li>
</ul>
]]></summary>
</entry>
<entry>
    <title>Newsletter October 2020</title>
    <link href="http://rickardlindberg.me/writing/newsletter/october-2020/" />
    <id>http://rickardlindberg.me/writing/newsletter/october-2020/</id>
    <published>2020-11-11T00:00:00Z</published>
    <updated>2020-11-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Newsletter October 2020</h1>

<p><em>Published on 11 November 2020.</em></p>

<p>This is what I’ve been up to in October 2020:</p>
<ul>
<li><p>I continued work on the prototype of note taking application.</p>
<ul>
<li><p>I made the lines between notes look nicer:</p>
<p><img src="smart-notes-curved.png" /></p></li>
<li><p>I started experimenting with variable sized notes depending on mouse cursor position:</p>
<p><img src="smart-notes-variable-size.png" /></p></li>
</ul></li>
<li><p>I read <a href="https://thorstenball.com/blog/2020/09/15/the-context-in-which-we-build-software/">The context in which we build software</a>. I reflected that one programmer’s advice might not be applicable to another programmer.</p></li>
</ul>
]]></summary>
</entry>
<entry>
    <title>Newsletter September 2020</title>
    <link href="http://rickardlindberg.me/writing/newsletter/september-2020/" />
    <id>http://rickardlindberg.me/writing/newsletter/september-2020/</id>
    <published>2020-10-03T00:00:00Z</published>
    <updated>2020-10-03T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Newsletter September 2020</h1>

<p><em>Published on  3 October 2020.</em></p>

<p>This is what I’ve been up to in September 2020:</p>
<ul>
<li><p>I upgraded the configuration for my Kinesis Advantage 2 keyboard. I am planning on writing a <a href="/writing/kinesis-advantage-2-swedish-setup/index.html">blog post</a> about it.</p></li>
<li><p>I read <a href="https://jessitron.com/2020/08/04/back-when-software-was-a-craft/">Back when software was a craft</a>. I feel that is true, and I miss the craft a bit. I can continue to craft in my spare time though.</p></li>
<li><p>I read the book <a href="https://takesmartnotes.com/">How to Take Smart Notes</a> by Sönke Ahrens. I found it very interesting and I am inspired to take better notes.</p></li>
<li><p>I read about <a href="https://en.wikipedia.org/wiki/Project_Xanadu">Xanadu</a> since smart notes reminded me of it. Some ideas feel a bit similar.</p></li>
<li><p>I started prototyping a note taking application that follows some principles from the book. Here is a screenshot:</p>
<p><img src="smart-notes-app-prototype.png" /></p></li>
<li><p>I made no progress on RLiterate 2 this month.</p></li>
</ul>
]]></summary>
</entry>
<entry>
    <title>Newsletter August 2020</title>
    <link href="http://rickardlindberg.me/writing/newsletter/august-2020/" />
    <id>http://rickardlindberg.me/writing/newsletter/august-2020/</id>
    <published>2020-09-13T00:00:00Z</published>
    <updated>2020-09-13T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Newsletter August 2020</h1>

<p><em>Published on 13 September 2020.</em></p>

<p>This is what I’ve been up to in August 2020:</p>
<ul>
<li><p>I read about <a href="https://www.notion.so/Dango-b46c07f3dc224f968c768885abe70e70">Dango</a>. It is an example of a universal document type. It interested me because it seems related to ideas explored by <a href="http://vpri.org/">VPRI</a>.</p></li>
<li><p>I blogged about the key takeaway that I got from reading <a href="/writing/bullet-journal-method-migration-as-review/index.html">The Bullet Journal Method</a>.</p></li>
<li><p>I watched various videos by <a href="https://www.youtube.com/MattRagland">Matt Ragland</a> about journaling. He has been an inspiration to me in my bullet journal journey.</p></li>
<li><p>I continued with <a href="/projects/rliterate/book2/index.html">RLiterate 2</a>:</p>
<ul>
<li><p>I worked on adding toolbar actions for text editing:</p>
<p><img src="text-editing-toolbar.png" /></p></li>
<li><p>I implemented splitting and joining a paragraphs with <code>Enter</code> and <code>Del</code>:</p>
<p><img src="split-join.gif" /></p></li>
</ul></li>
<li><p>I migrated my personal email from Gmail to <a href="https://www.fastmail.com">Fastmail</a>. The migration process was easy and so far I’m quite happy with my new email client.</p></li>
</ul>
]]></summary>
</entry>
<entry>
    <title>The Bullet Journal Method: Migration as Review</title>
    <link href="http://rickardlindberg.me/writing/bullet-journal-method-migration-as-review/" />
    <id>http://rickardlindberg.me/writing/bullet-journal-method-migration-as-review/</id>
    <published>2020-08-13T00:00:00Z</published>
    <updated>2020-08-13T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>The Bullet Journal Method: Migration as Review</h1>

<p><em>Published on 13 August 2020.</em></p>

<p>I recently read <em>The Bullet Journal Method</em> by Ryder Carroll. In this post I will write about the key takeaway that I got from reading it. If you want a full book review, you can for sure find it somewhere else online.</p>
<p>Bullet journaling is a specific way of using a plain notebook as a journal and planner. One part of the system is writing down tasks. Each day you start on a blank page and write down the tasks that you want to accomplish that day. If the previous day had unfinished tasks, you can migrate those tasks. Then you copy them over to the current day by writing them again.</p>
<p>Why is this different from just keeping a todo list? The difference is that every day (or at whichever interval you choose to migrate tasks) you get to decide what is most important that day. You start fresh and get a chance to review tasks and decide if they are still important or not.</p>
<p>The recurring reflection on what is important was the key takeaway that I got from reading the book.</p>
<p>I have tried bullet journalling now for about one month and might write more about my experiences.</p>
]]></summary>
</entry>

</feed>
